import type { ContourSegmentationData } from './types';
import type { Types } from '@cornerstonejs/core';
import type { LabelmapSegmentationData } from './types/LabelmapTypes';
import type { SurfaceSegmentationData } from './types/SurfaceTypes';
import type SegmentationRepresentations from './enums/SegmentationRepresentations';
export type SurfacesInfo = {
    id: string;
    points: number[];
    polys: number[];
    segmentIndex: number;
};
export type PolySegConversionOptions = {
    segmentIndices?: number[];
    segmentationId?: string;
    viewport?: Types.IStackViewport | Types.IVolumeViewport;
};
type ComputeRepresentationFn<T> = (segmentationId: string, options: PolySegConversionOptions) => Promise<T>;
export type SurfaceClipResult = {
    points: number[];
    lines: number[];
    numberOfCells: number;
};
type PolySegAddOn = {
    canComputeRequestedRepresentation: (segmentationId: string, representationType: SegmentationRepresentations) => boolean;
    init: () => void;
    computeContourData: ComputeRepresentationFn<ContourSegmentationData>;
    computeLabelmapData: ComputeRepresentationFn<LabelmapSegmentationData>;
    computeSurfaceData: ComputeRepresentationFn<SurfaceSegmentationData>;
    updateSurfaceData: ComputeRepresentationFn<void>;
    clipAndCacheSurfacesForViewport: (surfacesInfo: SurfacesInfo[], viewport: Types.IVolumeViewport) => Promise<Map<number, Map<string, SurfaceClipResult>>>;
    extractContourData: (polyDataCache: Map<number, Map<string, SurfaceClipResult>>) => Map<number, SurfaceClipResult[]>;
    createAndAddContourSegmentationsFromClippedSurfaces: (rawContourData: Map<number, SurfaceClipResult[]>, viewport: Types.IStackViewport | Types.IVolumeViewport, segmentationId: string) => Map<number, Set<string>>;
};
type AddOns = {
    polySeg: PolySegAddOn;
};
type ComputeWorkerConfig = {
    autoTerminateOnIdle?: {
        enabled: boolean;
        idleTimeThreshold?: number;
    };
};
export type Config = {
    addons: AddOns;
    computeWorker?: ComputeWorkerConfig;
};
export declare function getConfig(): Config;
export declare function setConfig(newConfig: Config): void;
export declare function getAddOns(): AddOns;
export declare function getPolySeg(): PolySegAddOn;
export {};
