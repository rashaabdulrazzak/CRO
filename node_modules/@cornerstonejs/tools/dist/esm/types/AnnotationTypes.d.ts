import type { Types } from '@cornerstonejs/core';
export type AnnotationMetadata = Types.ViewReference & {
    toolName: string;
    cameraPosition?: Types.Point3;
    viewUp?: Types.Point3;
    segmentColor?: any;
    enabledElement?: Types.IEnabledElement;
};
export type AnnotationData = {
    handles?: Handles;
    cachedStats?: Record<string, unknown>;
    label?: string;
    contour?: Contour;
    [key: string]: unknown;
};
export type Annotation = {
    annotationUID?: string;
    parentAnnotationUID?: string;
    interpolationUID?: string;
    childAnnotationUIDs?: string[];
    highlighted?: boolean;
    isLocked?: boolean;
    isVisible?: boolean;
    invalidated?: boolean;
    isSelected?: boolean;
    autoGenerated?: boolean;
    metadata?: AnnotationMetadata;
    data: AnnotationData;
};
export type Contour = {
    polyline?: Types.Point3[];
    pointsManager?: Types.IPointsManager<Types.Point3>;
    closed?: boolean;
};
export type Annotations = Array<Annotation>;
export type GroupSpecificAnnotations = {
    [toolName: string]: Annotations;
};
export type AnnotationState = {
    [key: string]: GroupSpecificAnnotations;
};
export type Handles = {
    points?: Types.Point3[];
    activeHandleIndex?: number | null;
    textBox?: {
        hasMoved?: boolean;
        worldPosition?: Types.Point3;
        worldBoundingBox?: {
            topLeft: Types.Point3;
            topRight: Types.Point3;
            bottomLeft: Types.Point3;
            bottomRight: Types.Point3;
        };
    };
    [key: string]: unknown;
};
