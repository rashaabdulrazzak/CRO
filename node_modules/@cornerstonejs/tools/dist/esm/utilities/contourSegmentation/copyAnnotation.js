import { utilities } from '@cornerstonejs/core';
import { addAnnotation, getAnnotation } from '../../stateManagement';
import { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';
import { getToolGroupForViewport } from '../../store/ToolGroupManager';
import { getAnnotationsUIDMapFromSegmentation } from '../../stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation';
export function copyAnnotation(annotation, segmentationId, segmentIndex) {
    const newAnnotation = {
        annotationUID: utilities.uuidv4(),
        data: {
            contour: {
                closed: true,
                polyline: [],
            },
            segmentation: {
                segmentationId,
                segmentIndex,
            },
            handles: {},
        },
        handles: {},
        highlighted: false,
        autoGenerated: false,
        invalidated: false,
        isLocked: false,
        isVisible: true,
        metadata: {
            ...annotation.metadata,
            toolName: annotation.metadata.toolName,
        },
    };
    newAnnotation.data.segmentation.segmentationId = segmentationId;
    newAnnotation.data.segmentation.segmentIndex = segmentIndex;
    if (annotation.data.contour?.polyline) {
        newAnnotation.data.contour.polyline = [...annotation.data.contour.polyline];
    }
    if (annotation.data.handles?.points) {
        newAnnotation.data.handles.points = annotation.data.handles.points.map((point) => [...point]);
    }
    return newAnnotation;
}
export function copyContourSegment(segmentationId, segmentIndex, targetSegmentationId, targetSegmentIndex) {
    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);
    const targetAnnotationUIDsMap = getAnnotationsUIDMapFromSegmentation(targetSegmentationId);
    if (!annotationUIDsMap || !targetAnnotationUIDsMap) {
        return;
    }
    if (!annotationUIDsMap?.has(segmentIndex)) {
        return;
    }
    const annotationUIDs = annotationUIDsMap.get(segmentIndex);
    const viewport = getViewportAssociatedToSegmentation(targetSegmentationId);
    if (!viewport) {
        return;
    }
    const toolGroup = getToolGroupForViewport(viewport.id);
    const copyContourAnnotation = (annotation) => {
        const newAnnotation = copyAnnotation(annotation, targetSegmentationId, targetSegmentIndex);
        if (toolGroup) {
            const instance = toolGroup.getToolInstance(annotation.metadata.toolName);
            if (instance) {
                if (typeof instance.isSplineAnnotation === 'function' &&
                    instance.isSplineAnnotation(annotation)) {
                    instance.createSplineObjectFromType(newAnnotation, annotation.data.spline.type);
                }
            }
        }
        addAnnotation(newAnnotation, viewport.element);
        newAnnotationsUID.add(newAnnotation.annotationUID);
        return newAnnotation;
    };
    const newAnnotationsUID = new Set();
    for (const annotationUID of annotationUIDs) {
        const annotation = getAnnotation(annotationUID);
        const newAnnotation = copyContourAnnotation(annotation);
        if (annotation?.childAnnotationUIDs) {
            newAnnotation.childAnnotationUIDs = [];
            for (const childAnnotationUID of annotation.childAnnotationUIDs) {
                const childAnnotation = getAnnotation(childAnnotationUID);
                const newChildAnnotation = copyContourAnnotation(childAnnotation);
                newChildAnnotation.parentAnnotationUID = newAnnotation.annotationUID;
                newAnnotation.childAnnotationUIDs.push(newChildAnnotation.annotationUID);
            }
        }
    }
    targetAnnotationUIDsMap.set(targetSegmentIndex, newAnnotationsUID);
}
