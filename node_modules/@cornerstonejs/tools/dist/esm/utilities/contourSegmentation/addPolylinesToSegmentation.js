import { utilities } from '@cornerstonejs/core';
import { addAnnotation } from '../../stateManagement';
const DEFAULT_CONTOUR_SEG_TOOLNAME = 'PlanarFreehandContourSegmentationTool';
export default function addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentationId, polylinesInfo, segmentIndex) {
    polylinesInfo.forEach(({ polyline, viewReference }) => {
        if (polyline.length < 3) {
            return;
        }
        const contourSegmentationAnnotation = {
            annotationUID: utilities.uuidv4(),
            data: {
                contour: {
                    closed: true,
                    polyline,
                },
                segmentation: {
                    segmentationId,
                    segmentIndex,
                },
                handles: {},
            },
            handles: {},
            highlighted: false,
            autoGenerated: false,
            invalidated: false,
            isLocked: false,
            isVisible: true,
            metadata: {
                toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,
                ...viewReference,
            },
        };
        addAnnotation(contourSegmentationAnnotation, viewport.element);
        const currentSet = annotationUIDsMap?.get(segmentIndex) || new Set();
        currentSet.add(contourSegmentationAnnotation.annotationUID);
        annotationUIDsMap.set(segmentIndex, currentSet);
    });
    return annotationUIDsMap;
}
