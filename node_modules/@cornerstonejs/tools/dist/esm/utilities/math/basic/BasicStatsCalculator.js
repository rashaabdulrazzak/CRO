import { utilities } from '@cornerstonejs/core';
import { Calculator, InstanceCalculator } from './Calculator';
const { PointsManager } = utilities;
function createBasicStatsState(storePointData) {
    return {
        max: [-Infinity],
        min: [Infinity],
        sum: [0],
        count: 0,
        maxIJK: null,
        maxLPS: null,
        minIJK: null,
        minLPS: null,
        runMean: [0],
        m2: [0],
        m3: [0],
        m4: [0],
        allValues: [[]],
        pointsInShape: storePointData ? PointsManager.create3(1024) : null,
        sumLPS: [0, 0, 0],
    };
}
function basicStatsCallback(state, newValue, pointLPS = null, pointIJK = null) {
    if (Array.isArray(newValue) &&
        newValue.length > 1 &&
        state.max.length === 1) {
        state.max.push(state.max[0], state.max[0]);
        state.min.push(state.min[0], state.min[0]);
        state.sum.push(state.sum[0], state.sum[0]);
        state.runMean.push(0, 0);
        state.m2.push(state.m2[0], state.m2[0]);
        state.m3.push(state.m3[0], state.m3[0]);
        state.m4.push(state.m4[0], state.m4[0]);
        state.allValues.push([], []);
    }
    if (state?.pointsInShape && pointLPS) {
        state.pointsInShape.push(pointLPS);
    }
    const newArray = Array.isArray(newValue) ? newValue : [newValue];
    state.count += 1;
    if (pointLPS) {
        state.sumLPS[0] += pointLPS[0];
        state.sumLPS[1] += pointLPS[1];
        state.sumLPS[2] += pointLPS[2];
    }
    state.max.forEach((it, idx) => {
        const value = newArray[idx];
        state.allValues[idx].push(value);
        const n = state.count;
        const delta = value - state.runMean[idx];
        const delta_n = delta / n;
        const term1 = delta * delta_n * (n - 1);
        state.sum[idx] += value;
        state.runMean[idx] += delta_n;
        state.m4[idx] +=
            term1 * delta_n * delta_n * (n * n - 3 * n + 3) +
                6 * delta_n * delta_n * state.m2[idx] -
                4 * delta_n * state.m3[idx];
        state.m3[idx] += term1 * delta_n * (n - 2) - 3 * delta_n * state.m2[idx];
        state.m2[idx] += term1;
        if (value < state.min[idx]) {
            state.min[idx] = value;
            if (idx === 0) {
                state.minIJK = pointIJK ? [...pointIJK] : null;
                state.minLPS = pointLPS ? [...pointLPS] : null;
            }
        }
        if (value > state.max[idx]) {
            state.max[idx] = value;
            if (idx === 0) {
                state.maxIJK = pointIJK ? [...pointIJK] : null;
                state.maxLPS = pointLPS ? [...pointLPS] : null;
            }
        }
    });
}
function calculateMedian(values) {
    if (values.length === 0) {
        return 0;
    }
    const sorted = [...values].sort((a, b) => a - b);
    const mid = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[mid - 1] + sorted[mid]) / 2;
    }
    else {
        return sorted[mid];
    }
}
function basicGetStatistics(state, unit) {
    const mean = state.sum.map((sum) => sum / state.count);
    const stdDev = state.m2.map((squaredDiffSum) => Math.sqrt(squaredDiffSum / state.count));
    const center = state.sumLPS.map((sum) => sum / state.count);
    const skewness = state.m3.map((m3, idx) => {
        const variance = state.m2[idx] / state.count;
        if (variance === 0) {
            return 0;
        }
        return m3 / (state.count * Math.pow(variance, 1.5));
    });
    const kurtosis = state.m4.map((m4, idx) => {
        const variance = state.m2[idx] / state.count;
        if (variance === 0) {
            return 0;
        }
        return m4 / (state.count * variance * variance) - 3;
    });
    const median = state.allValues.map((values) => calculateMedian(values));
    const named = {
        max: {
            name: 'max',
            label: 'Max Pixel',
            value: state.max.length === 1 ? state.max[0] : state.max,
            unit,
            pointIJK: state.maxIJK ? [...state.maxIJK] : null,
            pointLPS: state.maxLPS ? [...state.maxLPS] : null,
        },
        min: {
            name: 'min',
            label: 'Min Pixel',
            value: state.min.length === 1 ? state.min[0] : state.min,
            unit,
            pointIJK: state.minIJK ? [...state.minIJK] : null,
            pointLPS: state.minLPS ? [...state.minLPS] : null,
        },
        mean: {
            name: 'mean',
            label: 'Mean Pixel',
            value: mean.length === 1 ? mean[0] : mean,
            unit,
        },
        stdDev: {
            name: 'stdDev',
            label: 'Standard Deviation',
            value: stdDev.length === 1 ? stdDev[0] : stdDev,
            unit,
        },
        count: {
            name: 'count',
            label: 'Voxel Count',
            value: state.count,
            unit: null,
        },
        median: {
            name: 'median',
            label: 'Median',
            value: median.length === 1 ? median[0] : median,
            unit,
        },
        skewness: {
            name: 'skewness',
            label: 'Skewness',
            value: skewness.length === 1 ? skewness[0] : skewness,
            unit: null,
        },
        kurtosis: {
            name: 'kurtosis',
            label: 'Kurtosis',
            value: kurtosis.length === 1 ? kurtosis[0] : kurtosis,
            unit: null,
        },
        maxLPS: {
            name: 'maxLPS',
            label: 'Max LPS',
            value: state.maxLPS ? Array.from(state.maxLPS) : null,
            unit: null,
        },
        minLPS: {
            name: 'minLPS',
            label: 'Min LPS',
            value: state.minLPS ? Array.from(state.minLPS) : null,
            unit: null,
        },
        pointsInShape: state.pointsInShape,
        center: {
            name: 'center',
            label: 'Center',
            value: center ? [...center] : null,
            unit: null,
        },
        array: [],
    };
    named.array.push(named.min, named.max, named.mean, named.stdDev, named.median, named.skewness, named.kurtosis, named.count, named.maxLPS, named.minLPS);
    if (named.center.value) {
        named.array.push(named.center);
    }
    const store = state.pointsInShape !== null;
    const freshState = createBasicStatsState(store);
    state.max = freshState.max;
    state.min = freshState.min;
    state.sum = freshState.sum;
    state.count = freshState.count;
    state.maxIJK = freshState.maxIJK;
    state.maxLPS = freshState.maxLPS;
    state.minIJK = freshState.minIJK;
    state.minLPS = freshState.minLPS;
    state.runMean = freshState.runMean;
    state.m2 = freshState.m2;
    state.m3 = freshState.m3;
    state.m4 = freshState.m4;
    state.allValues = freshState.allValues;
    state.pointsInShape = freshState.pointsInShape;
    state.sumLPS = freshState.sumLPS;
    return named;
}
export class BasicStatsCalculator extends Calculator {
    static { this.state = createBasicStatsState(true); }
    static statsInit(options) {
        if (!options.storePointData) {
            this.state.pointsInShape = null;
        }
        this.state = createBasicStatsState(options.storePointData);
    }
    static { this.statsCallback = ({ value: newValue, pointLPS = null, pointIJK = null, }) => {
        basicStatsCallback(this.state, newValue, pointLPS, pointIJK);
    }; }
    static { this.getStatistics = (options) => {
        return basicGetStatistics(this.state, options?.unit);
    }; }
}
export class InstanceBasicStatsCalculator extends InstanceCalculator {
    constructor(options) {
        super(options);
        this.state = createBasicStatsState(options.storePointData);
    }
    statsInit(options) {
        this.state = createBasicStatsState(options.storePointData);
    }
    statsCallback(data) {
        basicStatsCallback(this.state, data.value, data.pointLPS, data.pointIJK);
    }
    getStatistics(options) {
        return basicGetStatistics(this.state, options?.unit);
    }
}
