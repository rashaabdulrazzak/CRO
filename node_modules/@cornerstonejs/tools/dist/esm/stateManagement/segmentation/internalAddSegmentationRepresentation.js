import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';
import { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';
import { SegmentationRepresentations } from '../../enums';
import { triggerSegmentationModified } from './triggerSegmentationEvents';
import { addColorLUT } from './addColorLUT';
import { defaultSegmentationStateManager } from './SegmentationStateManager';
import { getActiveSegmentIndex, setActiveSegmentIndex } from './segmentIndex';
function internalAddSegmentationRepresentation(viewportId, representationInput) {
    const { segmentationId, config } = representationInput;
    const renderingConfig = {
        colorLUTIndex: getColorLUTIndex(config),
        ...config,
    };
    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);
    if (!getActiveSegmentIndex(segmentationId)) {
        let firstSegmentIndex = 1;
        const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);
        if (segmentation) {
            const segmentKeys = Object.keys(segmentation.segments);
            if (segmentKeys.length > 0) {
                firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];
            }
        }
        setActiveSegmentIndex(segmentationId, firstSegmentIndex);
    }
    if (representationInput.type === SegmentationRepresentations.Contour) {
        triggerAnnotationRenderForViewportIds([viewportId]);
    }
    triggerSegmentationModified(segmentationId);
}
function getColorLUTIndex(config) {
    const { colorLUTOrIndex } = config || {};
    if (colorLUTOrIndex === undefined) {
        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));
        return index;
    }
    if (typeof colorLUTOrIndex === 'number') {
        return colorLUTOrIndex;
    }
    if (Array.isArray(colorLUTOrIndex) &&
        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {
        const index = addColorLUT(colorLUTOrIndex);
        return index;
    }
    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));
    return index;
}
export { internalAddSegmentationRepresentation };
