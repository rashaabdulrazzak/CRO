import { vec3 } from 'gl-matrix';
import { getEnabledElementByViewportId } from '@cornerstonejs/core';
import { getViewportIdsWithSegmentation } from '../getViewportIdsWithSegmentation';
export function getViewportsAssociatedToSegmentation(segmentationId) {
    const viewportIds = getViewportIdsWithSegmentation(segmentationId);
    if (viewportIds?.length === 0) {
        return [];
    }
    const viewports = [];
    for (const viewportId of viewportIds) {
        const { viewport } = getEnabledElementByViewportId(viewportId) || {};
        if (viewport) {
            viewports.push(viewport);
        }
    }
    return viewports;
}
export function getViewportAssociatedToSegmentation(segmentationId) {
    const viewports = getViewportsAssociatedToSegmentation(segmentationId);
    return viewports.length > 0 ? viewports[0] : undefined;
}
export function getViewportWithMatchingViewPlaneNormal(viewports, annotation, dotThreshold = 0.99) {
    const annotationViewPlaneNormal = annotation.metadata?.viewPlaneNormal;
    if (!annotationViewPlaneNormal || !Array.isArray(annotationViewPlaneNormal)) {
        return undefined;
    }
    const normalizedAnnotationNormal = vec3.create();
    vec3.normalize(normalizedAnnotationNormal, annotationViewPlaneNormal);
    for (const viewport of viewports) {
        const camera = viewport.getCamera();
        if (!camera?.viewPlaneNormal) {
            continue;
        }
        const normalizedCameraNormal = vec3.create();
        vec3.normalize(normalizedCameraNormal, camera.viewPlaneNormal);
        const dotProduct = vec3.dot(normalizedAnnotationNormal, normalizedCameraNormal);
        if (Math.abs(dotProduct) >= dotThreshold) {
            return viewport;
        }
    }
    return undefined;
}
