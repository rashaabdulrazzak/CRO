import { utilities } from '@cornerstonejs/core';
import type { Types } from '@cornerstonejs/core';
import ToolModes from '../../enums/ToolModes';
import type StrategyCallbacks from '../../enums/StrategyCallbacks';
import type { InteractionTypes, ToolProps, PublicToolProps } from '../../types';
declare abstract class BaseTool {
    static toolName: any;
    supportedInteractionTypes: InteractionTypes[];
    configuration: Record<string, any>;
    toolGroupId: string;
    mode: ToolModes;
    protected memo: utilities.HistoryMemo.Memo;
    static defaults: {
        configuration: {
            strategies: {};
            defaultStrategy: any;
            activeStrategy: any;
            strategyOptions: {};
        };
    };
    constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps);
    static mergeDefaultProps(defaultProps?: {}, additionalProps?: any): any;
    get toolName(): string;
    getToolName(): string;
    applyActiveStrategy(enabledElement: Types.IEnabledElement, operationData: unknown): any;
    applyActiveStrategyCallback(enabledElement: Types.IEnabledElement, operationData: unknown, callbackType: StrategyCallbacks | string, ...extraArgs: any[]): any;
    setConfiguration(newConfiguration: Record<string, any>): void;
    setActiveStrategy(strategyName: string): void;
    protected getTargetImageData(targetId: string): Types.IImageData | Types.CPUIImageData;
    protected getTargetId(viewport: Types.IViewport): string | undefined;
    undo(): void;
    redo(): void;
    static createZoomPanMemo(viewport: any): {
        restoreMemo: () => void;
    };
    doneEditMemo(): void;
    static startGroupRecording(): void;
    static endGroupRecording(): void;
}
export default BaseTool;
