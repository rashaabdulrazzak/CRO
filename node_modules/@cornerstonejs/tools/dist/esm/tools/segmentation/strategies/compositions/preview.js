import { utilities } from '@cornerstonejs/core';
import { triggerSegmentationDataModified } from '../../../../stateManagement/segmentation/events/triggerSegmentationDataModified';
import StrategyCallbacks from '../../../../enums/StrategyCallbacks';
import { setSegmentIndexColor } from '../../../../stateManagement/segmentation/config/segmentationColor';
import { getViewportIdsWithSegmentation } from '../../../../stateManagement/segmentation/getViewportIdsWithSegmentation';
export default {
    [StrategyCallbacks.Preview]: function (operationData) {
        const { previewSegmentIndex, configuration, enabledElement } = operationData;
        if (!previewSegmentIndex || !configuration) {
            return;
        }
        this.onInteractionStart?.(enabledElement, operationData);
        const preview = this.fill(enabledElement, operationData);
        if (preview) {
            this.onInteractionEnd?.(enabledElement, operationData);
        }
        return preview;
    },
    [StrategyCallbacks.Initialize]: (operationData) => {
        const { segmentIndex, previewColor, previewSegmentIndex } = operationData;
        operationData.modified = false;
        if (previewSegmentIndex == null || segmentIndex == null) {
            return;
        }
        const viewportIds = getViewportIdsWithSegmentation(operationData.segmentationId);
        viewportIds?.forEach((viewportId) => {
            setSegmentIndexColor(viewportId, operationData.segmentationId, previewSegmentIndex, previewColor);
        });
        operationData.modified = true;
    },
    [StrategyCallbacks.AcceptPreview]: (operationData) => {
        const { previewSegmentIndex, segmentationVoxelManager, memo, segmentIndex, centerSegmentIndexInfo, } = operationData || {};
        const { changedIndices } = centerSegmentIndexInfo || {};
        const labelmapMemo = memo;
        const callback = ({ index }) => {
            const oldValue = segmentationVoxelManager.getAtIndex(index);
            if (changedIndices?.length > 0) {
                if (changedIndices.includes(index)) {
                    labelmapMemo.voxelManager.setAtIndex(index, 0);
                }
            }
            else {
                if (oldValue === previewSegmentIndex) {
                    labelmapMemo.voxelManager.setAtIndex(index, segmentIndex);
                }
            }
        };
        segmentationVoxelManager.forEach(callback);
        triggerSegmentationDataModified(operationData.segmentationId, segmentationVoxelManager.getArrayOfModifiedSlices(), segmentIndex);
        operationData.centerSegmentIndexInfo.changedIndices = [];
    },
    [StrategyCallbacks.RejectPreview]: (operationData) => {
        if (!operationData) {
            return;
        }
        utilities.HistoryMemo.DefaultHistoryMemo.undoIf((memo) => {
            const labelmapMemo = memo;
            if (!labelmapMemo?.voxelManager) {
                return false;
            }
            const { segmentationVoxelManager } = labelmapMemo;
            let hasPreviewSegmentIndex = false;
            const callback = ({ value }) => {
                if (value === operationData.previewSegmentIndex) {
                    hasPreviewSegmentIndex = true;
                }
            };
            segmentationVoxelManager.forEach(callback);
            return hasPreviewSegmentIndex;
        });
    },
};
