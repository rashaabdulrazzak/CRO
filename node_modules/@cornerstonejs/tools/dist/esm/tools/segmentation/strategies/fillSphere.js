import { utilities as csUtils } from '@cornerstonejs/core';
import { vec3 } from 'gl-matrix';
import BrushStrategy from './BrushStrategy';
import compositions from './compositions';
import StrategyCallbacks from '../../../enums/StrategyCallbacks';
import { createEllipseInPoint, getEllipseCornersFromCanvasCoordinates, } from './fillCircle';
const { transformWorldToIndex } = csUtils;
import { getSphereBoundsInfoFromViewport } from '../../../utilities/getSphereBoundsInfo';
const sphereComposition = {
    [StrategyCallbacks.Initialize]: (operationData) => {
        const { points, viewport, segmentationImageData } = operationData;
        if (!points) {
            return;
        }
        const center = vec3.create();
        if (points.length >= 2) {
            vec3.add(center, points[0], points[1]);
            vec3.scale(center, center, 0.5);
        }
        else {
            vec3.copy(center, points[0]);
        }
        operationData.centerWorld = center;
        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);
        const baseExtent = getSphereBoundsInfoFromViewport(points.slice(0, 2), segmentationImageData, viewport);
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);
        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));
        const strokeRadius = points.length >= 2 ? vec3.distance(points[0], points[1]) / 2 : undefined;
        const strokeCenters = operationData.strokePointsWorld &&
            operationData.strokePointsWorld.length > 0
            ? operationData.strokePointsWorld
            : [operationData.centerWorld];
        const baseBounds = baseExtent.boundsIJK;
        const baseCenterIJK = operationData.centerIJK;
        const boundsForStroke = strokeCenters.reduce((acc, centerPoint) => {
            if (!centerPoint) {
                return acc;
            }
            const translatedCenterIJK = transformWorldToIndex(segmentationImageData, centerPoint);
            const deltaIJK = [
                translatedCenterIJK[0] - baseCenterIJK[0],
                translatedCenterIJK[1] - baseCenterIJK[1],
                translatedCenterIJK[2] - baseCenterIJK[2],
            ];
            const translatedBounds = [
                [baseBounds[0][0] + deltaIJK[0], baseBounds[0][1] + deltaIJK[0]],
                [baseBounds[1][0] + deltaIJK[1], baseBounds[1][1] + deltaIJK[1]],
                [baseBounds[2][0] + deltaIJK[2], baseBounds[2][1] + deltaIJK[2]],
            ];
            if (!acc) {
                return translatedBounds;
            }
            return [
                [
                    Math.min(acc[0][0], translatedBounds[0][0]),
                    Math.max(acc[0][1], translatedBounds[0][1]),
                ],
                [
                    Math.min(acc[1][0], translatedBounds[1][0]),
                    Math.max(acc[1][1], translatedBounds[1][1]),
                ],
                [
                    Math.min(acc[2][0], translatedBounds[2][0]),
                    Math.max(acc[2][1], translatedBounds[2][1]),
                ],
            ];
        }, null);
        const boundsToUse = boundsForStroke ?? baseExtent.boundsIJK;
        if (segmentationImageData) {
            const dimensions = segmentationImageData.getDimensions();
            operationData.isInObjectBoundsIJK = [
                [
                    Math.max(0, Math.min(boundsToUse[0][0], dimensions[0] - 1)),
                    Math.max(0, Math.min(boundsToUse[0][1], dimensions[0] - 1)),
                ],
                [
                    Math.max(0, Math.min(boundsToUse[1][0], dimensions[1] - 1)),
                    Math.max(0, Math.min(boundsToUse[1][1], dimensions[1] - 1)),
                ],
                [
                    Math.max(0, Math.min(boundsToUse[2][0], dimensions[2] - 1)),
                    Math.max(0, Math.min(boundsToUse[2][1], dimensions[2] - 1)),
                ],
            ];
        }
        else {
            operationData.isInObjectBoundsIJK = boundsToUse;
        }
        operationData.isInObject = createEllipseInPoint(cornersInWorld, {
            strokePointsWorld: operationData.strokePointsWorld,
            segmentationImageData,
            radius: strokeRadius,
        });
    },
};
const SPHERE_STRATEGY = new BrushStrategy('Sphere', compositions.regionFill, compositions.setValue, sphereComposition, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics, compositions.ensureSegmentationVolumeFor3DManipulation);
const fillInsideSphere = SPHERE_STRATEGY.strategyFunction;
const SPHERE_THRESHOLD_STRATEGY = new BrushStrategy('SphereThreshold', ...SPHERE_STRATEGY.compositions, compositions.dynamicThreshold, compositions.threshold, compositions.ensureSegmentationVolumeFor3DManipulation, compositions.ensureImageVolumeFor3DManipulation);
const SPHERE_THRESHOLD_STRATEGY_ISLAND = new BrushStrategy('SphereThreshold', ...SPHERE_STRATEGY.compositions, compositions.dynamicThreshold, compositions.threshold, compositions.islandRemoval, compositions.ensureSegmentationVolumeFor3DManipulation, compositions.ensureImageVolumeFor3DManipulation);
const thresholdInsideSphere = SPHERE_THRESHOLD_STRATEGY.strategyFunction;
const thresholdInsideSphereIsland = SPHERE_THRESHOLD_STRATEGY_ISLAND.strategyFunction;
export function fillOutsideSphere() {
    throw new Error('fill outside sphere not implemented');
}
export { fillInsideSphere, thresholdInsideSphere, SPHERE_STRATEGY, thresholdInsideSphereIsland, };
