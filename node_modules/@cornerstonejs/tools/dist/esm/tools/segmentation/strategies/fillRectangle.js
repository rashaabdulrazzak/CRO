import { vec3 } from 'gl-matrix';
import { utilities as csUtils, StackViewport } from '@cornerstonejs/core';
import { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';
import BrushStrategy from './BrushStrategy';
import { StrategyCallbacks } from '../../../enums';
import compositions from './compositions';
const { transformWorldToIndex } = csUtils;
const initializeRectangle = {
    [StrategyCallbacks.Initialize]: (operationData) => {
        const { points, viewport, segmentationImageData, } = operationData;
        if (!points) {
            return;
        }
        const center = vec3.fromValues(0, 0, 0);
        points.forEach((point) => {
            vec3.add(center, center, point);
        });
        vec3.scale(center, center, 1 / points.length);
        operationData.centerWorld = center;
        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);
        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);
        operationData.isInObject = pointInShapeFn;
        operationData.isInObjectBoundsIJK = boundsIJK;
    },
};
function createPointInRectangle(viewport, points, segmentationImageData) {
    let rectangleCornersIJK = points.map((world) => {
        return transformWorldToIndex(segmentationImageData, world);
    });
    rectangleCornersIJK = rectangleCornersIJK.map((point) => {
        return point.map((coord) => {
            return Math.round(coord);
        });
    });
    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());
    const [p0, p1, p2, p3] = points;
    const axisU = vec3.create();
    const axisV = vec3.create();
    vec3.subtract(axisU, p1, p0);
    vec3.subtract(axisV, p3, p0);
    const uLen = vec3.length(axisU);
    const vLen = vec3.length(axisV);
    vec3.normalize(axisU, axisU);
    vec3.normalize(axisV, axisV);
    const normal = vec3.create();
    vec3.cross(normal, axisU, axisV);
    vec3.normalize(normal, normal);
    const direction = segmentationImageData.getDirection();
    const spacing = segmentationImageData.getSpacing();
    const { viewPlaneNormal } = viewport.getCamera();
    const EPS = csUtils.getSpacingInNormalDirection({
        direction,
        spacing,
    }, viewPlaneNormal);
    const pointInShapeFn = (pointLPS) => {
        const v = vec3.create();
        vec3.subtract(v, pointLPS, p0);
        const u = vec3.dot(v, axisU);
        const vproj = vec3.dot(v, axisV);
        const d = Math.abs(vec3.dot(v, normal));
        return (u >= -EPS &&
            u <= uLen + EPS &&
            vproj >= -EPS &&
            vproj <= vLen + EPS &&
            d <= EPS);
    };
    return { boundsIJK, pointInShapeFn };
}
const RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);
const RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);
const fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;
const thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;
export { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };
