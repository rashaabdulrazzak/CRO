import { vec3 } from 'gl-matrix';
import { utilities as csUtils } from '@cornerstonejs/core';
import { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';
import BrushStrategy from './BrushStrategy';
import { StrategyCallbacks } from '../../../enums';
import compositions from './compositions';
import { pointInSphere } from '../../../utilities/math/sphere';
const { transformWorldToIndex, transformIndexToWorld, isEqual } = csUtils;
export function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {
    const [bottom, top, left, right] = canvasCoordinates;
    const topLeft = [left[0], top[1]];
    const bottomRight = [right[0], bottom[1]];
    const bottomLeft = [left[0], bottom[1]];
    const topRight = [right[0], top[1]];
    return [topLeft, bottomRight, bottomLeft, topRight];
}
function createCircleCornersForCenter(center, viewUp, viewRight, radius) {
    const centerVec = vec3.fromValues(center[0], center[1], center[2]);
    const top = vec3.create();
    vec3.scaleAndAdd(top, centerVec, viewUp, radius);
    const bottom = vec3.create();
    vec3.scaleAndAdd(bottom, centerVec, viewUp, -radius);
    const right = vec3.create();
    vec3.scaleAndAdd(right, centerVec, viewRight, radius);
    const left = vec3.create();
    vec3.scaleAndAdd(left, centerVec, viewRight, -radius);
    return [
        bottom,
        top,
        left,
        right,
    ];
}
function createStrokePredicate(centers, radius) {
    if (!centers.length || radius <= 0) {
        return null;
    }
    const radiusSquared = radius * radius;
    const centerVecs = centers.map((point) => [point[0], point[1], point[2]]);
    const segments = [];
    for (let i = 1; i < centerVecs.length; i++) {
        const start = centerVecs[i - 1];
        const end = centerVecs[i];
        const dx = end[0] - start[0];
        const dy = end[1] - start[1];
        const dz = end[2] - start[2];
        const lengthSquared = dx * dx + dy * dy + dz * dz;
        segments.push({ start, vector: [dx, dy, dz], lengthSquared });
    }
    return (worldPoint) => {
        if (!worldPoint) {
            return false;
        }
        for (const centerVec of centerVecs) {
            const dx = worldPoint[0] - centerVec[0];
            const dy = worldPoint[1] - centerVec[1];
            const dz = worldPoint[2] - centerVec[2];
            if (dx * dx + dy * dy + dz * dz <= radiusSquared) {
                return true;
            }
        }
        for (const { start, vector, lengthSquared } of segments) {
            if (lengthSquared === 0) {
                const dx = worldPoint[0] - start[0];
                const dy = worldPoint[1] - start[1];
                const dz = worldPoint[2] - start[2];
                if (dx * dx + dy * dy + dz * dz <= radiusSquared) {
                    return true;
                }
                continue;
            }
            const dx = worldPoint[0] - start[0];
            const dy = worldPoint[1] - start[1];
            const dz = worldPoint[2] - start[2];
            const dot = dx * vector[0] + dy * vector[1] + dz * vector[2];
            const t = Math.max(0, Math.min(1, dot / lengthSquared));
            const projX = start[0] + vector[0] * t;
            const projY = start[1] + vector[1] * t;
            const projZ = start[2] + vector[2] * t;
            const distX = worldPoint[0] - projX;
            const distY = worldPoint[1] - projY;
            const distZ = worldPoint[2] - projZ;
            if (distX * distX + distY * distY + distZ * distZ <= radiusSquared) {
                return true;
            }
        }
        return false;
    };
}
const initializeCircle = {
    [StrategyCallbacks.Initialize]: (operationData) => {
        const { points, viewport, segmentationImageData, viewUp, viewPlaneNormal, } = operationData;
        if (!points) {
            return;
        }
        const center = vec3.create();
        if (points.length >= 2) {
            vec3.add(center, points[0], points[1]);
            vec3.scale(center, center, 0.5);
        }
        else {
            vec3.copy(center, points[0]);
        }
        operationData.centerWorld = center;
        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);
        const brushRadius = points.length >= 2 ? vec3.distance(points[0], points[1]) / 2 : 0;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);
        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));
        const normalizedViewUp = vec3.fromValues(viewUp[0], viewUp[1], viewUp[2]);
        vec3.normalize(normalizedViewUp, normalizedViewUp);
        const normalizedPlaneNormal = vec3.fromValues(viewPlaneNormal[0], viewPlaneNormal[1], viewPlaneNormal[2]);
        vec3.normalize(normalizedPlaneNormal, normalizedPlaneNormal);
        const viewRight = vec3.create();
        vec3.cross(viewRight, normalizedViewUp, normalizedPlaneNormal);
        vec3.normalize(viewRight, viewRight);
        const strokeCentersSource = operationData.strokePointsWorld &&
            operationData.strokePointsWorld.length > 0
            ? operationData.strokePointsWorld
            : [operationData.centerWorld];
        const strokeCenters = strokeCentersSource.map((point) => vec3.clone(point));
        const strokeCornersWorld = strokeCenters.flatMap((centerPoint) => createCircleCornersForCenter(centerPoint, normalizedViewUp, viewRight, brushRadius));
        const circleCornersIJK = strokeCornersWorld.map((world) => transformWorldToIndex(segmentationImageData, world));
        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());
        operationData.strokePointsWorld = strokeCenters;
        operationData.isInObject = createPointInEllipse(cornersInWorld, {
            strokePointsWorld: strokeCenters,
            segmentationImageData,
            radius: brushRadius,
        });
        operationData.isInObjectBoundsIJK = boundsIJK;
    },
};
function createPointInEllipse(cornersInWorld = [], options = {}) {
    if (!cornersInWorld || cornersInWorld.length !== 4) {
        throw new Error('createPointInEllipse: cornersInWorld must have 4 points');
    }
    const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;
    const center = vec3.create();
    vec3.add(center, topLeft, bottomRight);
    vec3.scale(center, center, 0.5);
    const majorAxisVec = vec3.create();
    vec3.subtract(majorAxisVec, topRight, topLeft);
    const xRadius = vec3.length(majorAxisVec) / 2;
    vec3.normalize(majorAxisVec, majorAxisVec);
    const minorAxisVec = vec3.create();
    vec3.subtract(minorAxisVec, bottomLeft, topLeft);
    const yRadius = vec3.length(minorAxisVec) / 2;
    vec3.normalize(minorAxisVec, minorAxisVec);
    const normal = vec3.create();
    vec3.cross(normal, majorAxisVec, minorAxisVec);
    vec3.normalize(normal, normal);
    const radiusForStroke = options.radius ?? Math.max(xRadius, yRadius);
    const strokePredicate = createStrokePredicate(options.strokePointsWorld || [], radiusForStroke);
    if (isEqual(xRadius, yRadius)) {
        const radius = xRadius;
        const sphereObj = {
            center,
            radius,
            radius2: radius * radius,
        };
        return (pointLPS, pointIJK) => {
            let worldPoint = pointLPS;
            if (!worldPoint && pointIJK && options.segmentationImageData) {
                worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);
            }
            if (!worldPoint) {
                return false;
            }
            if (strokePredicate?.(worldPoint)) {
                return true;
            }
            return pointInSphere(sphereObj, worldPoint);
        };
    }
    return (pointLPS, pointIJK) => {
        let worldPoint = pointLPS;
        if (!worldPoint && pointIJK && options.segmentationImageData) {
            worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);
        }
        if (!worldPoint) {
            return false;
        }
        if (strokePredicate?.(worldPoint)) {
            return true;
        }
        const pointVec = vec3.create();
        vec3.subtract(pointVec, worldPoint, center);
        const distToPlane = vec3.dot(pointVec, normal);
        const proj = vec3.create();
        vec3.scaleAndAdd(proj, pointVec, normal, -distToPlane);
        const fromTopLeft = vec3.create();
        const centerToTopLeft = vec3.create();
        vec3.subtract(centerToTopLeft, center, topLeft);
        vec3.subtract(fromTopLeft, proj, centerToTopLeft);
        const x = vec3.dot(fromTopLeft, majorAxisVec);
        const y = vec3.dot(fromTopLeft, minorAxisVec);
        return (x * x) / (xRadius * xRadius) + (y * y) / (yRadius * yRadius) <= 1;
    };
}
const CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);
const CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);
const fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;
const thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;
export function fillOutsideCircle() {
    throw new Error('Not yet implemented');
}
export { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse, createPointInEllipse as createEllipseInPoint, };
