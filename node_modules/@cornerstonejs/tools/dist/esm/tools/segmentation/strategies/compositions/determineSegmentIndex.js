import StrategyCallbacks from '../../../../enums/StrategyCallbacks';
export default {
    [StrategyCallbacks.OnInteractionStart]: (operationData) => {
        const { segmentIndex, previewSegmentIndex, segmentationVoxelManager, centerIJK, viewPlaneNormal, segmentationImageData, configuration, } = operationData;
        if (!configuration?.useCenterSegmentIndex) {
            operationData.centerSegmentIndexInfo.segmentIndex = null;
            operationData.centerSegmentIndexInfo.hasSegmentIndex = false;
            operationData.centerSegmentIndexInfo.hasPreviewIndex = false;
            return;
        }
        let hasSegmentIndex = false;
        let hasPreviewIndex = false;
        const nestedBounds = [
            ...segmentationVoxelManager.getBoundsIJK(),
        ];
        if (Math.abs(viewPlaneNormal[0]) > 0.8) {
            nestedBounds[0] = [centerIJK[0], centerIJK[0]];
        }
        else if (Math.abs(viewPlaneNormal[1]) > 0.8) {
            nestedBounds[1] = [centerIJK[1], centerIJK[1]];
        }
        else if (Math.abs(viewPlaneNormal[2]) > 0.8) {
            nestedBounds[2] = [centerIJK[2], centerIJK[2]];
        }
        const callback = ({ value }) => {
            hasSegmentIndex ||= value === segmentIndex;
            hasPreviewIndex ||= value === previewSegmentIndex;
        };
        segmentationVoxelManager.forEach(callback, {
            imageData: segmentationImageData,
            isInObject: operationData.isInObject,
            boundsIJK: nestedBounds,
        });
        if (!hasSegmentIndex && !hasPreviewIndex) {
            operationData.centerSegmentIndexInfo.segmentIndex = null;
            return;
        }
        const existingValue = segmentationVoxelManager.getAtIJKPoint(centerIJK);
        operationData.centerSegmentIndexInfo.segmentIndex = existingValue;
        operationData.centerSegmentIndexInfo.hasSegmentIndex = hasSegmentIndex;
        operationData.centerSegmentIndexInfo.hasPreviewIndex = hasPreviewIndex;
    },
};
