import { getConfiguration } from '../init';
import TiledRenderingEngine from './TiledRenderingEngine';
import ContextPoolRenderingEngine from './ContextPoolRenderingEngine';
import { RenderingEngineModeEnum } from '../enums';
class RenderingEngine {
    constructor(id) {
        const config = getConfiguration();
        const renderingEngineMode = config?.rendering?.renderingEngineMode;
        switch (renderingEngineMode) {
            case RenderingEngineModeEnum.Tiled:
                this._implementation = new TiledRenderingEngine(id);
                break;
            case RenderingEngineModeEnum.ContextPool:
                this._implementation = new ContextPoolRenderingEngine(id);
                break;
            default:
                console.warn(`RenderingEngine: Unknown rendering engine mode "${renderingEngineMode}". Defaulting to Next rendering engine.`);
                this._implementation = new ContextPoolRenderingEngine(id);
                break;
        }
    }
    get id() {
        return this._implementation.id;
    }
    enableElement(viewportInputEntry) {
        return this._implementation.enableElement(viewportInputEntry);
    }
    disableElement(viewportId) {
        return this._implementation.disableElement(viewportId);
    }
    setViewports(publicViewportInputEntries) {
        return this._implementation.setViewports(publicViewportInputEntries);
    }
    resize(immediate = true, keepCamera = true) {
        return this._implementation.resize(immediate, keepCamera);
    }
    getViewport(viewportId) {
        return this._implementation.getViewport(viewportId);
    }
    getViewports() {
        return this._implementation.getViewports();
    }
    getStackViewport(viewportId) {
        return this._implementation.getStackViewport(viewportId);
    }
    getStackViewports() {
        return this._implementation.getStackViewports();
    }
    getVolumeViewports() {
        return this._implementation.getVolumeViewports();
    }
    getRenderer(viewportId) {
        return this._implementation.getRenderer(viewportId);
    }
    fillCanvasWithBackgroundColor(canvas, backgroundColor) {
        return this._implementation.fillCanvasWithBackgroundColor(canvas, backgroundColor);
    }
    render() {
        return this._implementation.render();
    }
    renderViewports(viewportIds) {
        return this._implementation.renderViewports(viewportIds);
    }
    renderViewport(viewportId) {
        return this._implementation.renderViewport(viewportId);
    }
    destroy() {
        return this._implementation.destroy();
    }
    getOffscreenMultiRenderWindow(viewportId) {
        return this._implementation.getOffscreenMultiRenderWindow(viewportId);
    }
}
export default RenderingEngine;
