import { mat4 } from 'gl-matrix';
import type { WSIViewportProperties, Point3, Point2, ICamera, VOIRange, CPUIImageData, ViewportInput } from '../types';
import { Transform } from './helpers/cpuFallback/rendering/transform';
import Viewport from './Viewport';
import type { DataSetOptions } from '../types/IViewport';
declare class WSIViewport extends Viewport {
    modality: any;
    protected imageIds: string[];
    readonly uid: any;
    readonly renderingEngineId: string;
    private frameOfReferenceUID;
    protected metadata: any;
    protected metadataDicomweb: any;
    private microscopyElement;
    protected map: any;
    private internalCamera;
    private viewer;
    private voiRange;
    private feFilter;
    private averageWhite;
    constructor(props: ViewportInput);
    static get useCustomRenderingPipeline(): boolean;
    private addEventListeners;
    private removeEventListeners;
    private elementDisabledHandler;
    private getImageDataMetadata;
    setFrameNumber(frame: number): Promise<void>;
    setProperties(props: WSIViewportProperties): void;
    getProperties: () => WSIViewportProperties;
    resetProperties(): void;
    setVOI(voiRange: VOIRange): void;
    setAverageWhite(averageWhite: [number, number, number]): void;
    protected getScalarData(): any;
    computeTransforms(): {
        indexToWorld: mat4;
        worldToIndex: mat4;
    };
    getImageData(): CPUIImageData;
    hasImageURI(imageURI: string): boolean;
    setCamera(camera: ICamera): void;
    getCurrentImageId(): string;
    getFrameNumber(): number;
    getCamera(): ICamera;
    resetCamera: () => boolean;
    getNumberOfSlices: () => number;
    static getDicomMicroscopyViewer: () => Promise<any>;
    getFrameOfReferenceUID: () => string;
    resize: () => void;
    worldToIndexWSI(point: Point3): Point2;
    indexToWorldWSI(point: Point2): Point3;
    worldToIndex(point: Point3): Point3;
    indexToWorld(point: Point3): Point3;
    canvasToWorld: (canvasPos: Point2) => Point3;
    worldToCanvas: (worldPos: Point3) => Point2;
    setDataIds(imageIds: string[], options?: DataSetOptions & {
        miniNavigationOverlay?: boolean;
        webClient: unknown;
    }): Promise<void>;
    setWSI(imageIds: string[], client: any): Promise<void>;
    postrender: () => void;
    scroll(delta: number): void;
    getRotation: () => number;
    protected canvasToIndex: (canvasPos: Point2) => Point3;
    protected indexToCanvas: (indexPos: Point3) => Point2;
    getSliceIndex(): number;
    getView(): any;
    private refreshRenderValues;
    customRenderViewportToCanvas: () => void;
    getZoom(): any;
    setZoom(zoom: number): void;
    getImageIds: () => Array<string>;
    protected getTransform(): Transform;
    getViewReferenceId(): string;
    getCurrentImageIdIndex(): number;
    private static overlayCssId;
    static addMiniNavigationOverlayCss(): void;
}
export default WSIViewport;
