import type CPUFallbackLUT from './CPUFallbackLUT';
import type { PixelDataTypedArray, PixelDataTypedArrayString } from './PixelDataTypedArray';
import type { ImageQualityStatus, VOILUTFunctionType } from '../enums';
import type IImageCalibration from './IImageCalibration';
import type RGB from './RGB';
import type IImageFrame from './IImageFrame';
import type Point2 from './Point2';
import type Point3 from './Point3';
import type Mat3 from './Mat3';
import type CPUFallbackViewport from './CPUFallbackViewport';
import type CPUFallbackTransform from './CPUFallbackTransform';
import type CPUFallbackColormap from './CPUFallbackColormap';
import type CPUFallbackRenderingTools from './CPUFallbackRenderingTools';
import type { ImagePlaneModule } from './ImagePlaneModule';
import type { ImagePixelModule } from './ImagePixelModule';
import type { IVoxelManager } from './IVoxelManager';
interface IImage {
    imageId: string;
    referencedImageId?: string;
    sharedCacheKey?: string;
    isPreScaled?: boolean;
    preScale?: {
        enabled: boolean;
        scaled?: boolean;
        scalingParameters?: {
            modality?: string;
            rescaleSlope?: number;
            rescaleIntercept?: number;
            suvbw?: number;
        };
    };
    minPixelValue: number;
    maxPixelValue: number;
    slope: number;
    intercept: number;
    windowCenter: number[] | number;
    windowWidth: number[] | number;
    voiLUTFunction: VOILUTFunctionType;
    getPixelData: () => PixelDataTypedArray;
    getCanvas: () => HTMLCanvasElement;
    rows: number;
    columns: number;
    height: number;
    width: number;
    color: boolean;
    rgba: boolean;
    numberOfComponents: number;
    render?: (enabledElement: CPUFallbackEnabledElement, invalidated: boolean) => unknown;
    columnPixelSpacing: number;
    rowPixelSpacing: number;
    sliceThickness?: number;
    invert: boolean;
    photometricInterpretation?: string;
    sizeInBytes: number;
    modalityLUT?: CPUFallbackLUT;
    voiLUT?: CPUFallbackLUT;
    colormap?: CPUFallbackColormap;
    scaling?: {
        PT?: {
            SUVlbmFactor?: number;
            SUVbsaFactor?: number;
            suvbwToSuvlbm?: number;
            suvbwToSuvbsa?: number;
        };
    };
    loadTimeInMS?: number;
    decodeTimeInMS?: number;
    stats?: {
        lastStoredPixelDataToCanvasImageDataTime?: number;
        lastGetPixelDataTime?: number;
        lastPutImageDataTime?: number;
        lastLutGenerateTime?: number;
        lastRenderedViewport?: unknown;
        lastRenderTime?: number;
    };
    cachedLut?: {
        windowWidth?: number | number[];
        windowCenter?: number | number[];
        invert?: boolean;
        lutArray?: Uint8ClampedArray;
        modalityLUT?: CPUFallbackLUT;
        voiLUT?: CPUFallbackLUT;
    };
    imageQualityStatus?: ImageQualityStatus;
    calibration?: IImageCalibration;
    imageFrame?: IImageFrame;
    FrameOfReferenceUID?: string;
    dataType: PixelDataTypedArrayString;
    voxelManager?: IVoxelManager<number> | IVoxelManager<RGB>;
    bufferView?: {
        buffer: ArrayBuffer;
        offset: number;
    };
}
interface CPUFallbackEnabledElement {
    scale?: number;
    pan?: Point2;
    zoom?: number;
    rotation?: number;
    image?: IImage;
    canvas?: HTMLCanvasElement;
    viewport?: CPUFallbackViewport;
    colormap?: CPUFallbackColormap;
    options?: {
        [key: string]: unknown;
        colormap?: CPUFallbackColormap;
    };
    renderingTools?: CPUFallbackRenderingTools;
    transform?: CPUFallbackTransform;
    invalid?: boolean;
    needsRedraw?: boolean;
    metadata?: {
        direction?: Mat3;
        dimensions?: Point3;
        spacing?: Point3;
        origin?: Point3;
        imagePlaneModule?: ImagePlaneModule;
        imagePixelModule?: ImagePixelModule;
    };
    voxelManager?: IVoxelManager<number> | IVoxelManager<RGB>;
}
export type { IImage as default };
export type { CPUFallbackEnabledElement };
