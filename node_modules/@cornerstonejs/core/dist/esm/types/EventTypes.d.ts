import type { mat4 } from 'gl-matrix';
import type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';
import type CustomEventType from '../types/CustomEventType';
import type ICachedImage from './ICachedImage';
import type ICachedVolume from './ICachedVolume';
import type ICamera from './ICamera';
import type IImage from './IImage';
import type IImageVolume from './IImageVolume';
import type { VOIRange } from './voi';
import type VOILUTFunctionType from '../enums/VOILUTFunctionType';
import type ViewportStatus from '../enums/ViewportStatus';
import type DisplayArea from './displayArea';
import type IImageCalibration from './IImageCalibration';
import type { ColormapPublic } from './Colormap';
import type IVolumeViewport from './IVolumeViewport';
import type { ActorEntry } from './IActor';
interface CameraModifiedEventDetail {
    previousCamera: ICamera;
    camera: ICamera;
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
}
interface CameraResetEventDetail {
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
    camera: ICamera;
}
type CameraResetEvent = CustomEventType<CameraResetEventDetail>;
interface VoiModifiedEventDetail {
    viewportId: string;
    range: VOIRange;
    volumeId?: string;
    VOILUTFunction?: VOILUTFunctionType;
    invert?: boolean;
    invertStateChanged?: boolean;
    colormap?: ColormapPublic;
}
interface ColormapModifiedEventDetail {
    viewportId: string;
    colormap: ColormapPublic;
    volumeId?: string;
}
interface DisplayAreaModifiedEventDetail {
    viewportId: string;
    displayArea: DisplayArea;
    volumeId?: string;
    storeAsInitialCamera?: boolean;
}
interface ElementDisabledEventDetail {
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
}
interface ElementEnabledEventDetail {
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
}
interface ImageRenderedEventDetail {
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
    suppressEvents?: boolean;
    viewportStatus: ViewportStatus;
}
interface ImageVolumeModifiedEventDetail {
    volumeId: string;
    FrameOfReferenceUID: string;
    numberOfFrames: number;
    framesProcessed: number;
}
interface ImageVolumeLoadingCompletedEventDetail {
    volumeId: string;
    FrameOfReferenceUID: string;
}
interface ImageLoadedEventDetail {
    image: IImage;
}
export interface ImageLoadStageEventDetail {
    stageId: string;
    numberOfImages: number;
    numberOfFailures: number;
    stageDurationInMS: number;
    startDurationInMS: number;
}
interface ImageLoadedFailedEventDetail {
    imageId: string;
    error: unknown;
}
interface VolumeLoadedEventDetail {
    volume: IImageVolume;
}
interface VolumeLoadedFailedEventDetail {
    volumeId: string;
    error: unknown;
}
interface ImageCacheImageRemovedEventDetail {
    imageId: string;
}
interface ImageCacheImageAddedEventDetail {
    image: ICachedImage;
}
interface VolumeCacheVolumeRemovedEventDetail {
    volumeId: string;
}
interface VolumeCacheVolumeAddedEventDetail {
    volume: ICachedVolume;
}
interface PreStackNewImageEventDetail {
    imageId: string;
    imageIdIndex: number;
    viewportId: string;
    renderingEngineId: string;
}
type VolumeScrollOutOfBoundsEventDetail = {
    volumeId: string;
    viewport: IVolumeViewport;
    desiredStepIndex: number;
    currentStepIndex: number;
    delta: number;
    numScrollSteps: number;
    currentImageId: string;
};
interface StackNewImageEventDetail {
    image: IImage;
    imageId: string;
    imageIdIndex: number;
    viewportId: string;
    renderingEngineId: string;
}
interface VolumeNewImageEventDetail {
    imageIndex: number;
    numberOfSlices: number;
    viewportId: string;
    renderingEngineId: string;
}
interface ImageSpacingCalibratedEventDetail {
    element: HTMLDivElement;
    viewportId: string;
    renderingEngineId: string;
    imageId: string;
    calibration: IImageCalibration;
    imageData: vtkImageData;
    worldToIndex: mat4;
}
interface StackViewportNewStackEventDetail {
    imageIds: string[];
    viewportId: string;
    element: HTMLDivElement;
    currentImageIdIndex: number;
}
interface StackViewportScrollEventDetail {
    newImageIdIndex: number;
    imageId: string;
    direction: number;
}
type StackScrollOutOfBoundsEventDetail = {
    imageIdIndex: number;
    direction: number;
};
type CameraModifiedEvent = CustomEventType<CameraModifiedEventDetail>;
type VoiModifiedEvent = CustomEventType<VoiModifiedEventDetail>;
type ColormapModifiedEvent = CustomEventType<ColormapModifiedEventDetail>;
type DisplayAreaModifiedEvent = CustomEventType<DisplayAreaModifiedEventDetail>;
type ElementDisabledEvent = CustomEventType<ElementDisabledEventDetail>;
type ElementEnabledEvent = CustomEventType<ElementEnabledEventDetail>;
type ImageRenderedEvent = CustomEventType<ElementEnabledEventDetail>;
type ImageVolumeModifiedEvent = CustomEventType<ImageVolumeModifiedEventDetail>;
type ImageVolumeLoadingCompletedEvent = CustomEventType<ImageVolumeLoadingCompletedEventDetail>;
type ImageLoadedEvent = CustomEventType<ImageLoadedEventDetail>;
type ImageLoadedFailedEvent = CustomEventType<ImageLoadedFailedEventDetail>;
type VolumeLoadedEvent = CustomEventType<VolumeLoadedEventDetail>;
type VolumeLoadedFailedEvent = CustomEventType<VolumeLoadedFailedEventDetail>;
type ImageCacheImageAddedEvent = CustomEventType<ImageCacheImageAddedEventDetail>;
type ImageCacheImageRemovedEvent = CustomEventType<ImageCacheImageRemovedEventDetail>;
type VolumeCacheVolumeAddedEvent = CustomEventType<VolumeCacheVolumeAddedEventDetail>;
type VolumeCacheVolumeRemovedEvent = CustomEventType<VolumeCacheVolumeRemovedEventDetail>;
type StackNewImageEvent = CustomEventType<StackNewImageEventDetail>;
type VolumeNewImageEvent = CustomEventType<VolumeNewImageEventDetail>;
type PreStackNewImageEvent = CustomEventType<PreStackNewImageEventDetail>;
type ImageSpacingCalibratedEvent = CustomEventType<ImageSpacingCalibratedEventDetail>;
type StackViewportNewStackEvent = CustomEventType<StackViewportNewStackEventDetail>;
type StackViewportScrollEvent = CustomEventType<StackViewportScrollEventDetail>;
type StackScrollOutOfBoundsEvent = CustomEventType<StackScrollOutOfBoundsEventDetail>;
type VolumeScrollOutOfBoundsEvent = CustomEventType<VolumeScrollOutOfBoundsEventDetail>;
interface ActorsChangedEventDetail {
    viewportId: string;
    removedActors: ActorEntry[];
    addedActors: ActorEntry[];
    currentActors: ActorEntry[];
}
type ActorsChangedEvent = CustomEventType<ActorsChangedEventDetail>;
export type { VolumeScrollOutOfBoundsEventDetail, VolumeScrollOutOfBoundsEvent, ActorsChangedEventDetail, ActorsChangedEvent, CameraModifiedEventDetail, CameraModifiedEvent, VoiModifiedEvent, VoiModifiedEventDetail, ColormapModifiedEvent, ColormapModifiedEventDetail, DisplayAreaModifiedEvent, DisplayAreaModifiedEventDetail, ElementDisabledEvent, ElementDisabledEventDetail, ElementEnabledEvent, ElementEnabledEventDetail, ImageRenderedEventDetail, ImageRenderedEvent, ImageVolumeModifiedEvent, ImageVolumeModifiedEventDetail, ImageVolumeLoadingCompletedEvent, ImageVolumeLoadingCompletedEventDetail, ImageLoadedEvent, ImageLoadedEventDetail, ImageLoadedFailedEventDetail, ImageLoadedFailedEvent, VolumeLoadedEvent, VolumeLoadedEventDetail, VolumeLoadedFailedEvent, VolumeLoadedFailedEventDetail, ImageCacheImageAddedEvent, ImageCacheImageAddedEventDetail, ImageCacheImageRemovedEvent, ImageCacheImageRemovedEventDetail, VolumeCacheVolumeAddedEvent, VolumeCacheVolumeAddedEventDetail, VolumeCacheVolumeRemovedEvent, VolumeCacheVolumeRemovedEventDetail, StackNewImageEvent, StackNewImageEventDetail, PreStackNewImageEvent, PreStackNewImageEventDetail, ImageSpacingCalibratedEvent, ImageSpacingCalibratedEventDetail, VolumeNewImageEvent, VolumeNewImageEventDetail, StackViewportNewStackEvent, StackViewportNewStackEventDetail, StackViewportScrollEvent, StackViewportScrollEventDetail, StackScrollOutOfBoundsEvent, StackScrollOutOfBoundsEventDetail, CameraResetEvent, CameraResetEventDetail, };
