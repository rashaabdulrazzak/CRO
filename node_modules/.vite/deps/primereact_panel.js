"use client";
import {
  PlusIcon
} from "./chunk-GL4QPBS7.js";
import {
  CSSTransition
} from "./chunk-NPVO6E2L.js";
import {
  Ripple
} from "./chunk-U3ZHFGOL.js";
import {
  IconBase
} from "./chunk-OLVYNJTM.js";
import "./chunk-AUFLGUIX.js";
import "./chunk-CKZVYDQX.js";
import {
  ComponentBase,
  useHandleStyle,
  useMergeProps,
  useMountEffect
} from "./chunk-2TKWX2JQ.js";
import {
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  UniqueComponentId,
  classNames
} from "./chunk-YNORJJ4X.js";
import {
  require_react
} from "./chunk-PSQR3SVX.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/primereact/panel/panel.esm.js
var React2 = __toESM(require_react());

// node_modules/primereact/icons/minus/index.esm.js
var React = __toESM(require_react());
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var MinusIcon = React.memo(React.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React.createElement("svg", _extends({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React.createElement("path", {
    d: "M13.2222 7.77778H0.777778C0.571498 7.77778 0.373667 7.69584 0.227806 7.54998C0.0819442 7.40412 0 7.20629 0 7.00001C0 6.79373 0.0819442 6.5959 0.227806 6.45003C0.373667 6.30417 0.571498 6.22223 0.777778 6.22223H13.2222C13.4285 6.22223 13.6263 6.30417 13.7722 6.45003C13.9181 6.5959 14 6.79373 14 7.00001C14 7.20629 13.9181 7.40412 13.7722 7.54998C13.6263 7.69584 13.4285 7.77778 13.2222 7.77778Z",
    fill: "currentColor"
  }));
}));
MinusIcon.displayName = "MinusIcon";

// node_modules/primereact/panel/panel.esm.js
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends2.apply(null, arguments);
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
var PanelBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Panel",
    id: null,
    header: null,
    headerTemplate: null,
    footer: null,
    footerTemplate: null,
    toggleable: null,
    style: null,
    className: null,
    collapsed: null,
    expandIcon: null,
    collapseIcon: null,
    icons: null,
    transitionOptions: null,
    onExpand: null,
    onCollapse: null,
    onToggle: null,
    children: void 0
  },
  css: {
    classes: {
      root: function root(_ref) {
        var props = _ref.props;
        return classNames("p-panel p-component", {
          "p-panel-toggleable": props.toggleable
        });
      },
      header: "p-panel-header",
      title: "p-panel-title",
      icons: "p-panel-icons",
      toggler: "p-panel-header-icon p-panel-toggler p-link",
      togglerIcon: "p-panel-header-icon p-panel-toggler p-link",
      toggleableContent: "p-toggleable-content",
      content: "p-panel-content",
      footer: "p-panel-footer",
      transition: "p-toggleable-content"
    },
    styles: "\n        @layer primereact {\n            .p-panel-header {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n            }\n            \n            .p-panel-title {\n              line-height: 1;\n            }\n            \n            .p-panel-header-icon {\n              display: inline-flex;\n              justify-content: center;\n              align-items: center;\n              cursor: pointer;\n              text-decoration: none;\n              overflow: hidden;\n              position: relative;\n            }\n        }\n        "
  }
});
var Panel = React2.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React2.useContext(PrimeReactContext);
  var props = PanelBase.getProps(inProps, context);
  var _React$useState = React2.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = React2.useState(props.collapsed), _React$useState4 = _slicedToArray(_React$useState3, 2), collapsedState = _React$useState4[0], setCollapsedState = _React$useState4[1];
  var elementRef = React2.useRef(null);
  var contentRef = React2.useRef(null);
  var collapsed = props.toggleable ? props.onToggle ? props.collapsed : collapsedState : false;
  var headerId = idState + "_header";
  var contentId = idState + "_content";
  var _PanelBase$setMetaDat = PanelBase.setMetaData({
    props,
    state: {
      id: idState,
      collapsed
    }
  }), ptm = _PanelBase$setMetaDat.ptm, cx = _PanelBase$setMetaDat.cx, isUnstyled = _PanelBase$setMetaDat.isUnstyled;
  useHandleStyle(PanelBase.css.styles, isUnstyled, {
    name: "panel"
  });
  var toggle = function toggle2(event) {
    if (!props.toggleable) {
      return;
    }
    collapsed ? expand(event) : collapse(event);
    if (event) {
      if (props.onToggle) {
        props.onToggle({
          originalEvent: event,
          value: !collapsed
        });
      }
      event.preventDefault();
    }
  };
  var expand = function expand2(event) {
    if (!props.onToggle) {
      setCollapsedState(false);
    }
    props.onExpand && event && props.onExpand(event);
  };
  var collapse = function collapse2(event) {
    if (!props.onToggle) {
      setCollapsedState(true);
    }
    props.onCollapse && event && props.onCollapse(event);
  };
  React2.useImperativeHandle(ref, function() {
    return {
      props,
      toggle,
      expand,
      collapse,
      getElement: function getElement() {
        return elementRef.current;
      },
      getContent: function getContent() {
        return contentRef.current;
      }
    };
  });
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  var createToggleIcon = function createToggleIcon2() {
    if (props.toggleable) {
      var buttonId = idState + "_label";
      var togglerProps = mergeProps({
        className: cx("toggler"),
        onClick: toggle,
        id: buttonId,
        "aria-controls": contentId,
        "aria-expanded": !collapsed,
        type: "button",
        role: "button",
        "aria-label": props.header
      }, ptm("toggler"));
      var togglerIconProps = mergeProps(ptm("togglericon"));
      var icon = collapsed ? props.expandIcon || React2.createElement(PlusIcon, togglerIconProps) : props.collapseIcon || React2.createElement(MinusIcon, togglerIconProps);
      var toggleIcon = IconUtils.getJSXIcon(icon, togglerIconProps, {
        props,
        collapsed
      });
      return React2.createElement("button", togglerProps, toggleIcon, React2.createElement(Ripple, null));
    }
    return null;
  };
  var createHeader = function createHeader2() {
    var header2 = ObjectUtils.getJSXElement(props.header, props);
    var icons = ObjectUtils.getJSXElement(props.icons, props);
    var togglerElement = createToggleIcon();
    var titleProps = mergeProps({
      id: headerId,
      className: cx("title")
    }, ptm("title"));
    var titleElement = React2.createElement("span", titleProps, header2);
    var iconsProps = mergeProps({
      className: cx("icons")
    }, ptm("icons"));
    var iconsElement = React2.createElement("div", iconsProps, icons, togglerElement);
    var headerProps = mergeProps({
      className: cx("header")
    }, ptm("header"));
    var content2 = React2.createElement("div", headerProps, titleElement, iconsElement);
    if (props.headerTemplate) {
      var defaultContentOptions = {
        className: "p-panel-header",
        titleClassName: "p-panel-title",
        iconsClassName: "p-panel-icons",
        togglerClassName: "p-panel-header-icon p-panel-toggler p-link",
        onTogglerClick: toggle,
        titleElement,
        iconsElement,
        togglerElement,
        element: content2,
        id: idState + "_header",
        props,
        collapsed
      };
      return ObjectUtils.getJSXElement(props.headerTemplate, defaultContentOptions);
    } else if (props.header || props.toggleable) {
      return content2;
    }
    return null;
  };
  var createFooter = function createFooter2() {
    var footer2 = ObjectUtils.getJSXElement(props.footer, props);
    var footerProps = mergeProps({
      className: cx("footer")
    }, ptm("footer"));
    var content2 = React2.createElement("div", footerProps, footer2);
    if (props.footerTemplate) {
      var defaultContentOptions = {
        className: cx("footer"),
        element: content2,
        props
      };
      return ObjectUtils.getJSXElement(props.footerTemplate, defaultContentOptions);
    } else if (props.footer) {
      return content2;
    }
    return null;
  };
  var createContent = function createContent2() {
    var toggleableContentProps = mergeProps({
      ref: contentRef,
      className: cx("toggleableContent"),
      "aria-hidden": collapsed,
      role: "region",
      id: contentId,
      "aria-labelledby": headerId
    }, ptm("toggleablecontent"));
    var contentProps = mergeProps({
      className: cx("content")
    }, ptm("content"));
    var transitionProps = mergeProps({
      classNames: cx("transition"),
      timeout: {
        enter: 1e3,
        exit: 450
      },
      "in": !collapsed,
      unmountOnExit: true,
      options: props.transitionOptions
    }, ptm("transition"));
    return React2.createElement(CSSTransition, _extends2({
      nodeRef: contentRef
    }, transitionProps), React2.createElement("div", toggleableContentProps, React2.createElement("div", contentProps, props.children)));
  };
  var rootProps = mergeProps({
    id: idState,
    ref: elementRef,
    style: props.style,
    className: classNames(props.className, cx("root"))
  }, PanelBase.getOtherProps(props), ptm("root"));
  var header = createHeader();
  var content = createContent();
  var footer = createFooter();
  return React2.createElement("div", rootProps, header, content, footer);
});
Panel.displayName = "Panel";
export {
  Panel
};
//# sourceMappingURL=primereact_panel.js.map
