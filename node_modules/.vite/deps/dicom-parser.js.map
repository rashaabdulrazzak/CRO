{
  "version": 3,
  "sources": ["browser-external:zlib", "webpack://dicomParser/webpack/universalModuleDefinition", "webpack://dicomParser/external%20%22zlib%22", "webpack://dicomParser/util/util.js", "webpack://dicomParser/util/parseTM.js", "webpack://dicomParser/util/parseDA.js", "webpack://dicomParser/util/elementToString.js", "webpack://dicomParser/util/dataSetToJS.js", "webpack://dicomParser/util/createJPEGBasicOffsetTable.js", "webpack://dicomParser/readTag.js", "webpack://dicomParser/findEndOfEncapsulatedPixelData.js", "webpack://dicomParser/findAndSetUNElementLength.js", "webpack://dicomParser/byteArrayParser.js", "webpack://dicomParser/dataSet.js", "webpack://dicomParser/findItemDelimitationItem.js", "webpack://dicomParser/readDicomElementImplicit.js", "webpack://dicomParser/readSequenceItem.js", "webpack://dicomParser/readSequenceElementImplicit.js", "webpack://dicomParser/readSequenceElementExplicit.js", "webpack://dicomParser/readDicomElementExplicit.js", "webpack://dicomParser/parseDicomDataSet.js", "webpack://dicomParser/alloc.js", "webpack://dicomParser/version.js", "webpack://dicomParser/bigEndianByteArrayParser.js", "webpack://dicomParser/sharedCopy.js", "webpack://dicomParser/byteStream.js", "webpack://dicomParser/littleEndianByteArrayParser.js", "webpack://dicomParser/readPart10Header.js", "webpack://dicomParser/parseDicom.js", "webpack://dicomParser/readEncapsulatedPixelDataFromFragments.js", "webpack://dicomParser/readEncapsulatedImageFrame.js", "webpack://dicomParser/readEncapsulatedPixelData.js", "webpack://dicomParser/index.js", "webpack://dicomParser/webpack/bootstrap"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"zlib\" has been externalized for browser compatibility. Cannot access \"zlib.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"zlib\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dicom-parser\", [\"zlib\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dicom-parser\"] = factory(require(\"zlib\"));\n\telse\n\t\troot[\"dicomParser\"] = factory(root[\"zlib\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn ", "module.exports = __WEBPACK_EXTERNAL_MODULE__0__;", "const stringVrs = {\n  AE: true,\n  AS: true,\n  AT: false,\n  CS: true,\n  DA: true,\n  DS: true,\n  DT: true,\n  FL: false,\n  FD: false,\n  IS: true,\n  LO: true,\n  LT: true,\n  OB: false,\n  OD: false,\n  OF: false,\n  OW: false,\n  PN: true,\n  SH: true,\n  SL: false,\n  SQ: false,\n  SS: false,\n  ST: true,\n  TM: true,\n  UI: true,\n  UL: false,\n  UN: undefined, // dunno\n  UR: true,\n  US: false,\n  UT: true\n};\n\n/**\n * Tests to see if vr is a string or not.\n * @param vr\n * @returns true if string, false it not string, undefined if unknown vr or UN type\n */\nconst isStringVr = (vr) => stringVrs[vr];\n\n/**\n * Tests to see if a given tag in the format xggggeeee is a private tag or not\n * @param tag\n * @returns {boolean}\n * @throws error if fourth character cannot be parsed\n */\nconst isPrivateTag = (tag) => {\n  const lastGroupDigit = parseInt(tag[4], 16);\n  if (isNaN(lastGroupDigit)) {\n    throw 'dicomParser.isPrivateTag: cannot parse last character of group';\n  }\n  const groupIsOdd = (lastGroupDigit % 2) === 1;\n\n  return groupIsOdd;\n};\n\n/**\n * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n * @param personName a string in the PN VR format\n * @param index\n * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n */\nconst parsePN = (personName) => {\n  if (personName === undefined) {\n    return undefined;\n  }\n  const stringValues = personName.split('^');\n\n\n  return {\n    familyName: stringValues[0],\n    givenName: stringValues[1],\n    middleName: stringValues[2],\n    prefix: stringValues[3],\n    suffix: stringValues[4]\n  };\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN\n};\n", "/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM (time, validate) {\n  if (time.length >= 2) { // must at least have HH\n    // 0123456789\n    // HHMMSS.FFFFFF\n    const hh = parseInt(time.substring(0, 2), 10);\n    const mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n    const ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n\n    const fractionalStr = time.length >= 8 ? time.substring(7, 13) : undefined;\n    const ffffff = fractionalStr ? (parseInt(fractionalStr, 10) * Math.pow(10, 6 - fractionalStr.length)) : undefined;\n\n    if (validate) {\n      if ((isNaN(hh)) ||\n        (mm !== undefined && isNaN(mm)) ||\n        (ss !== undefined && isNaN(ss)) ||\n        (ffffff !== undefined && isNaN(ffffff)) ||\n        (hh < 0 || hh > 23) ||\n        (mm && (mm < 0 || mm > 59)) ||\n        (ss && (ss < 0 || ss > 59)) ||\n        (ffffff && (ffffff < 0 || ffffff > 999999))) {\n        throw `invalid TM '${time}'`;\n      }\n    }\n\n    return {\n      hours: hh,\n      minutes: mm,\n      seconds: ss,\n      fractionalSeconds: ffffff\n    };\n  }\n\n  if (validate) {\n    throw `invalid TM '${time}'`;\n  }\n\n  return undefined;\n}\n", "// algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\nfunction daysInMonth (m, y) { // m is 0 indexed: 0-11\n  switch (m) {\n  case 2 :\n    return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;\n  case 9 : case 4 : case 6 : case 11 :\n    return 30;\n  default :\n    return 31;\n  }\n}\n\nfunction isValidDate (d, m, y) {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA (date, validate) {\n  if (date && date.length === 8) {\n    var yyyy = parseInt(date.substring(0, 4), 10);\n    var mm = parseInt(date.substring(4, 6), 10);\n    var dd = parseInt(date.substring(6, 8), 10);\n\n    if (validate) {\n      if (isValidDate(dd, mm, yyyy) !== true) {\n        throw `invalid DA '${date}'`;\n      }\n    }\n\n    return {\n      year: yyyy,\n      month: mm,\n      day: dd\n    };\n  }\n  if (validate) {\n    throw `invalid DA '${date}'`;\n  }\n\n  return undefined;\n}\n", "import * as util from './util.js';\n\n/**\n * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n * Throws an error if an implicit element is supplied\n * @param dataSet\n * @param element\n * @returns {*}\n */\nexport default function explicitElementToString (dataSet, element) {\n  if (dataSet === undefined || element === undefined) {\n    throw 'dicomParser.explicitElementToString: missing required parameters';\n  }\n  if (element.vr === undefined) {\n    throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n  }\n  var vr = element.vr;\n  var tag = element.tag;\n\n  var textResult;\n\n  function multiElementToString (numItems, func) {\n    var result = '';\n\n    for (var i = 0; i < numItems; i++) {\n      if (i !== 0) {\n        result += '/';\n      }\n      result += func.call(dataSet, tag, i).toString();\n    }\n\n    return result;\n  }\n\n  if (util.isStringVr(vr) === true) {\n    textResult = dataSet.string(tag);\n  } else if (vr === 'AT') {\n    var num = dataSet.uint32(tag);\n\n    if (num === undefined) {\n      return undefined;\n    }\n    if (num < 0) {\n      num = 0xFFFFFFFF + num + 1;\n    }\n\n    return `x${num.toString(16).toUpperCase()}`;\n  } else if (vr === 'US') {\n    textResult = multiElementToString(element.length / 2, dataSet.uint16);\n  } else if (vr === 'SS') {\n    textResult = multiElementToString(element.length / 2, dataSet.int16);\n  } else if (vr === 'UL') {\n    textResult = multiElementToString(element.length / 4, dataSet.uint32);\n  } else if (vr === 'SL') {\n    textResult = multiElementToString(element.length / 4, dataSet.int32);\n  } else if (vr === 'FD') {\n    textResult = multiElementToString(element.length / 8, dataSet.double);\n  } else if (vr === 'FL') {\n    textResult = multiElementToString(element.length / 4, dataSet.float);\n  }\n\n  return textResult;\n}\n", "import explicitElementToString from './elementToString.js';\nimport * as util from './util.js';\n\n/**\n * converts an explicit dataSet to a javascript object\n * @param dataSet\n * @param options\n */\nexport default function explicitDataSetToJS (dataSet, options) {\n  if (dataSet === undefined) {\n    throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n  }\n\n  options = options || {\n    omitPrivateAttibutes: true, // true if private elements should be omitted\n    maxElementLength: 128 // maximum element length to try and convert to string format\n  };\n\n  var result = {\n\n  };\n\n  for (var tag in dataSet.elements) {\n    var element = dataSet.elements[tag];\n\n    // skip this element if it a private element and our options specify that we should\n    if (options.omitPrivateAttibutes === true && util.isPrivateTag(tag)) {\n      continue;\n    }\n\n    if (element.items) {\n      // handle sequences\n      var sequenceItems = [];\n\n      for (var i = 0; i < element.items.length; i++) {\n        sequenceItems.push(explicitDataSetToJS(element.items[i].dataSet, options));\n      }\n      result[tag] = sequenceItems;\n    } else {\n      var asString;\n\n      asString = undefined;\n      if (element.length < options.maxElementLength) {\n        asString = explicitElementToString(dataSet, element);\n      }\n\n      if (asString !== undefined) {\n        result[tag] = asString;\n      } else {\n        result[tag] = {\n          dataOffset: element.dataOffset,\n          length: element.length\n        };\n      }\n    }\n  }\n\n  return result;\n}\n", "// Each JPEG image has an end of image marker 0xFFD9\nfunction isEndOfImageMarker (dataSet, position) {\n  return (dataSet.byteArray[position] === 0xFF &&\n  dataSet.byteArray[position + 1] === 0xD9);\n}\n\nfunction isFragmentEndOfImage (dataSet, pixelDataElement, fragmentIndex) {\n  var fragment = pixelDataElement.fragments[fragmentIndex];\n  // Need to check the last two bytes and the last three bytes for marker since odd length\n  // fragments are zero padded\n\n  if (isEndOfImageMarker(dataSet, fragment.position + fragment.length - 2) ||\n    isEndOfImageMarker(dataSet, fragment.position + fragment.length - 3)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction findLastImageFrameFragmentIndex (dataSet, pixelDataElement, startFragment) {\n  for (var fragmentIndex = startFragment; fragmentIndex < pixelDataElement.fragments.length; fragmentIndex++) {\n    if (isFragmentEndOfImage(dataSet, pixelDataElement, fragmentIndex)) {\n      return fragmentIndex;\n    }\n  }\n}\n\n/**\n * Creates a basic offset table by scanning fragments for JPEG start of image and end Of Image markers\n * @param {object} dataSet - the parsed dicom dataset\n * @param {object} pixelDataElement - the pixel data element\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {Array} basic offset table (array of offsets to beginning of each frame)\n */\nexport default function createJPEGBasicOffsetTable (dataSet, pixelDataElement, fragments) {\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010\\'';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (fragments && fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'fragments\\' must not be zero length';\n  }\n\n  // Default values\n  fragments = fragments || pixelDataElement.fragments;\n\n  var basicOffsetTable = [];\n\n  var startFragmentIndex = 0;\n\n  while (true) {\n    // Add the offset for the start fragment\n    basicOffsetTable.push(pixelDataElement.fragments[startFragmentIndex].offset);\n    var endFragmentIndex = findLastImageFrameFragmentIndex(dataSet, pixelDataElement, startFragmentIndex);\n\n    if (endFragmentIndex === undefined || endFragmentIndex === pixelDataElement.fragments.length - 1) {\n      return basicOffsetTable;\n    }\n    startFragmentIndex = endFragmentIndex + 1;\n  }\n}\n", "/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads a tag (group number and element number) from a byteStream\n * @param byteStream the byte stream to read from\n * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n * and eeee is the lower case hex value of the element number\n */\nexport default function readTag (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readTag: missing required parameter \\'byteStream\\'';\n  }\n\n  const groupNumber = byteStream.readUint16() * 256 * 256;\n  const elementNumber = byteStream.readUint16();\n  const tag = `x${(`00000000${(groupNumber + elementNumber).toString(16)}`).substr(-8)}`;\n\n  return tag;\n}\n", "import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads an encapsulated pixel data element and adds an array of fragments to the element\n * containing the offset and length of each fragment and any offsets from the basic offset\n * table\n * @param byteStream\n * @param element\n */\nexport default function findEndOfEncapsulatedElement (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'element\\'';\n  }\n\n  element.encapsulatedPixelData = true;\n  element.basicOffsetTable = [];\n  element.fragments = [];\n\n  const basicOffsetTableItemTag = readTag(byteStream);\n\n  if (basicOffsetTableItemTag !== 'xfffee000') {\n    throw 'dicomParser.findEndOfEncapsulatedElement: basic offset table not found';\n  }\n\n  const basicOffsetTableItemlength = byteStream.readUint32();\n  const numFragments = basicOffsetTableItemlength / 4;\n\n  // Bad idea to not include the basic offset table, as it means writing the data out is inconsistent with reading it\n  // but leave this for now.  To fix later.\n  for (let i = 0; i < numFragments; i++) {\n    const offset = byteStream.readUint32();\n\n    element.basicOffsetTable.push(offset);\n  }\n\n  const baseOffset = byteStream.position;\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const tag = readTag(byteStream);\n    let length = byteStream.readUint32();\n\n    if (tag === 'xfffee0dd') {\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    } else if (tag === 'xfffee000') {\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n    } else {\n      if (warnings) {\n        warnings.push(`unexpected tag ${tag} while searching for end of pixel data element with undefined length`);\n      }\n\n      if (length > byteStream.byteArray.length - byteStream.position) {\n        // fix length\n        length = byteStream.byteArray.length - byteStream.position;\n      }\n\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    }\n\n    byteStream.seek(length);\n  }\n\n  if (warnings) {\n    warnings.push(`pixel data element ${element.tag} missing sequence delimiter tag xfffee0dd`);\n  }\n}\n", "/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic number for the Sequence Delimitation\n * Item item and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findAndSetUNElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findAndSetUNElementLength: missing required parameter \\'byteStream\\'';\n  }\n\n  // group, element, length\n  const itemDelimitationItemLength = 8;\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe0dd) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32();\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end\n  // of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n", "/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\n/**\n * Reads a string of 8-bit characters from an array of bytes and advances\n * the position by length bytes.  A null terminator will end the string\n * but will not affect advancement of the position.  Trailing and leading\n * spaces are preserved (not trimmed)\n * @param byteArray the byteArray to read from\n * @param position the position in the byte array to read from\n * @param length the maximum number of bytes to parse\n * @returns {string} the parsed string\n * @throws error if buffer overread would occur\n * @access private\n */\nexport function readFixedString (byteArray, position, length) {\n  if (length < 0) {\n    throw 'dicomParser.readFixedString - length cannot be less than 0';\n  }\n\n  if (position + length > byteArray.length) {\n    throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n  }\n\n  var result = '';\n  var byte;\n\n  for (var i = 0; i < length; i++) {\n    byte = byteArray[position + i];\n    if (byte === 0) {\n      position += length;\n\n      return result;\n    }\n    result += String.fromCharCode(byte);\n  }\n\n  return result;\n}\n", "import { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\n\nfunction getByteArrayParser (element, defaultParser) {\n  return (element.parser !== undefined ? element.parser : defaultParser);\n}\n\n/**\n * Constructs a new DataSet given byteArray and collection of elements\n * @param byteArrayParser\n * @param byteArray\n * @param elements\n * @constructor\n */\nexport default class DataSet {\n  constructor (byteArrayParser, byteArray, elements) {\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.elements = elements;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  uint16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  int16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  uint32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  int32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n  float (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n  double (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n  numStringValues (tag) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n      var numMatching = fixedString.match(/\\\\/g);\n\n      if (numMatching === null) {\n        return 1;\n      }\n\n      return numMatching.length + 1;\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n  string (tag, index) {\n    var element = this.elements[tag];\n\n    if( element && element.Value ) return element.Value;\n    \n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n        // trim trailing spaces\n\n        return values[index].trim();\n      }\n      // trim trailing spaces\n      return fixedString.trim();\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n  text (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n\n\n        return values[index].replace(/ +$/, '');\n      }\n\n      return fixedString.replace(/ +$/, '');\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n  floatString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseFloat(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n  intString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseInt(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses an element tag according to the 'AT' VR definition (VR=AT).\n     * @param {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {String} A string representation of a data element tag or undefined if the field is not present or data is not long enough.\n     */\n  attributeTag (tag) {\n    const element = this.elements[tag];\n\n    if (element && element.length === 4) {\n      const parser = getByteArrayParser(element, this.byteArrayParser).readUint16;\n      const bytes = this.byteArray;\n      const offset = element.dataOffset;\n\n      return `x${(`00000000${(parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)}`).substr(-8)}`;\n    }\n\n    return undefined;\n  }\n}\n", "/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic numbers for the item delimitation item\n * and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findItemDelimitationItemAndSetElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const itemDelimitationItemLength = 8; // group, element, length\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe00d) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32(); // the length\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n", "import findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\nimport { isPrivateTag } from './util/util.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst isSequence = (element, byteStream) => {\n  if (element.vr !== undefined) {\n    return (element.vr === 'SQ');\n  }\n\n  if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    // Item start tag (fffe,e000) or sequence delimiter (i.e. end of sequence) tag (0fffe,e0dd)\n    // These are the tags that could potentially be found directly after a sequence start tag (the delimiter\n    // is found in the case of an empty sequence). This is not 100% safe because a non-sequence item\n    // could have data that has these bytes, but this is how to do it without a data dictionary.\n    return (nextTag === 'xfffee000') || (nextTag === 'xfffee0dd');\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR');\n\n  return false;\n};\n\nexport default function readDicomElementImplicit (byteStream, untilTag, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const tag = readTag(byteStream);\n\n  const element = {\n    tag,\n    vr: (vrCallback !== undefined ? vrCallback(tag) : undefined),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // always parse sequences with undefined lengths, since there's no other way to know how long they are.\n  if (isSequence(element, byteStream) && (!isPrivateTag(element.tag) || element.hadUndefinedLength)) {\n    // parse the sequence\n    readSequenceItemsImplicit(byteStream, element, vrCallback);\n\n    if (isPrivateTag(element.tag)) {\n      element.items = undefined;\n    }\n\n    return element;\n  }\n\n  // if element is not a sequence and has undefined length, we have to\n  // scan the data for a magic number to figure out when it ends.\n  if (element.hadUndefinedLength) {\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  // non sequence element with known length, skip over the data part\n  byteStream.seek(element.length);\n\n  return element;\n}\n", "import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads the tag and length of a sequence item and returns them as an object with the following properties\n *  tag : string for the tag of this element in the format xggggeeee\n *  length: the number of bytes in this item or 4294967295 if undefined\n *  dataOffset: the offset into the byteStream of the data for this item\n * @param byteStream the byte\n * @returns {{tag: string, length: integer, dataOffset: integer}}\n */\nexport default function readSequenceItem (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItem: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.tag !== 'xfffee000') {\n    throw `dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset ${byteStream.position}`;\n  }\n\n  return element;\n}\n", "import DataSet from './dataSet.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetImplicitUndefinedLength (byteStream, vrCallback) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementImplicit(byteStream, undefined, vrCallback);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemImplicit (byteStream, vrCallback) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream, vrCallback);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length, { vrCallback });\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthImplicit (byteStream, element, vrCallback) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence delimiter in sequence of undefined length');\n  element.length = byteStream.byteArray.length - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthImplicit (byteStream, element, vrCallback) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n}\n\n/**\n * Reads sequence items for an element in an implicit little endian byte stream\n * @param byteStream the implicit little endian byte stream\n * @param element the element to read the sequence items for\n * @param vrCallback an optional method that returns a VR string given a tag\n */\nexport default function readSequenceItemsImplicit (byteStream, element, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthImplicit(byteStream, element, vrCallback);\n  } else {\n    readSQElementKnownLengthImplicit(byteStream, element, vrCallback);\n  }\n}\n", "import DataSet from './dataSet.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetExplicitUndefinedLength (byteStream, warnings) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementExplicit(byteStream, warnings);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  warnings.push('eof encountered before finding item delimiter tag while reading sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemExplicit (byteStream, warnings) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthExplicit (byteStream, element, warnings) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n\n  warnings.push('eof encountered before finding sequence delimitation tag while reading sequence of undefined length');\n  element.length = byteStream.position - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthExplicit (byteStream, element, warnings) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n}\n\nexport default function readSequenceItemsExplicit (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthExplicit(byteStream, element, warnings);\n  } else {\n    readSQElementKnownLengthExplicit(byteStream, element, warnings);\n  }\n}\n", "import findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport readSequenceItemsImplicit  from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst getDataLengthSizeInBytesForVR = (vr) => {\n  if (vr === 'OB' ||\n      vr === 'OD' ||\n      vr === 'OL' ||\n      vr === 'OW' ||\n      vr === 'SQ' ||\n      vr === 'OF' ||\n      vr === 'UC' ||\n      vr === 'UR' ||\n      vr === 'UT' ||\n      vr === 'UN') {\n    return 4;\n  }\n\n  return 2;\n};\n\nexport default function readDicomElementExplicit (byteStream, warnings, untilTag) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    vr: byteStream.readFixedString(2)\n    // length set below based on VR\n    // dataOffset set below based on VR and size of length\n  };\n\n  const dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n\n  if (dataLengthSizeBytes === 2) {\n    element.length = byteStream.readUint16();\n    element.dataOffset = byteStream.position;\n  } else {\n    byteStream.seek(2);\n    element.length = byteStream.readUint32();\n    element.dataOffset = byteStream.position;\n  }\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // if VR is SQ, parse the sequence items\n  if (element.vr === 'SQ') {\n    readSequenceItemsExplicit(byteStream, element, warnings);\n\n    return element;\n  }\n\n  if (element.length === 4294967295) {\n    if (element.tag === 'x7fe00010') {\n      findEndOfEncapsulatedElement(byteStream, element, warnings);\n\n      return element;\n    } else if (element.vr === 'UN') {\n      readSequenceItemsImplicit(byteStream, element);\n\n      return element;\n    }\n\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  byteStream.seek(element.length);\n\n  return element;\n}\n", "import readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\n\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\n/**\n * reads an explicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetExplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetExplicit: invalid value for parameter \\'maxP osition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n\n  if (byteStream.position > maxPosition) {\n    throw 'dicomParser:parseDicomDataSetExplicit: buffer overrun';\n  }\n}\n\n/**\n * reads an implicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetImplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetImplicit: invalid value for parameter \\'maxPosition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementImplicit(byteStream, options.untilTag, options.vrCallback);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n}\n", "/**\n * Creates a new byteArray of the same type (Uint8Array or Buffer) of the specified length.\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param length number of bytes of the Byte Array\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function alloc (byteArray, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return Buffer.alloc(length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(length);\n  }\n  throw 'dicomParser.alloc: unknown type for byteArray';\n}\n", "export default '1.8.12';\n", "/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\nexport default {\n\n  /**\n     *\n     * Parses an unsigned int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] << 8) + byteArray[position + 1];\n  },\n\n  /**\n     *\n     * Parses a signed int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n    var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n    // fix sign\n\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n  /**\n     * Parses an unsigned int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                          byteArray[position + 1]) +\n                                          byteArray[position + 2]) +\n                                          byteArray[position + 3]);\n\n    return uint32;\n  },\n\n  /**\n     * Parses a signed int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    var int32 = ((byteArray[position] << 24) +\n                     (byteArray[position + 1] << 16) +\n                     (byteArray[position + 2] << 8) +\n                      byteArray[position + 3]);\n\n    return int32;\n  },\n\n  /**\n     * Parses 32-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 32-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[3] = byteArray[position];\n    byteArrayForParsingFloat[2] = byteArray[position + 1];\n    byteArrayForParsingFloat[1] = byteArray[position + 2];\n    byteArrayForParsingFloat[0] = byteArray[position + 3];\n    var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  },\n\n  /**\n     * Parses 64-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 64-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[7] = byteArray[position];\n    byteArrayForParsingFloat[6] = byteArray[position + 1];\n    byteArrayForParsingFloat[5] = byteArray[position + 2];\n    byteArrayForParsingFloat[4] = byteArray[position + 3];\n    byteArrayForParsingFloat[3] = byteArray[position + 4];\n    byteArrayForParsingFloat[2] = byteArray[position + 5];\n    byteArrayForParsingFloat[1] = byteArray[position + 6];\n    byteArrayForParsingFloat[0] = byteArray[position + 7];\n    var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  }\n};\n", "/**\n *\n * Internal helper function to create a shared copy of a byteArray\n *\n */\n\n/**\n * Creates a view of the underlying byteArray.  The view is of the same type as the byteArray (e.g.\n * Uint8Array or Buffer) and shares the same underlying memory (changing one changes the other)\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param byteOffset offset into the underlying byteArray to create the view of\n * @param length number of bytes in the view\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function sharedCopy (byteArray, byteOffset, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return byteArray.slice(byteOffset, byteOffset + length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(byteArray.buffer, byteArray.byteOffset + byteOffset, length);\n  }\n  throw 'dicomParser.from: unknown type for byteArray';\n}\n", "import sharedCopy from './sharedCopy.js';\nimport { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\n\n/**\n * Constructor for ByteStream objects.\n * @param byteArrayParser a parser for parsing the byte array\n * @param byteArray a Uint8Array containing the byte stream\n * @param position (optional) the position to start reading from.  0 if not specified\n * @constructor\n * @throws will throw an error if the byteArrayParser parameter is not present\n * @throws will throw an error if the byteArray parameter is not present or invalid\n * @throws will throw an error if the position parameter is not inside the byte array\n */\nexport default class ByteStream {\n  constructor (byteArrayParser, byteArray, position) {\n    if (byteArrayParser === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArrayParser\\'';\n    }\n    if (byteArray === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArray\\'';\n    }\n    if ((byteArray instanceof Uint8Array) === false &&\n          ((typeof Buffer === 'undefined') ||\n          (byteArray instanceof Buffer) === false)) {\n      throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer';\n    }\n    if (position < 0) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be less than 0';\n    }\n    if (position >= byteArray.length) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be greater than or equal to \\'byteArray\\' length';\n    }\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.position = position ? position : 0;\n    this.warnings = []; // array of string warnings encountered while parsing\n  }\n\n  /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n  seek (offset) {\n    if (this.position + offset < 0) {\n      throw 'dicomParser.ByteStream.prototype.seek: cannot seek to position < 0';\n    }\n    this.position += offset;\n  }\n\n  /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n  readByteStream (numBytes) {\n    if (this.position + numBytes > this.byteArray.length) {\n      throw 'dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread';\n    }\n    var byteArrayView = sharedCopy(this.byteArray, this.position, numBytes);\n\n    this.position += numBytes;\n\n    return new ByteStream(this.byteArrayParser, byteArrayView);\n  }\n\n  getSize() {\n    return this.byteArray.length;\n  }\n\n  /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n  readUint16 () {\n    var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n\n    this.position += 2;\n\n    return result;\n  }\n\n  /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n  readUint32 () {\n    var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n\n    this.position += 4;\n\n    return result;\n  }\n\n  /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n  readFixedString (length) {\n    var result = readFixedString(this.byteArray, this.position, length);\n\n    this.position += length;\n\n    return result;\n  }\n}\n", "/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nexport default {\n\n  /**\n   *\n   * Parses an unsigned int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return byteArray[position] + (byteArray[position + 1] * 256);\n  },\n\n  /**\n   *\n   * Parses a signed int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed signed int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n\n    let int16 = byteArray[position] + (byteArray[position + 1] << 8);\n\n    // fix sign\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n\n  /**\n   * Parses an unsigned int 32 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] * 256) +\n           (byteArray[position + 2] * 256 * 256) +\n           (byteArray[position + 3] * 256 * 256 * 256));\n  },\n\n  /**\n * Parses a signed int 32 from a little-endian byte array\n *\n * @param byteArray the byte array to read from\n * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] << 8) +\n           (byteArray[position + 2] << 16) +\n           (byteArray[position + 3] << 24));\n  },\n\n  /**\n   * Parses 32-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 32-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n\n    const floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  },\n\n  /**\n   * Parses 64-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 64-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n    byteArrayForParsingFloat[4] = byteArray[position + 4];\n    byteArrayForParsingFloat[5] = byteArray[position + 5];\n    byteArrayForParsingFloat[6] = byteArray[position + 6];\n    byteArrayForParsingFloat[7] = byteArray[position + 7];\n\n    const floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  }\n};\n", "import ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n * argument is supplied and it contains the untilTag property, parsing will stop once that\n * tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options Optional options values\n *    TransferSyntaxUID: String to specify a default raw transfer syntax UID.\n *        Use the LEI transfer syntax for raw files, or the provided one for SCP transfers.\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n *         elements successfully parsed before the error.\n */\n\nexport default function readPart10Header (byteArray, options = {}) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.readPart10Header: missing required parameter \\'byteArray\\'';\n  }\n\n  const { TransferSyntaxUID } = options;\n  const littleEndianByteStream = new ByteStream(littleEndianByteArrayParser, byteArray);\n\n  function readPrefix() {\n    if (littleEndianByteStream.getSize() <= 132 && TransferSyntaxUID) {\n      return false;\n    }\n    littleEndianByteStream.seek(128);\n    const prefix = littleEndianByteStream.readFixedString(4);\n\n    if (prefix !== 'DICM') {\n      const { TransferSyntaxUID } = options || {};\n      if (!TransferSyntaxUID) {\n        throw 'dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file.';\n      }\n      littleEndianByteStream.seek(0);\n      return false;\n    }\n    return true;\n  }\n\n  // main function here\n  function readTheHeader() {\n    // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n    // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n    const isPart10 = readPrefix();\n\n    const warnings = [];\n    const elements = {};\n\n    if (!isPart10) {\n      littleEndianByteStream.position = 0;\n      const metaHeaderDataSet = {\n        elements: { x00020010: { tag: 'x00020010', vr: 'UI', Value: TransferSyntaxUID } },\n        warnings,\n      };\n      // console.log('Returning metaHeaderDataSet', metaHeaderDataSet);\n      return metaHeaderDataSet;\n    }\n\n    while (littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n      const position = littleEndianByteStream.position;\n      const element = readDicomElementExplicit(littleEndianByteStream, warnings);\n\n      if (element.tag > 'x0002ffff') {\n        littleEndianByteStream.position = position;\n        break;\n      }\n      // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n      // and this parser will be needed later if the meta header values are to be read.\n      element.parser = littleEndianByteArrayParser;\n      elements[element.tag] = element;\n    }\n\n    const metaHeaderDataSet = new DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n\n    metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n    metaHeaderDataSet.position = littleEndianByteStream.position;\n\n    return metaHeaderDataSet;\n  }\n\n  // This is where we actually start parsing\n  return readTheHeader();\n}\n", "import alloc from './alloc.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readPart10Header from './readPart10Header.js';\nimport sharedCopy from './sharedCopy.js';\nimport * as byteArrayParser from './byteArrayParser.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n// LEE (Little Endian Explicit) is the transfer syntax used in dimse operations when there is a split\n// between the header and data.\nconst LEE = '1.2.840.10008.1.2.1';\n\n// LEI (Little Endian Implicit) is the transfer syntax in raw files\nconst LEI = '1.2.840.10008.1.2';\n\n// BEI (Big Endian Implicit) is deprecated, but needs special parse handling\nconst BEI = '1.2.840.10008.1.2.2';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.\n * If the options argument is supplied and it contains the untilTag property, parsing\n * will stop once that tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a\n *         property dataSet with the elements successfully parsed before the error.\n */\n\nexport default function parseDicom(byteArray, options = {}) {\n  if (byteArray === undefined) {\n    throw new Error('dicomParser.parseDicom: missing required parameter \\'byteArray\\'');\n  }\n\n  \n  const readTransferSyntax = (metaHeaderDataSet) => {\n    if (metaHeaderDataSet.elements.x00020010 === undefined) {\n      throw new Error('dicomParser.parseDicom: missing required meta header attribute 0002,0010');\n    }\n\n    const transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n    return transferSyntaxElement && transferSyntaxElement.Value ||\n      byteArrayParser.readFixedString(byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n  }\n\n  function isExplicit(transferSyntax) {\n    // implicit little endian\n    if (transferSyntax === '1.2.840.10008.1.2') {\n      return false;\n    }\n\n    // all other transfer syntaxes should be explicit\n    return true;\n  }\n\n  function getDataSetByteStream(transferSyntax, position) {\n    // Detect whether we are inside a browser or Node.js\n    const isNode = (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');\n\n    if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n      // if an infalter callback is registered, use it\n      if (options && options.inflater) {\n        const fullByteArrayCallback = options.inflater(byteArray, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayCallback, 0);\n      }\n      // if running on node, use the zlib library to inflate\n      // http://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js\n      else if (isNode === true) {\n        // inflate it\n        const zlib = require('zlib');\n        const deflatedBuffer = sharedCopy(byteArray, position, byteArray.length - position);\n        const inflatedBuffer = zlib.inflateRawSync(deflatedBuffer);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArrayBuffer = alloc(byteArray, inflatedBuffer.length + position);\n\n        byteArray.copy(fullByteArrayBuffer, 0, 0, position);\n        inflatedBuffer.copy(fullByteArrayBuffer, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayBuffer, 0);\n      }\n      // if pako is defined - use it.  This is the web browser path\n      // https://github.com/nodeca/pako\n      else if (typeof pako !== 'undefined') {\n        // inflate it\n        const deflated = byteArray.slice(position);\n        const inflated = pako.inflateRaw(deflated);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArray = alloc(byteArray, inflated.length + position);\n\n        fullByteArray.set(byteArray.slice(0, position), 0);\n        fullByteArray.set(inflated, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArray, 0);\n      }\n\n      // throw exception since no inflater is available\n      throw 'dicomParser.parseDicom: no inflater available to handle deflate transfer syntax';\n    }\n\n    // explicit big endian\n    if (transferSyntax === BEI) {\n      return new ByteStream(bigEndianByteArrayParser, byteArray, position);\n    }\n\n    // all other transfer syntaxes are little endian; only the pixel encoding differs\n    // make a new stream so the metaheader warnings don't come along for the ride\n    return new ByteStream(littleEndianByteArrayParser, byteArray, position);\n  }\n\n  function mergeDataSets(metaHeaderDataSet, instanceDataSet) {\n    for (const propertyName in metaHeaderDataSet.elements) {\n      if (metaHeaderDataSet.elements.hasOwnProperty(propertyName)) {\n        instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n      }\n    }\n\n    if (metaHeaderDataSet.warnings !== undefined) {\n      instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n    }\n\n    return instanceDataSet;\n  }\n\n  function readDataSet(metaHeaderDataSet) {\n    const transferSyntax = readTransferSyntax(metaHeaderDataSet);\n    const explicit = isExplicit(transferSyntax);\n    const dataSetByteStream = getDataSetByteStream(transferSyntax, metaHeaderDataSet.position);\n\n    const elements = {};\n    const dataSet = new DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n\n    dataSet.warnings = dataSetByteStream.warnings;\n\n    try {\n      if (explicit) {\n        parseDicomDataSet.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      } else {\n        parseDicomDataSet.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      }\n    } catch (e) {\n      const ex = {\n        exception: e,\n        dataSet\n      };\n\n      throw ex;\n    }\n\n    return dataSet;\n  }\n\n  // main function here\n  function parseTheByteStream() {\n    const metaHeaderDataSet = readPart10Header(byteArray, options);\n    const dataSet = readDataSet(metaHeaderDataSet);\n\n    return mergeDataSets(metaHeaderDataSet, dataSet);\n  }\n\n  // This is where we actually start parsing\n  return parseTheByteStream();\n}\n\nexport { LEI, LEE, BEI };", "import alloc from './alloc.js';\nimport ByteStream from './byteStream.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport sharedCopy from './sharedCopy.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst calculateBufferSize = (fragments, startFragment, numFragments) => {\n  let bufferSize = 0;\n\n  for (let i = startFragment; i < startFragment + numFragments; i++) {\n    bufferSize += fragments[i].length;\n  }\n\n  return bufferSize;\n};\n\n/**\n * Returns the encapsulated pixel data from the specified fragments.  Use this function when you know\n * the fragments you want to extract data from.  See\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the fragment data from\n * @param startFragmentIndex - zero based index of the first fragment to extract from\n * @param [numFragments] - the number of fragments to extract from, default is 1\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} byte array with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelDataFromFragments (dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments) {\n  // default values\n  numFragments = numFragments || 1;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // check parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'startFragmentIndex\\'';\n  }\n  if (numFragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'numFragments\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (startFragmentIndex < 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be >= 0';\n  }\n  if (startFragmentIndex >= pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be < number of fragments';\n  }\n  if (numFragments < 1) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'numFragments\\' must be > 0';\n  }\n  if (startFragmentIndex + numFragments > pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragment\\' + \\'numFragments\\' < number of fragments';\n  }\n\n  // create byte stream on the data for this pixel data element\n  const byteStream = new ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n\n  // seek past the basic offset table (no need to parse it again since we already have)\n  const basicOffsetTable = readSequenceItem(byteStream);\n\n  if (basicOffsetTable.tag !== 'xfffee000') {\n    throw 'dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000';\n  }\n\n  byteStream.seek(basicOffsetTable.length);\n\n  const fragmentZeroPosition = byteStream.position;\n\n  // tag + length\n  const fragmentHeaderSize = 8;\n\n  // if there is only one fragment, return a view on this array to avoid copying\n  if (numFragments === 1) {\n    return sharedCopy(byteStream.byteArray, fragmentZeroPosition + fragments[startFragmentIndex].offset + fragmentHeaderSize, fragments[startFragmentIndex].length);\n  }\n\n  // more than one fragment, combine all of the fragments into one buffer\n  const bufferSize = calculateBufferSize(fragments, startFragmentIndex, numFragments);\n  const pixelData = alloc(byteStream.byteArray, bufferSize);\n  let pixelDataIndex = 0;\n\n  for (let i = startFragmentIndex; i < startFragmentIndex + numFragments; i++) {\n    let fragmentOffset = fragmentZeroPosition + fragments[i].offset + fragmentHeaderSize;\n\n    for (let j = 0; j < fragments[i].length; j++) {\n      pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n    }\n  }\n\n  return pixelData;\n}\n", "import readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst findFragmentIndexWithOffset = (fragments, offset) => {\n  for (let i = 0; i < fragments.length; i++) {\n    if (fragments[i].offset === offset) {\n      return i;\n    }\n  }\n};\n\nconst calculateNumberOfFragmentsForFrame = (frameIndex, basicOffsetTable, fragments, startFragmentIndex) => {\n  // special case for last frame\n  if (frameIndex === basicOffsetTable.length - 1) {\n    return fragments.length - startFragmentIndex;\n  }\n\n  // iterate through each fragment looking for the one matching the offset for the next frame\n  const nextFrameOffset = basicOffsetTable[frameIndex + 1];\n\n  for (let i = startFragmentIndex + 1; i < fragments.length; i++) {\n    if (fragments[i].offset === nextFrameOffset) {\n      return i - startFragmentIndex;\n    }\n  }\n\n  throw 'dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table';\n};\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element that has a non\n * empty basic offset table.  Note that this function will fail if the basic offset table is empty - in that\n * case you need to determine which fragments map to which frames and read them using\n * readEncapsulatedPixelDataFromFragments().  Also see the function createJEPGBasicOffsetTable() to see\n * how a basic offset table can be created for JPEG images\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frameIndex - the zero based frame index\n * @param [basicOffsetTable] - optional array of starting offsets for frames\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedImageFrame (dataSet, pixelDataElement, frameIndex, basicOffsetTable, fragments) {\n  // default parameters\n  basicOffsetTable = basicOffsetTable || pixelDataElement.basicOffsetTable;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (frameIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'frameIndex\\'';\n  }\n  if (basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' does not have basicOffsetTable';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have undefined length';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have fragments';\n  }\n  if (basicOffsetTable.length === 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries';\n  }\n  if (frameIndex < 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be >= 0';\n  }\n  if (frameIndex >= basicOffsetTable.length) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be < basicOffsetTable.length';\n  }\n\n  // find starting fragment based on the offset for the frame in the basic offset table\n  const offset = basicOffsetTable[frameIndex];\n  const startFragmentIndex = findFragmentIndexWithOffset(fragments, offset);\n\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry';\n  }\n\n  // calculate the number of fragments for this frame\n  const numFragments = calculateNumberOfFragmentsForFrame(frameIndex, basicOffsetTable, fragments, startFragmentIndex);\n\n  // now extract the frame from the fragments\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments);\n}\n", "import readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nlet deprecatedNoticeLogged = false;\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element.  If no basic offset\n * table is present, it assumes that all fragments are for one frame.  Note that this assumption/logic is not\n * valid for multi-frame instances so this function has been deprecated and will eventually be removed.  Code\n * should be updated to use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n *\n * @deprecated since version 1.6 - use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frame - the zero based frame index\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelData (dataSet, pixelDataElement, frame) {\n  if (!deprecatedNoticeLogged) {\n    deprecatedNoticeLogged = true;\n\n    if (console && console.log) {\n      console.log('WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated');\n    }\n  }\n\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'element\\'';\n  }\n  if (frame === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'frame\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (frame < 0) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'frame\\' must be >= 0';\n  }\n\n  // If the basic offset table is not empty, we can extract the frame\n  if (pixelDataElement.basicOffsetTable.length !== 0) {\n    return readEncapsulatedImageFrame(dataSet, pixelDataElement, frame);\n  }\n\n  // No basic offset table, assume all fragments are for one frame - NOTE that this is NOT a valid\n  // assumption but is the original behavior so we are keeping it for now\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, 0, pixelDataElement.fragments.length);\n}\n", "import {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable\n} from './util/index.js';\n\nimport { parseDicomDataSetExplicit, parseDicomDataSetImplicit } from './parseDicomDataSet.js';\nimport { readFixedString } from './byteArrayParser.js';\n\nimport alloc from './alloc.js';\nimport version from './version.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport sharedCopy from './sharedCopy.js';\nimport DataSet from './dataSet.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport parseDicom, { LEI, LEE } from './parseDicom.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelData from './readEncapsulatedPixelData.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\nimport readPart10Header from './readPart10Header.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\n\nconst dicomParser = {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable,\n  parseDicomDataSetExplicit,\n  parseDicomDataSetImplicit,\n  readFixedString,\n  alloc,\n  version,\n  bigEndianByteArrayParser,\n  ByteStream,\n  sharedCopy,\n  DataSet,\n  findAndSetUNElementLength,\n  findEndOfEncapsulatedElement,\n  findItemDelimitationItemAndSetElementLength,\n  littleEndianByteArrayParser,\n  parseDicom,\n  readDicomElementExplicit,\n  readDicomElementImplicit,\n  readEncapsulatedImageFrame,\n  readEncapsulatedPixelData,\n  readEncapsulatedPixelDataFromFragments,\n  readPart10Header,\n  readSequenceItemsExplicit,\n  readSequenceItemsImplicit,\n  readSequenceItem,\n  readTag,\n  LEI,\n  LEE,\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable,\n  parseDicomDataSetExplicit,\n  parseDicomDataSetImplicit,\n  readFixedString,\n  alloc,\n  version,\n  bigEndianByteArrayParser,\n  ByteStream,\n  sharedCopy,\n  DataSet,\n  findAndSetUNElementLength,\n  findEndOfEncapsulatedElement,\n  findItemDelimitationItemAndSetElementLength,\n  littleEndianByteArrayParser,\n  parseDicom,\n  readDicomElementExplicit,\n  readDicomElementImplicit,\n  readEncapsulatedImageFrame,\n  readEncapsulatedPixelData,\n  readEncapsulatedPixelDataFromFragments,\n  readPart10Header,\n  readSequenceItemsExplicit,\n  readSequenceItemsImplicit,\n  readSequenceItem,\n  readTag\n};\n\nexport default dicomParser;\n", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "require", "define", "amd", "this", "__WEBPACK_EXTERNAL_MODULE__0__", "stringVrs", "AE", "AS", "AT", "CS", "DA", "DS", "DT", "FL", "FD", "IS", "LO", "LT", "OB", "OD", "OF", "OW", "PN", "SH", "SL", "SQ", "SS", "ST", "TM", "UI", "UL", "UN", "UR", "US", "UT", "isStringVr", "vr", "isPrivateTag", "tag", "lastGroupDigit", "parseInt", "isNaN", "parsePN", "personName", "stringValues", "split", "familyName", "givenName", "middleName", "prefix", "suffix", "parseTM", "time", "validate", "length", "hh", "substring", "mm", "ss", "fractionalStr", "ffffff", "Math", "pow", "hours", "minutes", "seconds", "fractionalSeconds", "isValidDate", "d", "m", "y", "parseDA", "date", "yyyy", "dd", "year", "month", "day", "explicitElementToString", "dataSet", "element", "textResult", "multiElementToString", "numItems", "func", "result", "i", "call", "toString", "util", "string", "num", "uint32", "toUpperCase", "uint16", "int16", "int32", "explicitDataSetToJS", "options", "omitPrivateAttibutes", "maxElementLength", "elements", "items", "sequenceItems", "push", "asString", "dataOffset", "isEndOfImageMarker", "position", "byteArray", "findLastImageFrameFragmentIndex", "pixelDataElement", "startFragment", "fragmentIndex", "fragments", "fragment", "createJPEGBasicOffsetTable", "encapsulatedPixelData", "hadUndefinedLength", "basicOffsetTable", "startFragmentIndex", "offset", "endFragmentIndex", "readTag", "byteStream", "groupNumber", "readUint16", "elementNumber", "substr", "findEndOfEncapsulatedElement", "warnings", "numFragments", "readUint32", "baseOffset", "seek", "findAndSetUNElementLength", "maxPosition", "readFixedString", "byte", "String", "fromCharCode", "getByteArrayParser", "defaultParser", "parser", "DataSet", "a", "byteArrayParser", "index", "readInt16", "readInt32", "readFloat", "readDouble", "numMatching", "match", "Value", "fixedString", "trim", "replace", "value", "parseFloat", "bytes", "e", "t", "r", "findItemDelimitationItemAndSetElementLength", "isSequence", "nextTag", "readDicomElementImplicit", "untilTag", "vrCallback", "readSequenceItemsImplicit", "readSequenceItem", "readSequenceItemImplicit", "item", "parseDicomDataSet", "readSequenceItemExplicit", "readDicomElementExplicit", "readSequenceItemsExplicit", "getDataLengthSizeInBytesForVR", "parseDicomDataSetExplicit", "parseDicomDataSetImplicit", "alloc", "Buffer", "Uint8Array", "byteArrayForParsingFloat", "Float32Array", "buffer", "Float64Array", "sharedCopy", "byteOffset", "slice", "ByteStream", "numBytes", "byteArrayView", "readPart10Header", "TransferSyntaxUID", "littleEndianByteStream", "littleEndianByteArrayParser", "isPart10", "getSize", "readPrefix", "x00020010", "metaHeaderDataSet", "readTheHeader", "BEI", "parseDicom", "Error", "readTransferSyntax", "transferSyntaxElement", "readDataSet", "transferSyntax", "explicit", "dataSetByteStream", "isNode", "Object", "prototype", "process", "bigEndianByteArrayParser", "inflater", "fullByteArrayCallback", "zlib", "deflatedBuffer", "inflatedBuffer", "inflateRawSync", "fullByteArrayBuffer", "copy", "pako", "deflated", "inflated", "inflateRaw", "fullByteArray", "set", "exception", "instanceDataSet", "propertyName", "hasOwnProperty", "concat", "calculateBufferSize", "bufferSize", "readEncapsulatedPixelDataFromFragments", "fragmentZeroPosition", "pixelData", "pixelDataIndex", "fragmentOffset", "j", "findFragmentIndexWithOffset", "calculateNumberOfFragmentsForFrame", "frameIndex", "nextFrameOffset", "readEncapsulatedImageFrame", "deprecatedNoticeLogged", "readEncapsulatedPixelData", "frame", "console", "log", "dicomParser", "version", "LEI", "LEE", "installedModules", "__webpack_require__", "modules", "c", "name", "getter", "o", "defineProperty", "enumerable", "get", "Symbol", "toStringTag", "mode", "__esModule", "ns", "create", "key", "bind", "n", "object", "property", "p", "s", "moduleId", "l"]
}
