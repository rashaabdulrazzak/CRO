import {
  BaseVolumeViewport_default,
  DesiredOutputPrecision,
  EPSILON,
  ImageVolume_default,
  Settings,
  StackViewport_default,
  VideoViewport_default,
  VolumeViewport_default,
  VtkDataTypes,
  add,
  addImageSlicesToViewports_default,
  addVolumesToViewports_default,
  basis_default,
  cache_default,
  common_exports,
  constants_exports,
  convertMapperToNotSharedMapper,
  create,
  createVolumeActor_default,
  dot,
  enums_exports,
  eventTarget_default,
  getConfiguration,
  getEnabledElement,
  getEnabledElementByIds,
  getEnabledElementByViewportId,
  getEnabledElements,
  getRenderingEngine,
  getRenderingEngines,
  getWebWorkerManager,
  imageLoadPoolManager_default,
  imageLoader_exports,
  macro,
  mat3_exports,
  mat4_exports,
  metaData_exports,
  quantize_default,
  quat_exports,
  scale,
  sub,
  triggerEvent,
  utilities_exports,
  vec2_exports,
  vec3_exports,
  vec4_exports,
  volumeLoader_exports,
  vtkActor$1,
  vtkCellArray$1,
  vtkColorTransferFunction$1,
  vtkCubeSource$1,
  vtkDataArray$1,
  vtkImageData$1,
  vtkMapper$1,
  vtkMath,
  vtkMatrixBuilder,
  vtkPiecewiseFunction$1,
  vtkPlane$1,
  vtkPoints$1,
  vtkPolyData$1,
  vtkRenderer$1,
  vtkTexture$1,
  vtkXMLPolyDataReader$1,
  zip
} from "./chunk-F6SV5AHU.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/lodash.get/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.get/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    })();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get2(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get2;
  }
});

// node_modules/@cornerstonejs/tools/dist/esm/types/index.js
var require_types = __commonJS({
  "node_modules/@cornerstonejs/tools/dist/esm/types/index.js"() {
  }
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js
var annotationState_exports = {};
__export(annotationState_exports, {
  addAnnotation: () => addAnnotation,
  addChildAnnotation: () => addChildAnnotation,
  clearParentAnnotation: () => clearParentAnnotation,
  getAllAnnotations: () => getAllAnnotations,
  getAnnotation: () => getAnnotation,
  getAnnotationManager: () => getAnnotationManager,
  getAnnotations: () => getAnnotations,
  getChildAnnotations: () => getChildAnnotations,
  getNumberOfAnnotations: () => getNumberOfAnnotations,
  getParentAnnotation: () => getParentAnnotation,
  invalidateAnnotation: () => invalidateAnnotation,
  removeAllAnnotations: () => removeAllAnnotations,
  removeAnnotation: () => removeAnnotation,
  removeAnnotations: () => removeAnnotations,
  setAnnotationManager: () => setAnnotationManager
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js
var state_exports = {};
__export(state_exports, {
  triggerAnnotationAddedForElement: () => triggerAnnotationAddedForElement,
  triggerAnnotationAddedForFOR: () => triggerAnnotationAddedForFOR,
  triggerAnnotationCompleted: () => triggerAnnotationCompleted,
  triggerAnnotationModified: () => triggerAnnotationModified,
  triggerAnnotationRemoved: () => triggerAnnotationRemoved,
  triggerContourAnnotationCompleted: () => triggerContourAnnotationCompleted
});

// node_modules/@cornerstonejs/tools/dist/esm/enums/index.js
var enums_exports2 = {};
__export(enums_exports2, {
  AnnotationStyleStates: () => AnnotationStyleStates_default,
  ChangeTypes: () => ChangeTypes_default,
  Events: () => Events_default,
  KeyboardBindings: () => KeyboardBindings,
  MouseBindings: () => MouseBindings,
  SegmentationRepresentations: () => SegmentationRepresentations_default,
  StrategyCallbacks: () => StrategyCallbacks_default,
  Swipe: () => Swipe,
  ToolModes: () => ToolModes_default,
  WorkerTypes: () => WorkerTypes_default
});

// node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js
var MouseBindings;
(function(MouseBindings2) {
  MouseBindings2[MouseBindings2["Primary"] = 1] = "Primary";
  MouseBindings2[MouseBindings2["Secondary"] = 2] = "Secondary";
  MouseBindings2[MouseBindings2["Primary_And_Secondary"] = 3] = "Primary_And_Secondary";
  MouseBindings2[MouseBindings2["Auxiliary"] = 4] = "Auxiliary";
  MouseBindings2[MouseBindings2["Primary_And_Auxiliary"] = 5] = "Primary_And_Auxiliary";
  MouseBindings2[MouseBindings2["Secondary_And_Auxiliary"] = 6] = "Secondary_And_Auxiliary";
  MouseBindings2[MouseBindings2["Primary_And_Secondary_And_Auxiliary"] = 7] = "Primary_And_Secondary_And_Auxiliary";
  MouseBindings2[MouseBindings2["Fourth_Button"] = 8] = "Fourth_Button";
  MouseBindings2[MouseBindings2["Fifth_Button"] = 16] = "Fifth_Button";
  MouseBindings2[MouseBindings2["Wheel"] = 524288] = "Wheel";
  MouseBindings2[MouseBindings2["Wheel_Primary"] = 524289] = "Wheel_Primary";
})(MouseBindings || (MouseBindings = {}));
var KeyboardBindings;
(function(KeyboardBindings2) {
  KeyboardBindings2[KeyboardBindings2["Shift"] = 16] = "Shift";
  KeyboardBindings2[KeyboardBindings2["Ctrl"] = 17] = "Ctrl";
  KeyboardBindings2[KeyboardBindings2["Alt"] = 18] = "Alt";
  KeyboardBindings2[KeyboardBindings2["Meta"] = 91] = "Meta";
  KeyboardBindings2[KeyboardBindings2["ShiftCtrl"] = 1617] = "ShiftCtrl";
  KeyboardBindings2[KeyboardBindings2["ShiftAlt"] = 1618] = "ShiftAlt";
  KeyboardBindings2[KeyboardBindings2["ShiftMeta"] = 1691] = "ShiftMeta";
  KeyboardBindings2[KeyboardBindings2["CtrlAlt"] = 1718] = "CtrlAlt";
  KeyboardBindings2[KeyboardBindings2["CtrlMeta"] = 1791] = "CtrlMeta";
  KeyboardBindings2[KeyboardBindings2["AltMeta"] = 1891] = "AltMeta";
})(KeyboardBindings || (KeyboardBindings = {}));

// node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js
var ToolModes;
(function(ToolModes2) {
  ToolModes2["Active"] = "Active";
  ToolModes2["Passive"] = "Passive";
  ToolModes2["Enabled"] = "Enabled";
  ToolModes2["Disabled"] = "Disabled";
})(ToolModes || (ToolModes = {}));
var ToolModes_default = ToolModes;

// node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js
var AnnotationStyleStates;
(function(AnnotationStyleStates2) {
  AnnotationStyleStates2["Default"] = "";
  AnnotationStyleStates2["Highlighted"] = "Highlighted";
  AnnotationStyleStates2["Selected"] = "Selected";
  AnnotationStyleStates2["Locked"] = "Locked";
  AnnotationStyleStates2["AutoGenerated"] = "AutoGenerated";
})(AnnotationStyleStates || (AnnotationStyleStates = {}));
var AnnotationStyleStates_default = AnnotationStyleStates;

// node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js
var Events;
(function(Events4) {
  Events4["TOOL_ACTIVATED"] = "CORNERSTONE_TOOLS_TOOL_ACTIVATED";
  Events4["TOOLGROUP_VIEWPORT_ADDED"] = "CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED";
  Events4["TOOLGROUP_VIEWPORT_REMOVED"] = "CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED";
  Events4["TOOL_MODE_CHANGED"] = "CORNERSTONE_TOOLS_TOOL_MODE_CHANGED";
  Events4["CROSSHAIR_TOOL_CENTER_CHANGED"] = "CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED";
  Events4["VOLUMECROPPINGCONTROL_TOOL_CHANGED"] = "CORNERSTONE_TOOLS_VOLUMECROPPINGCONTROL_TOOL_CHANGED";
  Events4["VOLUMECROPPING_TOOL_CHANGED"] = "CORNERSTONE_TOOLS_VOLUMECROPPING_TOOL_CHANGED";
  Events4["STACK_PREFETCH_COMPLETE"] = "CORNERSTONE_TOOLS_STACK_PREFETCH_COMPLETE";
  Events4["ANNOTATION_ADDED"] = "CORNERSTONE_TOOLS_ANNOTATION_ADDED";
  Events4["ANNOTATION_COMPLETED"] = "CORNERSTONE_TOOLS_ANNOTATION_COMPLETED";
  Events4["ANNOTATION_MODIFIED"] = "CORNERSTONE_TOOLS_ANNOTATION_MODIFIED";
  Events4["ANNOTATION_REMOVED"] = "CORNERSTONE_TOOLS_ANNOTATION_REMOVED";
  Events4["ANNOTATION_SELECTION_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE";
  Events4["ANNOTATION_LOCK_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE";
  Events4["ANNOTATION_VISIBILITY_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE";
  Events4["ANNOTATION_RENDERED"] = "CORNERSTONE_TOOLS_ANNOTATION_RENDERED";
  Events4["ANNOTATION_CUT_MERGE_PROCESS_COMPLETED"] = "CORNERSTONE_TOOLS_ANNOTATION_CUT_MERGE_PROCESS_COMPLETED";
  Events4["ANNOTATION_INTERPOLATION_PROCESS_COMPLETED"] = "CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED";
  Events4["INTERPOLATED_ANNOTATIONS_REMOVED"] = "CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED";
  Events4["SEGMENTATION_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED";
  Events4["SEGMENTATION_RENDERED"] = "CORNERSTONE_TOOLS_SEGMENTATION_RENDERED";
  Events4["SEGMENTATION_REPRESENTATION_ADDED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED";
  Events4["SEGMENTATION_ADDED"] = "CORNERSTONE_TOOLS_SEGMENTATION_ADDED";
  Events4["SEGMENTATION_REPRESENTATION_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED";
  Events4["SEGMENTATION_REMOVED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REMOVED";
  Events4["SEGMENTATION_REPRESENTATION_REMOVED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED";
  Events4["SEGMENTATION_DATA_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED";
  Events4["HISTORY_UNDO"] = "CORNERSTONE_TOOLS_HISTORY_UNDO";
  Events4["HISTORY_REDO"] = "CORNERSTONE_TOOLS_HISTORY_REDO";
  Events4["KEY_DOWN"] = "CORNERSTONE_TOOLS_KEY_DOWN";
  Events4["KEY_UP"] = "CORNERSTONE_TOOLS_KEY_UP";
  Events4["MOUSE_DOWN"] = "CORNERSTONE_TOOLS_MOUSE_DOWN";
  Events4["MOUSE_UP"] = "CORNERSTONE_TOOLS_MOUSE_UP";
  Events4["MOUSE_DOWN_ACTIVATE"] = "CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE";
  Events4["MOUSE_DRAG"] = "CORNERSTONE_TOOLS_MOUSE_DRAG";
  Events4["MOUSE_MOVE"] = "CORNERSTONE_TOOLS_MOUSE_MOVE";
  Events4["MOUSE_CLICK"] = "CORNERSTONE_TOOLS_MOUSE_CLICK";
  Events4["MOUSE_DOUBLE_CLICK"] = "CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK";
  Events4["MOUSE_WHEEL"] = "CORNERSTONE_TOOLS_MOUSE_WHEEL";
  Events4["TOUCH_START"] = "CORNERSTONE_TOOLS_TOUCH_START";
  Events4["TOUCH_START_ACTIVATE"] = "CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE";
  Events4["TOUCH_PRESS"] = "CORNERSTONE_TOOLS_TOUCH_PRESS";
  Events4["TOUCH_DRAG"] = "CORNERSTONE_TOOLS_TOUCH_DRAG";
  Events4["TOUCH_END"] = "CORNERSTONE_TOOLS_TOUCH_END";
  Events4["TOUCH_TAP"] = "CORNERSTONE_TOOLS_TAP";
  Events4["TOUCH_SWIPE"] = "CORNERSTONE_TOOLS_SWIPE";
})(Events || (Events = {}));
var Events_default = Events;

// node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js
var SegmentationRepresentations;
(function(SegmentationRepresentations2) {
  SegmentationRepresentations2["Labelmap"] = "Labelmap";
  SegmentationRepresentations2["Contour"] = "Contour";
  SegmentationRepresentations2["Surface"] = "Surface";
})(SegmentationRepresentations || (SegmentationRepresentations = {}));
var SegmentationRepresentations_default = SegmentationRepresentations;

// node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js
var Swipe;
(function(Swipe2) {
  Swipe2["UP"] = "UP";
  Swipe2["DOWN"] = "DOWN";
  Swipe2["LEFT"] = "LEFT";
  Swipe2["RIGHT"] = "RIGHT";
})(Swipe || (Swipe = {}));

// node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js
var StrategyCallbacks;
(function(StrategyCallbacks2) {
  StrategyCallbacks2["OnInteractionStart"] = "onInteractionStart";
  StrategyCallbacks2["OnInteractionEnd"] = "onInteractionEnd";
  StrategyCallbacks2["Preview"] = "preview";
  StrategyCallbacks2["RejectPreview"] = "rejectPreview";
  StrategyCallbacks2["AcceptPreview"] = "acceptPreview";
  StrategyCallbacks2["Fill"] = "fill";
  StrategyCallbacks2["Interpolate"] = "interpolate";
  StrategyCallbacks2["StrategyFunction"] = "strategyFunction";
  StrategyCallbacks2["CreateIsInThreshold"] = "createIsInThreshold";
  StrategyCallbacks2["Initialize"] = "initialize";
  StrategyCallbacks2["INTERNAL_setValue"] = "setValue";
  StrategyCallbacks2["AddPreview"] = "addPreview";
  StrategyCallbacks2["ComputeInnerCircleRadius"] = "computeInnerCircleRadius";
  StrategyCallbacks2["GetStatistics"] = "getStatistics";
  StrategyCallbacks2["EnsureImageVolumeFor3DManipulation"] = "ensureImageVolumeFor3DManipulation";
  StrategyCallbacks2["EnsureSegmentationVolumeFor3DManipulation"] = "ensureSegmentationVolumeFor3DManipulation";
})(StrategyCallbacks || (StrategyCallbacks = {}));
var StrategyCallbacks_default = StrategyCallbacks;

// node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js
var ChangeTypes;
(function(ChangeTypes3) {
  ChangeTypes3["Interaction"] = "Interaction";
  ChangeTypes3["HandlesUpdated"] = "HandlesUpdated";
  ChangeTypes3["StatsUpdated"] = "StatsUpdated";
  ChangeTypes3["InitialSetup"] = "InitialSetup";
  ChangeTypes3["Completed"] = "Completed";
  ChangeTypes3["InterpolationUpdated"] = "InterpolationUpdated";
  ChangeTypes3["History"] = "History";
  ChangeTypes3["MetadataReferenceModified"] = "MetadataReferenceModified";
  ChangeTypes3["LabelChange"] = "LabelChange";
})(ChangeTypes || (ChangeTypes = {}));
var ChangeTypes_default = ChangeTypes;

// node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js
var ChangeTypes2;
(function(ChangeTypes3) {
  ChangeTypes3["POLYSEG_CONTOUR_TO_LABELMAP"] = "Converting Contour to Labelmap";
  ChangeTypes3["POLYSEG_SURFACE_TO_LABELMAP"] = "Converting Surfaces to Labelmap";
  ChangeTypes3["POLYSEG_CONTOUR_TO_SURFACE"] = "Converting Contour to Surface";
  ChangeTypes3["POLYSEG_LABELMAP_TO_SURFACE"] = "Converting Labelmap to Surface";
  ChangeTypes3["SURFACE_CLIPPING"] = "Clipping Surfaces";
  ChangeTypes3["COMPUTE_STATISTICS"] = "Computing Statistics";
  ChangeTypes3["INTERPOLATE_LABELMAP"] = "Interpolating Labelmap";
  ChangeTypes3["COMPUTE_LARGEST_BIDIRECTIONAL"] = "Computing Largest Bidirectional";
  ChangeTypes3["GENERATE_CONTOUR_SETS"] = "Generating Contour Sets";
})(ChangeTypes2 || (ChangeTypes2 = {}));
var WorkerTypes_default = ChangeTypes2;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js
var ToolGroupManager_exports = {};
__export(ToolGroupManager_exports, {
  createToolGroup: () => createToolGroup_default,
  destroy: () => destroy_default,
  destroyToolGroup: () => destroyToolGroup_default,
  getAllToolGroups: () => getAllToolGroups_default,
  getToolGroup: () => getToolGroup_default,
  getToolGroupForViewport: () => getToolGroupForViewport_default,
  getToolGroupsWithToolName: () => getToolGroupsWithToolName_default
});

// node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js
var svgNodeCache = {};
function resetSvgNodeCache() {
  svgNodeCache = {};
}
var svgNodeCache_default = svgNodeCache;

// node_modules/@cornerstonejs/tools/dist/esm/store/state.js
var defaultState = {
  isInteractingWithTool: false,
  isMultiPartToolActive: false,
  tools: {},
  toolGroups: [],
  synchronizers: [],
  svgNodeCache: svgNodeCache_default,
  enabledElements: [],
  handleRadius: 6
};
var state = {
  isInteractingWithTool: false,
  isMultiPartToolActive: false,
  tools: {},
  toolGroups: [],
  synchronizers: [],
  svgNodeCache: svgNodeCache_default,
  enabledElements: [],
  handleRadius: 6
};
function resetCornerstoneToolsState() {
  resetSvgNodeCache();
  state = {
    ...structuredClone({
      ...defaultState,
      svgNodeCache: {}
    }),
    svgNodeCache: {
      ...defaultState.svgNodeCache
    }
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js
var import_lodash = __toESM(require_lodash());

// node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js
var cursors_exports = {};
__export(cursors_exports, {
  CursorNames: () => CursorNames,
  CursorSVG: () => CursorSVG,
  ImageMouseCursor: () => ImageMouseCursor,
  MouseCursor: () => MouseCursor,
  SVGMouseCursor: () => SVGMouseCursor,
  elementCursor: () => elementCursor_exports,
  registerCursor: () => registerCursor,
  setCursorForElement: () => setCursorForElement_default
});

// node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js
var DEFINED_CURSORS = Symbol("DefinedCursors");
var STANDARD_CURSORS = /* @__PURE__ */ new Set([
  "alias",
  "all-scroll",
  "auto",
  "cell",
  "col-resize",
  "context-menu",
  "copy",
  "crosshair",
  "default",
  "e-resize",
  "ew-resize",
  "grab",
  "grabbing",
  "help",
  "move",
  "ne-resize",
  "nesw-resize",
  "no-drop",
  "none",
  "not-allowed",
  "n-resize",
  "ns-resize",
  "nw-resize",
  "nwse-resize",
  "pointer",
  "progress",
  "row-resize",
  "se-resize",
  "s-resize",
  "sw-resize",
  "text",
  "vertical-text",
  "wait",
  "w-resize",
  "zoom-in",
  "zoom-out"
]);
var MouseCursor = class _MouseCursor {
  constructor(name, fallback) {
    this.name = name + "";
    this.fallback = fallback;
  }
  getName() {
    return this.name + "";
  }
  addFallbackStyleProperty(style) {
    const { fallback } = this;
    if (fallback instanceof _MouseCursor) {
      return `${style}, ${fallback.getStyleProperty()}`;
    }
    return style + "";
  }
  getStyleProperty() {
    return this.addFallbackStyleProperty(this.name) + "";
  }
  static getDefinedCursor(name) {
    const definedCursors = getDefinedCursors(_MouseCursor, DEFINED_CURSORS);
    let mouseCursor = definedCursors.get(name);
    if (mouseCursor instanceof _MouseCursor) {
      return mouseCursor;
    }
    if (STANDARD_CURSORS.has(name)) {
      mouseCursor = new _MouseCursor(name);
      definedCursors.set(name, mouseCursor);
      return mouseCursor;
    }
  }
  static setDefinedCursor(name, cursor) {
    if (cursor instanceof _MouseCursor) {
      const definedCursors = getDefinedCursors(_MouseCursor, DEFINED_CURSORS);
      definedCursors.set(name, cursor);
      return true;
    }
    return false;
  }
};
function getDefinedCursors(context, symbol) {
  let definedCursors = context[symbol];
  if (!(definedCursors instanceof Map)) {
    definedCursors = /* @__PURE__ */ new Map();
    Object.defineProperty(context, symbol, { value: definedCursors });
  }
  return definedCursors;
}
var standardCursorNames = STANDARD_CURSORS.values();

// node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js
var DEFAULT_NAME = "image-cursor";
var ImageMouseCursor = class _ImageMouseCursor extends MouseCursor {
  constructor(url, x, y, name, fallback) {
    super(name || _ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);
    this.url = url;
    this.x = Number(x) || 0;
    this.y = Number(y) || 0;
  }
  getStyleProperty() {
    const { url, x, y } = this;
    let style = `url('${url}')`;
    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {
      style += ` ${x} ${y}`;
    }
    return this.addFallbackStyleProperty(style);
  }
  static getUniqueInstanceName(prefix) {
    return `${prefix}-${utilities_exports.getRuntimeId(_ImageMouseCursor)}`;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js
var BASE = {
  iconContent: "",
  iconSize: 16,
  viewBox: {
    x: 16,
    y: 16
  },
  mousePoint: {
    x: 8,
    y: 8
  },
  mousePointerGroupString: `
    <path stroke="{{color}}" d="M8 16L8 0"></path>
    <path stroke="{{color}}" d="M16 8L0 8"></path>
  `
};
var SEGMENTATION_CURSOR_BOUNDARIES = {
  x: 127,
  y: 60
};
var MINUS_RECT = `
<rect fill="{{color}}" x="80.19" y="25.03" width="47.14" height="15.85"/>
`;
var PLUS_RECT = `
<rect fill="{{color}}" x="80.19" y="25.03" width="47.14" height="15.85"/>
<rect fill="{{color}}" x="95.84" y="9.38" width="15.85" height="47.14"/>
`;
var SCISSOR_ICON = `<path fill="{{color}}" d="M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z" transform="translate(-1.17 -0.96)"/>`;
var RECTANGLE_ICON = `<path fill="{{color}}" d="M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z" transform="translate(-8.86 -2.25)"/>`;
var CIRCLE_ICON = `<path fill="{{color}}" d="M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z" transform="translate(-8.86 -2.25)"/>`;
var CursorSVG = {
  Angle: extend(BASE, {
    name: "Angle",
    iconContent: `<path fill="{{color}}" d="M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50
    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23
    10l50 50q10 10 10 23z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  ArrowAnnotate: extend(BASE, {
    name: "ArrowAnnotate",
    iconContent: `<g id="arrowAnnotate-group" fill="none" stroke-width="1" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <path id="arrowAnnotate-arrow" d="M23,7 l-15,15 M7,17 l0,6 6,0" stroke-width="2" />
  </g>`,
    viewBox: {
      x: 24,
      y: 24
    }
  }),
  Bidirectional: extend(BASE, {
    name: "Bidirectional",
    iconContent: `<g fill="{{color}}" stroke-width="3" stroke="{{color}}">
    <path d="M27.63 3.21L3.12 28.81"></path>
    <path d="M27.63 15.75L15.27 4.43"></path>
    <path d="M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z" ></path>
    <path d="M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z"></path>
    <path d="M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z"></path>
    <path d="M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z"></path>
  </g>`,
    viewBox: {
      x: 48,
      y: 48
    }
  }),
  CobbAngle: extend(BASE, {
    name: "CobbAngle",
    iconContent: `<g stroke="{{color}}" stroke-width="3">
    <path d="M28.59 2.34L3.82 12.32"></path>
    <path d="M28.59 29.66L3.82 19.68"></path>
    <path stroke-dasharray="2" fill-opacity="0" d="M12.37
      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15
      9.33C13.11 9.24 13.02 9 12.88 8.63">
    </path>
  </g>`,
    viewBox: {
      x: 32,
      y: 32
    }
  }),
  CircleROI: extend(BASE, {
    name: "CircleROI",
    iconContent: `<circle stroke="{{color}}" fill="none" stroke-width="3" cx="16" cy="16" r="14" />`,
    viewBox: {
      x: 32,
      y: 32
    }
  }),
  EllipticalROI: extend(BASE, {
    name: "EllipticalROI",
    iconContent: `<path stroke="{{color}}" fill="none" stroke-width="3" d="M30.74 15.76C30.74 20.99 24.14 25.23 16
    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14
    6.3 30.74 10.54 30.74 15.76Z" />`,
    viewBox: {
      x: 32,
      y: 32
    }
  }),
  FreehandROI: extend(BASE, {
    name: "FreehandROI",
    iconContent: `<g fill="{{color}}" stroke="{{color}}" stroke-width="2">
    <ellipse ry="1" rx="1" id="svg_3" cy="4.240343" cx="14.306499"/>
    <line id="svg_4" y2="3.58462" x2="12.242186" y1="3.997482" x1="13.432202"/>
    <line id="svg_5" y2="3.268901" x2="10.857882" y1="3.608906" x1="12.387902"/>
    <line id="svg_6" y2="3.147471" x2="9.740724" y1="3.293187" x1="10.955026"/>
    <line id="svg_7" y2="3.147471" x2="8.089274" y1="3.196043" x1="9.983585"/>
    <line id="svg_8" y2="3.268901" x2="6.874972" y1="3.123185" x1="8.307848"/>
    <line id="svg_9" y2="3.657478" x2="5.587812" y1="3.220329" x1="7.020688"/>
    <line id="svg_10" y2="4.046054" x2="4.737801" y1="3.560334" x1="5.854959"/>
    <line id="svg_11" y2="4.337487" x2="4.300652" y1="3.997482" x1="4.834945"/>
    <line id="svg_12" y2="4.726063" x2="3.88779" y1="4.191771" x1="4.470655"/>
    <line id="svg_15" y2="5.3575" x2="3.377783" y1="4.604633" x1="3.960648"/>
    <line id="svg_16" y2="6.183226" x2="2.916348" y1="5.138926" x1="3.547785"/>
    <line id="svg_17" y2="6.960379" x2="2.770632" y1="5.867507" x1="3.037779"/>
    <line id="svg_18" y2="7.713246" x2="2.673488" y1="6.741804" x1="2.819204"/>
    <line id="svg_19" y2="8.684687" x2="2.697774" y1="7.616102" x1="2.673488"/>
    <line id="svg_20" y2="9.753273" x2="2.892062" y1="8.611829" x1="2.697774"/>
    <line id="svg_21" y2="10.724714" x2="3.134923" y1="9.534698" x1="2.84349"/>
    <line id="svg_23" y2="11.647583" x2="3.596357" y1="10.578998" x1="3.086351"/>
    <line id="svg_25" y2="12.521881" x2="4.276366" y1="11.501867" x1="3.499213"/>
    <line id="svg_26" y2="13.930471" x2="5.830673" y1="12.376165" x1="4.13065"/>
    <line id="svg_28" y2="14.707624" x2="7.263549" y1="13.881899" x1="5.733528"/>
    <line id="svg_29" y2="15.339061" x2="8.963571" y1="14.61048" x1="7.06926"/>
    <line id="svg_30" y2="15.581921" x2="10.882168" y1="15.314775" x1="8.817855"/>
    <line id="svg_31" y2="15.460491" x2="12.023612" y1="15.581921" x1="10.785024"/>
    <line id="svg_33" y2="15.120487" x2="13.092197" y1="15.484777" x1="11.877895"/>
    <line id="svg_34" y2="14.586194" x2="13.86935" y1="15.217631" x1="12.897909"/>
    <line id="svg_35" y2="13.833327" x2="14.597931" y1="14.756196" x1="13.699348"/>
    <line id="svg_37" y2="12.716169" x2="15.180796" y1="13.881899" x1="14.549359"/>
    <line id="svg_39" y2="11.429009" x2="15.520801" y1="12.813313" x1="15.15651"/>
    <ellipse ry="1" rx="1" id="svg_40" cy="10.967574" cx="15.520801"/>
  </g>`,
    viewBox: {
      x: 18,
      y: 18
    }
  }),
  FreehandROISculptor: extend(BASE, {
    name: "FreehandROISculptor",
    iconContent: `<g id="icon-freehand-sculpt" fill="none" stroke-width="1.5" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <line id="svg_1" y2="2.559367" x2="10.184807" y1="4.467781" x1="8.81711"/>
    <line id="svg_4" y2="1.493836" x2="11.727442" y1="2.766112" x1="10.089386"/>
    <line id="svg_7" y2="1.080346" x2="13.047428" y1="1.748291" x1="11.345759"/>
    <line id="svg_8" y2="1.000829" x2="14.351511" y1="1.112153" x1="12.77707"/>
    <line id="svg_9" y2="1.350705" x2="15.242104" y1="0.905408" x1="13.969828"/>
    <line id="svg_10" y2="2.098167" x2="15.862339" y1="1.14396" x1="14.955842"/>
    <line id="svg_11" y2="3.195505" x2="16.41896" y1="1.939133" x1="15.766918"/>
    <line id="svg_12" y2="4.292843" x2="16.530284" y1="2.925147" x1="16.387153"/>
    <line id="svg_16" y2="5.644637" x2="16.196311" y1="3.831643" x1="16.593898"/>
    <line id="svg_18" y2="7.266789" x2="15.623787" y1="5.19934" x1="16.275829"/>
    <line id="svg_19" y2="10.813258" x2="14.526449" y1="6.726071" x1="15.766918"/>
    <line id="svg_20" y2="5.056209" x2="8.085552" y1="4.181519" x1="8.976145"/>
    <line id="svg_23" y2="5.326568" x2="7.481221" y1="4.78585" x1="8.403621"/>
    <line id="svg_24" y2="5.565119" x2="6.749662" y1="5.294761" x1="7.624352"/>
    <line id="svg_25" y2="5.994512" x2="5.429675" y1="5.533312" x1="6.956407"/>
    <line id="svg_27" y2="6.551133" x2="4.284627" y1="5.962706" x1="5.572807"/>
    <line id="svg_28" y2="7.584858" x2="3.044158" y1="6.392099" x1="4.427758"/>
    <line id="svg_29" y2="8.84123" x2="2.185372" y1="7.489437" x1="3.219096"/>
    <line id="svg_31" y2="10.606513" x2="1.644654" y1="8.602678" x1="2.280792"/>
    <line id="svg_32" y2="13.214679" x2="1.48562" y1="10.352058" x1="1.724171"/>
    <line id="svg_33" y2="14.375631" x2="1.676461" y1="12.992031" x1="1.453813"/>
    <line id="svg_34" y2="15.298031" x2="2.264889" y1="14.152983" x1="1.517427"/>
    <line id="svg_35" y2="16.172721" x2="3.521261" y1="14.948155" x1="1.915013"/>
    <line id="svg_36" y2="16.824762" x2="5.207027" y1="15.997783" x1="3.28271"/>
    <line id="svg_38" y2="17.063314" x2="7.035924" y1="16.745245" x1="4.968475"/>
    <line id="svg_39" y2="16.888376" x2="9.278311" y1="17.047411" x1="6.733758"/>
    <line id="svg_40" y2="16.284045" x2="10.661911" y1="16.983797" x1="8.992048"/>
    <line id="svg_41" y2="15.313934" x2="11.647925" y1="16.395369" x1="10.455166"/>
    <line id="svg_44" y2="13.898527" x2="12.82478" y1="15.425259" x1="11.504794"/>
    <line id="svg_45" y2="12.037824" x2="14.144766" y1="14.312017" x1="12.522614"/>
    <line id="svg_47" y2="10.59061" x2="14.605966" y1="12.228665" x1="13.953925"/>
    <ellipse ry="1" rx="1" id="svg_48" cy="3.982726" cx="13.460918"/>
  </g>`,
    viewBox: {
      x: 18,
      y: 18
    }
  }),
  Length: extend(BASE, {
    name: "Length",
    iconContent: `<g id="length-group" fill="none" stroke-width="1" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <path id="length-dashes" d="m22.5,6 -16.5,16.5" stroke-width="3" stroke-dasharray="0.6666,5" />
  </g>`,
    viewBox: {
      x: 24,
      y: 24
    }
  }),
  Height: extend(BASE, {
    name: "Height",
    iconContent: `<path d="m 6 22 l 8.5 0 v -16 h 8" stroke-width="3" fill="none" stroke="{{color}}" />`,
    viewBox: {
      x: 24,
      y: 24
    }
  }),
  Probe: extend(BASE, {
    name: "Probe",
    iconContent: `<path fill="{{color}}" d="M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75
    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73
    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5
    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5
    385.5-103 385.5 103 279.5 279.5 103 385.5z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  RectangleROI: extend(BASE, {
    name: "RectangleROI",
    iconContent: `<path fill="{{color}}" d="M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47
    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0
    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119
    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  Label: extend(BASE, {
    name: "Label",
    iconContent: `<path fill="{{color}}" d="M789 559l-170 450q33 0 136.5 2t160.5 2q19 0
    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29
    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15
    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5
    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0
    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11
    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0
    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58
    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  Crosshairs: extend(BASE, {
    name: "Crosshairs",
    iconContent: `<path fill="{{color}}" d="M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26
    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45
    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26
    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5
    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32
    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5
    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26
    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26
    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161
    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161
    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  Eraser: extend(BASE, {
    name: "Eraser",
    iconContent: `<path transform="translate(0,1792) scale(1,-1)" fill="{{color}}" d="M960 1408l336-384h-768l-336 384h768zm1013-1077q15
    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38
    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38
    0 69.5 20.5t47.5 54.5z" />`,
    viewBox: {
      x: 2048,
      y: 1792
    }
  }),
  Magnify: extend(BASE, {
    name: "Magnify",
    iconContent: `<path fill="{{color}}" d="M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395
    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5
    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17
    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208
    32s176 78.7 176 176-78.7 176-176 176z" />`,
    viewBox: {
      x: 512,
      y: 512
    }
  }),
  Pan: extend(BASE, {
    name: "Pan",
    iconContent: `<path fill="{{color}}" d="M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17
    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355
    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59
    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12
    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144
    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19
    45v448q0 42-39 59-13 5-25 5-26 0-45-19z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  Rotate: extend(BASE, {
    name: "Rotate",
    iconContent: `<path fill="{{color}}" d="M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39
    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5
    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0
    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109
    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298
    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14
    39 17 39 59z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  StackScroll: extend(BASE, {
    name: "StackScroll",
    iconContent: `<path fill="{{color}}" d="M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547
    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0
    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547
    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547
    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z" />`,
    viewBox: {
      x: 24,
      y: 28
    }
  }),
  WindowLevelRegion: extend(BASE, {
    name: "WindowLevelRegion",
    iconContent: `<path fill="{{color}}" d="M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119
    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5
    84.5t84.5 203.5z" />`,
    viewBox: {
      x: 1792,
      y: 1792
    }
  }),
  WindowLevel: extend(BASE, {
    name: "WindowLevel",
    iconContent: `
    <path fill="{{color}}" d="M14.5,3.5 a1 1 0 0 1 -11,11 Z" stroke="none" opacity="0.8" />
    <circle cx="9" cy="9" r="8" fill="none" stroke-width="2" stroke="{{color}}" />`,
    viewBox: {
      x: 18,
      y: 18
    }
  }),
  Zoom: extend(BASE, {
    name: "Zoom",
    iconContent: `
  <path fill="{{color}}" d="M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395
    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5
    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17
    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208
    32s176 78.7 176 176-78.7 176-176 176z" />
  <path fill="{{color}}" transform="scale(0.22,0.22) translate(1400,0)" d="M1216
    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19
    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26
    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z" />`,
    viewBox: {
      x: 640,
      y: 512
    }
  }),
  SegmentationFreeHandEraseInside: extend(BASE, {
    name: "SegmentationFreeHandEraseInside",
    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  SegmentationFreeHandFillInside: extend(BASE, {
    name: "SegmentationFreeHandFillInside",
    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  SegmentationFreeHandEraseOutside: extend(BASE, {
    name: "SegmentationFreeHandEraseOutside",
    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  SegmentationFreeHandFillOutside: extend(BASE, {
    name: "SegmentationFreeHandFillOutside",
    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  SegmentationRectangleEraseInside: extend(BASE, {
    name: "SegmentationRectangleEraseInside",
    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  RectangleScissor: extend(BASE, {
    name: "RectangleScissor",
    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "RectangleScissor.FILL_INSIDE": extend(BASE, {
    name: "RectangleScissor.FILL_INSIDE",
    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "RectangleScissor.FILL_OUTSIDE": extend(BASE, {
    name: "RectangleScissor.FILL_OUTSIDE",
    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "RectangleScissor.ERASE_OUTSIDE": extend(BASE, {
    name: "RectangleScissor.ERASE_OUTSIDE",
    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "RectangleScissor.ERASE_INSIDE": extend(BASE, {
    name: "RectangleScissor.ERASE_INSIDE",
    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  CircleScissor: extend(BASE, {
    name: "CircleScissor",
    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "CircleScissor.FILL_INSIDE": extend(BASE, {
    name: "CircleScissor.FILL_INSIDE",
    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "CircleScissor.ERASE_OUTSIDE": extend(BASE, {
    name: "CircleScissor.ERASE_OUTSIDE",
    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  }),
  "CircleScissor.FILL_OUTSIDE": extend(BASE, {
    name: "CircleScissor.FILL_OUTSIDE",
    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
    viewBox: SEGMENTATION_CURSOR_BOUNDARIES
  })
};
function extend(base, values) {
  return Object.assign(Object.create(base), {
    ...values,
    name: values.name || base.name
  });
}
function registerCursor(toolName, iconContent, viewBox) {
  CursorSVG[toolName] = extend(BASE, {
    iconContent,
    viewBox
  });
}
function getDefinedSVGCursorDescriptor(name) {
  return CursorSVG[name];
}
var svgCursorNames = Object.keys(CursorSVG);

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js
var ToolStyle = class {
  constructor() {
    const defaultConfig = {
      color: "rgb(255, 255, 0)",
      colorHighlighted: "rgb(0, 255, 0)",
      colorSelected: "rgb(0, 220, 0)",
      colorLocked: "rgb(209, 193, 90)",
      lineWidth: "1",
      lineDash: "",
      shadow: true,
      textBoxVisibility: true,
      textBoxFontFamily: "Helvetica Neue, Helvetica, Arial, sans-serif",
      textBoxFontSize: "14px",
      textBoxColor: "rgb(255, 255, 0)",
      textBoxColorHighlighted: "rgb(0, 255, 0)",
      textBoxColorSelected: "rgb(0, 255, 0)",
      textBoxColorLocked: "rgb(209, 193, 90)",
      textBoxBackground: "",
      textBoxLinkLineWidth: "1",
      textBoxLinkLineDash: "2,3",
      textBoxShadow: true,
      markerSize: "10",
      angleArcLineDash: ""
    };
    this._initializeConfig(defaultConfig);
  }
  getAnnotationToolStyles(annotationUID) {
    return this.config.annotations && this.config.annotations[annotationUID];
  }
  getViewportToolStyles(viewportId) {
    return this.config.viewports && this.config.viewports[viewportId];
  }
  getToolGroupToolStyles(toolGroupId) {
    return this.config.toolGroups && this.config.toolGroups[toolGroupId];
  }
  getDefaultToolStyles() {
    return this.config.default;
  }
  setAnnotationStyles(annotationUID, styles) {
    let annotationSpecificStyles = this.config.annotations;
    if (!annotationSpecificStyles) {
      this.config = {
        ...this.config,
        annotations: {}
      };
      annotationSpecificStyles = this.config.annotations;
    }
    annotationSpecificStyles[annotationUID] = styles;
  }
  setViewportToolStyles(viewportId, styles) {
    let viewportSpecificStyles = this.config.viewports;
    if (!viewportSpecificStyles) {
      this.config = {
        ...this.config,
        viewports: {}
      };
      viewportSpecificStyles = this.config.viewports;
    }
    viewportSpecificStyles[viewportId] = styles;
  }
  setToolGroupToolStyles(toolGroupId, styles) {
    let toolGroupSpecificStyles = this.config.toolGroups;
    if (!toolGroupSpecificStyles) {
      this.config = {
        ...this.config,
        toolGroups: {}
      };
      toolGroupSpecificStyles = this.config.toolGroups;
    }
    toolGroupSpecificStyles[toolGroupId] = styles;
  }
  setDefaultToolStyles(styles) {
    this.config.default = styles;
  }
  getStyleProperty(toolStyle2, specifications) {
    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;
    return this._getToolStyle(toolStyle2, annotationUID, viewportId, toolGroupId, toolName);
  }
  _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {
    if (annotationUID) {
      const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);
      if (annotationToolStyles) {
        if (annotationToolStyles[property] !== void 0) {
          return annotationToolStyles[property];
        }
      }
    }
    if (viewportId) {
      const viewportToolStyles = this.getViewportToolStyles(viewportId);
      if (viewportToolStyles) {
        if (viewportToolStyles[toolName] && viewportToolStyles[toolName][property] !== void 0) {
          return viewportToolStyles[toolName][property];
        }
        if (viewportToolStyles.global && viewportToolStyles.global[property] !== void 0) {
          return viewportToolStyles.global[property];
        }
      }
    }
    if (toolGroupId) {
      const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);
      if (toolGroupToolStyles) {
        if (toolGroupToolStyles[toolName] && toolGroupToolStyles[toolName][property] !== void 0) {
          return toolGroupToolStyles[toolName][property];
        }
        if (toolGroupToolStyles.global && toolGroupToolStyles.global[property] !== void 0) {
          return toolGroupToolStyles.global[property];
        }
      }
    }
    const globalStyles = this.getDefaultToolStyles();
    if (globalStyles[toolName] && globalStyles[toolName][property] !== void 0) {
      return globalStyles[toolName][property];
    }
    if (globalStyles.global && globalStyles.global[property] !== void 0) {
      return globalStyles.global[property];
    }
  }
  _initializeConfig(config2) {
    const toolStyles = {};
    for (const name in config2) {
      toolStyles[name] = config2[name];
    }
    this.config = {
      default: {
        global: toolStyles
      }
    };
  }
};
var toolStyle = new ToolStyle();
var ToolStyle_default = toolStyle;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js
function getHierarchalPropertyStyles(property, state8, mode) {
  const list = [`${property}`];
  if (state8) {
    list.push(`${list[0]}${state8}`);
  }
  if (mode) {
    list.push(`${list[list.length - 1]}${mode}`);
  }
  return list;
}
function getStyleProperty(property, styleSpecifier, state8, mode) {
  const alternatives = getHierarchalPropertyStyles(property, state8, mode);
  for (let i = alternatives.length - 1; i >= 0; --i) {
    const style = ToolStyle_default.getStyleProperty(alternatives[i], styleSpecifier);
    if (style !== void 0) {
      return style;
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js
var PROPERTY = "color";
var STATE = AnnotationStyleStates_default.Highlighted;
var MODE = ToolModes_default.Active;
var SVGMouseCursor = class extends ImageMouseCursor {
  constructor(url, x, y, name, fallback) {
    super(url, x, y, name, fallback);
  }
  static getDefinedCursor(name, pointer = false, color) {
    if (!color) {
      color = getStyleProperty(PROPERTY, {}, STATE, MODE);
    }
    const urn = getCursorURN(name, pointer, color);
    let cursor = super.getDefinedCursor(urn);
    const pointerStrokeWidth = Number(getStyleProperty("pointerStrokeWidth", {}));
    if (!cursor) {
      const descriptor = getDefinedSVGCursorDescriptor(name);
      if (descriptor) {
        cursor = createSVGMouseCursor(descriptor, urn, pointer, color, pointerStrokeWidth, super.getDefinedCursor("default"));
        super.setDefinedCursor(urn, cursor);
      }
    }
    return cursor;
  }
};
function format(template, dictionary) {
  const dict = Object(dictionary);
  const defined = Object.prototype.hasOwnProperty.bind(dict);
  return (template + "").replace(/\{\{(\w+)\}\}/g, (match, key) => {
    return defined(key) ? dict[key] + "" : "";
  });
}
function getCursorURN(name, pointer, color) {
  const type = pointer ? "pointer" : "cursor";
  return `${type}:${name}/${color}`;
}
function createSVGMouseCursor(descriptor, name, pointer, color, pointerStrokeWidth, fallback) {
  const { x, y } = descriptor.mousePoint;
  return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color, pointerStrokeWidth }), x, y, name, fallback);
}
function createSVGIconUrl(descriptor, pointer, options) {
  const blob = createSVGIconBlob(descriptor, pointer, options);
  const url = URL.createObjectURL(blob);
  const urn = `${url}#${descriptor.name || "unknown"}-${pointer ? "pointer" : "cursor"}`;
  return urn;
}
function createSVGIconBlob(descriptor, pointer, options) {
  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);
  return new Blob([svgString], { type: "image/svg+xml" });
}
function createSVGIcon(descriptor, options) {
  const { iconContent, iconSize, viewBox } = descriptor;
  const svgString = `
    <svg data-icon="cursor" role="img" xmlns="http://www.w3.org/2000/svg"
      width="${iconSize}" height="${iconSize}" viewBox="0 0
      ${viewBox.x} ${viewBox.y}">
      ${iconContent}
    </svg>`;
  return format(svgString, options);
}
function createSVGIconWithPointer(descriptor, options) {
  const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;
  const scale2 = iconSize / Math.max(viewBox.x, viewBox.y, 1);
  const svgSize = 16 + iconSize;
  const pointerStrokeWidth = options.pointerStrokeWidth || 1;
  const svgString = `
    <svg data-icon="cursor" role="img" xmlns="http://www.w3.org/2000/svg"
      width="${svgSize}" height="${svgSize}" viewBox="0 0 ${svgSize} ${svgSize}">
      <g stroke-width="${pointerStrokeWidth}">${mousePointerGroupString}</g>
      <g transform="translate(16, 16) scale(${scale2})">${iconContent}</g>
    </svg>`;
  return format(svgString, options);
}

// node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js
var elementCursor_exports = {};
__export(elementCursor_exports, {
  hideElementCursor: () => hideElementCursor,
  initElementCursor: () => initElementCursor,
  resetElementCursor: () => resetElementCursor,
  setElementCursor: () => _setElementCursor
});
var ELEMENT_CURSORS_MAP = Symbol("ElementCursorsMap");
function initElementCursor(element, cursor) {
  _getElementCursors(element)[0] = cursor;
  _setElementCursor(element, cursor);
}
function _setElementCursor(element, cursor) {
  const cursors = _getElementCursors(element);
  cursors[1] = cursors[0];
  cursors[0] = cursor;
  element.style.cursor = (cursor instanceof MouseCursor ? cursor : MouseCursor.getDefinedCursor("auto")).getStyleProperty();
}
function resetElementCursor(element) {
  _setElementCursor(element, _getElementCursors(element)[1]);
}
function hideElementCursor(element) {
  _setElementCursor(element, MouseCursor.getDefinedCursor("none"));
}
function _getElementCursors(element) {
  let map = _getElementCursors[ELEMENT_CURSORS_MAP];
  if (!(map instanceof WeakMap)) {
    map = /* @__PURE__ */ new WeakMap();
    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {
      value: map
    });
  }
  let cursors = map.get(element);
  if (!cursors) {
    cursors = [null, null];
    map.set(element, cursors);
  }
  return cursors;
}

// node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js
function setCursorForElement(element, cursorName) {
  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);
  if (!cursor) {
    cursor = MouseCursor.getDefinedCursor(cursorName);
  }
  if (!cursor) {
    console.log(`Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`);
    cursor = MouseCursor.getDefinedCursor(cursorName);
  }
  _setElementCursor(element, cursor);
}
var setCursorForElement_default = setCursorForElement;

// node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js
var CursorNames = [...svgCursorNames, ...standardCursorNames];

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js
function getToolGroup(toolGroupId) {
  return state.toolGroups.find((s) => s.id === toolGroupId);
}
var getToolGroup_default = getToolGroup;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js
var { Active, Passive, Enabled, Disabled } = ToolModes_default;
var PRIMARY_BINDINGS = [{ mouseButton: MouseBindings.Primary }];
var ToolGroup = class _ToolGroup {
  constructor(id) {
    this.viewportsInfo = [];
    this.toolOptions = {};
    this.currentActivePrimaryToolName = null;
    this.prevActivePrimaryToolName = null;
    this.restoreToolOptions = {};
    this._toolInstances = {};
    this.id = id;
  }
  getViewportIds() {
    return this.viewportsInfo.map(({ viewportId }) => viewportId);
  }
  getViewportsInfo() {
    return this.viewportsInfo.slice();
  }
  getToolInstance(toolInstanceName) {
    const toolInstance = this._toolInstances[toolInstanceName];
    if (!toolInstance) {
      console.warn(`'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`);
      return;
    }
    return toolInstance;
  }
  getToolInstances() {
    return this._toolInstances;
  }
  hasTool(toolName) {
    return !!this._toolInstances[toolName];
  }
  addTool(toolName, configuration3 = {}) {
    const toolDefinition = state.tools[toolName];
    const hasToolName = typeof toolName !== "undefined" && toolName !== "";
    const localToolInstance = this.toolOptions[toolName];
    if (!hasToolName) {
      console.warn("Tool with configuration did not produce a toolName: ", configuration3);
      return;
    }
    if (!toolDefinition) {
      console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);
      return;
    }
    if (localToolInstance) {
      console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);
      return;
    }
    const { toolClass: ToolClass } = toolDefinition;
    const toolProps = {
      name: toolName,
      toolGroupId: this.id,
      configuration: configuration3
    };
    const instantiatedTool = new ToolClass(toolProps);
    this._toolInstances[toolName] = instantiatedTool;
  }
  addToolInstance(toolName, parentClassName, configuration3 = {}) {
    let ToolClassToUse = state.tools[toolName]?.toolClass;
    if (!ToolClassToUse) {
      const ParentClass = state.tools[parentClassName].toolClass;
      class ToolInstance extends ParentClass {
      }
      ToolInstance.toolName = toolName;
      ToolClassToUse = ToolInstance;
      state.tools[toolName] = {
        toolClass: ToolInstance
      };
    }
    this.addTool(ToolClassToUse.toolName, configuration3);
  }
  addViewport(viewportId, renderingEngineId) {
    if (typeof viewportId !== "string") {
      throw new Error("viewportId must be defined and be a string");
    }
    const renderingEngineUIDToUse = this._findRenderingEngine(viewportId, renderingEngineId);
    if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {
      this.viewportsInfo.push({
        viewportId,
        renderingEngineId: renderingEngineUIDToUse
      });
    }
    const toolName = this.getActivePrimaryMouseButtonTool();
    this.setViewportsCursorByToolName(toolName);
    const eventDetail = {
      toolGroupId: this.id,
      viewportId,
      renderingEngineId: renderingEngineUIDToUse
    };
    triggerEvent(eventTarget_default, Events_default.TOOLGROUP_VIEWPORT_ADDED, eventDetail);
  }
  removeViewports(renderingEngineId, viewportId) {
    const indices = [];
    this.viewportsInfo.forEach((vpInfo, index) => {
      let match = false;
      if (vpInfo.renderingEngineId === renderingEngineId) {
        match = true;
        if (viewportId && vpInfo.viewportId !== viewportId) {
          match = false;
        }
      }
      if (match) {
        indices.push(index);
      }
    });
    if (indices.length) {
      for (let i = indices.length - 1; i >= 0; i--) {
        this.viewportsInfo.splice(indices[i], 1);
      }
    }
    const eventDetail = {
      toolGroupId: this.id,
      viewportId,
      renderingEngineId
    };
    triggerEvent(eventTarget_default, Events_default.TOOLGROUP_VIEWPORT_REMOVED, eventDetail);
  }
  setActiveStrategy(toolName, strategyName) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);
      return;
    }
    toolInstance.setActiveStrategy(strategyName);
  }
  setToolMode(toolName, mode, options = {}) {
    if (!toolName) {
      console.warn("setToolMode: toolName must be defined");
      return;
    }
    if (mode === ToolModes_default.Active) {
      this.setToolActive(toolName, options || this.restoreToolOptions[toolName]);
      return;
    }
    if (mode === ToolModes_default.Passive) {
      this.setToolPassive(toolName);
      return;
    }
    if (mode === ToolModes_default.Enabled) {
      this.setToolEnabled(toolName);
      return;
    }
    if (mode === ToolModes_default.Disabled) {
      this.setToolDisabled(toolName);
      return;
    }
    console.warn("setToolMode: mode must be defined");
  }
  setToolActive(toolName, toolBindingsOptions = {}) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
      return;
    }
    if (!toolInstance) {
      console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);
      return;
    }
    const prevBindings = this.toolOptions[toolName] ? this.toolOptions[toolName].bindings : [];
    const newBindings = toolBindingsOptions.bindings ? toolBindingsOptions.bindings : [];
    const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {
      const TouchBinding = binding.numTouchPoints !== void 0;
      const MouseBinding = binding.mouseButton !== void 0;
      if (!unique.some((obj) => hasSameBinding(obj, binding)) && (TouchBinding || MouseBinding)) {
        unique.push(binding);
      }
      return unique;
    }, []);
    const toolOptions = {
      bindings: bindingsToUse,
      mode: Active
    };
    this.toolOptions[toolName] = toolOptions;
    this._toolInstances[toolName].mode = Active;
    if (!this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {
      const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();
      if (!activeToolIdentifier) {
        const cursor = MouseCursor.getDefinedCursor("default");
        this._setCursorForViewports(cursor);
      }
    } else {
      this.setViewportsCursorByToolName(toolName);
    }
    if (this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {
      if (this.prevActivePrimaryToolName === null) {
        this.prevActivePrimaryToolName = toolName;
      } else {
        this.prevActivePrimaryToolName = this.currentActivePrimaryToolName;
      }
      this.currentActivePrimaryToolName = toolName;
    }
    if (typeof toolInstance.onSetToolActive === "function") {
      toolInstance.onSetToolActive();
    }
    this._renderViewports();
    const eventDetail = {
      toolGroupId: this.id,
      toolName,
      toolBindingsOptions
    };
    triggerEvent(eventTarget_default, Events_default.TOOL_ACTIVATED, eventDetail);
    this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);
  }
  setToolPassive(toolName, options) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
      return;
    }
    const prevToolOptions = this.getToolOptions(toolName);
    const toolOptions = Object.assign({
      bindings: prevToolOptions ? prevToolOptions.bindings : []
    }, prevToolOptions, {
      mode: Passive
    });
    const matchBindings = Array.isArray(options?.removeAllBindings) ? options.removeAllBindings : this.getDefaultPrimaryBindings();
    toolOptions.bindings = toolOptions.bindings.filter((binding) => options?.removeAllBindings !== true && !matchBindings.some((matchBinding) => hasSameBinding(binding, matchBinding)));
    let mode = Passive;
    if (toolOptions.bindings.length !== 0) {
      mode = Active;
      toolOptions.mode = mode;
    }
    this.toolOptions[toolName] = toolOptions;
    toolInstance.mode = mode;
    if (typeof toolInstance.onSetToolPassive === "function") {
      toolInstance.onSetToolPassive();
    }
    this._renderViewports();
    this._triggerToolModeChangedEvent(toolName, Passive);
  }
  setToolEnabled(toolName) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
      return;
    }
    const toolOptions = {
      bindings: [],
      mode: Enabled
    };
    this.toolOptions[toolName] = toolOptions;
    toolInstance.mode = Enabled;
    if (typeof toolInstance.onSetToolEnabled === "function") {
      toolInstance.onSetToolEnabled();
    }
    this._renderViewports();
    this._triggerToolModeChangedEvent(toolName, Enabled);
  }
  setToolDisabled(toolName) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
      return;
    }
    const toolOptions = {
      bindings: [],
      mode: Disabled
    };
    this.restoreToolOptions[toolName] = this.toolOptions[toolName];
    this.toolOptions[toolName] = toolOptions;
    toolInstance.mode = Disabled;
    if (typeof toolInstance.onSetToolDisabled === "function") {
      toolInstance.onSetToolDisabled();
    }
    this._renderViewports();
    this._triggerToolModeChangedEvent(toolName, Disabled);
  }
  getToolOptions(toolName) {
    const toolOptionsForTool = this.toolOptions[toolName];
    if (toolOptionsForTool === void 0) {
      return;
    }
    return toolOptionsForTool;
  }
  getActivePrimaryMouseButtonTool() {
    return Object.keys(this.toolOptions).find((toolName) => {
      const toolOptions = this.toolOptions[toolName];
      return toolOptions.mode === Active && this._hasMousePrimaryButtonBinding(toolOptions);
    });
  }
  setViewportsCursorByToolName(toolName, strategyName) {
    const cursor = this._getCursor(toolName, strategyName);
    this._setCursorForViewports(cursor);
  }
  _getCursor(toolName, strategyName) {
    let cursorName;
    let cursor;
    if (strategyName) {
      cursorName = `${toolName}.${strategyName}`;
      cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);
      if (cursor) {
        return cursor;
      }
    }
    cursorName = `${toolName}`;
    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);
    if (cursor) {
      return cursor;
    }
    cursorName = toolName;
    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);
    if (cursor) {
      return cursor;
    }
    return MouseCursor.getDefinedCursor("default");
  }
  _setCursorForViewports(cursor) {
    const runtimeSettings2 = Settings.getRuntimeSettings();
    if (!runtimeSettings2.get("useCursors")) {
      return;
    }
    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      if (!enabledElement) {
        return;
      }
      const { viewport } = enabledElement;
      initElementCursor(viewport.element, cursor);
    });
  }
  setToolConfiguration(toolName, configuration3, overwrite) {
    const toolInstance = this._toolInstances[toolName];
    if (toolInstance === void 0) {
      console.warn(`Tool ${toolName} not present, can't set tool configuration.`);
      return false;
    }
    let _configuration;
    if (overwrite) {
      _configuration = configuration3;
    } else {
      _configuration = Object.assign(toolInstance.configuration, configuration3);
    }
    toolInstance.configuration = _configuration;
    if (typeof toolInstance.onSetToolConfiguration === "function") {
      toolInstance.onSetToolConfiguration();
    }
    this._renderViewports();
    return true;
  }
  getDefaultMousePrimary() {
    return MouseBindings.Primary;
  }
  getDefaultPrimaryBindings() {
    return PRIMARY_BINDINGS;
  }
  getToolConfiguration(toolName, configurationPath) {
    if (this._toolInstances[toolName] === void 0) {
      console.warn(`Tool ${toolName} not present, can't set tool configuration.`);
      return;
    }
    const _configuration = (0, import_lodash.default)(this._toolInstances[toolName].configuration, configurationPath) || this._toolInstances[toolName].configuration;
    return utilities_exports.deepClone(_configuration);
  }
  getPrevActivePrimaryToolName() {
    return this.prevActivePrimaryToolName;
  }
  setActivePrimaryTool(toolName) {
    const activeToolName = this.getCurrentActivePrimaryToolName();
    this.setToolDisabled(activeToolName);
    this.setToolActive(toolName, {
      bindings: [{ mouseButton: MouseBindings.Primary }]
    });
  }
  getCurrentActivePrimaryToolName() {
    return this.currentActivePrimaryToolName;
  }
  clone(newToolGroupId, fnToolFilter = null) {
    let toolGroup = getToolGroup_default(newToolGroupId);
    if (toolGroup) {
      console.debug(`ToolGroup ${newToolGroupId} already exists`);
      return toolGroup;
    }
    toolGroup = new _ToolGroup(newToolGroupId);
    state.toolGroups.push(toolGroup);
    fnToolFilter = fnToolFilter ?? (() => true);
    Object.keys(this._toolInstances).filter(fnToolFilter).forEach((toolName) => {
      const sourceToolInstance = this._toolInstances[toolName];
      const sourceToolOptions = this.toolOptions[toolName];
      const sourceToolMode = sourceToolInstance.mode;
      toolGroup.addTool(toolName);
      toolGroup.setToolMode(toolName, sourceToolMode, {
        bindings: sourceToolOptions.bindings ?? []
      });
    });
    return toolGroup;
  }
  _hasMousePrimaryButtonBinding(toolOptions) {
    const primaryBindings = this.getDefaultPrimaryBindings();
    return toolOptions?.bindings?.some((binding) => primaryBindings.some((primary) => hasSameBinding(binding, primary)));
  }
  _renderViewports() {
    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
      getRenderingEngine(renderingEngineId).renderViewport(viewportId);
    });
  }
  _triggerToolModeChangedEvent(toolName, mode, toolBindingsOptions) {
    const eventDetail = {
      toolGroupId: this.id,
      toolName,
      mode,
      toolBindingsOptions
    };
    triggerEvent(eventTarget_default, Events_default.TOOL_MODE_CHANGED, eventDetail);
  }
  _findRenderingEngine(viewportId, renderingEngineId) {
    const renderingEngines = getRenderingEngines();
    if (renderingEngines?.length === 0) {
      throw new Error("No rendering engines found.");
    }
    if (renderingEngineId) {
      return renderingEngineId;
    }
    const matchingEngines = renderingEngines.filter((engine) => engine.getViewport(viewportId));
    if (matchingEngines.length === 0) {
      if (renderingEngines.length === 1) {
        return renderingEngines[0].id;
      }
      throw new Error("No rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.");
    }
    if (matchingEngines.length > 1) {
      throw new Error("Multiple rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.");
    }
    return matchingEngines[0].id;
  }
};
function hasSameBinding(binding1, binding2) {
  if (binding1.mouseButton !== binding2.mouseButton) {
    return false;
  }
  if (binding1.numTouchPoints !== binding2.numTouchPoints) {
    return false;
  }
  return binding1.modifierKey === binding2.modifierKey;
}

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js
function createToolGroup(toolGroupId) {
  const toolGroupWithIdExists = state.toolGroups.some((tg) => tg.id === toolGroupId);
  if (toolGroupWithIdExists) {
    console.warn(`'${toolGroupId}' already exists.`);
    return;
  }
  const toolGroup = new ToolGroup(toolGroupId);
  state.toolGroups.push(toolGroup);
  return toolGroup;
}
var createToolGroup_default = createToolGroup;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js
function destroyToolGroup(toolGroupId) {
  const toolGroupIndex = state.toolGroups.findIndex((tg) => tg.id === toolGroupId);
  if (toolGroupIndex > -1) {
    state.toolGroups.splice(toolGroupIndex, 1);
  }
}
var destroyToolGroup_default = destroyToolGroup;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js
function destroy() {
  const toolGroups = [...state.toolGroups];
  for (const toolGroup of toolGroups) {
    destroyToolGroup_default(toolGroup.id);
  }
  state.toolGroups = [];
}
var destroy_default = destroy;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js
function getToolGroupForViewport(viewportId, renderingEngineId) {
  if (!renderingEngineId) {
    renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;
  }
  const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId && (!vp.viewportId || vp.viewportId === viewportId)));
  if (!toolGroupFilteredByIds.length) {
    return;
  }
  if (toolGroupFilteredByIds.length > 1) {
    throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only
      have one tool group per viewport in a renderingEngine.`);
  }
  return toolGroupFilteredByIds[0];
}
var getToolGroupForViewport_default = getToolGroupForViewport;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js
function getAllToolGroups() {
  return state.toolGroups;
}
var getAllToolGroups_default = getAllToolGroups;

// node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupsWithToolName.js
var MODES = [ToolModes_default.Active, ToolModes_default.Passive, ToolModes_default.Enabled];
function getToolGroupsWithToolName(toolName) {
  return state.toolGroups.filter(({ toolOptions }) => {
    const toolGroupToolNames = Object.keys(toolOptions);
    for (let i = 0; i < toolGroupToolNames.length; i++) {
      if (toolName !== toolGroupToolNames[i]) {
        continue;
      }
      if (!toolOptions[toolName]) {
        continue;
      }
      if (MODES.includes(toolOptions[toolName].mode)) {
        return true;
      }
    }
    return false;
  });
}
var getToolGroupsWithToolName_default = getToolGroupsWithToolName;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js
function triggerAnnotationAddedForElement(annotation, element) {
  const enabledElement = getEnabledElement(element);
  const { renderingEngine, viewportId } = enabledElement;
  const eventType = Events_default.ANNOTATION_ADDED;
  const eventDetail = {
    annotation,
    viewportId,
    renderingEngineId: renderingEngine.id
  };
  triggerEvent(eventTarget_default, eventType, eventDetail);
}
function triggerAnnotationAddedForFOR(annotation) {
  const { toolName } = annotation.metadata;
  const toolGroups = getToolGroupsWithToolName_default(toolName);
  if (!toolGroups.length) {
    return;
  }
  const viewportsToRender = [];
  toolGroups.forEach((toolGroup) => {
    toolGroup.viewportsInfo.forEach((viewportInfo) => {
      const { renderingEngineId, viewportId } = viewportInfo;
      const { FrameOfReferenceUID } = getEnabledElementByIds(viewportId, renderingEngineId);
      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {
        viewportsToRender.push(viewportInfo);
      }
    });
  });
  const eventType = Events_default.ANNOTATION_ADDED;
  const eventDetail = { annotation };
  if (!viewportsToRender.length) {
    triggerEvent(eventTarget_default, eventType, eventDetail);
    return;
  }
  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {
    eventDetail.viewportId = viewportId;
    eventDetail.renderingEngineId = renderingEngineId;
    triggerEvent(eventTarget_default, eventType, eventDetail);
  });
}
function triggerAnnotationRemoved(eventDetail) {
  const eventType = Events_default.ANNOTATION_REMOVED;
  triggerEvent(eventTarget_default, eventType, eventDetail);
}
function triggerAnnotationModified(annotation, element, changeType = ChangeTypes_default.HandlesUpdated) {
  const enabledElement = element && getEnabledElement(element);
  const { viewportId, renderingEngineId } = enabledElement || {};
  const eventType = Events_default.ANNOTATION_MODIFIED;
  const eventDetail = {
    annotation,
    viewportId,
    renderingEngineId,
    changeType
  };
  triggerEvent(eventTarget_default, eventType, eventDetail);
}
function triggerAnnotationCompleted(annotation) {
  const eventDetail = {
    annotation
  };
  _triggerAnnotationCompleted(eventDetail);
}
function triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled = false) {
  const eventDetail = {
    annotation,
    contourHoleProcessingEnabled
  };
  _triggerAnnotationCompleted(eventDetail);
}
function _triggerAnnotationCompleted(eventDetail) {
  const eventType = Events_default.ANNOTATION_COMPLETED;
  triggerEvent(eventTarget_default, eventType, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js
var defaultManager;
function getAnnotationManager() {
  return defaultManager;
}
function setAnnotationManager(annotationManager) {
  defaultManager = annotationManager;
}
function getAnnotations(toolName, annotationGroupSelector) {
  const manager = getAnnotationManager();
  const groupKey = manager.getGroupKey(annotationGroupSelector);
  return manager.getAnnotations(groupKey, toolName);
}
function getAnnotation(annotationUID) {
  const manager = getAnnotationManager();
  return manager.getAnnotation(annotationUID);
}
function getAllAnnotations() {
  const manager = getAnnotationManager();
  return manager.getAllAnnotations();
}
function clearParentAnnotation(annotation) {
  const { annotationUID: childUID, parentAnnotationUID } = annotation;
  if (!parentAnnotationUID) {
    return;
  }
  const parentAnnotation = getAnnotation(parentAnnotationUID);
  const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);
  parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);
  annotation.parentAnnotationUID = void 0;
}
function addChildAnnotation(parentAnnotation, childAnnotation) {
  const { annotationUID: parentUID } = parentAnnotation;
  const { annotationUID: childUID } = childAnnotation;
  clearParentAnnotation(childAnnotation);
  if (!parentAnnotation.childAnnotationUIDs) {
    parentAnnotation.childAnnotationUIDs = [];
  }
  if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {
    return;
  }
  parentAnnotation.childAnnotationUIDs.push(childUID);
  childAnnotation.parentAnnotationUID = parentUID;
}
function getParentAnnotation(annotation) {
  return annotation.parentAnnotationUID ? getAnnotation(annotation.parentAnnotationUID) : void 0;
}
function getChildAnnotations(annotation) {
  return annotation.childAnnotationUIDs?.map((childAnnotationUID) => getAnnotation(childAnnotationUID)) ?? [];
}
function addAnnotation(annotation, annotationGroupSelector) {
  if (!annotation.annotationUID) {
    annotation.annotationUID = utilities_exports.uuidv4();
  }
  const manager = getAnnotationManager();
  if (annotationGroupSelector instanceof HTMLDivElement) {
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    manager.addAnnotation(annotation, groupKey);
    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);
  } else {
    manager.addAnnotation(annotation, void 0);
    triggerAnnotationAddedForFOR(annotation);
  }
  return annotation.annotationUID;
}
function getNumberOfAnnotations(toolName, annotationGroupSelector) {
  const manager = getAnnotationManager();
  const groupKey = manager.getGroupKey(annotationGroupSelector);
  return manager.getNumberOfAnnotations(groupKey, toolName);
}
function removeAnnotation(annotationUID) {
  if (!annotationUID) {
    return;
  }
  const manager = getAnnotationManager();
  const annotation = manager.getAnnotation(annotationUID);
  if (!annotation) {
    return;
  }
  annotation.childAnnotationUIDs?.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));
  manager.removeAnnotation(annotationUID);
  triggerAnnotationRemoved({ annotation, annotationManagerUID: manager.uid });
}
function removeAllAnnotations() {
  const manager = getAnnotationManager();
  const removedAnnotations = manager.removeAllAnnotations();
  for (const annotation of removedAnnotations) {
    triggerAnnotationRemoved({
      annotation,
      annotationManagerUID: manager.uid
    });
  }
}
function removeAnnotations(toolName, annotationGroupSelector) {
  const manager = getAnnotationManager();
  const groupKey = manager.getGroupKey(annotationGroupSelector);
  const removedAnnotations = manager.removeAnnotations(groupKey, toolName);
  for (const annotation of removedAnnotations) {
    triggerAnnotationRemoved({
      annotation,
      annotationManagerUID: manager.uid
    });
  }
}
function invalidateAnnotation(annotation) {
  let currAnnotation = annotation;
  while (currAnnotation) {
    currAnnotation.invalidated = true;
    currAnnotation = currAnnotation.parentAnnotationUID ? getAnnotation(currAnnotation.parentAnnotationUID) : void 0;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/store/index.js
var store_exports = {};
__export(store_exports, {
  Synchronizer: () => Synchronizer_default,
  SynchronizerManager: () => SynchronizerManager_exports,
  ToolGroupManager: () => ToolGroupManager_exports,
  addEnabledElement: () => addEnabledElement,
  addTool: () => addTool,
  cancelActiveManipulations: () => cancelActiveManipulations,
  hasTool: () => hasTool,
  removeEnabledElement: () => removeEnabledElement_default,
  removeTool: () => removeTool,
  state: () => state,
  svgNodeCache: () => svgNodeCache_default
});

// node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js
function addTool(ToolClass) {
  const toolName = ToolClass.toolName;
  if (!toolName) {
    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);
  }
  if (!state.tools[toolName]) {
    state.tools[toolName] = {
      toolClass: ToolClass
    };
  }
}
function hasTool(ToolClass) {
  const toolName = ToolClass.toolName;
  return !!(toolName && state.tools[toolName]);
}
function hasToolByName(toolName) {
  return !!(toolName && state.tools[toolName]);
}
function removeTool(ToolClass) {
  const toolName = ToolClass.toolName;
  if (!toolName) {
    throw new Error(`No tool found for: ${ToolClass.name}`);
  }
  if (!state.tools[toolName] !== void 0) {
    delete state.tools[toolName];
  } else {
    throw new Error(`${toolName} cannot be removed because it has not been added`);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js
function getMouseEventPoints(evt, element) {
  const elementToUse = element || evt.currentTarget;
  const { viewport } = getEnabledElement(elementToUse) || {};
  if (!viewport) {
    return;
  }
  const clientPoint = _clientToPoint(evt);
  const pagePoint = _pageToPoint(evt);
  const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);
  const worldPoint = viewport.canvasToWorld(canvasPoint);
  return {
    page: pagePoint,
    client: clientPoint,
    canvas: canvasPoint,
    world: worldPoint
  };
}
function _pagePointsToCanvasPoints(element, pagePoint) {
  const rect = element.getBoundingClientRect();
  return [
    pagePoint[0] - rect.left - window.pageXOffset,
    pagePoint[1] - rect.top - window.pageYOffset
  ];
}
function _pageToPoint(evt) {
  return [evt.pageX, evt.pageY];
}
function _clientToPoint(evt) {
  return [evt.clientX, evt.clientY];
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDoubleClickListener.js
function mouseDoubleClickListener(evt) {
  const element = evt.currentTarget;
  const { viewportId, renderingEngineId } = getEnabledElement(element);
  const startPoints = getMouseEventPoints(evt, element);
  const deltaPoints = {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  };
  const eventDetail = {
    event: evt,
    eventName: Events_default.MOUSE_DOUBLE_CLICK,
    viewportId,
    renderingEngineId,
    camera: {},
    element,
    startPoints,
    lastPoints: startPoints,
    currentPoints: startPoints,
    deltaPoints
  };
  const consumed = !triggerEvent(element, Events_default.MOUSE_DOUBLE_CLICK, eventDetail);
  if (consumed) {
    evt.stopImmediatePropagation();
    evt.preventDefault();
  }
}
var mouseDoubleClickListener_default = mouseDoubleClickListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseMoveListener.js
var eventName = Events_default.MOUSE_MOVE;
function mouseMoveListener(evt) {
  const element = evt.currentTarget;
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return;
  }
  const { renderingEngineId, viewportId } = enabledElement;
  const currentPoints = getMouseEventPoints(evt);
  const eventDetail = {
    renderingEngineId,
    viewportId,
    camera: {},
    element,
    currentPoints,
    eventName,
    event: evt
  };
  const consumed = !triggerEvent(element, eventName, eventDetail);
  if (consumed) {
    evt.stopImmediatePropagation();
    evt.preventDefault();
  }
}
var mouseMoveListener_default = mouseMoveListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDownListener.js
var { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } = Events_default;
var DOUBLE_CLICK_TOLERANCE_MS = 400;
var MULTI_BUTTON_TOLERANCE_MS = 150;
var DOUBLE_CLICK_DRAG_TOLERANCE = 3;
var defaultState2 = {
  mouseButton: void 0,
  element: null,
  renderingEngineId: void 0,
  viewportId: void 0,
  isClickEvent: true,
  clickDelay: 200,
  preventClickTimeout: null,
  startPoints: {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  },
  lastPoints: {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  }
};
var state2 = {
  mouseButton: void 0,
  renderingEngineId: void 0,
  viewportId: void 0,
  isClickEvent: true,
  clickDelay: 200,
  element: null,
  preventClickTimeout: null,
  startPoints: {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  },
  lastPoints: {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  }
};
var doubleClickState = {
  doubleClickTimeout: null,
  mouseDownEvent: null,
  mouseUpEvent: null,
  ignoreDoubleClick: false
};
function mouseDownListener(evt) {
  if (doubleClickState.doubleClickTimeout) {
    if (evt.buttons === doubleClickState.mouseDownEvent.buttons) {
      return;
    }
    doubleClickState.mouseDownEvent = evt;
    _doStateMouseDownAndUp();
    return;
  }
  doubleClickState.doubleClickTimeout = setTimeout(_doStateMouseDownAndUp, evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS);
  doubleClickState.mouseDownEvent = evt;
  doubleClickState.ignoreDoubleClick = false;
  state2.element = evt.currentTarget;
  state2.mouseButton = evt.buttons;
  const enabledElement = getEnabledElement(state2.element);
  const { renderingEngineId, viewportId } = enabledElement;
  state2.renderingEngineId = renderingEngineId;
  state2.viewportId = viewportId;
  state2.preventClickTimeout = setTimeout(_preventClickHandler, state2.clickDelay);
  state2.element.removeEventListener("mousemove", mouseMoveListener_default);
  const startPoints = getMouseEventPoints(evt, state2.element);
  state2.startPoints = _copyPoints(startPoints);
  state2.lastPoints = _copyPoints(startPoints);
  document.addEventListener("mouseup", _onMouseUp);
  document.addEventListener("mousemove", _onMouseDrag);
}
function _doMouseDown(evt) {
  const deltaPoints = _getDeltaPoints(state2.startPoints, state2.startPoints);
  const eventDetail = {
    event: evt,
    eventName: MOUSE_DOWN,
    element: state2.element,
    mouseButton: state2.mouseButton,
    renderingEngineId: state2.renderingEngineId,
    viewportId: state2.viewportId,
    camera: {},
    startPoints: state2.startPoints,
    lastPoints: state2.startPoints,
    currentPoints: state2.startPoints,
    deltaPoints
  };
  state2.lastPoints = _copyPoints(eventDetail.lastPoints);
  const notConsumed = triggerEvent(eventDetail.element, MOUSE_DOWN, eventDetail);
  if (notConsumed) {
    triggerEvent(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);
  }
}
function _onMouseDrag(evt) {
  const enabledElement = getEnabledElement(state2.element);
  if (!enabledElement?.viewport) {
    return;
  }
  const currentPoints = getMouseEventPoints(evt, state2.element);
  const lastPoints = _updateMouseEventsLastPoints(state2.element, state2.lastPoints);
  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);
  if (doubleClickState.doubleClickTimeout) {
    if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {
      _doStateMouseDownAndUp();
    } else {
      return;
    }
  }
  const eventDetail = {
    event: evt,
    eventName: MOUSE_DRAG,
    mouseButton: state2.mouseButton,
    renderingEngineId: state2.renderingEngineId,
    viewportId: state2.viewportId,
    camera: {},
    element: state2.element,
    startPoints: _copyPoints(state2.startPoints),
    lastPoints: _copyPoints(lastPoints),
    currentPoints,
    deltaPoints
  };
  const consumed = !triggerEvent(state2.element, MOUSE_DRAG, eventDetail);
  if (consumed) {
    evt.stopImmediatePropagation();
    evt.preventDefault();
  }
  state2.lastPoints = _copyPoints(currentPoints);
}
function _onMouseUp(evt) {
  clearTimeout(state2.preventClickTimeout);
  if (doubleClickState.doubleClickTimeout) {
    if (!doubleClickState.mouseUpEvent) {
      doubleClickState.mouseUpEvent = evt;
      state2.element.addEventListener("mousemove", _onMouseMove);
    } else {
      _cleanUp();
    }
  } else {
    const eventName2 = state2.isClickEvent ? MOUSE_CLICK : MOUSE_UP;
    const currentPoints = getMouseEventPoints(evt, state2.element);
    const deltaPoints = _getDeltaPoints(currentPoints, state2.lastPoints);
    const eventDetail = {
      event: evt,
      eventName: eventName2,
      mouseButton: state2.mouseButton,
      element: state2.element,
      renderingEngineId: state2.renderingEngineId,
      viewportId: state2.viewportId,
      camera: {},
      startPoints: _copyPoints(state2.startPoints),
      lastPoints: _copyPoints(state2.lastPoints),
      currentPoints,
      deltaPoints
    };
    triggerEvent(eventDetail.element, eventName2, eventDetail);
    _cleanUp();
  }
  document.removeEventListener("mousemove", _onMouseDrag);
}
function _onMouseMove(evt) {
  const currentPoints = getMouseEventPoints(evt, state2.element);
  const lastPoints = _updateMouseEventsLastPoints(state2.element, state2.lastPoints);
  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);
  if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {
    return;
  }
  _doStateMouseDownAndUp();
  mouseMoveListener_default(evt);
}
function _isDragPastDoubleClickTolerance(delta) {
  return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;
}
function _preventClickHandler() {
  state2.isClickEvent = false;
}
function _doStateMouseDownAndUp() {
  doubleClickState.ignoreDoubleClick = true;
  const mouseDownEvent = doubleClickState.mouseDownEvent;
  const mouseUpEvent = doubleClickState.mouseUpEvent;
  _clearDoubleClickTimeoutAndEvents();
  _doMouseDown(mouseDownEvent);
  if (mouseUpEvent) {
    _onMouseUp(mouseUpEvent);
  }
}
function _clearDoubleClickTimeoutAndEvents() {
  if (doubleClickState.doubleClickTimeout) {
    clearTimeout(doubleClickState.doubleClickTimeout);
    doubleClickState.doubleClickTimeout = null;
  }
  doubleClickState.mouseDownEvent = null;
  doubleClickState.mouseUpEvent = null;
}
function _cleanUp() {
  document.removeEventListener("mouseup", _onMouseUp);
  state2.element?.removeEventListener("mousemove", _onMouseMove);
  state2.element?.addEventListener("mousemove", mouseMoveListener_default);
  _clearDoubleClickTimeoutAndEvents();
  state2 = JSON.parse(JSON.stringify(defaultState2));
}
function _copyPoints(points) {
  return JSON.parse(JSON.stringify(points));
}
function _updateMouseEventsLastPoints(element, lastPoints) {
  const { viewport } = getEnabledElement(element) || {};
  if (!viewport) {
    return lastPoints;
  }
  const world = viewport.canvasToWorld(lastPoints.canvas);
  return {
    page: lastPoints.page,
    client: lastPoints.client,
    canvas: lastPoints.canvas,
    world
  };
}
function _getDeltaPoints(currentPoints, lastPoints) {
  if (!currentPoints || !lastPoints) {
    return {
      page: [0, 0],
      client: [0, 0],
      canvas: [0, 0],
      world: [0, 0, 0]
    };
  }
  return {
    page: _subtractPoints2D(currentPoints.page, lastPoints.page),
    client: _subtractPoints2D(currentPoints.client, lastPoints.client),
    canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),
    world: _subtractPoints3D(currentPoints.world, lastPoints.world)
  };
}
function _subtractPoints2D(point0, point1) {
  return [point0[0] - point1[0], point0[1] - point1[1]];
}
function _subtractPoints3D(point0, point1) {
  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];
}
function getMouseButton() {
  return state2.mouseButton;
}
function mouseDoubleClickIgnoreListener(evt) {
  if (doubleClickState.ignoreDoubleClick) {
    doubleClickState.ignoreDoubleClick = false;
    evt.stopImmediatePropagation();
    evt.preventDefault();
  } else {
    _cleanUp();
  }
}
var mouseDownListener_default = mouseDownListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js
function disable(element) {
  element.removeEventListener("dblclick", mouseDoubleClickListener_default);
  element.removeEventListener("mousedown", mouseDownListener_default);
  element.removeEventListener("mousemove", mouseMoveListener_default);
  element.removeEventListener("dblclick", mouseDoubleClickIgnoreListener, {
    capture: true
  });
}
function enable(element) {
  disable(element);
  element.addEventListener("dblclick", mouseDoubleClickListener_default);
  element.addEventListener("mousedown", mouseDownListener_default);
  element.addEventListener("mousemove", mouseMoveListener_default);
  element.addEventListener("dblclick", mouseDoubleClickIgnoreListener, {
    capture: true
  });
}
var mouse_default = {
  enable,
  disable
};

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/preventGhostClick.js
var antiGhostDelay = 2e3;
var pointerType = {
  mouse: 0,
  touch: 1
};
var lastInteractionType;
var lastInteractionTime;
function handleTap(type, e) {
  const now = Date.now();
  if (type !== lastInteractionType) {
    if (now - lastInteractionTime <= antiGhostDelay) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
      return false;
    }
    lastInteractionType = type;
  }
  lastInteractionTime = now;
}
var handleTapMouse = handleTap.bind(null, pointerType.mouse);
var handleTapTouch = handleTap.bind(null, pointerType.touch);
function attachEvents(element, eventList, interactionType) {
  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;
  eventList.forEach(function(eventName2) {
    element.addEventListener(eventName2, tapHandler, { passive: false });
  });
}
function removeEvents(element, eventList, interactionType) {
  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;
  eventList.forEach(function(eventName2) {
    element.removeEventListener(eventName2, tapHandler);
  });
}
var mouseEvents = ["mousedown", "mouseup", "mousemove"];
var touchEvents = ["touchstart", "touchend"];
function disable2(element) {
  removeEvents(element, mouseEvents, pointerType.mouse);
  removeEvents(element, touchEvents, pointerType.touch);
}
function enable2(element) {
  disable2(element);
  attachEvents(element, mouseEvents, pointerType.mouse);
  attachEvents(element, touchEvents, pointerType.touch);
}
var preventGhostClick_default = {
  enable: enable2,
  disable: disable2
};

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/getTouchEventPoints.js
function getTouchEventPoints(evt, element) {
  const elementToUse = element || evt.currentTarget;
  const touches = evt.type === "touchend" ? evt.changedTouches : evt.touches;
  return Object.keys(touches).map((i) => {
    const clientPoint = _clientToPoint2(touches[i]);
    const pagePoint = _pageToPoint2(touches[i]);
    const canvasPoint = _pagePointsToCanvasPoints2(elementToUse, pagePoint);
    const { viewport } = getEnabledElement(elementToUse);
    const worldPoint = viewport.canvasToWorld(canvasPoint);
    return {
      page: pagePoint,
      client: clientPoint,
      canvas: canvasPoint,
      world: worldPoint,
      touch: {
        identifier: i,
        radiusX: touches[i].radiusX,
        radiusY: touches[i].radiusY,
        force: touches[i].force,
        rotationAngle: touches[i].rotationAngle
      }
    };
  });
}
function _pagePointsToCanvasPoints2(element, pagePoint) {
  const rect = element.getBoundingClientRect();
  return [
    pagePoint[0] - rect.left - window.pageXOffset,
    pagePoint[1] - rect.top - window.pageYOffset
  ];
}
function _pageToPoint2(touch) {
  return [touch.pageX, touch.pageY];
}
function _clientToPoint2(touch) {
  return [touch.clientX, touch.clientY];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js
var touch_exports = {};
__export(touch_exports, {
  copyPoints: () => copyPoints,
  copyPointsList: () => copyPointsList,
  getDeltaDistance: () => getDeltaDistance,
  getDeltaDistanceBetweenIPoints: () => getDeltaDistanceBetweenIPoints,
  getDeltaPoints: () => getDeltaPoints,
  getDeltaRotation: () => getDeltaRotation,
  getMeanPoints: () => getMeanPoints,
  getMeanTouchPoints: () => getMeanTouchPoints
});
function getDeltaPoints(currentPoints, lastPoints) {
  const curr = getMeanPoints(currentPoints);
  const last = getMeanPoints(lastPoints);
  return {
    page: _subtractPoints2D2(curr.page, last.page),
    client: _subtractPoints2D2(curr.client, last.client),
    canvas: _subtractPoints2D2(curr.canvas, last.canvas),
    world: _subtractPoints3D2(curr.world, last.world)
  };
}
function getDeltaDistance(currentPoints, lastPoints) {
  const curr = getMeanPoints(currentPoints);
  const last = getMeanPoints(lastPoints);
  return {
    page: _getDistance2D(curr.page, last.page),
    client: _getDistance2D(curr.client, last.client),
    canvas: _getDistance2D(curr.canvas, last.canvas),
    world: _getDistance3D(curr.world, last.world)
  };
}
function getDeltaRotation(currentPoints, lastPoints) {
}
function getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {
  const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);
  const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);
  const deltaDistance = {
    page: currentDistance.page - lastDistance.page,
    client: currentDistance.client - lastDistance.client,
    canvas: currentDistance.canvas - lastDistance.canvas,
    world: currentDistance.world - lastDistance.world
  };
  return deltaDistance;
}
function copyPointsList(points) {
  return JSON.parse(JSON.stringify(points));
}
function copyPoints(points) {
  return JSON.parse(JSON.stringify(points));
}
function getMeanPoints(points) {
  return points.reduce((prev, curr) => {
    return {
      page: [
        prev.page[0] + curr.page[0] / points.length,
        prev.page[1] + curr.page[1] / points.length
      ],
      client: [
        prev.client[0] + curr.client[0] / points.length,
        prev.client[1] + curr.client[1] / points.length
      ],
      canvas: [
        prev.canvas[0] + curr.canvas[0] / points.length,
        prev.canvas[1] + curr.canvas[1] / points.length
      ],
      world: [
        prev.world[0] + curr.world[0] / points.length,
        prev.world[1] + curr.world[1] / points.length,
        prev.world[2] + curr.world[2] / points.length
      ]
    };
  }, {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0]
  });
}
function getMeanTouchPoints(points) {
  return points.reduce((prev, curr) => {
    return {
      page: [
        prev.page[0] + curr.page[0] / points.length,
        prev.page[1] + curr.page[1] / points.length
      ],
      client: [
        prev.client[0] + curr.client[0] / points.length,
        prev.client[1] + curr.client[1] / points.length
      ],
      canvas: [
        prev.canvas[0] + curr.canvas[0] / points.length,
        prev.canvas[1] + curr.canvas[1] / points.length
      ],
      world: [
        prev.world[0] + curr.world[0] / points.length,
        prev.world[1] + curr.world[1] / points.length,
        prev.world[2] + curr.world[2] / points.length
      ],
      touch: {
        identifier: null,
        radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,
        radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,
        force: prev.touch.force + curr.touch.force / points.length,
        rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length
      }
    };
  }, {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0],
    touch: {
      identifier: null,
      radiusX: 0,
      radiusY: 0,
      force: 0,
      rotationAngle: 0
    }
  });
}
function _subtractPoints2D2(point0, point1) {
  return [point0[0] - point1[0], point0[1] - point1[1]];
}
function _subtractPoints3D2(point0, point1) {
  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];
}
function _getMeanDistanceBetweenAllIPoints(points) {
  const pairedDistance = [];
  for (let i = 0; i < points.length; i++) {
    for (let j = 0; j < points.length; j++) {
      if (i < j) {
        pairedDistance.push({
          page: _getDistance2D(points[i].page, points[j].page),
          client: _getDistance2D(points[i].client, points[j].client),
          canvas: _getDistance2D(points[i].canvas, points[j].canvas),
          world: _getDistance3D(points[i].world, points[j].world)
        });
      }
    }
  }
  return pairedDistance.reduce((prev, curr) => {
    return {
      page: prev.page + curr.page / pairedDistance.length,
      client: prev.client + curr.client / pairedDistance.length,
      canvas: prev.canvas + curr.canvas / pairedDistance.length,
      world: prev.world + curr.world / pairedDistance.length
    };
  }, {
    page: 0,
    client: 0,
    canvas: 0,
    world: 0
  });
}
function _getDistance2D(point0, point1) {
  return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));
}
function _getDistance3D(point0, point1) {
  return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2) + Math.pow(point0[2] - point1[2], 2));
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/touchStartListener.js
var runtimeSettings = Settings.getRuntimeSettings();
var { TOUCH_START, TOUCH_START_ACTIVATE, TOUCH_PRESS, TOUCH_DRAG, TOUCH_END, TOUCH_TAP, TOUCH_SWIPE } = Events_default;
var zeroIPoint = {
  page: [0, 0],
  client: [0, 0],
  canvas: [0, 0],
  world: [0, 0, 0]
};
var zeroIDistance = {
  page: 0,
  client: 0,
  canvas: 0,
  world: 0
};
var defaultState3 = {
  renderingEngineId: void 0,
  viewportId: void 0,
  element: null,
  startPointsList: [
    {
      ...zeroIPoint,
      touch: null
    }
  ],
  lastPointsList: [
    {
      ...zeroIPoint,
      touch: null
    }
  ],
  isTouchStart: false,
  startTime: null,
  pressTimeout: null,
  pressDelay: 700,
  pressMaxDistance: 5,
  accumulatedDistance: zeroIDistance,
  swipeDistanceThreshold: 48,
  swiped: false,
  swipeToleranceMs: 300
};
var defaultTapState = {
  renderingEngineId: void 0,
  viewportId: void 0,
  element: null,
  startPointsList: [
    {
      ...zeroIPoint,
      touch: null
    }
  ],
  taps: 0,
  tapTimeout: null,
  tapMaxDistance: 24,
  tapToleranceMs: 300
};
var state3 = JSON.parse(JSON.stringify(defaultState3));
var tapState = JSON.parse(JSON.stringify(defaultTapState));
function triggerEventCallback(ele, name, eventDetail) {
  return triggerEvent(ele, name, eventDetail);
}
function touchStartListener(evt) {
  state3.element = evt.currentTarget;
  const enabledElement = getEnabledElement(state3.element);
  const { renderingEngineId, viewportId } = enabledElement;
  state3.renderingEngineId = renderingEngineId;
  state3.viewportId = viewportId;
  if (state3.isTouchStart) {
    return;
  }
  clearTimeout(state3.pressTimeout);
  state3.pressTimeout = setTimeout(() => _onTouchPress(evt), state3.pressDelay);
  _onTouchStart(evt);
  document.addEventListener("touchmove", _onTouchDrag);
  document.addEventListener("touchend", _onTouchEnd);
}
function _onTouchPress(evt) {
  const totalDistance = state3.accumulatedDistance.canvas;
  if (totalDistance > state3.pressMaxDistance) {
    return;
  }
  const eventDetail = {
    event: evt,
    eventName: TOUCH_PRESS,
    renderingEngineId: state3.renderingEngineId,
    viewportId: state3.viewportId,
    camera: {},
    element: state3.element,
    startPointsList: copyPointsList(state3.startPointsList),
    lastPointsList: copyPointsList(state3.lastPointsList),
    startPoints: copyPoints(getMeanTouchPoints(state3.startPointsList)),
    lastPoints: copyPoints(getMeanTouchPoints(state3.lastPointsList))
  };
  triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);
}
function _onTouchStart(evt) {
  state3.isTouchStart = true;
  state3.startTime = /* @__PURE__ */ new Date();
  const startPointsList = getTouchEventPoints(evt, state3.element);
  const startPoints = getMeanTouchPoints(startPointsList);
  const deltaPoints = zeroIPoint;
  const deltaDistance = zeroIDistance;
  const eventDetail = {
    event: evt,
    eventName: TOUCH_START,
    element: state3.element,
    renderingEngineId: state3.renderingEngineId,
    viewportId: state3.viewportId,
    camera: {},
    startPointsList,
    lastPointsList: startPointsList,
    currentPointsList: startPointsList,
    startPoints,
    lastPoints: startPoints,
    currentPoints: startPoints,
    deltaPoints,
    deltaDistance
  };
  state3.startPointsList = copyPointsList(eventDetail.startPointsList);
  state3.lastPointsList = copyPointsList(eventDetail.lastPointsList);
  const eventDidPropagate = triggerEventCallback(eventDetail.element, TOUCH_START, eventDetail);
  if (eventDidPropagate) {
    triggerEventCallback(eventDetail.element, TOUCH_START_ACTIVATE, eventDetail);
  }
}
function _onTouchDrag(evt) {
  const currentPointsList = getTouchEventPoints(evt, state3.element);
  const lastPointsList = _updateTouchEventsLastPoints(state3.element, state3.lastPointsList);
  const deltaPoints = currentPointsList.length === lastPointsList.length ? getDeltaPoints(currentPointsList, lastPointsList) : zeroIPoint;
  const deltaDistance = currentPointsList.length === lastPointsList.length ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList) : zeroIDistance;
  const totalDistance = currentPointsList.length === lastPointsList.length ? getDeltaDistance(currentPointsList, state3.lastPointsList) : zeroIDistance;
  state3.accumulatedDistance = {
    page: state3.accumulatedDistance.page + totalDistance.page,
    client: state3.accumulatedDistance.client + totalDistance.client,
    canvas: state3.accumulatedDistance.canvas + totalDistance.canvas,
    world: state3.accumulatedDistance.world + totalDistance.world
  };
  const eventDetail = {
    event: evt,
    eventName: TOUCH_DRAG,
    renderingEngineId: state3.renderingEngineId,
    viewportId: state3.viewportId,
    camera: {},
    element: state3.element,
    startPoints: getMeanTouchPoints(state3.startPointsList),
    lastPoints: getMeanTouchPoints(lastPointsList),
    currentPoints: getMeanTouchPoints(currentPointsList),
    startPointsList: copyPointsList(state3.startPointsList),
    lastPointsList: copyPointsList(lastPointsList),
    currentPointsList,
    deltaPoints,
    deltaDistance
  };
  triggerEventCallback(state3.element, TOUCH_DRAG, eventDetail);
  _checkTouchSwipe(evt, deltaPoints);
  state3.lastPointsList = copyPointsList(currentPointsList);
}
function _onTouchEnd(evt) {
  clearTimeout(state3.pressTimeout);
  const currentPointsList = getTouchEventPoints(evt, state3.element);
  const lastPointsList = _updateTouchEventsLastPoints(state3.element, state3.lastPointsList);
  const deltaPoints = currentPointsList.length === lastPointsList.length ? getDeltaPoints(currentPointsList, lastPointsList) : getDeltaPoints(currentPointsList, currentPointsList);
  const deltaDistance = currentPointsList.length === lastPointsList.length ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList) : getDeltaDistanceBetweenIPoints(currentPointsList, currentPointsList);
  const eventDetail = {
    event: evt,
    eventName: TOUCH_END,
    element: state3.element,
    renderingEngineId: state3.renderingEngineId,
    viewportId: state3.viewportId,
    camera: {},
    startPointsList: copyPointsList(state3.startPointsList),
    lastPointsList: copyPointsList(lastPointsList),
    currentPointsList,
    startPoints: getMeanTouchPoints(state3.startPointsList),
    lastPoints: getMeanTouchPoints(lastPointsList),
    currentPoints: getMeanTouchPoints(currentPointsList),
    deltaPoints,
    deltaDistance
  };
  triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);
  _checkTouchTap(evt);
  state3 = JSON.parse(JSON.stringify(defaultState3));
  document.removeEventListener("touchmove", _onTouchDrag);
  document.removeEventListener("touchend", _onTouchEnd);
}
function _checkTouchTap(evt) {
  const currentTime = (/* @__PURE__ */ new Date()).getTime();
  const startTime = state3.startTime.getTime();
  if (currentTime - startTime > tapState.tapToleranceMs) {
    return;
  }
  if (tapState.taps === 0) {
    tapState.element = state3.element;
    tapState.renderingEngineId = state3.renderingEngineId;
    tapState.viewportId = state3.viewportId;
    tapState.startPointsList = state3.startPointsList;
  }
  if (tapState.taps > 0 && !(tapState.element == state3.element && tapState.renderingEngineId == state3.renderingEngineId && tapState.viewportId == state3.viewportId)) {
    return;
  }
  const currentPointsList = getTouchEventPoints(evt, tapState.element);
  const distanceFromStart = getDeltaDistance(currentPointsList, tapState.startPointsList).canvas;
  if (distanceFromStart > tapState.tapMaxDistance) {
    return;
  }
  clearTimeout(tapState.tapTimeout);
  tapState.taps += 1;
  tapState.tapTimeout = setTimeout(() => {
    const eventDetail = {
      event: evt,
      eventName: TOUCH_TAP,
      element: tapState.element,
      renderingEngineId: tapState.renderingEngineId,
      viewportId: tapState.viewportId,
      camera: {},
      currentPointsList,
      currentPoints: getMeanTouchPoints(currentPointsList),
      taps: tapState.taps
    };
    triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);
    tapState = JSON.parse(JSON.stringify(defaultTapState));
  }, tapState.tapToleranceMs);
}
function _checkTouchSwipe(evt, deltaPoints) {
  const currentTime = (/* @__PURE__ */ new Date()).getTime();
  const startTime = state3.startTime.getTime();
  if (state3.swiped || currentTime - startTime > state3.swipeToleranceMs) {
    return;
  }
  const [x, y] = deltaPoints.canvas;
  const eventDetail = {
    event: evt,
    eventName: TOUCH_SWIPE,
    renderingEngineId: state3.renderingEngineId,
    viewportId: state3.viewportId,
    camera: {},
    element: state3.element,
    swipe: null
  };
  if (Math.abs(x) > state3.swipeDistanceThreshold) {
    eventDetail.swipe = x > 0 ? Swipe.RIGHT : Swipe.LEFT;
    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);
    state3.swiped = true;
  }
  if (Math.abs(y) > state3.swipeDistanceThreshold) {
    eventDetail.swipe = y > 0 ? Swipe.DOWN : Swipe.UP;
    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);
    state3.swiped = true;
  }
}
function _updateTouchEventsLastPoints(element, lastPoints) {
  const { viewport } = getEnabledElement(element);
  return lastPoints.map((lp) => {
    const world = viewport.canvasToWorld(lp.canvas);
    return {
      page: lp.page,
      client: lp.client,
      canvas: lp.canvas,
      world,
      touch: lp.touch
    };
  });
}
var touchStartListener_default = touchStartListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js
function disable3(element) {
  preventGhostClick_default.disable(element);
  element.removeEventListener("touchstart", touchStartListener_default);
}
function enable3(element) {
  disable3(element);
  preventGhostClick_default.enable(element);
  element.addEventListener("touchstart", touchStartListener_default, {
    passive: false
  });
}
var touch_default = {
  enable: enable3,
  disable: disable3
};

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/normalizeWheel.js
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function normalizeWheel(event) {
  let spinX = 0, spinY = 0, pixelX = 0, pixelY = 0;
  if ("detail" in event) {
    spinY = event.detail;
  }
  if ("wheelDelta" in event) {
    spinY = -event.wheelDelta / 120;
  }
  if ("wheelDeltaY" in event) {
    spinY = -event.wheelDeltaY / 120;
  }
  if ("wheelDeltaX" in event) {
    spinX = -event.wheelDeltaX / 120;
  }
  pixelX = spinX * PIXEL_STEP;
  pixelY = spinY * PIXEL_STEP;
  if ("deltaY" in event) {
    pixelY = event.deltaY;
  }
  if ("deltaX" in event) {
    pixelX = event.deltaX;
  }
  if ((pixelX || pixelY) && event.deltaMode) {
    if (event.deltaMode === 1) {
      pixelX *= LINE_HEIGHT;
      pixelY *= LINE_HEIGHT;
    } else {
      pixelX *= PAGE_HEIGHT;
      pixelY *= PAGE_HEIGHT;
    }
  }
  if (pixelX && !spinX) {
    spinX = pixelX < 1 ? -1 : 1;
  }
  if (pixelY && !spinY) {
    spinY = pixelY < 1 ? -1 : 1;
  }
  return {
    spinX,
    spinY,
    pixelX,
    pixelY
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/wheelListener.js
function wheelListener(evt) {
  const element = evt.currentTarget;
  const enabledElement = getEnabledElement(element);
  const { renderingEngineId, viewportId } = enabledElement;
  if (evt.deltaY > -1 && evt.deltaY < 1) {
    return;
  }
  evt.preventDefault();
  const { spinX, spinY, pixelX, pixelY } = normalizeWheel(evt);
  const direction = spinY < 0 ? -1 : 1;
  const eventDetail = {
    event: evt,
    eventName: Events_default.MOUSE_WHEEL,
    renderingEngineId,
    viewportId,
    element,
    camera: {},
    detail: evt,
    wheel: {
      spinX,
      spinY,
      pixelX,
      pixelY,
      direction
    },
    points: getMouseEventPoints(evt)
  };
  triggerEvent(element, Events_default.MOUSE_WHEEL, eventDetail);
}
var wheelListener_default = wheelListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js
function enable4(element) {
  disable4(element);
  element.addEventListener("wheel", wheelListener_default, { passive: false });
}
function disable4(element) {
  element.removeEventListener("wheel", wheelListener_default);
}
var wheel_default = {
  enable: enable4,
  disable: disable4
};

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/keyDownListener.js
var defaultState4 = {
  renderingEngineId: void 0,
  viewportId: void 0,
  key: void 0,
  keyCode: void 0,
  element: null
};
var state4 = {
  renderingEngineId: void 0,
  viewportId: void 0,
  key: void 0,
  keyCode: void 0,
  element: null
};
function keyListener(evt) {
  state4.element = evt.currentTarget;
  const enabledElement = getEnabledElement(state4.element);
  const { renderingEngineId, viewportId } = enabledElement;
  state4.renderingEngineId = renderingEngineId;
  state4.viewportId = viewportId;
  state4.key = evt.key;
  state4.keyCode = evt.keyCode;
  evt.preventDefault();
  const eventDetail = {
    renderingEngineId: state4.renderingEngineId,
    viewportId: state4.viewportId,
    element: state4.element,
    key: state4.key,
    keyCode: state4.keyCode
  };
  triggerEvent(eventDetail.element, Events_default.KEY_DOWN, eventDetail);
  document.addEventListener("keyup", _onKeyUp);
  document.addEventListener("visibilitychange", _onVisibilityChange);
  state4.element.removeEventListener("keydown", keyListener);
}
function _onVisibilityChange() {
  document.removeEventListener("visibilitychange", _onVisibilityChange);
  if (document.visibilityState === "hidden") {
    resetModifierKey();
  }
}
function _onKeyUp(evt) {
  const eventDetail = {
    renderingEngineId: state4.renderingEngineId,
    viewportId: state4.viewportId,
    element: state4.element,
    key: state4.key,
    keyCode: state4.keyCode
  };
  document.removeEventListener("keyup", _onKeyUp);
  document.removeEventListener("visibilitychange", _onVisibilityChange);
  state4.element.addEventListener("keydown", keyListener);
  state4 = structuredClone(defaultState4);
  triggerEvent(eventDetail.element, Events_default.KEY_UP, eventDetail);
}
function getModifierKey() {
  return state4.keyCode;
}
function resetModifierKey() {
  state4.keyCode = void 0;
}
var keyDownListener_default = keyListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/index.js
function enable5(element) {
  disable5(element);
  element.addEventListener("keydown", keyDownListener_default);
}
function disable5(element) {
  element.removeEventListener("keydown", keyDownListener_default);
}
var keyboard_default = {
  enable: enable5,
  disable: disable5,
  getModifierKey
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js
var triggerSegmentationEvents_exports = {};
__export(triggerSegmentationEvents_exports, {
  triggerSegmentationDataModified: () => triggerSegmentationDataModified,
  triggerSegmentationModified: () => triggerSegmentationModified,
  triggerSegmentationRemoved: () => triggerSegmentationRemoved,
  triggerSegmentationRepresentationModified: () => triggerSegmentationRepresentationModified,
  triggerSegmentationRepresentationRemoved: () => triggerSegmentationRepresentationRemoved
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js
var { EPSILON: EPSILON2 } = constants_exports;
function calculateBoundingBox(points, dimensions, isWorld = false) {
  let xMin = Infinity;
  let xMax = isWorld ? -Infinity : 0;
  let yMin = Infinity;
  let yMax = isWorld ? -Infinity : 0;
  let zMin = Infinity;
  let zMax = isWorld ? -Infinity : 0;
  const is3D = points[0]?.length === 3;
  for (let i = 0; i < points.length; i++) {
    const p = points[i];
    xMin = Math.min(p[0], xMin);
    xMax = Math.max(p[0], xMax);
    yMin = Math.min(p[1], yMin);
    yMax = Math.max(p[1], yMax);
    if (is3D) {
      zMin = Math.min(p[2] ?? zMin, zMin);
      zMax = Math.max(p[2] ?? zMax, zMax);
    }
  }
  if (dimensions) {
    xMin = Math.max(isWorld ? dimensions[0] + EPSILON2 : 0, xMin);
    xMax = Math.min(isWorld ? dimensions[0] - EPSILON2 : dimensions[0] - 1, xMax);
    yMin = Math.max(isWorld ? dimensions[1] + EPSILON2 : 0, yMin);
    yMax = Math.min(isWorld ? dimensions[1] - EPSILON2 : dimensions[1] - 1, yMax);
    if (is3D && dimensions.length === 3) {
      zMin = Math.max(isWorld ? dimensions[2] + EPSILON2 : 0, zMin);
      zMax = Math.min(isWorld ? dimensions[2] - EPSILON2 : dimensions[2] - 1, zMax);
    }
  } else if (!isWorld) {
    xMin = Math.max(0, xMin);
    xMax = Math.min(Infinity, xMax);
    yMin = Math.max(0, yMin);
    yMax = Math.min(Infinity, yMax);
    if (is3D) {
      zMin = Math.max(0, zMin);
      zMax = Math.min(Infinity, zMax);
    }
  }
  return is3D ? [
    [xMin, xMax],
    [yMin, yMax],
    [zMin, zMax]
  ] : [[xMin, xMax], [yMin, yMax], null];
}
function getBoundingBoxAroundShapeIJK(points, dimensions) {
  return calculateBoundingBox(points, dimensions, false);
}
function getBoundingBoxAroundShapeWorld(points, clipBounds) {
  return calculateBoundingBox(points, clipBounds, true);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js
var equalsCheck = (a, b) => {
  return JSON.stringify(a) === JSON.stringify(b);
};
function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {
  const halfSpacingX = voxelSpacing[0] / 2;
  const halfSpacingY = voxelSpacing[1] / 2;
  const halfSpacingZ = voxelSpacing[2] / 2;
  const voxelCornersIJK = new Array(8);
  voxelCornersIJK[0] = utilities_exports.transformWorldToIndex(imageData, [
    voxelCenter[0] - halfSpacingX,
    voxelCenter[1] - halfSpacingY,
    voxelCenter[2] - halfSpacingZ
  ]);
  const offsets = [
    [1, -1, -1],
    [-1, 1, -1],
    [1, 1, -1],
    [-1, -1, 1],
    [1, -1, 1],
    [-1, 1, 1],
    [1, 1, 1]
  ];
  for (let i = 0; i < 7; i++) {
    const [xOff, yOff, zOff] = offsets[i];
    voxelCornersIJK[i + 1] = utilities_exports.transformWorldToIndex(imageData, [
      voxelCenter[0] + xOff * halfSpacingX,
      voxelCenter[1] + yOff * halfSpacingY,
      voxelCenter[2] + zOff * halfSpacingZ
    ]);
  }
  return getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);
}
function processVolumes(segmentationVolume, thresholdVolumeInformation) {
  const { spacing: segmentationSpacing } = segmentationVolume;
  const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();
  const volumeInfoList = [];
  let baseVolumeIdx = 0;
  for (let i = 0; i < thresholdVolumeInformation.length; i++) {
    const { imageData, spacing, dimensions, voxelManager } = thresholdVolumeInformation[i].volume;
    const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();
    if (volumeSize === scalarDataLength && equalsCheck(spacing, segmentationSpacing)) {
      baseVolumeIdx = i;
    }
    const lower = thresholdVolumeInformation[i].lower;
    const upper = thresholdVolumeInformation[i].upper;
    volumeInfoList.push({
      imageData,
      lower,
      upper,
      spacing,
      dimensions,
      volumeSize,
      voxelManager
    });
  }
  return {
    volumeInfoList,
    baseVolumeIdx
  };
}
var segmentIndicesCache = /* @__PURE__ */ new Map();
var setSegmentationDirty = (segmentationId) => {
  const cached = segmentIndicesCache.get(segmentationId);
  if (cached) {
    cached.isDirty = true;
  }
};
var getCachedSegmentIndices = (segmentationId) => {
  const cached = segmentIndicesCache.get(segmentationId);
  if (cached && !cached.isDirty) {
    return cached.indices;
  }
  return null;
};
var setCachedSegmentIndices = (segmentationId, indices) => {
  segmentIndicesCache.set(segmentationId, { indices, isDirty: false });
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js
function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {
  const eventDetail = {
    segmentationId,
    modifiedSlicesToUse,
    segmentIndex
  };
  setSegmentationDirty(segmentationId);
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_DATA_MODIFIED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationModified.js
function triggerSegmentationModified(segmentationId) {
  const eventDetail = {
    segmentationId
  };
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_MODIFIED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationRemoved.js
function triggerSegmentationRemoved(segmentationId) {
  const eventDetail = {
    segmentationId
  };
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_REMOVED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationRepresentationModified.js
function triggerSegmentationRepresentationModified(viewportId, segmentationId, type) {
  const eventDetail = {
    segmentationId,
    type,
    viewportId
  };
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_REPRESENTATION_MODIFIED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationRepresentationRemoved.js
function triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type) {
  const eventDetail = {
    viewportId,
    segmentationId,
    type
  };
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_REPRESENTATION_REMOVED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfig.js
var defaultContourConfig = {
  renderOutline: true,
  outlineWidthAutoGenerated: 3,
  outlineWidth: 1,
  outlineWidthInactive: 1,
  outlineOpacity: 1,
  outlineOpacityInactive: 0.85,
  outlineDash: void 0,
  outlineDashInactive: void 0,
  outlineDashAutoGenerated: "5,3",
  activeSegmentOutlineWidthDelta: 0,
  renderFill: true,
  fillAlpha: 0.5,
  fillAlphaInactive: 0.3,
  fillAlphaAutoGenerated: 0.3
};
function getDefaultContourStyle() {
  return defaultContourConfig;
}
var contourConfig_default = getDefaultContourStyle;

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js
var defaultLabelmapConfig = {
  renderOutline: true,
  renderOutlineInactive: true,
  outlineWidth: 3,
  outlineWidthInactive: 2,
  activeSegmentOutlineWidthDelta: 0,
  renderFill: true,
  renderFillInactive: true,
  fillAlpha: 0.5,
  fillAlphaInactive: 0.4,
  outlineOpacity: 1,
  outlineOpacityInactive: 0.85
};
function getDefaultLabelmapStyle() {
  return defaultLabelmapConfig;
}
var labelmapConfig_default = getDefaultLabelmapStyle;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js
var SegmentationStyle = class {
  constructor() {
    this.config = {
      global: {},
      segmentations: {},
      viewportsStyle: {}
    };
  }
  setStyle(specifier, styles) {
    const { viewportId, segmentationId, type, segmentIndex } = specifier;
    const currentStyles = this.getStyle(specifier);
    let updatedStyles;
    if (!viewportId && !segmentationId) {
      updatedStyles = {
        ...currentStyles,
        ...styles
      };
    } else {
      updatedStyles = this.copyActiveToInactiveIfNotProvided({
        ...currentStyles,
        ...styles
      }, type);
    }
    if (!type) {
      throw new Error("Type is required to set a style");
    }
    if (viewportId) {
      if (!this.config.viewportsStyle[viewportId]) {
        this.config.viewportsStyle[viewportId] = {
          renderInactiveSegmentations: false,
          representations: {}
        };
      }
      const representations = this.config.viewportsStyle[viewportId].representations;
      if (segmentationId) {
        if (!representations[segmentationId]) {
          representations[segmentationId] = {};
        }
        if (!representations[segmentationId][type]) {
          representations[segmentationId][type] = {};
        }
        const repConfig = representations[segmentationId][type];
        if (segmentIndex !== void 0) {
          if (!repConfig.perSegment) {
            repConfig.perSegment = {};
          }
          repConfig.perSegment[segmentIndex] = updatedStyles;
        } else {
          repConfig.allSegments = updatedStyles;
        }
      } else {
        const ALL_SEGMENTATIONS_KEY = "__allSegmentations__";
        if (!representations[ALL_SEGMENTATIONS_KEY]) {
          representations[ALL_SEGMENTATIONS_KEY] = {};
        }
        if (!representations[ALL_SEGMENTATIONS_KEY][type]) {
          representations[ALL_SEGMENTATIONS_KEY][type] = {};
        }
        representations[ALL_SEGMENTATIONS_KEY][type].allSegments = updatedStyles;
      }
    } else if (segmentationId) {
      if (!this.config.segmentations[segmentationId]) {
        this.config.segmentations[segmentationId] = {};
      }
      if (!this.config.segmentations[segmentationId][type]) {
        this.config.segmentations[segmentationId][type] = {};
      }
      const segConfig = this.config.segmentations[segmentationId][type];
      if (segmentIndex !== void 0) {
        if (!segConfig.perSegment) {
          segConfig.perSegment = {};
        }
        segConfig.perSegment[segmentIndex] = updatedStyles;
      } else {
        segConfig.allSegments = updatedStyles;
      }
    } else {
      this.config.global[type] = updatedStyles;
    }
  }
  copyActiveToInactiveIfNotProvided(styles, type) {
    const processedStyles = { ...styles };
    if (type === SegmentationRepresentations_default.Labelmap) {
      const labelmapStyles = processedStyles;
      labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;
      labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;
      labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;
      labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;
      labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;
    } else if (type === SegmentationRepresentations_default.Contour) {
      const contourStyles = processedStyles;
      contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;
      contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;
      contourStyles.outlineDashInactive ??= contourStyles.outlineDash;
      contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;
      contourStyles.renderFillInactive ??= contourStyles.renderFill;
      contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;
    }
    return processedStyles;
  }
  getStyle(specifier) {
    const { viewportId, segmentationId, type, segmentIndex } = specifier;
    let combinedStyle = this.getDefaultStyle(type);
    let renderInactiveSegmentations = false;
    if (this.config.global[type]) {
      combinedStyle = {
        ...combinedStyle,
        ...this.config.global[type]
      };
    }
    if (this.config.segmentations[segmentationId]?.[type]) {
      combinedStyle = {
        ...combinedStyle,
        ...this.config.segmentations[segmentationId][type].allSegments
      };
      if (segmentIndex !== void 0 && this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {
        combinedStyle = {
          ...combinedStyle,
          ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex]
        };
      }
    }
    if (viewportId && this.config.viewportsStyle[viewportId]) {
      renderInactiveSegmentations = this.config.viewportsStyle[viewportId].renderInactiveSegmentations;
      const allSegmentationsKey = "__allSegmentations__";
      if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {
        combinedStyle = {
          ...combinedStyle,
          ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments
        };
      }
      if (segmentationId && this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {
        combinedStyle = {
          ...combinedStyle,
          ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments
        };
        if (segmentIndex !== void 0 && this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {
          combinedStyle = {
            ...combinedStyle,
            ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex]
          };
        }
      }
    }
    return combinedStyle;
  }
  getRenderInactiveSegmentations(viewportId) {
    return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;
  }
  setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {
    if (!this.config.viewportsStyle[viewportId]) {
      this.config.viewportsStyle[viewportId] = {
        renderInactiveSegmentations: false,
        representations: {}
      };
    }
    this.config.viewportsStyle[viewportId].renderInactiveSegmentations = renderInactiveSegmentations;
  }
  getDefaultStyle(type) {
    switch (type) {
      case SegmentationRepresentations_default.Labelmap:
        return labelmapConfig_default();
      case SegmentationRepresentations_default.Contour:
        return contourConfig_default();
      case SegmentationRepresentations_default.Surface:
        return {};
      default:
        throw new Error(`Unknown representation type: ${type}`);
    }
  }
  clearSegmentationStyle(segmentationId) {
    if (this.config.segmentations[segmentationId]) {
      delete this.config.segmentations[segmentationId];
    }
  }
  clearAllSegmentationStyles() {
    this.config.segmentations = {};
  }
  clearViewportStyle(viewportId) {
    if (this.config.viewportsStyle[viewportId]) {
      delete this.config.viewportsStyle[viewportId];
    }
  }
  clearAllViewportStyles() {
    for (const viewportId in this.config.viewportsStyle) {
      const viewportStyle = this.config.viewportsStyle[viewportId];
      const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;
      this.config.viewportsStyle[viewportId] = {
        renderInactiveSegmentations,
        representations: {}
      };
    }
  }
  resetToGlobalStyle() {
    this.clearAllSegmentationStyles();
    this.clearAllViewportStyles();
  }
  hasCustomStyle(specifier) {
    const { type } = specifier;
    const style = this.getStyle(specifier);
    const defaultStyle = this.getDefaultStyle(type);
    return !utilities_exports.deepEqual(style, defaultStyle);
  }
};
var segmentationStyle = new SegmentationStyle();

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationAdded.js
function triggerSegmentationAdded(segmentationId) {
  const eventDetail = {
    segmentationId
  };
  triggerEvent(eventTarget_default, Events_default.SEGMENTATION_ADDED, eventDetail);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js
var initialDefaultState = {
  colorLUT: [],
  segmentations: [],
  viewportSegRepresentations: {}
};
var SegmentationStateManager = class {
  constructor(uid) {
    this._stackLabelmapImageIdReferenceMap = /* @__PURE__ */ new Map();
    this._labelmapImageIdReferenceMap = /* @__PURE__ */ new Map();
    uid ||= utilities_exports.uuidv4();
    this.state = Object.freeze(utilities_exports.deepClone(initialDefaultState));
    this.uid = uid;
  }
  getState() {
    return this.state;
  }
  updateState(updater) {
    const newState = utilities_exports.deepClone(this.state);
    updater(newState);
    this.state = Object.freeze(newState);
  }
  getColorLUT(lutIndex) {
    return this.state.colorLUT[lutIndex];
  }
  getNextColorLUTIndex() {
    return this.state.colorLUT.length;
  }
  resetState() {
    this._stackLabelmapImageIdReferenceMap.clear();
    this._labelmapImageIdReferenceMap.clear();
    this.state = Object.freeze(utilities_exports.deepClone(initialDefaultState));
  }
  getSegmentation(segmentationId) {
    return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);
  }
  updateSegmentation(segmentationId, payload) {
    this.updateState((draftState) => {
      const segmentation = draftState.segmentations.find((segmentation2) => segmentation2.segmentationId === segmentationId);
      if (!segmentation) {
        console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);
        return;
      }
      Object.assign(segmentation, payload);
    });
    triggerSegmentationModified(segmentationId);
  }
  addSegmentation(segmentation) {
    if (this.getSegmentation(segmentation.segmentationId)) {
      throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);
    }
    this.updateState((state8) => {
      const newSegmentation = utilities_exports.deepClone(segmentation);
      if (newSegmentation.representationData.Labelmap && "volumeId" in newSegmentation.representationData.Labelmap && !("imageIds" in newSegmentation.representationData.Labelmap)) {
        const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);
        newSegmentation.representationData.Labelmap.imageIds = imageIds;
      }
      state8.segmentations.push(newSegmentation);
    });
    triggerSegmentationAdded(segmentation.segmentationId);
  }
  removeSegmentation(segmentationId) {
    this.updateState((state8) => {
      const filteredSegmentations = state8.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);
      state8.segmentations.splice(0, state8.segmentations.length, ...filteredSegmentations);
    });
    triggerSegmentationRemoved(segmentationId);
  }
  addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      return;
    }
    const existingRepresentations = this.getSegmentationRepresentations(viewportId, {
      type,
      segmentationId
    });
    if (existingRepresentations.length > 0) {
      console.debug("A segmentation representation of type", type, "already exists in viewport", viewportId, "for segmentation", segmentationId);
      return;
    }
    this.updateState((state8) => {
      if (!state8.viewportSegRepresentations[viewportId]) {
        state8.viewportSegRepresentations[viewportId] = [];
        segmentationStyle.setRenderInactiveSegmentations(viewportId, true);
      }
      if (type !== SegmentationRepresentations_default.Labelmap) {
        this.addDefaultSegmentationRepresentation(state8, viewportId, segmentationId, type, renderingConfig);
      } else {
        this.addLabelmapRepresentation(state8, viewportId, segmentationId, renderingConfig);
      }
    });
    triggerSegmentationRepresentationModified(viewportId, segmentationId, type);
  }
  addDefaultSegmentationRepresentation(state8, viewportId, segmentationId, type, renderingConfig) {
    const segmentation = state8.segmentations.find((segmentation2) => segmentation2.segmentationId === segmentationId);
    if (!segmentation) {
      return;
    }
    const segmentReps = {};
    Object.keys(segmentation.segments).forEach((segmentIndex) => {
      segmentReps[Number(segmentIndex)] = {
        visible: true
      };
    });
    state8.viewportSegRepresentations[viewportId].push({
      segmentationId,
      type,
      active: true,
      visible: true,
      colorLUTIndex: renderingConfig?.colorLUTIndex || 0,
      segments: segmentReps,
      config: {
        ...getDefaultRenderingConfig(type),
        ...renderingConfig
      }
    });
    this._setActiveSegmentation(state8, viewportId, segmentationId);
  }
  addLabelmapRepresentation(state8, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations_default.Labelmap)) {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      return;
    }
    const segmentation = this.getSegmentation(segmentationId);
    if (!segmentation) {
      return;
    }
    const { representationData } = segmentation;
    if (!representationData.Labelmap) {
      return this.addDefaultSegmentationRepresentation(state8, viewportId, segmentationId, SegmentationRepresentations_default.Labelmap, renderingConfig);
    }
    this.processLabelmapRepresentationAddition(viewportId, segmentationId);
    this.addDefaultSegmentationRepresentation(state8, viewportId, segmentationId, SegmentationRepresentations_default.Labelmap, renderingConfig);
  }
  async processLabelmapRepresentationAddition(viewportId, segmentationId) {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      return;
    }
    const segmentation = this.getSegmentation(segmentationId);
    if (!segmentation) {
      return;
    }
    const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport_default;
    const { representationData } = segmentation;
    const isBaseVolumeSegmentation = "volumeId" in representationData.Labelmap;
    const viewport = enabledElement.viewport;
    if (!volumeViewport && !isBaseVolumeSegmentation) {
      !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);
    }
  }
  _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {
    const referenceImageId = viewport.getCurrentImageId();
    let viewableLabelmapImageIdFound = false;
    for (const labelmapImageId of labelmapImageIds) {
      const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });
      if (viewableImageId) {
        viewableLabelmapImageIdFound = true;
        this._stackLabelmapImageIdReferenceMap.get(segmentationId).set(referenceImageId, labelmapImageId);
        this._updateLabelmapImageIdReferenceMap({
          segmentationId,
          referenceImageId,
          labelmapImageId
        });
      }
    }
    if (updateCallback) {
      updateCallback(viewport, segmentationId, labelmapImageIds);
    }
    return viewableLabelmapImageIdFound ? this._stackLabelmapImageIdReferenceMap.get(segmentationId).get(referenceImageId) : void 0;
  }
  updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {
    const segmentation = this.getSegmentation(segmentationId);
    if (!segmentation) {
      return;
    }
    if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {
      this._stackLabelmapImageIdReferenceMap.set(segmentationId, /* @__PURE__ */ new Map());
    }
    const { representationData } = segmentation;
    if (!representationData.Labelmap) {
      return;
    }
    const labelmapImageIds = this.getLabelmapImageIds(representationData);
    const enabledElement = getEnabledElementByViewportId(viewportId);
    const stackViewport = enabledElement.viewport;
    return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);
  }
  _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {
    const segmentation = this.getSegmentation(segmentationId);
    if (!segmentation) {
      return;
    }
    if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {
      this._stackLabelmapImageIdReferenceMap.set(segmentationId, /* @__PURE__ */ new Map());
    }
    const { representationData } = segmentation;
    if (!representationData.Labelmap) {
      return;
    }
    const labelmapImageIds = this.getLabelmapImageIds(representationData);
    const enabledElement = getEnabledElementByViewportId(viewportId);
    const stackViewport = enabledElement.viewport;
    this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport2, segmentationId2, labelmapImageIds2) => {
      const imageIds = stackViewport2.getImageIds();
      imageIds.forEach((referenceImageId, index) => {
        for (const labelmapImageId of labelmapImageIds2) {
          const viewableImageId = stackViewport2.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });
          if (viewableImageId) {
            this._stackLabelmapImageIdReferenceMap.get(segmentationId2).set(referenceImageId, labelmapImageId);
            this._updateLabelmapImageIdReferenceMap({
              segmentationId: segmentationId2,
              referenceImageId,
              labelmapImageId
            });
          }
        }
      });
    });
  }
  getLabelmapImageIds(representationData) {
    const labelmapData = representationData.Labelmap;
    let labelmapImageIds;
    if (labelmapData.imageIds) {
      labelmapImageIds = labelmapData.imageIds;
    } else if (!labelmapImageIds && labelmapData.volumeId) {
      const volumeId = labelmapData.volumeId;
      const volume = cache_default.getVolume(volumeId);
      labelmapImageIds = volume.imageIds;
    }
    return labelmapImageIds;
  }
  getLabelmapImageIdsForImageId(imageId, segmentationId) {
    const key = this._generateMapKey({
      segmentationId,
      referenceImageId: imageId
    });
    return this._labelmapImageIdReferenceMap.get(key);
  }
  getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      return;
    }
    const stackViewport = enabledElement.viewport;
    const referenceImageId = stackViewport.getCurrentImageId();
    return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);
  }
  getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      return;
    }
    if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {
      return;
    }
    const stackViewport = enabledElement.viewport;
    const currentImageId = stackViewport.getCurrentImageId();
    const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);
    return imageIdReferenceMap.get(currentImageId);
  }
  getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {
    const segmentation = this.getSegmentation(segmentationId);
    if (!segmentation) {
      return [];
    }
    this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);
    const { viewport } = getEnabledElementByViewportId(viewportId);
    const imageIds = viewport.getImageIds();
    const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);
    return imageIds.map((imageId) => {
      return associatedReferenceImageAndLabelmapImageIds.get(imageId);
    });
  }
  removeSegmentationRepresentationsInternal(viewportId, specifier) {
    const removedRepresentations = [];
    this.updateState((state8) => {
      if (!state8.viewportSegRepresentations[viewportId]) {
        return;
      }
      const currentRepresentations = state8.viewportSegRepresentations[viewportId];
      let activeRepresentationRemoved = false;
      if (!specifier || Object.values(specifier).every((value) => value === void 0)) {
        removedRepresentations.push(...currentRepresentations);
        delete state8.viewportSegRepresentations[viewportId];
      } else {
        const { segmentationId, type } = specifier;
        state8.viewportSegRepresentations[viewportId] = currentRepresentations.filter((representation) => {
          const shouldRemove = segmentationId && type && representation.segmentationId === segmentationId && representation.type === type || segmentationId && !type && representation.segmentationId === segmentationId || !segmentationId && type && representation.type === type;
          if (shouldRemove) {
            removedRepresentations.push(representation);
            if (representation.active) {
              activeRepresentationRemoved = true;
            }
          }
          return !shouldRemove;
        });
        if (state8.viewportSegRepresentations[viewportId].length === 0) {
          delete state8.viewportSegRepresentations[viewportId];
        } else if (activeRepresentationRemoved) {
          state8.viewportSegRepresentations[viewportId][0].active = true;
        }
      }
    });
    return removedRepresentations;
  }
  removeSegmentationRepresentations(viewportId, specifier) {
    const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);
    removedRepresentations.forEach((representation) => {
      triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);
    });
    const remainingRepresentations = this.getSegmentationRepresentations(viewportId);
    if (remainingRepresentations.length > 0 && remainingRepresentations[0].active) {
      triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);
    }
    return removedRepresentations;
  }
  removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {
    const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);
    if (!suppressEvent) {
      removedRepresentations.forEach(({ segmentationId, type }) => {
        triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);
      });
    }
    return removedRepresentations;
  }
  _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId }) {
    const key = this._generateMapKey({ segmentationId, referenceImageId });
    if (!this._labelmapImageIdReferenceMap.has(key)) {
      this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);
      return;
    }
    const currentValues = this._labelmapImageIdReferenceMap.get(key);
    const newValues = Array.from(/* @__PURE__ */ new Set([...currentValues, labelmapImageId]));
    this._labelmapImageIdReferenceMap.set(key, newValues);
  }
  _setActiveSegmentation(state8, viewportId, segmentationId) {
    const viewport = state8.viewportSegRepresentations[viewportId];
    if (!viewport) {
      return;
    }
    viewport.forEach((value) => {
      value.active = value.segmentationId === segmentationId;
    });
  }
  setActiveSegmentation(viewportId, segmentationId) {
    this.updateState((state8) => {
      const viewport = state8.viewportSegRepresentations[viewportId];
      if (!viewport) {
        return;
      }
      viewport.forEach((value) => {
        value.active = value.segmentationId === segmentationId;
      });
    });
    triggerSegmentationRepresentationModified(viewportId, segmentationId);
  }
  getActiveSegmentation(viewportId) {
    if (!this.state.viewportSegRepresentations[viewportId]) {
      return;
    }
    const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);
    if (!activeSegRep) {
      return;
    }
    return this.getSegmentation(activeSegRep.segmentationId);
  }
  getSegmentationRepresentations(viewportId, specifier = {}) {
    const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];
    if (!viewportRepresentations) {
      return [];
    }
    if (!specifier.type && !specifier.segmentationId) {
      return viewportRepresentations;
    }
    return viewportRepresentations.filter((representation) => {
      const typeMatch = specifier.type ? representation.type === specifier.type : true;
      const idMatch = specifier.segmentationId ? representation.segmentationId === specifier.segmentationId : true;
      return typeMatch && idMatch;
    });
  }
  getSegmentationRepresentation(viewportId, specifier) {
    return this.getSegmentationRepresentations(viewportId, specifier)[0];
  }
  getSegmentationRepresentationVisibility(viewportId, specifier) {
    const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);
    return viewportRepresentation?.visible;
  }
  setSegmentationRepresentationVisibility(viewportId, specifier, visible) {
    this.updateState((state8) => {
      const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);
      if (!viewportRepresentations) {
        return;
      }
      viewportRepresentations.forEach((representation) => {
        representation.visible = visible;
        Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {
          segment.visible = visible;
        });
      });
    });
    triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);
  }
  addColorLUT(colorLUT, lutIndex) {
    this.updateState((state8) => {
      if (state8.colorLUT[lutIndex]) {
        console.warn("Color LUT table already exists, overwriting");
      }
      state8.colorLUT[lutIndex] = utilities_exports.deepClone(colorLUT);
    });
  }
  removeColorLUT(colorLUTIndex) {
    this.updateState((state8) => {
      delete state8.colorLUT[colorLUTIndex];
    });
  }
  _getStackIdForImageIds(imageIds) {
    return imageIds.map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15))).join("_");
  }
  getAllViewportSegmentationRepresentations() {
    return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({
      viewportId,
      representations
    }));
  }
  getSegmentationRepresentationsBySegmentationId(segmentationId) {
    const result = [];
    Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {
      const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);
      if (filteredReps.length > 0) {
        result.push({ viewportId, representations: filteredReps });
      }
    });
    return result;
  }
  _generateMapKey({ segmentationId, referenceImageId }) {
    return `${segmentationId}-${referenceImageId}`;
  }
};
async function internalComputeVolumeLabelmapFromStack({ imageIds, options }) {
  const segmentationImageIds = imageIds;
  const volumeId = options?.volumeId || utilities_exports.uuidv4();
  await volumeLoader_exports.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);
  return { volumeId };
}
async function internalConvertStackToVolumeLabelmap({ segmentationId, options }) {
  const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);
  const data = segmentation.representationData.Labelmap;
  const { volumeId } = await internalComputeVolumeLabelmapFromStack({
    imageIds: data.imageIds,
    options
  });
  segmentation.representationData.Labelmap.volumeId = volumeId;
}
function getDefaultRenderingConfig(type) {
  const cfun = vtkColorTransferFunction$1.newInstance();
  const ofun = vtkPiecewiseFunction$1.newInstance();
  ofun.addPoint(0, 0);
  if (type === SegmentationRepresentations_default.Labelmap) {
    return {
      cfun,
      ofun
    };
  } else {
    return {};
  }
}
var defaultSegmentationStateManager = new SegmentationStateManager("DEFAULT");

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js
function getSegmentationRepresentations(viewportId, specifier = {}) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);
}
function getSegmentationRepresentation(viewportId, specifier) {
  const segmentationStateManager = defaultSegmentationStateManager;
  if (!specifier.segmentationId || !specifier.type) {
    throw new Error("getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them");
  }
  const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);
  return representations?.[0];
}
function getSegmentationRepresentationsBySegmentationId(segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/removeSurfaceFromElement.js
function removeSurfaceFromElement(element, segmentationId) {
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const actorEntries = viewport.getActors();
  const filteredSurfaceActors = actorEntries.filter((actor) => actor.representationUID && typeof actor.representationUID === "string" && actor.representationUID.startsWith(segmentationId));
  viewport.removeActors(filteredSurfaceActors.map((actor) => actor.uid));
}
var removeSurfaceFromElement_default = removeSurfaceFromElement;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/getSegmentationActor.js
function getActorEntry(viewportId, segmentationId, filterFn) {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { renderingEngine, viewport } = enabledElement;
  if (!renderingEngine || !viewport) {
    return;
  }
  const actors = viewport.getActors();
  const filteredActors = actors.filter(filterFn);
  return filteredActors.length > 0 ? filteredActors[0] : void 0;
}
function getActorEntries(viewportId, filterFn) {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { renderingEngine, viewport } = enabledElement;
  if (!renderingEngine || !viewport) {
    return;
  }
  const actors = viewport.getActors();
  const filteredActors = actors.filter(filterFn);
  return filteredActors.length > 0 ? filteredActors : void 0;
}
function getLabelmapActorUID(viewportId, segmentationId) {
  const actorEntry = getLabelmapActorEntry(viewportId, segmentationId);
  return actorEntry?.uid;
}
function getLabelmapActorEntries(viewportId, segmentationId) {
  return getActorEntries(viewportId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations_default.Labelmap}`));
}
function getLabelmapActorEntry(viewportId, segmentationId) {
  return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations_default.Labelmap}`));
}
function getSurfaceActorEntry(viewportId, segmentationId, segmentIndex) {
  return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID === getSurfaceRepresentationUID(segmentationId, segmentIndex));
}
function getSurfaceRepresentationUID(segmentationId, segmentIndex) {
  return `${segmentationId}-${SegmentationRepresentations_default.Surface}-${segmentIndex}`;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/addOrUpdateSurfaceToElement.js
function addOrUpdateSurfaceToElement(element, surface, segmentationId) {
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const surfaceActorEntry = getSurfaceActorEntry(viewport.id, segmentationId, surface.segmentIndex);
  const surfaceActor = surfaceActorEntry?.actor;
  const isVisible = surface.visible;
  if (surfaceActor) {
    surfaceActor.setVisibility(isVisible);
    if (!isVisible) {
      return;
    }
    const surfaceMapper = surfaceActor.getMapper();
    const currentPolyData = surfaceMapper.getInputData();
    const newPoints = surface.points;
    const newPolys = surface.polys;
    const currentPoints = currentPolyData.getPoints().getData();
    const currentPolys = currentPolyData.getPolys().getData();
    if (newPoints.length === currentPoints.length && newPolys.length === currentPolys.length) {
      return;
    }
    const polyData = vtkPolyData$1.newInstance();
    polyData.getPoints().setData(newPoints, 3);
    const triangles2 = vtkCellArray$1.newInstance({
      values: Float32Array.from(newPolys)
    });
    polyData.setPolys(triangles2);
    surfaceMapper.setInputData(polyData);
    surfaceMapper.modified();
    viewport.getRenderer().resetCameraClippingRange();
    return;
  }
  const points = surface.points;
  const polys = surface.polys;
  const color = surface.color;
  const surfacePolyData = vtkPolyData$1.newInstance();
  surfacePolyData.getPoints().setData(points, 3);
  const triangles = vtkCellArray$1.newInstance({
    values: Float32Array.from(polys)
  });
  surfacePolyData.setPolys(triangles);
  const mapper = vtkMapper$1.newInstance({});
  let clippingFilter;
  mapper.setInputData(surfacePolyData);
  const actor = vtkActor$1.newInstance();
  actor.setMapper(mapper);
  actor.getProperty().setColor(color[0] / 255, color[1] / 255, color[2] / 255);
  actor.getProperty().setLineWidth(2);
  const representationUID = getSurfaceRepresentationUID(segmentationId, surface.segmentIndex);
  viewport.addActor({
    uid: utilities_exports.uuidv4(),
    actor,
    clippingFilter,
    representationUID
  });
  viewport.resetCamera();
  viewport.getRenderer().resetCameraClippingRange();
  viewport.render();
}
var addOrUpdateSurfaceToElement_default = addOrUpdateSurfaceToElement;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentation.js
function getSegmentation(segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getSegmentation(segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getColorLUT.js
function getColorLUT(index) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getColorLUT(index);
}

// node_modules/@cornerstonejs/tools/dist/esm/config.js
var config = {};
function getConfig() {
  return config;
}
function setConfig(newConfig) {
  config = newConfig;
}
var polysegInitialized = false;
function getPolySeg() {
  if (!config.addons?.polySeg) {
    console.warn("PolySeg add-on not configured. This will prevent automatic conversion between segmentation representations (labelmap, contour, surface). To enable these features, install @cornerstonejs/polymorphic-segmentation and register it during initialization: cornerstoneTools.init({ addons: { polySeg } }).");
    return null;
  }
  const polyseg = config.addons.polySeg;
  if (!polysegInitialized) {
    polyseg.init();
    polysegInitialized = true;
  }
  return polyseg;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js
function internalAddRepresentationData({ segmentationId, type, data }) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    throw new Error(`Segmentation ${segmentationId} not found`);
  }
  if (segmentation.representationData[type]) {
    console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);
  }
  switch (type) {
    case SegmentationRepresentations_default.Labelmap:
      if (data) {
        segmentation.representationData[type] = data;
      }
      break;
    case SegmentationRepresentations_default.Contour:
      if (data) {
        segmentation.representationData[type] = data;
      }
      break;
    case SegmentationRepresentations_default.Surface:
      if (data) {
        segmentation.representationData[type] = data;
      }
      break;
    default:
      throw new Error(`Invalid representation type ${type}`);
  }
}
var internalAddRepresentationData_default = internalAddRepresentationData;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js
function isObject(value) {
  const type = typeof value;
  return value !== null && (type === "object" || type === "function");
}
var isObject_default = isObject;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js
function debounce(func, wait, options) {
  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;
  let lastInvokeTime = 0;
  let leading = false;
  let maxing = false;
  let trailing = true;
  const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === "function";
  if (typeof func !== "function") {
    throw new TypeError("Expected a function");
  }
  wait = Number(wait) || 0;
  if (isObject_default(options)) {
    leading = Boolean(options.leading);
    maxing = "maxWait" in options;
    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? Boolean(options.trailing) : trailing;
  }
  function invokeFunc(time) {
    const args = lastArgs;
    const thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function startTimer(pendingFunc, wait2) {
    if (useRAF) {
      return window.requestAnimationFrame(pendingFunc);
    }
    return setTimeout(pendingFunc, wait2);
  }
  function cancelTimer(id) {
    if (useRAF) {
      return window.cancelAnimationFrame(id);
    }
    clearTimeout(id);
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = startTimer(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    const timeWaiting = wait - timeSinceLastCall;
    return maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    const time = Date.now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = startTimer(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      cancelTimer(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(Date.now());
  }
  function pending() {
    return timerId !== void 0;
  }
  function debounced2(...args) {
    const time = Date.now();
    const isInvoking = shouldInvoke(time);
    lastArgs = args;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        timerId = startTimer(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = startTimer(timerExpired, wait);
    }
    return result;
  }
  debounced2.cancel = cancel;
  debounced2.flush = flush;
  debounced2.pending = pending;
  return debounced2;
}
var debounce_default = debounce;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/computeAndAddRepresentation.js
var computedRepresentations = /* @__PURE__ */ new Map();
async function computeAndAddRepresentation(segmentationId, type, computeFunction, updateFunction, onComputationComplete) {
  const data = await computeFunction();
  internalAddRepresentationData_default({
    segmentationId,
    type,
    data
  });
  onComputationComplete?.();
  if (!computedRepresentations.has(segmentationId)) {
    computedRepresentations.set(segmentationId, []);
  }
  const representations = computedRepresentations.get(segmentationId);
  if (!representations.includes(type)) {
    representations.push(type);
  }
  subscribeToSegmentationChanges(updateFunction);
  triggerSegmentationModified(segmentationId);
  return data;
}
function subscribeToSegmentationChanges(updateFunction) {
  const debouncedUpdateFunction = (event) => {
    _debouncedSegmentationModified(event, updateFunction);
  };
  updateFunction._debouncedUpdateFunction = debouncedUpdateFunction;
  eventTarget_default.removeEventListener(Events_default.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);
}
var _debouncedSegmentationModified = debounce_default((event, updateFunction) => {
  const segmentationId = event.detail.segmentationId;
  const representations = computedRepresentations.get(segmentationId);
  if (!representations || !representations.length) {
    return;
  }
  updateFunction(segmentationId);
  if (representations.length) {
    triggerSegmentationModified(segmentationId);
  }
}, 300);

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices.js
function internalGetHiddenSegmentIndices(viewportId, specifier) {
  const representation = getSegmentationRepresentation(viewportId, specifier);
  if (!representation) {
    return /* @__PURE__ */ new Set();
  }
  const segmentsHidden = Object.entries(representation.segments).reduce((acc, [segmentIndex, segment]) => {
    if (!segment.visible) {
      acc.add(Number(segmentIndex));
    }
    return acc;
  }, /* @__PURE__ */ new Set());
  return segmentsHidden;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/surfaceDisplay.js
function removeRepresentation(viewportId, segmentationId, renderImmediate = false) {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  removeSurfaceFromElement_default(viewport.element, segmentationId);
  if (!renderImmediate) {
    return;
  }
  viewport.render();
}
async function render(viewport, representation) {
  const { segmentationId, type } = representation;
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return;
  }
  let SurfaceData = segmentation.representationData[SegmentationRepresentations_default.Surface];
  if (!SurfaceData && getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations_default.Surface)) {
    const polySeg = getPolySeg();
    SurfaceData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations_default.Surface, () => polySeg.computeSurfaceData(segmentationId, { viewport }), () => polySeg.updateSurfaceData(segmentationId, { viewport }));
    if (!SurfaceData) {
      throw new Error(`No Surface data found for segmentationId ${segmentationId} even we tried to compute it`);
    }
  } else if (!SurfaceData && !getPolySeg()) {
    console.debug(`No surface data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to surface. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);
  }
  if (!SurfaceData) {
    console.warn(`No Surface data found for segmentationId ${segmentationId}. Skipping render.`);
    return;
  }
  const { geometryIds } = SurfaceData;
  if (!geometryIds?.size) {
    console.warn(`No Surfaces found for segmentationId ${segmentationId}. Skipping render.`);
  }
  const { colorLUTIndex } = representation;
  const colorLUT = getColorLUT(colorLUTIndex);
  const surfaces = [];
  geometryIds.forEach((geometryId) => {
    const geometry = cache_default.getGeometry(geometryId);
    if (!geometry?.data) {
      console.warn(`No Surfaces found for geometryId ${geometryId}. Skipping render.`);
      return;
    }
    const { segmentIndex } = geometry.data;
    const hiddenSegments = internalGetHiddenSegmentIndices(viewport.id, {
      segmentationId,
      type
    });
    const isHidden = hiddenSegments.has(segmentIndex);
    const surface = geometry.data;
    const color = colorLUT[segmentIndex];
    surface.color = color.slice(0, 3);
    surface.visible = !isHidden;
    surfaces.push(surface);
    addOrUpdateSurfaceToElement_default(viewport.element, surface, segmentationId);
  });
  viewport.render();
}
var surfaceDisplay_default = {
  render,
  removeRepresentation
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js
function annotationHydration(viewport, toolName, worldPoints, options) {
  const viewReference = viewport.getViewReference();
  const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points: worldPoints
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName,
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),
      ...options
    }
  };
  addAnnotation(annotation, viewport.element);
  return annotation;
}
function getReferencedImageId(viewport, worldPos, viewPlaneNormal) {
  let referencedImageId;
  if (viewport instanceof StackViewport_default) {
    referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);
  } else if (viewport instanceof BaseVolumeViewport_default) {
    const targetId = getTargetId(viewport);
    const volumeId = utilities_exports.getVolumeId(targetId);
    const imageVolume = cache_default.getVolume(volumeId);
    referencedImageId = utilities_exports.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
  } else {
    throw new Error("getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport");
  }
  return referencedImageId;
}
function getTargetId(viewport) {
  const targetId = viewport.getViewReferenceId?.();
  if (targetId) {
    return targetId;
  }
  if (viewport instanceof BaseVolumeViewport_default) {
    return `volumeId:${getTargetVolumeId(viewport)}`;
  }
  throw new Error("getTargetId: viewport must have a getTargetId method");
}
function getTargetVolumeId(viewport) {
  const actorEntries = viewport.getActors();
  if (!actorEntries) {
    return;
  }
  return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === "vtkVolume")?.uid;
}
function getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {
  const imageIds = viewport.getImageIds();
  if (!imageIds || !imageIds.length) {
    return;
  }
  const distanceImagePairs = imageIds.map((imageId) => {
    const { imagePositionPatient } = metaData_exports.get("imagePlaneModule", imageId);
    const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);
    return { imageId, distance };
  });
  distanceImagePairs.sort((a, b) => a.distance - b.distance);
  return distanceImagePairs[0].imageId;
}
function calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {
  const dir = vec3_exports.create();
  vec3_exports.sub(dir, worldPos, ImagePositionPatient);
  const dot2 = vec3_exports.dot(dir, viewPlaneNormal);
  return Math.abs(dot2);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/index.js
var contourSegmentation_exports = {};
__export(contourSegmentation_exports, {
  LogicalOperation: () => LogicalOperation,
  add: () => add2,
  addContourSegmentationAnnotation: () => addContourSegmentationAnnotation,
  areSameSegment: () => areSameSegment,
  checkIntersection: () => checkIntersection,
  cleanupPolylines: () => cleanupPolylines,
  combinePolylines: () => combinePolylines,
  contourSegmentationOperation: () => contourSegmentationOperation,
  convertContourPolylineToCanvasSpace: () => convertContourPolylineToCanvasSpace,
  convertContourPolylineToWorld: () => convertContourPolylineToWorld,
  convertContourSegmentationAnnotation: () => convertContourSegmentationAnnotation,
  copy: () => copy,
  copyAnnotation: () => copyAnnotation,
  copyContourSegment: () => copyContourSegment,
  createNewAnnotationFromPolyline: () => createNewAnnotationFromPolyline,
  createPolylineHole: () => createPolylineHole,
  deleteOperation: () => deleteOperation,
  findAllIntersectingContours: () => findAllIntersectingContours,
  getContourHolesData: () => getContourHolesData,
  intersect: () => intersect,
  intersectPolylinesSets: () => intersectPolylinesSets,
  isContourSegmentationAnnotation: () => isContourSegmentationAnnotation,
  processMultipleIntersections: () => processMultipleIntersections,
  removeContourSegmentationAnnotation: () => removeContourSegmentationAnnotation,
  removeDuplicatePoints: () => removeDuplicatePoints,
  subtract: () => subtract,
  subtractAnnotationPolylines: () => subtractAnnotationPolylines,
  subtractMultiplePolylineSets: () => subtractMultiplePolylineSets,
  subtractPolylineSets: () => subtractPolylineSets,
  unifyAnnotationPolylines: () => unifyAnnotationPolylines,
  unifyMultiplePolylineSets: () => unifyMultiplePolylineSets,
  unifyPolylineSets: () => unifyPolylineSets,
  updateViewportsForAnnotations: () => updateViewportsForAnnotations,
  xor: () => xor,
  xorPolylinesSets: () => xorPolylinesSets
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areSameSegment.js
function areSameSegment(firstAnnotation, secondAnnotation) {
  const { segmentation: firstSegmentation } = firstAnnotation.data;
  const { segmentation: secondSegmentation } = secondAnnotation.data;
  return firstSegmentation.segmentationId === secondSegmentation.segmentationId && firstSegmentation.segmentIndex === secondSegmentation.segmentIndex;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js
var FrameOfReferenceSpecificAnnotationManager = class {
  constructor(uid) {
    this.getGroupKey = (annotationGroupSelector) => {
      if (typeof annotationGroupSelector === "string") {
        return annotationGroupSelector;
      }
      const element = annotationGroupSelector;
      const enabledElement = getEnabledElement(element);
      if (!enabledElement) {
        throw new Error("Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID");
      }
      return enabledElement.FrameOfReferenceUID;
    };
    this._imageVolumeModifiedHandler = (evt) => {
      const eventDetail = evt.detail;
      const { FrameOfReferenceUID } = eventDetail;
      const annotations = this.annotations;
      const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];
      if (!frameOfReferenceSpecificAnnotations) {
        return;
      }
      Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {
        const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
        toolSpecificAnnotations.forEach((annotation) => {
          const invalidated = annotation.invalidated;
          if (invalidated !== void 0) {
            annotation.invalidated = true;
          }
        });
      });
    };
    this.getFramesOfReference = () => {
      return Object.keys(this.annotations);
    };
    this.getAnnotations = (groupKey, toolName) => {
      const annotations = this.annotations;
      if (!annotations[groupKey]) {
        return [];
      }
      if (toolName) {
        return annotations[groupKey][toolName] ? annotations[groupKey][toolName] : [];
      }
      return annotations[groupKey];
    };
    this.getAnnotation = (annotationUID) => {
      const annotations = this.annotations;
      for (const frameOfReferenceUID in annotations) {
        const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];
        for (const toolName in frameOfReferenceAnnotations) {
          const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];
          for (const annotation of toolSpecificAnnotations) {
            if (annotationUID === annotation.annotationUID) {
              return annotation;
            }
          }
        }
      }
    };
    this.getNumberOfAnnotations = (groupKey, toolName) => {
      const annotations = this.getAnnotations(groupKey, toolName);
      if (!annotations.length) {
        return 0;
      }
      if (toolName) {
        return annotations.length;
      }
      let total = 0;
      for (const toolName2 in annotations) {
        total += annotations[toolName2].length;
      }
      return total;
    };
    this.addAnnotation = (annotation, groupKey) => {
      const { metadata } = annotation;
      const { FrameOfReferenceUID, toolName } = metadata;
      groupKey = groupKey || FrameOfReferenceUID;
      const annotations = this.annotations;
      let frameOfReferenceSpecificAnnotations = annotations[groupKey];
      if (!frameOfReferenceSpecificAnnotations) {
        annotations[groupKey] = {};
        frameOfReferenceSpecificAnnotations = annotations[groupKey];
      }
      let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
      if (!toolSpecificAnnotations) {
        frameOfReferenceSpecificAnnotations[toolName] = [];
        toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
      }
      if (this.preprocessingFn) {
        annotation = this.preprocessingFn(annotation);
      }
      toolSpecificAnnotations.push(annotation);
    };
    this.removeAnnotation = (annotationUID) => {
      const { annotations } = this;
      for (const groupKey in annotations) {
        const groupAnnotations = annotations[groupKey];
        for (const toolName in groupAnnotations) {
          const toolAnnotations = groupAnnotations[toolName];
          const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);
          if (index !== -1) {
            toolAnnotations.splice(index, 1);
            if (toolAnnotations.length === 0) {
              delete groupAnnotations[toolName];
            }
          }
        }
        if (Object.keys(groupAnnotations).length === 0) {
          delete annotations[groupKey];
        }
      }
    };
    this.removeAnnotations = (groupKey, toolName) => {
      const annotations = this.annotations;
      const removedAnnotations = [];
      if (!annotations[groupKey]) {
        return removedAnnotations;
      }
      if (toolName) {
        const annotationsForTool = annotations[groupKey][toolName];
        if (annotationsForTool) {
          for (const annotation of annotationsForTool) {
            this.removeAnnotation(annotation.annotationUID);
            removedAnnotations.push(annotation);
          }
        }
      } else {
        for (const toolName2 in annotations[groupKey]) {
          const annotationsForTool = annotations[groupKey][toolName2];
          for (const annotation of annotationsForTool) {
            this.removeAnnotation(annotation.annotationUID);
            removedAnnotations.push(annotation);
          }
        }
      }
      return removedAnnotations;
    };
    this.saveAnnotations = (groupKey, toolName) => {
      const annotations = this.annotations;
      if (groupKey && toolName) {
        const frameOfReferenceSpecificAnnotations = annotations[groupKey];
        if (!frameOfReferenceSpecificAnnotations) {
          return;
        }
        const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
        return structuredClone(toolSpecificAnnotations);
      } else if (groupKey) {
        const frameOfReferenceSpecificAnnotations = annotations[groupKey];
        return structuredClone(frameOfReferenceSpecificAnnotations);
      }
      return structuredClone(annotations);
    };
    this.restoreAnnotations = (state8, groupKey, toolName) => {
      const annotations = this.annotations;
      if (groupKey && toolName) {
        let frameOfReferenceSpecificAnnotations = annotations[groupKey];
        if (!frameOfReferenceSpecificAnnotations) {
          annotations[groupKey] = {};
          frameOfReferenceSpecificAnnotations = annotations[groupKey];
        }
        frameOfReferenceSpecificAnnotations[toolName] = state8;
      } else if (groupKey) {
        annotations[groupKey] = state8;
      } else {
        this.annotations = structuredClone(state8);
      }
    };
    this.getAllAnnotations = () => {
      return Object.values(this.annotations).map((frameOfReferenceSpecificAnnotations) => Object.values(frameOfReferenceSpecificAnnotations)).flat(2);
    };
    this.getNumberOfAllAnnotations = () => {
      let count = 0;
      const annotations = this.annotations;
      for (const groupKey in annotations) {
        const frameOfReferenceSpecificAnnotations = annotations[groupKey];
        for (const toolName in frameOfReferenceSpecificAnnotations) {
          const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
          count += toolSpecificAnnotations.length;
        }
      }
      return count;
    };
    this.removeAllAnnotations = () => {
      const removedAnnotations = [];
      for (const annotation of this.getAllAnnotations()) {
        this.removeAnnotation(annotation.annotationUID);
        removedAnnotations.push(annotation);
      }
      return removedAnnotations;
    };
    if (!uid) {
      uid = utilities_exports.uuidv4();
    }
    this.annotations = {};
    this.uid = uid;
    eventTarget_default.addEventListener(enums_exports.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);
  }
  setPreprocessingFn(preprocessingFn2) {
    this.preprocessingFn = preprocessingFn2;
  }
};
var defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager("DEFAULT");
var FrameOfReferenceSpecificAnnotationManager_default = FrameOfReferenceSpecificAnnotationManager;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js
var annotationLocking_exports = {};
__export(annotationLocking_exports, {
  checkAndSetAnnotationLocked: () => checkAndSetAnnotationLocked,
  getAnnotationsLocked: () => getAnnotationsLocked,
  getAnnotationsLockedCount: () => getAnnotationsLockedCount,
  isAnnotationLocked: () => isAnnotationLocked,
  setAnnotationLocked: () => setAnnotationLocked,
  unlockAllAnnotations: () => unlockAllAnnotations
});
var globalLockedAnnotationUIDsSet = /* @__PURE__ */ new Set();
function setAnnotationLocked(annotationUID, locked = true) {
  const detail = makeEventDetail();
  if (annotationUID) {
    if (locked) {
      lock(annotationUID, globalLockedAnnotationUIDsSet, detail);
    } else {
      unlock(annotationUID, globalLockedAnnotationUIDsSet, detail);
    }
  }
  publish(detail, globalLockedAnnotationUIDsSet);
}
function unlockAllAnnotations() {
  const detail = makeEventDetail();
  clearLockedAnnotationsSet(globalLockedAnnotationUIDsSet, detail);
  publish(detail, globalLockedAnnotationUIDsSet);
}
function getAnnotationsLocked() {
  return Array.from(globalLockedAnnotationUIDsSet);
}
function isAnnotationLocked(annotationUID) {
  return globalLockedAnnotationUIDsSet.has(annotationUID);
}
function getAnnotationsLockedCount() {
  return globalLockedAnnotationUIDsSet.size;
}
function checkAndSetAnnotationLocked(annotationUID) {
  const isLocked = isAnnotationLocked(annotationUID);
  setAnnotationLocked(annotationUID, isLocked);
  return isLocked;
}
function makeEventDetail() {
  return Object.freeze({
    added: [],
    removed: [],
    locked: []
  });
}
function lock(annotationUID, lockedAnnotationUIDsSet, detail) {
  if (!lockedAnnotationUIDsSet.has(annotationUID)) {
    lockedAnnotationUIDsSet.add(annotationUID);
    detail.added.push(annotationUID);
    const annotation = getAnnotation(annotationUID);
    if (annotation) {
      annotation.isLocked = true;
    }
  }
}
function unlock(annotationUID, lockedAnnotationUIDsSet, detail) {
  if (lockedAnnotationUIDsSet.delete(annotationUID)) {
    detail.removed.push(annotationUID);
    const annotation = getAnnotation(annotationUID);
    if (annotation) {
      annotation.isLocked = false;
    }
  }
}
function clearLockedAnnotationsSet(lockedAnnotationUIDsSet, detail) {
  lockedAnnotationUIDsSet.forEach((annotationUID) => {
    unlock(annotationUID, lockedAnnotationUIDsSet, detail);
  });
}
function publish(detail, lockedAnnotationUIDsSet) {
  if (detail.added.length > 0 || detail.removed.length > 0) {
    lockedAnnotationUIDsSet.forEach((item) => void detail.locked.push(item));
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_LOCK_CHANGE, detail);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js
var annotationSelection_exports = {};
__export(annotationSelection_exports, {
  deselectAnnotation: () => deselectAnnotation,
  getAnnotationsSelected: () => getAnnotationsSelected,
  getAnnotationsSelectedByToolName: () => getAnnotationsSelectedByToolName,
  getAnnotationsSelectedCount: () => getAnnotationsSelectedCount,
  isAnnotationSelected: () => isAnnotationSelected,
  setAnnotationSelected: () => setAnnotationSelected
});
var selectedAnnotationUIDs = /* @__PURE__ */ new Set();
function setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {
  if (selected) {
    selectAnnotation(annotationUID, preserveSelected);
  } else {
    deselectAnnotation(annotationUID);
  }
}
function selectAnnotation(annotationUID, preserveSelected = false) {
  const detail = makeEventDetail2();
  if (!preserveSelected) {
    clearSelectionSet(selectedAnnotationUIDs, detail);
    const annotation = getAnnotation(annotationUID);
    if (annotation) {
      annotation.isSelected = true;
    }
  }
  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {
    selectedAnnotationUIDs.add(annotationUID);
    detail.added.push(annotationUID);
    const annotation = getAnnotation(annotationUID);
    if (annotation) {
      annotation.isSelected = true;
    }
  }
  publish2(detail, selectedAnnotationUIDs);
}
function deselectAnnotation(annotationUID) {
  const detail = makeEventDetail2();
  if (annotationUID) {
    if (selectedAnnotationUIDs.delete(annotationUID)) {
      detail.removed.push(annotationUID);
      const annotation = getAnnotation(annotationUID);
      annotation.isSelected = false;
    }
  } else {
    clearSelectionSet(selectedAnnotationUIDs, detail);
  }
  publish2(detail, selectedAnnotationUIDs);
}
function getAnnotationsSelected() {
  return Array.from(selectedAnnotationUIDs);
}
function getAnnotationsSelectedByToolName(toolName) {
  return getAnnotationsSelected().filter((annotationUID) => {
    const annotation = getAnnotation(annotationUID);
    return annotation?.metadata?.toolName === toolName;
  });
}
function isAnnotationSelected(annotationUID) {
  return selectedAnnotationUIDs.has(annotationUID);
}
function getAnnotationsSelectedCount() {
  return selectedAnnotationUIDs.size;
}
function makeEventDetail2() {
  return Object.freeze({
    added: [],
    removed: [],
    selection: []
  });
}
function clearSelectionSet(selectionSet, detail) {
  selectionSet.forEach((value) => {
    if (selectionSet.delete(value)) {
      detail.removed.push(value);
      const annotation = getAnnotation(value);
      if (annotation) {
        annotation.isSelected = false;
      }
    }
  });
}
function publish2(detail, selectionSet) {
  if (detail.added.length > 0 || detail.removed.length > 0) {
    selectionSet.forEach((item) => void detail.selection.push(item));
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_SELECTION_CHANGE, detail);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/utilities/defineProperties.js
var checkAndDefineTextBoxProperty = (annotation) => {
  if (!annotation.data) {
    annotation.data = {};
  }
  if (!annotation.data.handles) {
    annotation.data.handles = {};
  }
  if (!annotation.data.handles.textBox) {
    annotation.data.handles.textBox = {};
  }
  return annotation;
};
var checkAndDefineCachedStatsProperty = (annotation) => {
  if (!annotation.data) {
    annotation.data = {};
  }
  if (!annotation.data.cachedStats) {
    annotation.data.cachedStats = {};
  }
  return annotation;
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js
var annotationVisibility_exports = {};
__export(annotationVisibility_exports, {
  checkAndSetAnnotationVisibility: () => checkAndSetAnnotationVisibility,
  isAnnotationVisible: () => isAnnotationVisible,
  setAnnotationVisibility: () => setAnnotationVisibility,
  showAllAnnotations: () => showAllAnnotations
});
var globalHiddenAnnotationUIDsSet = /* @__PURE__ */ new Set();
function setAnnotationVisibility(annotationUID, visible = true) {
  const detail = makeEventDetail3();
  if (annotationUID) {
    if (visible) {
      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);
    } else {
      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);
    }
  }
  publish3(detail);
}
function showAllAnnotations() {
  const detail = makeEventDetail3();
  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {
    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);
  });
  publish3(detail);
}
function isAnnotationVisible(annotationUID) {
  const annotation = getAnnotation(annotationUID);
  if (annotation) {
    return !globalHiddenAnnotationUIDsSet.has(annotationUID);
  }
}
function makeEventDetail3() {
  return Object.freeze({
    lastVisible: [],
    lastHidden: [],
    hidden: []
  });
}
function show(annotationUID, annotationUIDsSet, detail) {
  if (annotationUIDsSet.delete(annotationUID)) {
    detail.lastVisible.push(annotationUID);
    const annotation = getAnnotation(annotationUID);
    annotation.isVisible = true;
  }
}
function hide(annotationUID, annotationUIDsSet, detail) {
  if (!annotationUIDsSet.has(annotationUID)) {
    annotationUIDsSet.add(annotationUID);
    if (isAnnotationSelected(annotationUID)) {
      deselectAnnotation(annotationUID);
    }
    detail.lastHidden.push(annotationUID);
    const annotation = getAnnotation(annotationUID);
    annotation.isVisible = false;
  }
}
function publish3(detail) {
  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {
    globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_VISIBILITY_CHANGE, detail);
  }
}
function checkAndSetAnnotationVisibility(annotationUID) {
  const isVisible = !globalHiddenAnnotationUIDsSet.has(annotationUID);
  setAnnotationVisibility(annotationUID, isVisible);
  return isVisible;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/resetAnnotationManager.js
var defaultManager2 = defaultFrameOfReferenceSpecificAnnotationManager;
var preprocessingFn = (annotation) => {
  annotation = checkAndDefineTextBoxProperty(annotation);
  annotation = checkAndDefineCachedStatsProperty(annotation);
  const uid = annotation.annotationUID;
  const isLocked = checkAndSetAnnotationLocked(uid);
  annotation.isLocked = isLocked;
  const isVisible = checkAndSetAnnotationVisibility(uid);
  annotation.isVisible = isVisible;
  return annotation;
};
defaultManager2.setPreprocessingFn(preprocessingFn);
setAnnotationManager(defaultManager2);
function resetAnnotationManager() {
  setAnnotationManager(defaultManager2);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/removeContourSegmentationAnnotation.js
function removeContourSegmentationAnnotation(annotation) {
  if (!annotation.data.segmentation) {
    throw new Error("removeContourSegmentationAnnotation: annotation does not have a segmentation data");
  }
  const { segmentationId, segmentIndex } = annotation.data.segmentation;
  const segmentation = getSegmentation(segmentationId);
  const { annotationUIDsMap } = segmentation?.representationData.Contour || {};
  const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);
  if (!annotationsUIDsSet) {
    return;
  }
  annotationsUIDsSet.delete(annotation.annotationUID);
  if (!annotationsUIDsSet.size) {
    annotationUIDsMap.delete(segmentIndex);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addContourSegmentationAnnotation.js
function addContourSegmentationAnnotation(annotation) {
  if (annotation.parentAnnotationUID) {
    return;
  }
  if (!annotation.data.segmentation) {
    throw new Error("addContourSegmentationAnnotation: annotation does not have a segmentation data");
  }
  const { segmentationId, segmentIndex } = annotation.data.segmentation;
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation.representationData.Contour) {
    segmentation.representationData.Contour = { annotationUIDsMap: /* @__PURE__ */ new Map() };
  }
  let { annotationUIDsMap } = segmentation.representationData.Contour;
  if (!annotationUIDsMap) {
    annotationUIDsMap = /* @__PURE__ */ new Map();
  }
  let annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);
  if (!annotationsUIDsSet) {
    annotationsUIDsSet = /* @__PURE__ */ new Set();
    annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);
  }
  annotationUIDsMap.set(segmentIndex, annotationsUIDsSet.add(annotation.annotationUID));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js
var DEFAULT_CONTOUR_SEG_TOOL_NAME = "PlanarFreehandContourSegmentationTool";
function convertContourSegmentationAnnotation(annotation) {
  const { polyline } = annotation.data?.contour || {};
  if (!polyline || polyline.length < 3) {
    console.warn("Skipping creation of new annotation due to invalid polyline:", polyline);
    return;
  }
  removeAnnotation(annotation.annotationUID);
  removeContourSegmentationAnnotation(annotation);
  const startPointWorld = polyline[0];
  const endPointWorld = polyline[polyline.length - 1];
  const newAnnotation = {
    metadata: {
      ...annotation.metadata,
      toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,
      originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName
    },
    data: {
      cachedStats: {},
      handles: {
        points: [startPointWorld, endPointWorld],
        textBox: annotation.data.handles.textBox ? { ...annotation.data.handles.textBox } : void 0
      },
      contour: {
        ...annotation.data.contour
      },
      spline: annotation.data.spline,
      segmentation: {
        ...annotation.data.segmentation
      }
    },
    annotationUID: utilities_exports.uuidv4(),
    highlighted: true,
    invalidated: true,
    isLocked: false,
    isVisible: void 0,
    interpolationUID: annotation.interpolationUID,
    interpolationCompleted: annotation.interpolationCompleted
  };
  addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);
  addContourSegmentationAnnotation(newAnnotation);
  triggerAnnotationModified(newAnnotation);
  return newAnnotation;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportIdsWithSegmentation.js
function getViewportIdsWithSegmentation(segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  const state8 = segmentationStateManager.getState();
  const viewportSegRepresentations = state8.viewportSegRepresentations;
  const viewportIdsWithSegmentation = Object.entries(viewportSegRepresentations).filter(([, viewportSegmentations]) => viewportSegmentations.some((segRep) => segRep.segmentationId === segmentationId)).map(([viewportId]) => viewportId);
  return viewportIdsWithSegmentation;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation.js
function getViewportsAssociatedToSegmentation(segmentationId) {
  const viewportIds = getViewportIdsWithSegmentation(segmentationId);
  if (viewportIds?.length === 0) {
    return [];
  }
  const viewports = [];
  for (const viewportId of viewportIds) {
    const { viewport } = getEnabledElementByViewportId(viewportId) || {};
    if (viewport) {
      viewports.push(viewport);
    }
  }
  return viewports;
}
function getViewportAssociatedToSegmentation(segmentationId) {
  const viewports = getViewportsAssociatedToSegmentation(segmentationId);
  return viewports.length > 0 ? viewports[0] : void 0;
}
function getViewportWithMatchingViewPlaneNormal(viewports, annotation, dotThreshold = 0.99) {
  const annotationViewPlaneNormal = annotation.metadata?.viewPlaneNormal;
  if (!annotationViewPlaneNormal || !Array.isArray(annotationViewPlaneNormal)) {
    return void 0;
  }
  const normalizedAnnotationNormal = vec3_exports.create();
  vec3_exports.normalize(normalizedAnnotationNormal, annotationViewPlaneNormal);
  for (const viewport of viewports) {
    const camera = viewport.getCamera();
    if (!camera?.viewPlaneNormal) {
      continue;
    }
    const normalizedCameraNormal = vec3_exports.create();
    vec3_exports.normalize(normalizedCameraNormal, camera.viewPlaneNormal);
    const dotProduct = vec3_exports.dot(normalizedAnnotationNormal, normalizedCameraNormal);
    if (Math.abs(dotProduct) >= dotThreshold) {
      return viewport;
    }
  }
  return void 0;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation.js
function getAnnotationsUIDMapFromSegmentation(segmentationId) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return;
  }
  const contourRepresentationData = segmentation.representationData?.Contour;
  if (!contourRepresentationData) {
    return;
  }
  const { annotationUIDsMap } = contourRepresentationData;
  if (!annotationUIDsMap) {
    return;
  }
  return annotationUIDsMap;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/copyAnnotation.js
function copyAnnotation(annotation, segmentationId, segmentIndex) {
  const newAnnotation = {
    annotationUID: utilities_exports.uuidv4(),
    data: {
      contour: {
        closed: true,
        polyline: []
      },
      segmentation: {
        segmentationId,
        segmentIndex
      },
      handles: {}
    },
    handles: {},
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      ...annotation.metadata,
      toolName: annotation.metadata.toolName
    }
  };
  newAnnotation.data.segmentation.segmentationId = segmentationId;
  newAnnotation.data.segmentation.segmentIndex = segmentIndex;
  if (annotation.data.contour?.polyline) {
    newAnnotation.data.contour.polyline = [...annotation.data.contour.polyline];
  }
  if (annotation.data.handles?.points) {
    newAnnotation.data.handles.points = annotation.data.handles.points.map((point) => [...point]);
  }
  return newAnnotation;
}
function copyContourSegment(segmentationId, segmentIndex, targetSegmentationId, targetSegmentIndex) {
  const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);
  const targetAnnotationUIDsMap = getAnnotationsUIDMapFromSegmentation(targetSegmentationId);
  if (!annotationUIDsMap || !targetAnnotationUIDsMap) {
    return;
  }
  if (!annotationUIDsMap?.has(segmentIndex)) {
    return;
  }
  const annotationUIDs = annotationUIDsMap.get(segmentIndex);
  const viewport = getViewportAssociatedToSegmentation(targetSegmentationId);
  if (!viewport) {
    return;
  }
  const toolGroup = getToolGroupForViewport_default(viewport.id);
  const copyContourAnnotation = (annotation) => {
    const newAnnotation = copyAnnotation(annotation, targetSegmentationId, targetSegmentIndex);
    if (toolGroup) {
      const instance = toolGroup.getToolInstance(annotation.metadata.toolName);
      if (instance) {
        if (typeof instance.isSplineAnnotation === "function" && instance.isSplineAnnotation(annotation)) {
          instance.createSplineObjectFromType(newAnnotation, annotation.data.spline.type);
        }
      }
    }
    addAnnotation(newAnnotation, viewport.element);
    newAnnotationsUID.add(newAnnotation.annotationUID);
    return newAnnotation;
  };
  const newAnnotationsUID = /* @__PURE__ */ new Set();
  for (const annotationUID of annotationUIDs) {
    const annotation = getAnnotation(annotationUID);
    const newAnnotation = copyContourAnnotation(annotation);
    if (annotation?.childAnnotationUIDs) {
      newAnnotation.childAnnotationUIDs = [];
      for (const childAnnotationUID of annotation.childAnnotationUIDs) {
        const childAnnotation = getAnnotation(childAnnotationUID);
        const newChildAnnotation = copyContourAnnotation(childAnnotation);
        newChildAnnotation.parentAnnotationUID = newAnnotation.annotationUID;
        newAnnotation.childAnnotationUIDs.push(newChildAnnotation.annotationUID);
      }
    }
  }
  targetAnnotationUIDsMap.set(targetSegmentIndex, newAnnotationsUID);
}

// node_modules/@cornerstonejs/tools/dist/esm/types/ContourAnnotation.js
var ContourWindingDirection;
(function(ContourWindingDirection2) {
  ContourWindingDirection2[ContourWindingDirection2["CounterClockwise"] = -1] = "CounterClockwise";
  ContourWindingDirection2[ContourWindingDirection2["Unknown"] = 0] = "Unknown";
  ContourWindingDirection2[ContourWindingDirection2["Clockwise"] = 1] = "Clockwise";
})(ContourWindingDirection || (ContourWindingDirection = {}));

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js
var math_exports = {};
__export(math_exports, {
  BasicStatsCalculator: () => basic_exports,
  aabb: () => aabb_exports,
  angle: () => angle_exports,
  circle: () => circle_exports,
  ellipse: () => ellipse_exports,
  lineSegment: () => line_exports,
  point: () => point_exports,
  polyline: () => polyline_exports,
  rectangle: () => rectangle_exports,
  vec2: () => vec2_exports2
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/aabb/index.js
var aabb_exports = {};
__export(aabb_exports, {
  distanceToPoint: () => distanceToPoint,
  distanceToPointSquared: () => distanceToPointSquared,
  intersectAABB: () => intersectAABB
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/aabb/intersectAABB.js
function intersectAABB(aabb1, aabb2) {
  return aabb1.minX <= aabb2.maxX && aabb1.maxX >= aabb2.minX && aabb1.minY <= aabb2.maxY && aabb1.maxY >= aabb2.minY;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/aabb/distanceToPointSquared.js
function distanceToPointSquared(aabb, point) {
  const aabbWidth = aabb.maxX - aabb.minX;
  const aabbHeight = aabb.maxY - aabb.minY;
  const aabbSize = [aabbWidth, aabbHeight];
  const aabbCenter = [
    aabb.minX + aabbWidth / 2,
    aabb.minY + aabbHeight / 2
  ];
  const translatedPoint = [
    Math.abs(point[0] - aabbCenter[0]),
    Math.abs(point[1] - aabbCenter[1])
  ];
  const dx = translatedPoint[0] - aabbSize[0] * 0.5;
  const dy = translatedPoint[1] - aabbSize[1] * 0.5;
  if (dx > 0 && dy > 0) {
    return dx * dx + dy * dy;
  }
  const dist = Math.max(dx, 0) + Math.max(dy, 0);
  return dist * dist;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/aabb/distanceToPoint.js
function distanceToPoint(aabb, point) {
  return Math.sqrt(distanceToPointSquared(aabb, point));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/basic/index.js
var basic_exports = {};
__export(basic_exports, {
  BasicStatsCalculator: () => BasicStatsCalculator,
  Calculator: () => Calculator,
  InstanceBasicStatsCalculator: () => InstanceBasicStatsCalculator,
  InstanceCalculator: () => InstanceCalculator
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/basic/Calculator.js
var Calculator = class {
};
var InstanceCalculator = class {
  constructor(options) {
    this.storePointData = options.storePointData;
  }
  getStatistics() {
    console.debug("InstanceCalculator getStatistics called");
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/basic/BasicStatsCalculator.js
var { PointsManager } = utilities_exports;
function createBasicStatsState(storePointData) {
  return {
    max: [-Infinity],
    min: [Infinity],
    sum: [0],
    count: 0,
    maxIJK: null,
    maxLPS: null,
    minIJK: null,
    minLPS: null,
    runMean: [0],
    m2: [0],
    m3: [0],
    m4: [0],
    allValues: [[]],
    pointsInShape: storePointData ? PointsManager.create3(1024) : null,
    sumLPS: [0, 0, 0]
  };
}
function basicStatsCallback(state8, newValue, pointLPS = null, pointIJK = null) {
  if (Array.isArray(newValue) && newValue.length > 1 && state8.max.length === 1) {
    state8.max.push(state8.max[0], state8.max[0]);
    state8.min.push(state8.min[0], state8.min[0]);
    state8.sum.push(state8.sum[0], state8.sum[0]);
    state8.runMean.push(0, 0);
    state8.m2.push(state8.m2[0], state8.m2[0]);
    state8.m3.push(state8.m3[0], state8.m3[0]);
    state8.m4.push(state8.m4[0], state8.m4[0]);
    state8.allValues.push([], []);
  }
  if (state8?.pointsInShape && pointLPS) {
    state8.pointsInShape.push(pointLPS);
  }
  const newArray = Array.isArray(newValue) ? newValue : [newValue];
  state8.count += 1;
  if (pointLPS) {
    state8.sumLPS[0] += pointLPS[0];
    state8.sumLPS[1] += pointLPS[1];
    state8.sumLPS[2] += pointLPS[2];
  }
  state8.max.forEach((it, idx) => {
    const value = newArray[idx];
    state8.allValues[idx].push(value);
    const n = state8.count;
    const delta = value - state8.runMean[idx];
    const delta_n = delta / n;
    const term1 = delta * delta_n * (n - 1);
    state8.sum[idx] += value;
    state8.runMean[idx] += delta_n;
    state8.m4[idx] += term1 * delta_n * delta_n * (n * n - 3 * n + 3) + 6 * delta_n * delta_n * state8.m2[idx] - 4 * delta_n * state8.m3[idx];
    state8.m3[idx] += term1 * delta_n * (n - 2) - 3 * delta_n * state8.m2[idx];
    state8.m2[idx] += term1;
    if (value < state8.min[idx]) {
      state8.min[idx] = value;
      if (idx === 0) {
        state8.minIJK = pointIJK ? [...pointIJK] : null;
        state8.minLPS = pointLPS ? [...pointLPS] : null;
      }
    }
    if (value > state8.max[idx]) {
      state8.max[idx] = value;
      if (idx === 0) {
        state8.maxIJK = pointIJK ? [...pointIJK] : null;
        state8.maxLPS = pointLPS ? [...pointLPS] : null;
      }
    }
  });
}
function calculateMedian(values) {
  if (values.length === 0) {
    return 0;
  }
  const sorted = [...values].sort((a, b) => a - b);
  const mid = Math.floor(sorted.length / 2);
  if (sorted.length % 2 === 0) {
    return (sorted[mid - 1] + sorted[mid]) / 2;
  } else {
    return sorted[mid];
  }
}
function basicGetStatistics(state8, unit) {
  const mean = state8.sum.map((sum) => sum / state8.count);
  const stdDev = state8.m2.map((squaredDiffSum) => Math.sqrt(squaredDiffSum / state8.count));
  const center = state8.sumLPS.map((sum) => sum / state8.count);
  const skewness = state8.m3.map((m3, idx) => {
    const variance = state8.m2[idx] / state8.count;
    if (variance === 0) {
      return 0;
    }
    return m3 / (state8.count * Math.pow(variance, 1.5));
  });
  const kurtosis = state8.m4.map((m4, idx) => {
    const variance = state8.m2[idx] / state8.count;
    if (variance === 0) {
      return 0;
    }
    return m4 / (state8.count * variance * variance) - 3;
  });
  const median = state8.allValues.map((values) => calculateMedian(values));
  const named = {
    max: {
      name: "max",
      label: "Max Pixel",
      value: state8.max.length === 1 ? state8.max[0] : state8.max,
      unit,
      pointIJK: state8.maxIJK ? [...state8.maxIJK] : null,
      pointLPS: state8.maxLPS ? [...state8.maxLPS] : null
    },
    min: {
      name: "min",
      label: "Min Pixel",
      value: state8.min.length === 1 ? state8.min[0] : state8.min,
      unit,
      pointIJK: state8.minIJK ? [...state8.minIJK] : null,
      pointLPS: state8.minLPS ? [...state8.minLPS] : null
    },
    mean: {
      name: "mean",
      label: "Mean Pixel",
      value: mean.length === 1 ? mean[0] : mean,
      unit
    },
    stdDev: {
      name: "stdDev",
      label: "Standard Deviation",
      value: stdDev.length === 1 ? stdDev[0] : stdDev,
      unit
    },
    count: {
      name: "count",
      label: "Voxel Count",
      value: state8.count,
      unit: null
    },
    median: {
      name: "median",
      label: "Median",
      value: median.length === 1 ? median[0] : median,
      unit
    },
    skewness: {
      name: "skewness",
      label: "Skewness",
      value: skewness.length === 1 ? skewness[0] : skewness,
      unit: null
    },
    kurtosis: {
      name: "kurtosis",
      label: "Kurtosis",
      value: kurtosis.length === 1 ? kurtosis[0] : kurtosis,
      unit: null
    },
    maxLPS: {
      name: "maxLPS",
      label: "Max LPS",
      value: state8.maxLPS ? Array.from(state8.maxLPS) : null,
      unit: null
    },
    minLPS: {
      name: "minLPS",
      label: "Min LPS",
      value: state8.minLPS ? Array.from(state8.minLPS) : null,
      unit: null
    },
    pointsInShape: state8.pointsInShape,
    center: {
      name: "center",
      label: "Center",
      value: center ? [...center] : null,
      unit: null
    },
    array: []
  };
  named.array.push(named.min, named.max, named.mean, named.stdDev, named.median, named.skewness, named.kurtosis, named.count, named.maxLPS, named.minLPS);
  if (named.center.value) {
    named.array.push(named.center);
  }
  const store = state8.pointsInShape !== null;
  const freshState = createBasicStatsState(store);
  state8.max = freshState.max;
  state8.min = freshState.min;
  state8.sum = freshState.sum;
  state8.count = freshState.count;
  state8.maxIJK = freshState.maxIJK;
  state8.maxLPS = freshState.maxLPS;
  state8.minIJK = freshState.minIJK;
  state8.minLPS = freshState.minLPS;
  state8.runMean = freshState.runMean;
  state8.m2 = freshState.m2;
  state8.m3 = freshState.m3;
  state8.m4 = freshState.m4;
  state8.allValues = freshState.allValues;
  state8.pointsInShape = freshState.pointsInShape;
  state8.sumLPS = freshState.sumLPS;
  return named;
}
var _BasicStatsCalculator = class _BasicStatsCalculator extends Calculator {
  static statsInit(options) {
    if (!options.storePointData) {
      this.state.pointsInShape = null;
    }
    this.state = createBasicStatsState(options.storePointData);
  }
};
_BasicStatsCalculator.state = createBasicStatsState(true);
_BasicStatsCalculator.statsCallback = ({ value: newValue, pointLPS = null, pointIJK = null }) => {
  basicStatsCallback(_BasicStatsCalculator.state, newValue, pointLPS, pointIJK);
};
_BasicStatsCalculator.getStatistics = (options) => {
  return basicGetStatistics(_BasicStatsCalculator.state, options?.unit);
};
var BasicStatsCalculator = _BasicStatsCalculator;
var InstanceBasicStatsCalculator = class extends InstanceCalculator {
  constructor(options) {
    super(options);
    this.state = createBasicStatsState(options.storePointData);
  }
  statsInit(options) {
    this.state = createBasicStatsState(options.storePointData);
  }
  statsCallback(data) {
    basicStatsCallback(this.state, data.value, data.pointLPS, data.pointIJK);
  }
  getStatistics(options) {
    return basicGetStatistics(this.state, options?.unit);
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/index.js
var circle_exports = {};
__export(circle_exports, {
  getCanvasCircleCorners: () => getCanvasCircleCorners,
  getCanvasCircleRadius: () => getCanvasCircleRadius
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js
var point_exports = {};
__export(point_exports, {
  distanceToPoint: () => distanceToPoint2,
  distanceToPointSquared: () => distanceToPointSquared2,
  mirror: () => mirror
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPointSquared.js
function distanceToPointSquared2(p1, p2) {
  if (p1.length !== p2.length) {
    throw Error("Both points should have the same dimensionality");
  }
  const [x1, y1, z1 = 0] = p1;
  const [x2, y2, z2 = 0] = p2;
  const dx = x2 - x1;
  const dy = y2 - y1;
  const dz = z2 - z1;
  return dx * dx + dy * dy + dz * dz;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPoint.js
function distanceToPoint2(p1, p2) {
  return Math.sqrt(distanceToPointSquared2(p1, p2));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/mirror.js
function mirror(mirrorPoint, staticPoint) {
  const [x1, y1] = mirrorPoint;
  const [x2, y2] = staticPoint;
  const newX = 2 * x2 - x1;
  const newY = 2 * y2 - y1;
  return [newX, newY];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleRadius.js
function getCanvasCircleRadius(circleCanvasPoints) {
  const [center, end] = circleCanvasPoints;
  return distanceToPoint2(center, end);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleCorners.js
function getCanvasCircleCorners(circleCanvasPoints) {
  const [center, end] = circleCanvasPoints;
  const radius = distanceToPoint2(center, end);
  const topLeft = [center[0] - radius, center[1] - radius];
  const bottomRight = [center[0] + radius, center[1] + radius];
  return [topLeft, bottomRight];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js
var ellipse_exports = {};
__export(ellipse_exports, {
  getCanvasEllipseCorners: () => getCanvasEllipseCorners,
  pointInEllipse: () => pointInEllipse,
  precalculatePointInEllipse: () => precalculatePointInEllipse
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/pointInEllipse.js
function pointInEllipse(ellipse, pointLPS, inverts = {}) {
  if (!inverts.precalculated) {
    precalculatePointInEllipse(ellipse, inverts);
  }
  return inverts.precalculated(pointLPS);
}
var precalculatePointInEllipse = (ellipse, inverts = {}) => {
  const { xRadius, yRadius, zRadius } = ellipse;
  if (inverts.invXRadiusSq === void 0 || inverts.invYRadiusSq === void 0 || inverts.invZRadiusSq === void 0) {
    inverts.invXRadiusSq = xRadius !== 0 ? 1 / xRadius ** 2 : 0;
    inverts.invYRadiusSq = yRadius !== 0 ? 1 / yRadius ** 2 : 0;
    inverts.invZRadiusSq = zRadius !== 0 ? 1 / zRadius ** 2 : 0;
  }
  const { invXRadiusSq, invYRadiusSq, invZRadiusSq } = inverts;
  const { center } = ellipse;
  const [centerL, centerP, centerS] = center;
  inverts.precalculated = (pointLPS) => {
    const dx = pointLPS[0] - centerL;
    let inside = dx * dx * invXRadiusSq;
    if (inside > 1) {
      return false;
    }
    const dy = pointLPS[1] - centerP;
    inside += dy * dy * invYRadiusSq;
    if (inside > 1) {
      return false;
    }
    const dz = pointLPS[2] - centerS;
    inside += dz * dz * invZRadiusSq;
    return inside <= 1;
  };
  return inverts;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/getCanvasEllipseCorners.js
function getCanvasEllipseCorners(ellipseCanvasPoints) {
  const [bottom, top, left, right] = ellipseCanvasPoints;
  const topLeft = [left[0], top[1]];
  const bottomRight = [right[0], bottom[1]];
  return [topLeft, bottomRight];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js
var line_exports = {};
__export(line_exports, {
  distanceToPoint: () => distanceToPoint3,
  distanceToPointSquared: () => distanceToPointSquared3,
  distanceToPointSquaredInfo: () => distanceToPointSquaredInfo,
  intersectLine: () => intersectLine,
  isPointOnLineSegment: () => isPointOnLineSegment
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquaredInfo.js
function distanceToPointSquaredInfo(lineStart, lineEnd, point) {
  let closestPoint;
  const distanceSquared = distanceToPointSquared2(lineStart, lineEnd);
  if (lineStart[0] === lineEnd[0] && lineStart[1] === lineEnd[1]) {
    closestPoint = lineStart;
  }
  if (!closestPoint) {
    const dotProduct = ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) + (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) / distanceSquared;
    if (dotProduct < 0) {
      closestPoint = lineStart;
    } else if (dotProduct > 1) {
      closestPoint = lineEnd;
    } else {
      closestPoint = [
        lineStart[0] + dotProduct * (lineEnd[0] - lineStart[0]),
        lineStart[1] + dotProduct * (lineEnd[1] - lineStart[1])
      ];
    }
  }
  return {
    point: [...closestPoint],
    distanceSquared: distanceToPointSquared2(point, closestPoint)
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js
function distanceToPointSquared3(lineStart, lineEnd, point) {
  return distanceToPointSquaredInfo(lineStart, lineEnd, point).distanceSquared;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPoint.js
function distanceToPoint3(lineStart, lineEnd, point) {
  if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {
    throw Error("lineStart, lineEnd, and point should have 2 elements of [x, y]");
  }
  return Math.sqrt(distanceToPointSquared3(lineStart, lineEnd, point));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/intersectLine.js
function sign(x) {
  return typeof x === "number" ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
}
function intersectLine(line1Start, line1End, line2Start, line2End, infinite = false) {
  const [x1, y1] = line1Start;
  const [x2, y2] = line1End;
  const [x3, y3] = line2Start;
  const [x4, y4] = line2End;
  if (infinite) {
    const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    if (Math.abs(denom) < 1e-10) {
      return void 0;
    }
    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;
    const x5 = x1 + t * (x2 - x1);
    const y5 = y1 + t * (y2 - y1);
    return [x5, y5];
  }
  const a1 = y2 - y1;
  const b1 = x1 - x2;
  const c1 = x2 * y1 - x1 * y2;
  const r3 = a1 * x3 + b1 * y3 + c1;
  const r4 = a1 * x4 + b1 * y4 + c1;
  if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {
    return void 0;
  }
  const a2 = y4 - y3;
  const b2 = x3 - x4;
  const c2 = x4 * y3 - x3 * y4;
  const r1 = a2 * x1 + b2 * y1 + c2;
  const r2 = a2 * x2 + b2 * y2 + c2;
  if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {
    return void 0;
  }
  const denomSegment = a1 * b2 - a2 * b1;
  let num;
  num = b1 * c2 - b2 * c1;
  const x = num / denomSegment;
  num = a2 * c1 - a1 * c2;
  const y = num / denomSegment;
  const intersectionPoint = [x, y];
  return intersectionPoint;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/isPointOnLineSegment.js
var ORIENTATION_TOLERANCE = 0.01;
function isPointOnLineSegment(lineStart, lineEnd, point) {
  const minX = lineStart[0] <= lineEnd[0] ? lineStart[0] : lineEnd[0];
  const maxX = lineStart[0] >= lineEnd[0] ? lineStart[0] : lineEnd[0];
  const minY = lineStart[1] <= lineEnd[1] ? lineStart[1] : lineEnd[1];
  const maxY = lineStart[1] >= lineEnd[1] ? lineStart[1] : lineEnd[1];
  const aabbContainsPoint = point[0] >= minX - ORIENTATION_TOLERANCE && point[0] <= maxX + ORIENTATION_TOLERANCE && point[1] >= minY - ORIENTATION_TOLERANCE && point[1] <= maxY + ORIENTATION_TOLERANCE;
  if (!aabbContainsPoint) {
    return false;
  }
  const orientation2 = (lineEnd[1] - lineStart[1]) * (point[0] - lineEnd[0]) - (lineEnd[0] - lineStart[0]) * (point[1] - lineEnd[1]);
  const absOrientation = orientation2 >= 0 ? orientation2 : -orientation2;
  return absOrientation <= ORIENTATION_TOLERANCE;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/index.js
var polyline_exports = {};
__export(polyline_exports, {
  addCanvasPointsToArray: () => addCanvasPointsToArray_default,
  arePolylinesIdentical: () => arePolylinesIdentical,
  containsPoint: () => containsPoint,
  containsPoints: () => containsPoints,
  convexHull: () => convexHull,
  decimate: () => decimate,
  getAABB: () => getAABB,
  getArea: () => getArea,
  getClosestLineSegmentIntersection: () => getClosestLineSegmentIntersection,
  getFirstLineSegmentIntersectionIndexes: () => getFirstLineSegmentIntersectionIndexes,
  getLineSegmentIntersectionsCoordinates: () => getLineSegmentIntersectionsCoordinates,
  getLineSegmentIntersectionsIndexes: () => getLineSegmentIntersectionsIndexes,
  getNormal2: () => getNormal2,
  getNormal3: () => getNormal3,
  getSignedArea: () => getSignedArea,
  getSubPixelSpacingAndXYDirections: () => getSubPixelSpacingAndXYDirections_default,
  getWindingDirection: () => getWindingDirection,
  intersectPolyline: () => intersectPolyline,
  intersectPolylines: () => intersectPolylines,
  isClosed: () => isClosed,
  isPointInsidePolyline3D: () => isPointInsidePolyline3D,
  mergePolylines: () => mergePolylines,
  pointCanProjectOnLine: () => pointCanProjectOnLine_default,
  pointsAreWithinCloseContourProximity: () => pointsAreWithinCloseContourProximity_default,
  projectTo2D: () => projectTo2D,
  subtractPolylines: () => subtractPolylines
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isClosed.js
function isClosed(polyline) {
  if (polyline.length < 3) {
    return false;
  }
  const numPolylinePoints = polyline.length;
  const firstPoint = polyline[0];
  const lastPoint = polyline[numPolylinePoints - 1];
  const distFirstToLastPoints = distanceToPointSquared2(firstPoint, lastPoint);
  return common_exports.equals(0, distFirstToLastPoints);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoint.js
function containsPoint(polyline, point, options = {
  closed: void 0
}) {
  if (polyline.length < 3) {
    return false;
  }
  const numPolylinePoints = polyline.length;
  let numIntersections = 0;
  const { closed: closed2, holes } = options;
  if (holes?.length) {
    for (const hole of holes) {
      if (containsPoint(hole, point)) {
        return false;
      }
    }
  }
  const shouldClose = !(closed2 === void 0 ? isClosed(polyline) : closed2);
  const maxSegmentIndex = polyline.length - (shouldClose ? 1 : 2);
  for (let i = 0; i <= maxSegmentIndex; i++) {
    const p1 = polyline[i];
    const p2Index = i === numPolylinePoints - 1 ? 0 : i + 1;
    const p2 = polyline[p2Index];
    const maxX = p1[0] >= p2[0] ? p1[0] : p2[0];
    const maxY = p1[1] >= p2[1] ? p1[1] : p2[1];
    const minY = p1[1] <= p2[1] ? p1[1] : p2[1];
    const mayIntersectLineSegment = point[0] <= maxX && point[1] >= minY && point[1] < maxY;
    if (mayIntersectLineSegment) {
      const isVerticalLine = p1[0] === p2[0];
      let intersects = isVerticalLine;
      if (!intersects) {
        const xIntersection = (point[1] - p1[1]) * (p2[0] - p1[0]) / (p2[1] - p1[1]) + p1[0];
        intersects = point[0] <= xIntersection;
      }
      numIntersections += intersects ? 1 : 0;
    }
  }
  return !!(numIntersections % 2);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoints.js
function containsPoints(polyline, points) {
  for (let i = 0, numPoint = points.length; i < numPoint; i++) {
    if (!containsPoint(polyline, points[i])) {
      return false;
    }
  }
  return true;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getAABB.js
function getAABB(polyline, options) {
  let polylineToUse = polyline;
  const numDimensions = options?.numDimensions || 2;
  const is3D = numDimensions === 3;
  if (!Array.isArray(polyline[0])) {
    const currentPolyline = polyline;
    const totalPoints = currentPolyline.length / numDimensions;
    polylineToUse = new Array(currentPolyline.length / numDimensions);
    for (let i = 0, len = totalPoints; i < len; i++) {
      polylineToUse[i] = [
        currentPolyline[i * numDimensions],
        currentPolyline[i * numDimensions + 1]
      ];
      if (is3D) {
        polylineToUse[i].push(currentPolyline[i * numDimensions + 2]);
      }
    }
  }
  let minX = Infinity;
  let minY = Infinity;
  let maxX = -Infinity;
  let maxY = -Infinity;
  let minZ = Infinity;
  let maxZ = -Infinity;
  polylineToUse = polylineToUse;
  for (let i = 0, len = polylineToUse.length; i < len; i++) {
    const [x, y, z] = polylineToUse[i];
    minX = minX < x ? minX : x;
    minY = minY < y ? minY : y;
    maxX = maxX > x ? maxX : x;
    maxY = maxY > y ? maxY : y;
    if (is3D) {
      minZ = minZ < z ? minZ : z;
      maxZ = maxZ > z ? maxZ : z;
    }
  }
  return is3D ? { minX, maxX, minY, maxY, minZ, maxZ } : { minX, maxX, minY, maxY };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getArea.js
function getArea(points) {
  const n = points.length;
  let area = 0;
  let j = n - 1;
  for (let i = 0; i < n; i++) {
    area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);
    j = i;
  }
  return Math.abs(area / 2);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSignedArea.js
function getSignedArea(polyline) {
  if (polyline.length < 3) {
    return 0;
  }
  const refPoint = polyline[0];
  let area = 0;
  for (let i = 0, len = polyline.length; i < len; i++) {
    const p1 = polyline[i];
    const p2Index = i === len - 1 ? 0 : i + 1;
    const p2 = polyline[p2Index];
    const aX = p1[0] - refPoint[0];
    const aY = p1[1] - refPoint[1];
    const bX = p2[0] - refPoint[0];
    const bY = p2[1] - refPoint[1];
    area += aX * bY - aY * bX;
  }
  area *= 0.5;
  return area;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getWindingDirection.js
function getWindingDirection(polyline) {
  const signedArea = getSignedArea(polyline);
  return signedArea >= 0 ? 1 : -1;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getNormal3.js
function _getAreaVector(polyline) {
  const vecArea = vec3_exports.create();
  const refPoint = polyline[0];
  for (let i = 0, len = polyline.length; i < len; i++) {
    const p1 = polyline[i];
    const p2Index = i === len - 1 ? 0 : i + 1;
    const p2 = polyline[p2Index];
    const aX = p1[0] - refPoint[0];
    const aY = p1[1] - refPoint[1];
    const aZ = p1[2] - refPoint[2];
    const bX = p2[0] - refPoint[0];
    const bY = p2[1] - refPoint[1];
    const bZ = p2[2] - refPoint[2];
    vecArea[0] += aY * bZ - aZ * bY;
    vecArea[1] += aZ * bX - aX * bZ;
    vecArea[2] += aX * bY - aY * bX;
  }
  vec3_exports.scale(vecArea, vecArea, 0.5);
  return vecArea;
}
function getNormal3(polyline) {
  const vecArea = _getAreaVector(polyline);
  return vec3_exports.normalize(vecArea, vecArea);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getNormal2.js
function getNormal2(polyline) {
  const area = getSignedArea(polyline);
  return [0, 0, area / Math.abs(area)];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/robustSegmentIntersection.js
var EPSILON3 = 1e-7;
function vec2CrossZ(a, b) {
  return a[0] * b[1] - a[1] * b[0];
}
function pointsAreEqual(p1, p2) {
  return utilities_exports.isEqual(p1, p2, EPSILON3);
}
function robustSegmentIntersection(p1, p2, q1, q2) {
  const r = vec2_exports.subtract(vec2_exports.create(), p2, p1);
  const s = vec2_exports.subtract(vec2_exports.create(), q2, q1);
  const rxs = vec2CrossZ(r, s);
  const qmp = vec2_exports.subtract(vec2_exports.create(), q1, p1);
  const qmpxr = vec2CrossZ(qmp, r);
  if (Math.abs(rxs) < EPSILON3) {
    if (Math.abs(qmpxr) < EPSILON3) {
      const rDotR = vec2_exports.dot(r, r);
      const sDotS = vec2_exports.dot(s, s);
      if (rDotR < EPSILON3 || sDotS < EPSILON3) {
        if (pointsAreEqual(p1, q1) || pointsAreEqual(p1, q2)) {
          return p1;
        }
        if (pointsAreEqual(p2, q1) || pointsAreEqual(p2, q2)) {
          return p2;
        }
        return null;
      }
      const t0 = vec2_exports.dot(vec2_exports.subtract(vec2_exports.create(), q1, p1), r) / rDotR;
      const t1 = vec2_exports.dot(vec2_exports.subtract(vec2_exports.create(), q2, p1), r) / rDotR;
      const u0 = vec2_exports.dot(vec2_exports.subtract(vec2_exports.create(), p1, q1), s) / sDotS;
      const u1 = vec2_exports.dot(vec2_exports.subtract(vec2_exports.create(), p2, q1), s) / sDotS;
      const isInRange = (t2) => t2 >= -EPSILON3 && t2 <= 1 + EPSILON3;
      if (isInRange(t0)) {
        const projectedPoint = vec2_exports.scaleAndAdd(vec2_exports.create(), p1, r, t0);
        if (pointsAreEqual(q1, projectedPoint)) {
          return q1;
        }
      }
      if (isInRange(t1)) {
        const projectedPoint = vec2_exports.scaleAndAdd(vec2_exports.create(), p1, r, t1);
        if (pointsAreEqual(q2, projectedPoint)) {
          return q2;
        }
      }
      if (isInRange(u0)) {
        const projectedPoint = vec2_exports.scaleAndAdd(vec2_exports.create(), q1, s, u0);
        if (pointsAreEqual(p1, projectedPoint)) {
          return p1;
        }
      }
      if (isInRange(u1)) {
        const projectedPoint = vec2_exports.scaleAndAdd(vec2_exports.create(), q1, s, u1);
        if (pointsAreEqual(p2, projectedPoint)) {
          return p2;
        }
      }
    }
    return null;
  }
  const t = vec2CrossZ(qmp, s) / rxs;
  const u = qmpxr / rxs;
  if (t >= -EPSILON3 && t <= 1 + EPSILON3 && u >= -EPSILON3 && u <= 1 + EPSILON3) {
    return [p1[0] + t * r[0], p1[1] + t * r[1]];
  }
  return null;
}
var PolylineNodeType;
(function(PolylineNodeType2) {
  PolylineNodeType2[PolylineNodeType2["Vertex"] = 0] = "Vertex";
  PolylineNodeType2[PolylineNodeType2["Intersection"] = 1] = "Intersection";
})(PolylineNodeType || (PolylineNodeType = {}));
var IntersectionDirection;
(function(IntersectionDirection2) {
  IntersectionDirection2[IntersectionDirection2["Entering"] = 0] = "Entering";
  IntersectionDirection2[IntersectionDirection2["Exiting"] = 1] = "Exiting";
  IntersectionDirection2[IntersectionDirection2["Unknown"] = 2] = "Unknown";
})(IntersectionDirection || (IntersectionDirection = {}));

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/arePolylinesIdentical.js
function arePolylinesIdentical(poly1, poly2) {
  if (poly1.length !== poly2.length) {
    return false;
  }
  const len = poly1.length;
  if (len === 0) {
    return true;
  }
  let identicalForward = true;
  for (let i = 0; i < len; i++) {
    if (!pointsAreEqual(poly1[i], poly2[i])) {
      identicalForward = false;
      break;
    }
  }
  if (identicalForward) {
    return true;
  }
  let identicalReverse = true;
  for (let i = 0; i < len; i++) {
    if (!pointsAreEqual(poly1[i], poly2[len - 1 - i])) {
      identicalReverse = false;
      break;
    }
  }
  if (identicalReverse) {
    return true;
  }
  for (let offset = 1; offset < len; offset++) {
    let cyclicForward = true;
    for (let i = 0; i < len; i++) {
      if (!pointsAreEqual(poly1[i], poly2[(i + offset) % len])) {
        cyclicForward = false;
        break;
      }
    }
    if (cyclicForward) {
      return true;
    }
    let cyclicReverse = true;
    for (let i = 0; i < len; i++) {
      if (!pointsAreEqual(poly1[i], poly2[(len - 1 - i + offset) % len])) {
        cyclicReverse = false;
        break;
      }
    }
    if (cyclicReverse) {
      return true;
    }
  }
  return false;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/subtractPolylines.js
function subtractPolylines(targetPolylineCoords, sourcePolylineCoordsInput) {
  if (targetPolylineCoords.length < 3) {
    return [];
  }
  if (sourcePolylineCoordsInput.length < 3) {
    return [targetPolylineCoords.slice()];
  }
  const sourcePolylineCoords = sourcePolylineCoordsInput.slice();
  if (arePolylinesIdentical(targetPolylineCoords, sourcePolylineCoordsInput)) {
    return [];
  }
  const targetArea = getSignedArea(targetPolylineCoords);
  const sourceArea = getSignedArea(sourcePolylineCoords);
  if (Math.sign(targetArea) === Math.sign(sourceArea) && Math.abs(sourceArea) > EPSILON3) {
    sourcePolylineCoords.reverse();
  }
  const intersections = [];
  for (let i = 0; i < targetPolylineCoords.length; i++) {
    const p1 = targetPolylineCoords[i];
    const p2 = targetPolylineCoords[(i + 1) % targetPolylineCoords.length];
    for (let j = 0; j < sourcePolylineCoords.length; j++) {
      const q1 = sourcePolylineCoords[j];
      const q2 = sourcePolylineCoords[(j + 1) % sourcePolylineCoords.length];
      const intersectPt = robustSegmentIntersection(p1, p2, q1, q2);
      if (intersectPt) {
        const lenP = Math.sqrt(vec2_exports.squaredDistance(p1, p2));
        const lenQ = Math.sqrt(vec2_exports.squaredDistance(q1, q2));
        intersections.push({
          coord: intersectPt,
          seg1Idx: i,
          seg2Idx: j,
          alpha1: lenP < EPSILON3 ? 0 : Math.sqrt(vec2_exports.squaredDistance(p1, intersectPt)) / lenP,
          alpha2: lenQ < EPSILON3 ? 0 : Math.sqrt(vec2_exports.squaredDistance(q1, intersectPt)) / lenQ
        });
      }
    }
  }
  const buildAugmentedList = (polyCoords, polyIndex, allIntersections) => {
    const augmentedList = [];
    let nodeIdCounter = 0;
    for (let i = 0; i < polyCoords.length; i++) {
      const p1 = polyCoords[i];
      augmentedList.push({
        id: `${polyIndex}_v${nodeIdCounter++}`,
        coordinates: p1,
        type: PolylineNodeType.Vertex,
        originalPolyIndex: polyIndex,
        originalVertexIndex: i,
        next: null,
        prev: null,
        isIntersection: false,
        visited: false
      });
      const segmentIntersections = allIntersections.filter((isect) => (polyIndex === 0 ? isect.seg1Idx : isect.seg2Idx) === i).sort((a, b) => (polyIndex === 0 ? a.alpha1 : a.alpha2) - (polyIndex === 0 ? b.alpha1 : b.alpha2));
      for (const isect of segmentIntersections) {
        if (augmentedList.length > 0 && pointsAreEqual(augmentedList[augmentedList.length - 1].coordinates, isect.coord)) {
          if (!augmentedList[augmentedList.length - 1].isIntersection) {
            augmentedList[augmentedList.length - 1].isIntersection = true;
            augmentedList[augmentedList.length - 1].intersectionInfo = isect;
            augmentedList[augmentedList.length - 1].alpha = polyIndex === 0 ? isect.alpha1 : isect.alpha2;
          }
          continue;
        }
        augmentedList.push({
          id: `${polyIndex}_i${nodeIdCounter++}`,
          coordinates: isect.coord,
          type: PolylineNodeType.Intersection,
          originalPolyIndex: polyIndex,
          next: null,
          prev: null,
          isIntersection: true,
          visited: false,
          alpha: polyIndex === 0 ? isect.alpha1 : isect.alpha2,
          intersectionInfo: isect
        });
      }
    }
    const finalList = [];
    if (augmentedList.length > 0) {
      finalList.push(augmentedList[0]);
      for (let i = 1; i < augmentedList.length; i++) {
        if (!pointsAreEqual(augmentedList[i].coordinates, finalList[finalList.length - 1].coordinates)) {
          finalList.push(augmentedList[i]);
        } else {
          if (augmentedList[i].isIntersection) {
            finalList[finalList.length - 1].isIntersection = true;
            finalList[finalList.length - 1].intersectionInfo = augmentedList[i].intersectionInfo;
            finalList[finalList.length - 1].alpha = augmentedList[i].alpha;
          }
        }
      }
    }
    if (finalList.length > 0) {
      for (let i = 0; i < finalList.length; i++) {
        finalList[i].next = finalList[(i + 1) % finalList.length];
        finalList[i].prev = finalList[(i - 1 + finalList.length) % finalList.length];
      }
    }
    return finalList;
  };
  const targetAugmented = buildAugmentedList(targetPolylineCoords, 0, intersections);
  const sourceAugmented = buildAugmentedList(sourcePolylineCoords, 1, intersections);
  targetAugmented.forEach((tnode) => {
    if (tnode.isIntersection) {
      const tData = tnode.intersectionInfo;
      const partner = sourceAugmented.find((snode) => snode.isIntersection && pointsAreEqual(snode.coordinates, tnode.coordinates) && snode.intersectionInfo.seg1Idx === tData.seg1Idx && snode.intersectionInfo.seg2Idx === tData.seg2Idx);
      if (partner) {
        tnode.partnerNode = partner;
        partner.partnerNode = tnode;
        const p_prev = tnode.prev.coordinates;
        const p_curr = tnode.coordinates;
        const p_next_source = partner.next.coordinates;
        const v_target_arrival = vec2_exports.subtract(vec2_exports.create(), p_curr, p_prev);
        const v_source_departure = vec2_exports.subtract(vec2_exports.create(), p_next_source, p_curr);
        const midPrevTargetSeg = [
          (tnode.prev.coordinates[0] + tnode.coordinates[0]) / 2,
          (tnode.prev.coordinates[1] + tnode.coordinates[1]) / 2
        ];
        const prevSegMidpointInsideSource = containsPoint(sourcePolylineCoordsInput, midPrevTargetSeg);
        if (prevSegMidpointInsideSource) {
          tnode.intersectionDir = IntersectionDirection.Exiting;
        } else {
          tnode.intersectionDir = IntersectionDirection.Entering;
        }
      } else {
        tnode.isIntersection = false;
      }
    }
  });
  targetAugmented.forEach((n) => delete n.intersectionInfo);
  sourceAugmented.forEach((n) => delete n.intersectionInfo);
  const resultPolylines = [];
  for (let i = 0; i < targetAugmented.length; i++) {
    const startNode = targetAugmented[i];
    if (startNode.visited || startNode.isIntersection) {
      continue;
    }
    if (containsPoint(sourcePolylineCoordsInput, startNode.coordinates)) {
      continue;
    }
    const currentPathCoords = [];
    let currentNode = startNode;
    let onTargetList = true;
    let safetyBreak = 0;
    const maxIter = (targetAugmented.length + sourceAugmented.length) * 2;
    do {
      if (safetyBreak++ > maxIter) {
        console.warn("Subtraction: Max iterations reached, possible infinite loop.");
        break;
      }
      currentNode.visited = true;
      if (currentPathCoords.length === 0 || !pointsAreEqual(currentPathCoords[currentPathCoords.length - 1], currentNode.coordinates)) {
        currentPathCoords.push(currentNode.coordinates);
      }
      if (currentNode.isIntersection) {
        if (onTargetList) {
          if (currentNode.intersectionDir === IntersectionDirection.Entering && currentNode.partnerNode) {
            currentNode = currentNode.partnerNode;
            onTargetList = false;
          }
        } else {
          if (currentNode.partnerNode) {
            currentNode = currentNode.partnerNode;
            onTargetList = true;
          } else {
            console.warn("Subtraction: Intersection on source without partner.");
          }
        }
      }
      currentNode = currentNode.next;
    } while (currentNode !== startNode || !onTargetList);
    if (currentPathCoords.length >= 3) {
      if (pointsAreEqual(currentPathCoords[0], currentPathCoords[currentPathCoords.length - 1])) {
        currentPathCoords.pop();
      }
      if (currentPathCoords.length >= 3) {
        resultPolylines.push(currentPathCoords);
      }
    }
  }
  return resultPolylines;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/intersectPolylines.js
function intersectPolylines(mainPolyCoords, clipPolyCoordsInput) {
  if (mainPolyCoords.length < 3 || clipPolyCoordsInput.length < 3) {
    return [];
  }
  let clipPolyCoords = clipPolyCoordsInput.slice();
  const mainArea = getSignedArea(mainPolyCoords);
  const clipArea = getSignedArea(clipPolyCoords);
  if (Math.abs(mainArea) < EPSILON3 || Math.abs(clipArea) < EPSILON3) {
    return [];
  }
  if (mainArea < 0) {
    mainPolyCoords = mainPolyCoords.slice().reverse();
  }
  if (clipArea < 0) {
    clipPolyCoords = clipPolyCoords.slice().reverse();
  }
  const currentClipPolyForPIP = clipPolyCoords;
  const intersections = [];
  for (let i = 0; i < mainPolyCoords.length; i++) {
    const p1 = mainPolyCoords[i];
    const p2 = mainPolyCoords[(i + 1) % mainPolyCoords.length];
    for (let j = 0; j < clipPolyCoords.length; j++) {
      const q1 = clipPolyCoords[j];
      const q2 = clipPolyCoords[(j + 1) % clipPolyCoords.length];
      const intersectPt = robustSegmentIntersection(p1, p2, q1, q2);
      if (intersectPt) {
        const lenP = Math.sqrt(vec2_exports.squaredDistance(p1, p2));
        const lenQ = Math.sqrt(vec2_exports.squaredDistance(q1, q2));
        intersections.push({
          coord: [...intersectPt],
          seg1Idx: i,
          seg2Idx: j,
          alpha1: lenP < EPSILON3 ? 0 : Math.sqrt(vec2_exports.squaredDistance(p1, intersectPt)) / lenP,
          alpha2: lenQ < EPSILON3 ? 0 : Math.sqrt(vec2_exports.squaredDistance(q1, intersectPt)) / lenQ
        });
      }
    }
  }
  if (intersections.length === 0) {
    if (containsPoint(currentClipPolyForPIP, mainPolyCoords[0]) && mainPolyCoords.every((pt) => containsPoint(currentClipPolyForPIP, pt))) {
      return [[...mainPolyCoords.map((p) => [...p])]];
    }
    if (containsPoint(mainPolyCoords, clipPolyCoords[0]) && clipPolyCoords.every((pt) => containsPoint(mainPolyCoords, pt))) {
      return [[...clipPolyCoords.map((p) => [...p])]];
    }
    return [];
  }
  const buildAugmentedList = (polyCoords, polyIndex, allIntersections) => {
    const augmentedList = [];
    let nodeIdCounter = 0;
    for (let i = 0; i < polyCoords.length; i++) {
      const p1 = polyCoords[i];
      augmentedList.push({
        id: `${polyIndex}_v${nodeIdCounter++}`,
        coordinates: [...p1],
        type: PolylineNodeType.Vertex,
        originalPolyIndex: polyIndex,
        originalVertexIndex: i,
        next: null,
        prev: null,
        isIntersection: false,
        visited: false,
        processedInPath: false,
        intersectionDir: IntersectionDirection.Unknown
      });
      const segmentIntersections = allIntersections.filter((isect) => (polyIndex === 0 ? isect.seg1Idx : isect.seg2Idx) === i).sort((a, b) => (polyIndex === 0 ? a.alpha1 : a.alpha2) - (polyIndex === 0 ? b.alpha1 : b.alpha2));
      for (const isect of segmentIntersections) {
        if (augmentedList.length > 0 && pointsAreEqual(augmentedList[augmentedList.length - 1].coordinates, isect.coord)) {
          const lastNode = augmentedList[augmentedList.length - 1];
          if (!lastNode.isIntersection) {
            lastNode.isIntersection = true;
            lastNode.intersectionInfo = isect;
            lastNode.alpha = polyIndex === 0 ? isect.alpha1 : isect.alpha2;
            lastNode.type = PolylineNodeType.Intersection;
          }
          continue;
        }
        augmentedList.push({
          id: `${polyIndex}_i${nodeIdCounter++}`,
          coordinates: [...isect.coord],
          type: PolylineNodeType.Intersection,
          originalPolyIndex: polyIndex,
          next: null,
          prev: null,
          isIntersection: true,
          visited: false,
          processedInPath: false,
          alpha: polyIndex === 0 ? isect.alpha1 : isect.alpha2,
          intersectionInfo: isect,
          intersectionDir: IntersectionDirection.Unknown
        });
      }
    }
    const finalList = [];
    if (augmentedList.length > 0) {
      finalList.push(augmentedList[0]);
      for (let i = 1; i < augmentedList.length; i++) {
        if (!pointsAreEqual(augmentedList[i].coordinates, finalList[finalList.length - 1].coordinates)) {
          finalList.push(augmentedList[i]);
        } else {
          const lastNodeInFinal = finalList[finalList.length - 1];
          if (augmentedList[i].isIntersection && augmentedList[i].intersectionInfo) {
            lastNodeInFinal.isIntersection = true;
            lastNodeInFinal.intersectionInfo = augmentedList[i].intersectionInfo;
            lastNodeInFinal.alpha = augmentedList[i].alpha;
            lastNodeInFinal.type = PolylineNodeType.Intersection;
          }
        }
      }
    }
    if (finalList.length > 1 && pointsAreEqual(finalList[0].coordinates, finalList[finalList.length - 1].coordinates)) {
      const firstNode = finalList[0];
      const lastNodePopped = finalList.pop();
      if (lastNodePopped.isIntersection && !firstNode.isIntersection && lastNodePopped.intersectionInfo) {
        firstNode.isIntersection = true;
        firstNode.intersectionInfo = lastNodePopped.intersectionInfo;
        firstNode.alpha = lastNodePopped.alpha;
        firstNode.type = PolylineNodeType.Intersection;
      }
    }
    if (finalList.length > 0) {
      for (let i = 0; i < finalList.length; i++) {
        finalList[i].next = finalList[(i + 1) % finalList.length];
        finalList[i].prev = finalList[(i - 1 + finalList.length) % finalList.length];
      }
    }
    return finalList;
  };
  const mainAugmented = buildAugmentedList(mainPolyCoords, 0, intersections);
  const clipAugmented = buildAugmentedList(clipPolyCoords, 1, intersections);
  if (mainAugmented.length === 0 || clipAugmented.length === 0) {
    return [];
  }
  mainAugmented.forEach((mainNode) => {
    if (mainNode.isIntersection && mainNode.intersectionInfo) {
      const mainIntersectData = mainNode.intersectionInfo;
      const partnerNode = clipAugmented.find((clipNode) => clipNode.isIntersection && clipNode.intersectionInfo && pointsAreEqual(clipNode.coordinates, mainNode.coordinates) && clipNode.intersectionInfo.seg1Idx === mainIntersectData.seg1Idx && clipNode.intersectionInfo.seg2Idx === mainIntersectData.seg2Idx);
      if (partnerNode) {
        mainNode.partnerNode = partnerNode;
        partnerNode.partnerNode = mainNode;
        const v_arrival_main = vec2_exports.subtract(vec2_exports.create(), mainNode.coordinates, mainNode.prev.coordinates);
        const v_departure_clip = vec2_exports.subtract(vec2_exports.create(), partnerNode.next.coordinates, partnerNode.coordinates);
        const crossZ = v_arrival_main[0] * v_departure_clip[1] - v_arrival_main[1] * v_departure_clip[0];
        if (crossZ > EPSILON3) {
          mainNode.intersectionDir = IntersectionDirection.Entering;
          partnerNode.intersectionDir = IntersectionDirection.Exiting;
        } else if (crossZ < -EPSILON3) {
          mainNode.intersectionDir = IntersectionDirection.Exiting;
          partnerNode.intersectionDir = IntersectionDirection.Entering;
        } else {
          const midPrevMainSeg = [
            (mainNode.prev.coordinates[0] + mainNode.coordinates[0]) / 2,
            (mainNode.prev.coordinates[1] + mainNode.coordinates[1]) / 2
          ];
          if (containsPoint(currentClipPolyForPIP, midPrevMainSeg)) {
            mainNode.intersectionDir = IntersectionDirection.Exiting;
            partnerNode.intersectionDir = IntersectionDirection.Entering;
          } else {
            mainNode.intersectionDir = IntersectionDirection.Entering;
            partnerNode.intersectionDir = IntersectionDirection.Exiting;
          }
        }
      } else {
        mainNode.isIntersection = false;
        mainNode.intersectionInfo = void 0;
      }
    }
  });
  const resultPolygons = [];
  for (const startCand of mainAugmented) {
    if (!startCand.isIntersection || startCand.visited || startCand.intersectionDir !== IntersectionDirection.Entering) {
      continue;
    }
    let currentPathCoords = [];
    let currentNode = startCand;
    let onMainList = true;
    const pathStartNode = startCand;
    let safetyBreak = 0;
    const maxIter = (mainAugmented.length + clipAugmented.length) * 2;
    mainAugmented.forEach((n) => n.processedInPath = false);
    clipAugmented.forEach((n) => n.processedInPath = false);
    do {
      if (safetyBreak++ > maxIter) {
        console.warn("Intersection: Max iterations in path tracing.", pathStartNode.id, currentNode.id);
        currentPathCoords = [];
        break;
      }
      if (currentNode.processedInPath && currentNode !== pathStartNode) {
        console.warn("Intersection: Path processing loop detected, discarding path segment.", pathStartNode.id, currentNode.id);
        currentPathCoords = [];
        break;
      }
      currentNode.processedInPath = true;
      currentNode.visited = true;
      if (currentPathCoords.length === 0 || !pointsAreEqual(currentPathCoords[currentPathCoords.length - 1], currentNode.coordinates)) {
        currentPathCoords.push([...currentNode.coordinates]);
      }
      let switchedList = false;
      if (currentNode.isIntersection && currentNode.partnerNode) {
        if (onMainList) {
          currentNode = currentNode.partnerNode;
          onMainList = false;
          switchedList = true;
        } else {
          currentNode = currentNode.partnerNode;
          onMainList = true;
          switchedList = true;
        }
      }
      if (!switchedList) {
        currentNode = currentNode.next;
      } else {
        currentNode = currentNode.next;
      }
    } while (currentNode !== pathStartNode || onMainList && currentNode.originalPolyIndex !== 0 || !onMainList && currentNode.originalPolyIndex !== 1);
    if (safetyBreak > maxIter || currentPathCoords.length === 0) {
    } else if (currentPathCoords.length > 0 && pointsAreEqual(currentPathCoords[0], currentPathCoords[currentPathCoords.length - 1])) {
      currentPathCoords.pop();
    }
    if (currentPathCoords.length >= 3) {
      const resultArea = getSignedArea(currentPathCoords);
      if (mainArea > 0 && resultArea < 0) {
        currentPathCoords.reverse();
      } else if (mainArea < 0 && resultArea > 0) {
        currentPathCoords.reverse();
      }
      resultPolygons.push(currentPathCoords.map((p) => [...p]));
    }
  }
  return resultPolygons;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/areLineSegmentsIntersecting.js
function areLineSegmentsIntersecting(p1, q1, p2, q2) {
  let result = false;
  const line1MinX = p1[0] < q1[0] ? p1[0] : q1[0];
  const line1MinY = p1[1] < q1[1] ? p1[1] : q1[1];
  const line1MaxX = p1[0] > q1[0] ? p1[0] : q1[0];
  const line1MaxY = p1[1] > q1[1] ? p1[1] : q1[1];
  const line2MinX = p2[0] < q2[0] ? p2[0] : q2[0];
  const line2MinY = p2[1] < q2[1] ? p2[1] : q2[1];
  const line2MaxX = p2[0] > q2[0] ? p2[0] : q2[0];
  const line2MaxY = p2[1] > q2[1] ? p2[1] : q2[1];
  if (line1MinX > line2MaxX || line1MaxX < line2MinX || line1MinY > line2MaxY || line1MaxY < line2MinY) {
    return false;
  }
  const orient = [
    orientation(p1, q1, p2),
    orientation(p1, q1, q2),
    orientation(p2, q2, p1),
    orientation(p2, q2, q1)
  ];
  if (orient[0] !== orient[1] && orient[2] !== orient[3]) {
    return true;
  }
  if (orient[0] === 0 && onSegment(p1, p2, q1)) {
    result = true;
  } else if (orient[1] === 0 && onSegment(p1, q2, q1)) {
    result = true;
  } else if (orient[2] === 0 && onSegment(p2, p1, q2)) {
    result = true;
  } else if (orient[3] === 0 && onSegment(p2, q1, q2)) {
    result = true;
  }
  return result;
}
function orientation(p, q, r) {
  const orientationValue = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);
  if (orientationValue === 0) {
    return 0;
  }
  return orientationValue > 0 ? 1 : 2;
}
function onSegment(p, q, r) {
  if (q[0] <= Math.max(p[0], r[0]) && q[0] >= Math.min(p[0], r[0]) && q[1] <= Math.max(p[1], r[1]) && q[1] >= Math.min(p[1], r[1])) {
    return true;
  }
  return false;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLineSegmentIntersectionsIndexes.js
function getLineSegmentIntersectionsIndexes(polyline, p1, q1, closed2 = true) {
  const intersections = [];
  const numPoints = polyline.length;
  const maxI = numPoints - (closed2 ? 1 : 2);
  for (let i = 0; i <= maxI; i++) {
    const p2 = polyline[i];
    const j = i === numPoints - 1 ? 0 : i + 1;
    const q2 = polyline[j];
    if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {
      intersections.push([i, j]);
    }
  }
  return intersections;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getFirstLineSegmentIntersectionIndexes.js
function getFirstLineSegmentIntersectionIndexes(points, p1, q1, closed2 = true) {
  let initialI;
  let j;
  if (closed2) {
    j = points.length - 1;
    initialI = 0;
  } else {
    j = 0;
    initialI = 1;
  }
  for (let i = initialI; i < points.length; i++) {
    const p2 = points[j];
    const q2 = points[i];
    if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {
      return [j, i];
    }
    j = i;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/intersectPolyline.js
function intersectPolyline(sourcePolyline, targetPolyline) {
  for (let i = 0, sourceLen = sourcePolyline.length; i < sourceLen; i++) {
    const sourceP1 = sourcePolyline[i];
    const sourceP2Index = i === sourceLen - 1 ? 0 : i + 1;
    const sourceP2 = sourcePolyline[sourceP2Index];
    const intersectionPointIndexes = getFirstLineSegmentIntersectionIndexes(targetPolyline, sourceP1, sourceP2);
    if (intersectionPointIndexes?.length === 2) {
      return true;
    }
  }
  return false;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLinesIntersection.js
var PARALLEL_LINES_TOLERANCE = 0.01;
function getLinesIntersection(p1, q1, p2, q2) {
  const diffQ1P1 = [q1[0] - p1[0], q1[1] - p1[1]];
  const diffQ2P2 = [q2[0] - p2[0], q2[1] - p2[1]];
  const denominator = diffQ2P2[1] * diffQ1P1[0] - diffQ2P2[0] * diffQ1P1[1];
  const absDenominator = denominator >= 0 ? denominator : -denominator;
  if (absDenominator < PARALLEL_LINES_TOLERANCE) {
    const line1AABB = [
      p1[0] < q1[0] ? p1[0] : q1[0],
      p1[0] > q1[0] ? p1[0] : q1[0],
      p1[1] < q1[1] ? p1[1] : q1[1],
      p1[1] > q1[1] ? p1[1] : q1[1]
    ];
    const line2AABB = [
      p2[0] < q2[0] ? p2[0] : q2[0],
      p2[0] > q2[0] ? p2[0] : q2[0],
      p2[1] < q2[1] ? p2[1] : q2[1],
      p2[1] > q2[1] ? p2[1] : q2[1]
    ];
    const aabbIntersects = line1AABB[0] <= line2AABB[1] && line1AABB[1] >= line2AABB[0] && line1AABB[2] <= line2AABB[3] && line1AABB[3] >= line2AABB[2];
    if (!aabbIntersects) {
      return;
    }
    const overlap = isPointOnLineSegment(p1, q1, p2) || isPointOnLineSegment(p1, q1, q2) || isPointOnLineSegment(p2, q2, p1);
    if (!overlap) {
      return;
    }
    const minX = line1AABB[0] > line2AABB[0] ? line1AABB[0] : line2AABB[0];
    const maxX = line1AABB[1] < line2AABB[1] ? line1AABB[1] : line2AABB[1];
    const minY = line1AABB[2] > line2AABB[2] ? line1AABB[2] : line2AABB[2];
    const maxY = line1AABB[3] < line2AABB[3] ? line1AABB[3] : line2AABB[3];
    const midX = (minX + maxX) * 0.5;
    const midY = (minY + maxY) * 0.5;
    return [midX, midY];
  }
  let a = p1[1] - p2[1];
  let b = p1[0] - p2[0];
  const numerator1 = diffQ2P2[0] * a - diffQ2P2[1] * b;
  const numerator2 = diffQ1P1[0] * a - diffQ1P1[1] * b;
  a = numerator1 / denominator;
  b = numerator2 / denominator;
  const resultX = p1[0] + a * diffQ1P1[0];
  const resultY = p1[1] + a * diffQ1P1[1];
  return [resultX, resultY];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/combinePolyline.js
var PolylinePointType;
(function(PolylinePointType2) {
  PolylinePointType2[PolylinePointType2["Vertex"] = 0] = "Vertex";
  PolylinePointType2[PolylinePointType2["Intersection"] = 1] = "Intersection";
})(PolylinePointType || (PolylinePointType = {}));
var PolylinePointPosition;
(function(PolylinePointPosition2) {
  PolylinePointPosition2[PolylinePointPosition2["Outside"] = -1] = "Outside";
  PolylinePointPosition2[PolylinePointPosition2["Edge"] = 0] = "Edge";
  PolylinePointPosition2[PolylinePointPosition2["Inside"] = 1] = "Inside";
})(PolylinePointPosition || (PolylinePointPosition = {}));
var PolylinePointDirection;
(function(PolylinePointDirection2) {
  PolylinePointDirection2[PolylinePointDirection2["Exiting"] = -1] = "Exiting";
  PolylinePointDirection2[PolylinePointDirection2["Unknown"] = 0] = "Unknown";
  PolylinePointDirection2[PolylinePointDirection2["Entering"] = 1] = "Entering";
})(PolylinePointDirection || (PolylinePointDirection = {}));
function ensuresNextPointers(polylinePoints) {
  for (let i = 0, len = polylinePoints.length; i < len; i++) {
    const currentPoint = polylinePoints[i];
    if (!currentPoint.next) {
      currentPoint.next = polylinePoints[i === len - 1 ? 0 : i + 1];
    }
  }
}
function getSourceAndTargetPointsList(targetPolyline, sourcePolyline) {
  const targetPolylinePoints = [];
  const sourcePolylinePoints = [];
  const sourceIntersectionsCache = /* @__PURE__ */ new Map();
  const isFirstPointInside = containsPoint(sourcePolyline, targetPolyline[0]);
  let intersectionPointDirection = isFirstPointInside ? PolylinePointDirection.Exiting : PolylinePointDirection.Entering;
  for (let i = 0, len = targetPolyline.length; i < len; i++) {
    const p1 = targetPolyline[i];
    const pointInside = containsPoint(sourcePolyline, p1);
    const vertexPoint = {
      type: PolylinePointType.Vertex,
      coordinates: p1,
      position: pointInside ? PolylinePointPosition.Inside : PolylinePointPosition.Outside,
      visited: false,
      next: null
    };
    targetPolylinePoints.push(vertexPoint);
    const q1 = targetPolyline[i === len - 1 ? 0 : i + 1];
    const intersectionsInfo = getLineSegmentIntersectionsIndexes(sourcePolyline, p1, q1).map((intersectedLineSegment) => {
      const sourceLineSegmentId = intersectedLineSegment[0];
      const p2 = sourcePolyline[intersectedLineSegment[0]];
      const q2 = sourcePolyline[intersectedLineSegment[1]];
      const intersectionCoordinate = getLinesIntersection(p1, q1, p2, q2);
      const targetStartPointDistSquared = distanceToPointSquared2(p1, intersectionCoordinate);
      return {
        sourceLineSegmentId,
        coordinate: intersectionCoordinate,
        targetStartPointDistSquared
      };
    });
    intersectionsInfo.sort((left, right) => left.targetStartPointDistSquared - right.targetStartPointDistSquared);
    intersectionsInfo.forEach((intersectionInfo) => {
      const { sourceLineSegmentId, coordinate: intersectionCoordinate } = intersectionInfo;
      const targetEdgePoint = {
        type: PolylinePointType.Intersection,
        coordinates: intersectionCoordinate,
        position: PolylinePointPosition.Edge,
        direction: intersectionPointDirection,
        visited: false,
        next: null
      };
      const sourceEdgePoint = {
        ...targetEdgePoint,
        direction: PolylinePointDirection.Unknown,
        cloned: true
      };
      if (intersectionPointDirection === PolylinePointDirection.Entering) {
        targetEdgePoint.next = sourceEdgePoint;
      } else {
        sourceEdgePoint.next = targetEdgePoint;
      }
      let sourceIntersectionPoints = sourceIntersectionsCache.get(sourceLineSegmentId);
      if (!sourceIntersectionPoints) {
        sourceIntersectionPoints = [];
        sourceIntersectionsCache.set(sourceLineSegmentId, sourceIntersectionPoints);
      }
      targetPolylinePoints.push(targetEdgePoint);
      sourceIntersectionPoints.push(sourceEdgePoint);
      intersectionPointDirection *= -1;
    });
  }
  for (let i = 0, len = sourcePolyline.length; i < len; i++) {
    const lineSegmentId = i;
    const p1 = sourcePolyline[i];
    const vertexPoint = {
      type: PolylinePointType.Vertex,
      coordinates: p1,
      visited: false,
      next: null
    };
    sourcePolylinePoints.push(vertexPoint);
    const sourceIntersectionPoints = sourceIntersectionsCache.get(lineSegmentId);
    if (!sourceIntersectionPoints?.length) {
      continue;
    }
    sourceIntersectionPoints.map((intersectionPoint) => ({
      intersectionPoint,
      lineSegStartDistSquared: distanceToPointSquared2(p1, intersectionPoint.coordinates)
    })).sort((left, right) => left.lineSegStartDistSquared - right.lineSegStartDistSquared).map(({ intersectionPoint }) => intersectionPoint).forEach((intersectionPoint) => sourcePolylinePoints.push(intersectionPoint));
  }
  ensuresNextPointers(targetPolylinePoints);
  ensuresNextPointers(sourcePolylinePoints);
  return { targetPolylinePoints, sourcePolylinePoints };
}
function getUnvisitedOutsidePoint(polylinePoints) {
  for (let i = 0, len = polylinePoints.length; i < len; i++) {
    const point = polylinePoints[i];
    if (!point.visited && point.position === PolylinePointPosition.Outside && point.type === PolylinePointType.Vertex) {
      return point;
    }
  }
  for (let i = 0, len = polylinePoints.length; i < len; i++) {
    const point = polylinePoints[i];
    if (!point.visited && point.position === PolylinePointPosition.Outside) {
      return point;
    }
  }
  return void 0;
}
function mergePolylines(targetPolyline, sourcePolyline) {
  const targetNormal = getNormal2(targetPolyline);
  const sourceNormal = getNormal2(sourcePolyline);
  const dotNormals = vec3_exports.dot(sourceNormal, targetNormal);
  if (!common_exports.equals(1, dotNormals)) {
    sourcePolyline = sourcePolyline.slice().reverse();
  }
  const lineSegmentsIntersect = intersectPolyline(sourcePolyline, targetPolyline);
  const targetContainedInSource = !lineSegmentsIntersect && containsPoints(sourcePolyline, targetPolyline);
  if (targetContainedInSource) {
    return sourcePolyline.slice();
  }
  const { targetPolylinePoints } = getSourceAndTargetPointsList(targetPolyline, sourcePolyline);
  const startPoint = getUnvisitedOutsidePoint(targetPolylinePoints);
  if (!startPoint) {
    return targetPolyline.slice();
  }
  const mergedPolyline = [startPoint.coordinates];
  let currentPoint = startPoint.next;
  let iterationCount = 0;
  const maxIterations = targetPolyline.length + sourcePolyline.length + 1e3;
  while (currentPoint !== startPoint && iterationCount < maxIterations) {
    iterationCount++;
    if (currentPoint.type === PolylinePointType.Intersection && currentPoint.cloned) {
      currentPoint = currentPoint.next;
      continue;
    }
    mergedPolyline.push(currentPoint.coordinates);
    currentPoint = currentPoint.next;
    if (!currentPoint) {
      console.warn("Broken linked list detected in mergePolylines, breaking loop");
      break;
    }
  }
  if (iterationCount >= maxIterations) {
    console.warn("Maximum iterations reached in mergePolylines, possible infinite loop detected");
  }
  return mergedPolyline;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/decimate.js
var DEFAULT_EPSILON = 0.1;
function decimate(polyline, epsilon2 = DEFAULT_EPSILON) {
  const numPoints = polyline.length;
  if (numPoints < 3) {
    return polyline;
  }
  const epsilonSquared = epsilon2 * epsilon2;
  const partitionQueue = [[0, numPoints - 1]];
  const polylinePointFlags = new Array(numPoints).fill(false);
  let numDecimatedPoints = 2;
  polylinePointFlags[0] = true;
  polylinePointFlags[numPoints - 1] = true;
  while (partitionQueue.length) {
    const [startIndex, endIndex] = partitionQueue.pop();
    if (endIndex - startIndex === 1) {
      continue;
    }
    const startPoint = polyline[startIndex];
    const endPoint = polyline[endIndex];
    let maxDistSquared = -Infinity;
    let maxDistIndex = -1;
    for (let i = startIndex + 1; i < endIndex; i++) {
      const currentPoint = polyline[i];
      const distSquared = distanceToPointSquared3(startPoint, endPoint, currentPoint);
      if (distSquared > maxDistSquared) {
        maxDistSquared = distSquared;
        maxDistIndex = i;
      }
    }
    if (maxDistSquared < epsilonSquared) {
      continue;
    }
    polylinePointFlags[maxDistIndex] = true;
    numDecimatedPoints++;
    partitionQueue.push([maxDistIndex, endIndex]);
    partitionQueue.push([startIndex, maxDistIndex]);
  }
  const decimatedPolyline = new Array(numDecimatedPoints);
  for (let srcIndex = 0, dstIndex = 0; srcIndex < numPoints; srcIndex++) {
    if (polylinePointFlags[srcIndex]) {
      decimatedPolyline[dstIndex++] = polyline[srcIndex];
    }
  }
  return decimatedPolyline;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLineSegmentIntersectionsCoordinates.js
function getLineSegmentIntersectionsCoordinates(points, p1, q1, closed2 = true) {
  const result = [];
  const polylineIndexes = getLineSegmentIntersectionsIndexes(points, p1, q1, closed2);
  for (let i = 0; i < polylineIndexes.length; i++) {
    const p2 = points[polylineIndexes[i][0]];
    const q2 = points[polylineIndexes[i][1]];
    const intersection = getLinesIntersection(p1, q1, p2, q2);
    result.push(intersection);
  }
  return result;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getClosestLineSegmentIntersection.js
function getClosestLineSegmentIntersection(points, p1, q1, closed2 = true) {
  let initialQ2Index;
  let p2Index;
  if (closed2) {
    p2Index = points.length - 1;
    initialQ2Index = 0;
  } else {
    p2Index = 0;
    initialQ2Index = 1;
  }
  const intersections = [];
  for (let q2Index = initialQ2Index; q2Index < points.length; q2Index++) {
    const p2 = points[p2Index];
    const q2 = points[q2Index];
    if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {
      intersections.push([p2Index, q2Index]);
    }
    p2Index = q2Index;
  }
  if (intersections.length === 0) {
    return;
  }
  const distances = [];
  intersections.forEach((intersection) => {
    const intersectionPoints = [
      points[intersection[0]],
      points[intersection[1]]
    ];
    const midpoint = [
      (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,
      (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2
    ];
    distances.push(vec2_exports.distance(midpoint, p1));
  });
  const minDistance = Math.min(...distances);
  const indexOfMinDistance = distances.indexOf(minDistance);
  return {
    segment: intersections[indexOfMinDistance],
    distance: minDistance
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSubPixelSpacingAndXYDirections.js
var EPSILON4 = 1e-3;
var getSubPixelSpacingAndXYDirections = (viewport, subPixelResolution) => {
  let spacing;
  let xDir;
  let yDir;
  if (viewport instanceof StackViewport_default) {
    const imageData = viewport.getImageData();
    if (!imageData) {
      return;
    }
    xDir = imageData.direction.slice(0, 3);
    yDir = imageData.direction.slice(3, 6);
    spacing = imageData.spacing;
  } else {
    const imageData = viewport.getImageData();
    const { direction, spacing: volumeSpacing } = imageData;
    const { viewPlaneNormal, viewUp } = viewport.getCamera();
    const iVector = direction.slice(0, 3);
    const jVector = direction.slice(3, 6);
    const kVector = direction.slice(6, 9);
    const viewRight = vec3_exports.create();
    vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
    const absViewRightDotI = Math.abs(vec3_exports.dot(viewRight, iVector));
    const absViewRightDotJ = Math.abs(vec3_exports.dot(viewRight, jVector));
    const absViewRightDotK = Math.abs(vec3_exports.dot(viewRight, kVector));
    let xSpacing;
    if (Math.abs(1 - absViewRightDotI) < EPSILON4) {
      xSpacing = volumeSpacing[0];
      xDir = iVector;
    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON4) {
      xSpacing = volumeSpacing[1];
      xDir = jVector;
    } else if (Math.abs(1 - absViewRightDotK) < EPSILON4) {
      xSpacing = volumeSpacing[2];
      xDir = kVector;
    } else {
      throw new Error("No support yet for oblique plane planar contours");
    }
    const absViewUpDotI = Math.abs(vec3_exports.dot(viewUp, iVector));
    const absViewUpDotJ = Math.abs(vec3_exports.dot(viewUp, jVector));
    const absViewUpDotK = Math.abs(vec3_exports.dot(viewUp, kVector));
    let ySpacing;
    if (Math.abs(1 - absViewUpDotI) < EPSILON4) {
      ySpacing = volumeSpacing[0];
      yDir = iVector;
    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON4) {
      ySpacing = volumeSpacing[1];
      yDir = jVector;
    } else if (Math.abs(1 - absViewUpDotK) < EPSILON4) {
      ySpacing = volumeSpacing[2];
      yDir = kVector;
    } else {
      throw new Error("No support yet for oblique plane planar contours");
    }
    spacing = [xSpacing, ySpacing];
  }
  const subPixelSpacing = [
    spacing[0] / subPixelResolution,
    spacing[1] / subPixelResolution
  ];
  return { spacing: subPixelSpacing, xDir, yDir };
};
var getSubPixelSpacingAndXYDirections_default = getSubPixelSpacingAndXYDirections;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointsAreWithinCloseContourProximity.js
var pointsAreWithinCloseContourProximity = (p1, p2, closeContourProximity) => {
  return vec2_exports.dist(p1, p2) < closeContourProximity;
};
var pointsAreWithinCloseContourProximity_default = pointsAreWithinCloseContourProximity;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/addCanvasPointsToArray.js
var addCanvasPointsToArray = (element, canvasPoints, newCanvasPoint, commonData) => {
  const { xDir, yDir, spacing } = commonData;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  if (!canvasPoints.length) {
    canvasPoints.push(newCanvasPoint);
    console.log(">>>>> !canvasPoints. :: RETURN");
    return 1;
  }
  const lastWorldPos = viewport.canvasToWorld(canvasPoints[canvasPoints.length - 1]);
  const newWorldPos = viewport.canvasToWorld(newCanvasPoint);
  const worldPosDiff = vec3_exports.create();
  vec3_exports.subtract(worldPosDiff, newWorldPos, lastWorldPos);
  const xDist = Math.abs(vec3_exports.dot(worldPosDiff, xDir));
  const yDist = Math.abs(vec3_exports.dot(worldPosDiff, yDir));
  const numPointsToAdd = Math.max(Math.floor(xDist / spacing[0]), Math.floor(yDist / spacing[0]));
  if (numPointsToAdd > 1) {
    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];
    const canvasDist = vec2_exports.dist(lastCanvasPoint, newCanvasPoint);
    const canvasDir = vec2_exports.create();
    vec2_exports.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);
    vec2_exports.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);
    const distPerPoint = canvasDist / numPointsToAdd;
    for (let i = 1; i <= numPointsToAdd; i++) {
      canvasPoints.push([
        lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,
        lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i
      ]);
    }
  } else {
    canvasPoints.push(newCanvasPoint);
  }
  return numPointsToAdd;
};
var addCanvasPointsToArray_default = addCanvasPointsToArray;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointCanProjectOnLine.js
var pointCanProjectOnLine = (p, p1, p2, proximity) => {
  const p1p = [p[0] - p1[0], p[1] - p1[1]];
  const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];
  const dot2 = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];
  if (dot2 < 0) {
    return false;
  }
  const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);
  if (p1p2Mag === 0) {
    return false;
  }
  const projectionVectorMag = dot2 / p1p2Mag;
  const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];
  const projectionVector = [
    p1p2UnitVector[0] * projectionVectorMag,
    p1p2UnitVector[1] * projectionVectorMag
  ];
  const projectionPoint = [
    p1[0] + projectionVector[0],
    p1[1] + projectionVector[1]
  ];
  const distance = vec2_exports.distance(p, projectionPoint);
  if (distance > proximity) {
    return false;
  }
  if (vec2_exports.distance(p1, projectionPoint) > vec2_exports.distance(p1, p2)) {
    return false;
  }
  return true;
};
var pointCanProjectOnLine_default = pointCanProjectOnLine;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/projectTo2D.js
var epsilon = 1e-6;
function projectTo2D(polyline) {
  let sharedDimensionIndex;
  const testPoints = utilities_exports.getRandomSampleFromArray(polyline, 50);
  for (let i = 0; i < 3; i++) {
    if (testPoints.every((point, index, array) => Math.abs(point[i] - array[0][i]) < epsilon)) {
      sharedDimensionIndex = i;
      break;
    }
  }
  if (sharedDimensionIndex === void 0) {
    throw new Error("Cannot find a shared dimension index for polyline, probably oblique plane");
  }
  const points2D = [];
  const firstDim = (sharedDimensionIndex + 1) % 3;
  const secondDim = (sharedDimensionIndex + 2) % 3;
  for (let i = 0; i < polyline.length; i++) {
    points2D.push([polyline[i][firstDim], polyline[i][secondDim]]);
  }
  return {
    sharedDimensionIndex,
    projectedPolyline: points2D
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isPointInsidePolyline3D.js
function isPointInsidePolyline3D(point, polyline, options = {}) {
  const { sharedDimensionIndex, projectedPolyline } = projectTo2D(polyline);
  const { holes } = options;
  const projectedHoles = [];
  if (holes) {
    for (let i = 0; i < holes.length; i++) {
      const hole = holes[i];
      const hole2D = [];
      for (let j = 0; j < hole.length; j++) {
        hole2D.push([
          hole[j][(sharedDimensionIndex + 1) % 3],
          hole[j][(sharedDimensionIndex + 2) % 3]
        ]);
      }
      projectedHoles.push(hole2D);
    }
  }
  const point2D = [
    point[(sharedDimensionIndex + 1) % 3],
    point[(sharedDimensionIndex + 2) % 3]
  ];
  return containsPoint(projectedPolyline, point2D, { holes: projectedHoles });
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/convexHull.js
function convexHull(pts) {
  if (pts.length < 3) {
    return pts.slice();
  }
  const points = pts.map((p) => [p[0], p[1]]).sort((a, b) => a[0] === b[0] ? a[1] - b[1] : a[0] - b[0]);
  function cross(o, a, b) {
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
  }
  const lower = [];
  for (const p of points) {
    while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], p) <= 0) {
      lower.pop();
    }
    lower.push(p);
  }
  const upper = [];
  for (let i = points.length - 1; i >= 0; i--) {
    const p = points[i];
    while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0) {
      upper.pop();
    }
    upper.push(p);
  }
  lower.pop();
  upper.pop();
  return lower.concat(upper);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/index.js
var rectangle_exports = {};
__export(rectangle_exports, {
  distanceToPoint: () => distanceToPoint4
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/distanceToPoint.js
function rectToLineSegments(left, top, width, height) {
  const topLineStart = [left, top];
  const topLineEnd = [left + width, top];
  const rightLineStart = [left + width, top];
  const rightLineEnd = [left + width, top + height];
  const bottomLineStart = [left + width, top + height];
  const bottomLineEnd = [left, top + height];
  const leftLineStart = [left, top + height];
  const leftLineEnd = [left, top];
  const lineSegments = {
    top: [topLineStart, topLineEnd],
    right: [rightLineStart, rightLineEnd],
    bottom: [bottomLineStart, bottomLineEnd],
    left: [leftLineStart, leftLineEnd]
  };
  return lineSegments;
}
function distanceToPoint4(rect, point) {
  if (rect.length !== 4 || point.length !== 2) {
    throw Error("rectangle:[left, top, width, height] or point: [x,y] not defined correctly");
  }
  const [left, top, width, height] = rect;
  let minDistance = 655535;
  const lineSegments = rectToLineSegments(left, top, width, height);
  Object.keys(lineSegments).forEach((segment) => {
    const [lineStart, lineEnd] = lineSegments[segment];
    const distance = distanceToPoint3(lineStart, lineEnd, point);
    if (distance < minDistance) {
      minDistance = distance;
    }
  });
  return minDistance;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/index.js
var vec2_exports2 = {};
__export(vec2_exports2, {
  findClosestPoint: () => findClosestPoint,
  liangBarksyClip: () => clip
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js
function findClosestPoint(sourcePoints, targetPoint) {
  let minPoint = [0, 0];
  let minDistance = Number.MAX_SAFE_INTEGER;
  sourcePoints.forEach(function(sourcePoint) {
    const distance = _distanceBetween(targetPoint, sourcePoint);
    if (distance < minDistance) {
      minDistance = distance;
      minPoint = [...sourcePoint];
    }
  });
  return minPoint;
}
function _distanceBetween(p1, p2) {
  const [x1, y1] = p1;
  const [x2, y2] = p2;
  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/liangBarksyClip.js
var EPSILON5 = 1e-6;
var INSIDE = 1;
var OUTSIDE = 0;
function clipT(num, denom, c) {
  const [tE, tL] = c;
  if (Math.abs(denom) < EPSILON5) {
    return num < 0;
  }
  const t = num / denom;
  if (denom > 0) {
    if (t > tL) {
      return 0;
    }
    if (t > tE) {
      c[0] = t;
    }
  } else {
    if (t < tE) {
      return 0;
    }
    if (t < tL) {
      c[1] = t;
    }
  }
  return 1;
}
function clip(a, b, box, da, db) {
  const [x1, y1] = a;
  const [x2, y2] = b;
  const dx = x2 - x1;
  const dy = y2 - y1;
  if (da === void 0 || db === void 0) {
    da = a;
    db = b;
  } else {
    da[0] = a[0];
    da[1] = a[1];
    db[0] = b[0];
    db[1] = b[1];
  }
  if (Math.abs(dx) < EPSILON5 && Math.abs(dy) < EPSILON5 && x1 >= box[0] && x1 <= box[2] && y1 >= box[1] && y1 <= box[3]) {
    return INSIDE;
  }
  const c = [0, 1];
  if (clipT(box[0] - x1, dx, c) && clipT(x1 - box[2], -dx, c) && clipT(box[1] - y1, dy, c) && clipT(y1 - box[3], -dy, c)) {
    const [tE, tL] = c;
    if (tL < 1) {
      db[0] = x1 + tL * dx;
      db[1] = y1 + tL * dy;
    }
    if (tE > 0) {
      da[0] += tE * dx;
      da[1] += tE * dy;
    }
    return INSIDE;
  }
  return OUTSIDE;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/index.js
var angle_exports = {};
__export(angle_exports, {
  angleBetweenLines: () => angleBetweenLines
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js
function angleBetween3DLines(line1, line2) {
  const [p1, p2] = line1;
  const [p3, p4] = line2;
  const v1 = vec3_exports.sub(vec3_exports.create(), p2, p1);
  const v2 = vec3_exports.sub(vec3_exports.create(), p3, p4);
  const dot2 = vec3_exports.dot(v1, v2);
  const v1Length = vec3_exports.length(v1);
  const v2Length = vec3_exports.length(v2);
  const cos = dot2 / (v1Length * v2Length);
  const radian = Math.acos(cos);
  return radian * 180 / Math.PI;
}
function angleBetween2DLines(line1, line2) {
  const [p1, p2] = line1;
  const [p3, p4] = line2;
  const v1 = vec2_exports.sub(vec2_exports.create(), p2, p1);
  const v2 = vec2_exports.sub(vec2_exports.create(), p3, p4);
  const dot2 = vec2_exports.dot(v1, v2);
  const v1Length = vec2_exports.length(v1);
  const v2Length = vec2_exports.length(v2);
  const cos = dot2 / (v1Length * v2Length);
  return Math.acos(cos) * (180 / Math.PI);
}
function angleBetweenLines(line1, line2) {
  const is3D = line1[0].length === 3;
  return is3D ? angleBetween3DLines(line1, line2) : angleBetween2DLines(line1, line2);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/updateContourPolyline.js
function updateContourPolyline(annotation, polylineData, transforms, options) {
  const { canvasToWorld, worldToCanvas } = transforms;
  const { data } = annotation;
  const { targetWindingDirection } = polylineData;
  let { points: polyline } = polylineData;
  let windingDirection = polyline_exports.getWindingDirection(polyline);
  if (options?.decimate?.enabled) {
    polyline = polyline_exports.decimate(polylineData.points, options?.decimate?.epsilon);
  }
  let { closed: closed2 } = polylineData;
  const numPoints = polyline.length;
  const polylineWorldPoints = new Array(numPoints);
  const currentPolylineWindingDirection = polyline_exports.getWindingDirection(polyline);
  const parentAnnotation = getParentAnnotation(annotation);
  if (closed2 === void 0) {
    let currentClosedState = false;
    if (polyline.length > 3) {
      const lastToFirstDist = point_exports.distanceToPointSquared(polyline[0], polyline[numPoints - 1]);
      currentClosedState = utilities_exports.isEqual(0, lastToFirstDist);
    }
    closed2 = currentClosedState;
  }
  if (options?.updateWindingDirection !== false) {
    let updatedWindingDirection = parentAnnotation ? parentAnnotation.data.contour.windingDirection * -1 : targetWindingDirection;
    if (updatedWindingDirection === void 0) {
      updatedWindingDirection = windingDirection;
    }
    if (updatedWindingDirection !== windingDirection) {
      polyline.reverse();
    }
    const handlePoints = (data.handles?.points ?? []).map(worldToCanvas);
    if (handlePoints.length > 2) {
      const currentHandlesWindingDirection = polyline_exports.getWindingDirection(handlePoints);
      if (currentHandlesWindingDirection !== updatedWindingDirection) {
        data.handles.points.reverse();
      }
    }
    windingDirection = updatedWindingDirection;
  }
  for (let i = 0; i < numPoints; i++) {
    polylineWorldPoints[i] = canvasToWorld(polyline[i]);
  }
  data.contour.polyline = polylineWorldPoints;
  data.contour.closed = closed2;
  data.contour.windingDirection = windingDirection;
  invalidateAnnotation(annotation);
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js
var drawingSvg_exports = {};
__export(drawingSvg_exports, {
  draw: () => draw_default,
  drawArrow: () => drawArrow,
  drawCircle: () => drawCircle_default,
  drawEllipse: () => drawEllipse_default,
  drawEllipseByCoordinates: () => drawEllipseByCoordinates_default,
  drawFan: () => drawFan_default,
  drawHandle: () => drawHandle_default,
  drawHandles: () => drawHandles_default,
  drawHeight: () => drawHeight,
  drawLine: () => drawLine,
  drawLinkedTextBox: () => drawLinkedTextBox_default,
  drawPath: () => drawPath,
  drawPolyline: () => drawPolyline,
  drawRect: () => drawRect,
  drawRectByCoordinates: () => drawRectByCoordinates,
  drawRedactionRect: () => drawRedactionRect,
  drawTextBox: () => drawTextBox_default,
  setAttributesIfNecessary: () => setAttributesIfNecessary_default,
  setNewAttributesIfValid: () => setNewAttributesIfValid_default
});

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js
var VIEWPORT_ELEMENT = "viewport-element";
function getSvgDrawingHelper(element) {
  const enabledElement = getEnabledElement(element);
  const { viewportId, renderingEngineId } = enabledElement;
  const canvasHash = `${viewportId}:${renderingEngineId}`;
  const svgLayerElement = _getSvgLayer(element);
  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {
    state.svgNodeCache[canvasHash][cacheKey].touched = false;
  });
  return {
    svgLayerElement,
    svgNodeCacheForCanvas: state.svgNodeCache,
    getSvgNode: getSvgNode.bind(this, canvasHash),
    appendNode: appendNode.bind(this, svgLayerElement, canvasHash),
    setNodeTouched: setNodeTouched.bind(this, canvasHash),
    clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash)
  };
}
function _getSvgLayer(element) {
  const viewportElement = `.${VIEWPORT_ELEMENT}`;
  const internalDivElement = element.querySelector(viewportElement);
  const svgLayer = internalDivElement?.querySelector(":scope > .svg-layer");
  return svgLayer;
}
function getSvgNode(canvasHash, cacheKey) {
  if (!state.svgNodeCache[canvasHash]) {
    return;
  }
  if (state.svgNodeCache[canvasHash][cacheKey]) {
    return state.svgNodeCache[canvasHash][cacheKey].domRef;
  }
}
function appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {
  if (!state.svgNodeCache[canvasHash]) {
    return null;
  }
  state.svgNodeCache[canvasHash][cacheKey] = {
    touched: true,
    domRef: svgNode
  };
  svgLayerElement.appendChild(svgNode);
}
function setNodeTouched(canvasHash, cacheKey) {
  if (!state.svgNodeCache[canvasHash]) {
    return;
  }
  if (state.svgNodeCache[canvasHash][cacheKey]) {
    state.svgNodeCache[canvasHash][cacheKey].touched = true;
  }
}
function clearUntouched(svgLayerElement, canvasHash) {
  if (!state.svgNodeCache[canvasHash]) {
    return;
  }
  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {
    const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];
    if (!cacheEntry.touched && cacheEntry.domRef) {
      svgLayerElement.removeChild(cacheEntry.domRef);
      delete state.svgNodeCache[canvasHash][cacheKey];
    }
  });
}
var getSvgDrawingHelper_default = getSvgDrawingHelper;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js
function draw(element, fn) {
  const svgDrawingHelper = getSvgDrawingHelper_default(element);
  fn(svgDrawingHelper);
  svgDrawingHelper.clearUntouched();
}
var draw_default = draw;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js
function _getHash(annotationUID, drawingElementType, nodeUID) {
  return `${annotationUID}::${drawingElementType}::${nodeUID}`;
}
var getHash_default = _getHash;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setAttributesIfNecessary.js
function setAttributesIfNecessary(attributes, svgNode) {
  Object.keys(attributes).forEach((key) => {
    const currentValue = svgNode.getAttribute(key);
    const newValue = attributes[key];
    if (newValue === void 0 || newValue === "") {
      svgNode.removeAttribute(key);
    } else if (currentValue !== newValue) {
      svgNode.setAttribute(key, newValue);
    }
  });
}
var setAttributesIfNecessary_default = setAttributesIfNecessary;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setNewAttributesIfValid.js
function setNewAttributesIfValid(attributes, svgNode) {
  Object.keys(attributes).forEach((key) => {
    const newValue = attributes[key];
    if (newValue !== void 0 && newValue !== "") {
      svgNode.setAttribute(key, newValue);
    }
  });
}
var setNewAttributesIfValid_default = setNewAttributesIfValid;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js
function drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = "") {
  const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity } = Object.assign({
    color: "rgb(0, 255, 0)",
    fill: "transparent",
    width: "2",
    lineDash: void 0,
    lineWidth: void 0,
    strokeOpacity: 1,
    fillOpacity: 1
  }, options);
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "circle", circleUID);
  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);
  const attributes = {
    cx: `${center[0]}`,
    cy: `${center[1]}`,
    r: `${radius}`,
    stroke: color,
    fill,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash,
    "fill-opacity": fillOpacity,
    "stroke-opacity": strokeOpacity
  };
  if (existingCircleElement) {
    setAttributesIfNecessary_default(attributes, existingCircleElement);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newCircleElement = document.createElementNS(svgns2, "circle");
    if (dataId !== "") {
      newCircleElement.setAttribute("data-id", dataId);
    }
    setNewAttributesIfValid_default(attributes, newCircleElement);
    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);
  }
}
var drawCircle_default = drawCircle;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js
function drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = "") {
  const { color, width, lineWidth, lineDash } = Object.assign({
    color: "rgb(0, 255, 0)",
    width: "2",
    lineWidth: void 0,
    lineDash: void 0
  }, options);
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "ellipse", ellipseUID);
  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);
  const [bottom, top, left, right] = canvasCoordinates;
  const w = Math.hypot(left[0] - right[0], left[1] - right[1]);
  const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);
  const angle = Math.atan2(left[1] - right[1], left[0] - right[0]) * 180 / Math.PI;
  const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];
  const radiusX = w / 2;
  const radiusY = h / 2;
  const attributes = {
    cx: `${center[0]}`,
    cy: `${center[1]}`,
    rx: `${radiusX}`,
    ry: `${radiusY}`,
    stroke: color,
    fill: "transparent",
    transform: `rotate(${angle} ${center[0]} ${center[1]})`,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash
  };
  if (existingEllipse) {
    setAttributesIfNecessary_default(attributes, existingEllipse);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const svgEllipseElement = document.createElementNS(svgns2, "ellipse");
    if (dataId !== "") {
      svgEllipseElement.setAttribute("data-id", dataId);
    }
    setNewAttributesIfValid_default(attributes, svgEllipseElement);
    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);
  }
}
var drawEllipseByCoordinates_default = drawEllipseByCoordinates;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js
function drawEllipse(svgDrawingHelper, annotationUID, ellipseUID, corner1, corner2, options = {}, dataId = "") {
  const top = [(corner1[0] + corner2[0]) / 2, corner1[1]];
  const bottom = [(corner1[0] + corner2[0]) / 2, corner2[1]];
  const left = [corner1[0], (corner1[1] + corner2[1]) / 2];
  const right = [corner2[0], (corner1[1] + corner2[1]) / 2];
  drawEllipseByCoordinates_default(svgDrawingHelper, annotationUID, ellipseUID, [bottom, top, left, right], options = {}, dataId = "");
}
var drawEllipse_default = drawEllipse;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandle.js
function drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options = {}, uniqueIndex) {
  const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({
    color: "rgb(0, 255, 0)",
    handleRadius: "6",
    width: "2",
    lineWidth: void 0,
    fill: "transparent",
    type: "circle",
    opacity: 1
  }, options);
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "handle", `hg-${handleGroupUID}-index-${uniqueIndex}`);
  let attributes;
  if (type === "circle") {
    attributes = {
      cx: `${handle[0]}`,
      cy: `${handle[1]}`,
      r: handleRadius,
      stroke: color,
      fill,
      "stroke-width": strokeWidth,
      opacity
    };
  } else if (type === "rect") {
    const handleRadiusFloat = parseFloat(handleRadius);
    const side = handleRadiusFloat * 1.5;
    const x = handle[0] - side * 0.5;
    const y = handle[1] - side * 0.5;
    attributes = {
      x: `${x}`,
      y: `${y}`,
      width: `${side}`,
      height: `${side}`,
      stroke: color,
      fill,
      "stroke-width": strokeWidth,
      rx: `${side * 0.1}`,
      opacity
    };
  } else {
    throw new Error(`Unsupported handle type: ${type}`);
  }
  const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);
  if (existingHandleElement) {
    setAttributesIfNecessary_default(attributes, existingHandleElement);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newHandleElement = document.createElementNS(svgns2, type);
    setNewAttributesIfValid_default(attributes, newHandleElement);
    svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);
  }
}
var drawHandle_default = drawHandle;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js
function drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {
  handlePoints.forEach((handle, i) => {
    drawHandle_default(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);
  });
}
var drawHandles_default = drawHandles;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js
function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = "") {
  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {
    return;
  }
  const { color = "rgb(0, 255, 0)", width = 10, lineWidth, lineDash, markerStartId = null, markerEndId = null, shadow = false, strokeOpacity = 1 } = options;
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "line", lineUID);
  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);
  const layerId = svgDrawingHelper.svgLayerElement.id;
  const dropShadowStyle = shadow ? `filter:url(#shadow-${layerId});` : "";
  const attributes = {
    x1: `${start[0]}`,
    y1: `${start[1]}`,
    x2: `${end[0]}`,
    y2: `${end[1]}`,
    stroke: color,
    style: dropShadowStyle,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash,
    "marker-start": markerStartId ? `url(#${markerStartId})` : "",
    "marker-end": markerEndId ? `url(#${markerEndId})` : "",
    "stroke-opacity": strokeOpacity
  };
  if (existingLine) {
    setAttributesIfNecessary_default(attributes, existingLine);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newLine = document.createElementNS(svgns2, "line");
    if (dataId !== "") {
      newLine.setAttribute("data-id", dataId);
    }
    setNewAttributesIfValid_default(attributes, newLine);
    svgDrawingHelper.appendNode(newLine, svgNodeHash);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js
function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {
  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {
    return;
  }
  const { color, width, lineWidth, lineDash } = Object.assign({
    color: "rgb(0, 255, 0)",
    width: "2",
    lineWidth: void 0,
    lineDash: void 0
  }, options);
  const midX = end[0] + (start[0] - end[0]) / 2;
  const endfirstLine = [midX, start[1]];
  const endsecondLine = [midX, end[1]];
  const firstLine = {
    start,
    end: endfirstLine
  };
  const secondLine = {
    start: endfirstLine,
    end: endsecondLine
  };
  const threeLine = {
    start: endsecondLine,
    end
  };
  drawLine(svgDrawingHelper, annotationUID, "1", firstLine.start, firstLine.end, {
    color,
    width,
    lineWidth,
    lineDash
  });
  drawLine(svgDrawingHelper, annotationUID, "2", secondLine.start, secondLine.end, {
    color,
    width,
    lineWidth,
    lineDash
  });
  drawLine(svgDrawingHelper, annotationUID, "3", threeLine.start, threeLine.end, {
    color,
    width,
    lineWidth,
    lineDash
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js
function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {
  if (points.length < 2) {
    return;
  }
  const { color = "rgb(0, 255, 0)", width = 10, fillColor = "none", fillOpacity = 0, lineWidth, lineDash, closePath = false, markerStartId = null, markerEndId = null } = options;
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "polyline", polylineUID);
  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);
  let pointsAttribute = "";
  for (const point of points) {
    pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;
  }
  if (closePath) {
    const firstPoint = points[0];
    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;
  }
  const attributes = {
    points: pointsAttribute,
    stroke: color,
    fill: fillColor,
    "fill-opacity": fillOpacity,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash,
    "marker-start": markerStartId ? `url(#${markerStartId})` : "",
    "marker-end": markerEndId ? `url(#${markerEndId})` : ""
  };
  if (existingPolyLine) {
    setAttributesIfNecessary_default(attributes, existingPolyLine);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newPolyLine = document.createElementNS(svgns2, "polyline");
    setNewAttributesIfValid_default(attributes, newPolyLine);
    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPath.js
function drawPath(svgDrawingHelper, annotationUID, pathUID, points, options) {
  const hasSubArrays = points.length && points[0].length && Array.isArray(points[0][0]);
  const pointsArrays = hasSubArrays ? points : [points];
  const { color = "rgb(0, 255, 0)", width = 10, fillColor = "none", fillOpacity = 0, lineWidth, lineDash, closePath = false } = options;
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "path", pathUID);
  const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);
  let pointsAttribute = "";
  for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {
    const points2 = pointsArrays[i];
    const numPoints = points2.length;
    if (numPoints < 2) {
      continue;
    }
    for (let j = 0; j < numPoints; j++) {
      const point = points2[j];
      const cmd = j ? "L" : "M";
      pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;
    }
    if (closePath) {
      pointsAttribute += "Z ";
    }
  }
  if (!pointsAttribute) {
    return;
  }
  const attributes = {
    d: pointsAttribute,
    stroke: color,
    fill: fillColor,
    "fill-opacity": fillOpacity,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash
  };
  if (existingNode) {
    setAttributesIfNecessary_default(attributes, existingNode);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newNode = document.createElementNS(svgns2, "path");
    setNewAttributesIfValid_default(attributes, newNode);
    svgDrawingHelper.appendNode(newNode, svgNodeHash);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js
function drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = "", zIndex) {
  const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity } = Object.assign({
    color: "rgb(0, 255, 0)",
    fill: "transparent",
    width: "2",
    lineDash: void 0,
    lineWidth: void 0,
    strokeOpacity: 1,
    fillOpacity: 1
  }, options);
  const strokeWidth = lineWidth || width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "fan", fanUID);
  const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);
  const startRad = startAngle * Math.PI / 180;
  const endRad = endAngle * Math.PI / 180;
  const centerX = center[0];
  const centerY = center[1];
  const outerStartX = centerX + outerRadius * Math.cos(startRad);
  const outerStartY = centerY + outerRadius * Math.sin(startRad);
  const outerEndX = centerX + outerRadius * Math.cos(endRad);
  const outerEndY = centerY + outerRadius * Math.sin(endRad);
  const innerStartX = centerX + innerRadius * Math.cos(startRad);
  const innerStartY = centerY + innerRadius * Math.sin(startRad);
  const innerEndX = centerX + innerRadius * Math.cos(endRad);
  const innerEndY = centerY + innerRadius * Math.sin(endRad);
  const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;
  let pathData = `M ${outerStartX} ${outerStartY}`;
  pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;
  pathData += ` L ${innerEndX} ${innerEndY}`;
  pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;
  pathData += ` Z`;
  const attributes = {
    d: pathData,
    stroke: color,
    fill,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash,
    "fill-opacity": fillOpacity,
    "stroke-opacity": strokeOpacity,
    "mix-blend-mode": "normal"
  };
  if (existingFanElement) {
    setAttributesIfNecessary_default(attributes, existingFanElement);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const newFanElement = document.createElementNS(svgns2, "path");
    if (dataId !== "") {
      newFanElement.setAttribute("data-id", dataId);
    }
    if (zIndex !== void 0) {
      newFanElement.style.zIndex = zIndex.toString();
    }
    setNewAttributesIfValid_default(attributes, newFanElement);
    svgDrawingHelper.appendNode(newFanElement, svgNodeHash);
  }
}
var drawFan_default = drawFan;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js
function drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {
  const mergedOptions = Object.assign({
    fontFamily: "Helvetica, Arial, sans-serif",
    fontSize: "14px",
    color: "rgb(255, 255, 0)",
    background: "",
    padding: 25,
    centerX: false,
    centerY: true
  }, options);
  const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);
  return textGroupBoundingBox;
}
function _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [""], position, options) {
  const { padding, color, fontFamily, fontSize, background } = options;
  let textGroupBoundingBox;
  const [x, y] = [position[0] + padding, position[1] + padding];
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "text", textUID);
  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);
  if (existingTextGroup) {
    const textElement = existingTextGroup.querySelector("text");
    const textSpans = Array.from(textElement.children);
    for (let i = 0; i < textSpans.length; i++) {
      const textSpanElement = textSpans[i];
      const text = textLines[i] || "";
      textSpanElement.textContent = text;
    }
    if (textLines.length > textSpans.length) {
      for (let i = 0; i < textLines.length - textSpans.length; i++) {
        const textLine = textLines[i + textSpans.length];
        const textSpan = _createTextSpan(textLine);
        textElement.appendChild(textSpan);
      }
      existingTextGroup.appendChild(textElement);
      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);
    }
    const textAttributes = {
      fill: color,
      "font-size": fontSize,
      "font-family": fontFamily
    };
    const textGroupAttributes = {
      transform: `translate(${x} ${y})`
    };
    setAttributesIfNecessary_default(textAttributes, textElement);
    setAttributesIfNecessary_default(textGroupAttributes, existingTextGroup);
    existingTextGroup.setAttribute("data-annotation-uid", annotationUID);
    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const textGroup = document.createElementNS(svgns2, "g");
    textGroup.setAttribute("data-annotation-uid", annotationUID);
    textGroup.setAttribute("transform", `translate(${x} ${y})`);
    const textElement = _createTextElement(svgDrawingHelper, options);
    for (let i = 0; i < textLines.length; i++) {
      const textLine = textLines[i];
      const textSpan = _createTextSpan(textLine);
      textElement.appendChild(textSpan);
    }
    textGroup.appendChild(textElement);
    svgDrawingHelper.appendNode(textGroup, svgNodeHash);
    textGroupBoundingBox = _drawTextBackground(textGroup, background);
  }
  return Object.assign({}, textGroupBoundingBox, {
    x,
    y,
    height: textGroupBoundingBox.height + padding,
    width: textGroupBoundingBox.width + padding
  });
}
function _createTextElement(svgDrawingHelper, options) {
  const { color, fontFamily, fontSize } = options;
  const svgns2 = "http://www.w3.org/2000/svg";
  const textElement = document.createElementNS(svgns2, "text");
  const noSelectStyle = "user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);";
  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;
  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;
  textElement.setAttribute("x", "0");
  textElement.setAttribute("y", "0");
  textElement.setAttribute("fill", color);
  textElement.setAttribute("font-family", fontFamily);
  textElement.setAttribute("font-size", fontSize);
  textElement.setAttribute("style", combinedStyle);
  textElement.setAttribute("pointer-events", "visible");
  return textElement;
}
function _createTextSpan(text) {
  const svgns2 = "http://www.w3.org/2000/svg";
  const textSpanElement = document.createElementNS(svgns2, "tspan");
  textSpanElement.setAttribute("x", "0");
  textSpanElement.setAttribute("dy", "1.2em");
  textSpanElement.textContent = text;
  return textSpanElement;
}
function _drawTextBackground(group, color) {
  let element = group.querySelector("rect.background");
  if (!color) {
    if (element) {
      group.removeChild(element);
    }
    return group.getBBox();
  }
  if (!element) {
    element = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    element.setAttribute("class", "background");
    group.insertBefore(element, group.firstChild);
  }
  const bBox = group.getBBox();
  const attributes = {
    x: `${bBox.x}`,
    y: `${bBox.y}`,
    width: `${bBox.width}`,
    height: `${bBox.height}`,
    fill: color
  };
  setAttributesIfNecessary_default(attributes, element);
  return bBox;
}
var drawTextBox_default = drawTextBox;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js
function drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {
  const start = annotationAnchorPoints.length > 0 ? findClosestPoint(annotationAnchorPoints, refPoint) : refPoint;
  const boundingBoxPoints = _boundingBoxPoints(boundingBox);
  const end = findClosestPoint(boundingBoxPoints, start);
  const mergedOptions = Object.assign({
    color: "rgb(255, 255, 0)",
    lineWidth: "1",
    lineDash: "2,3"
  }, options);
  drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);
}
function _boundingBoxPoints(boundingBox) {
  const { x: left, y: top, height, width } = boundingBox;
  const halfWidth = width / 2;
  const halfHeight = height / 2;
  const topMiddle = [left + halfWidth, top];
  const leftMiddle = [left, top + halfHeight];
  const bottomMiddle = [left + halfWidth, top + height];
  const rightMiddle = [left + width, top + halfHeight];
  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];
}
var drawLink_default = drawLink;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js
function drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {
  const mergedOptions = Object.assign({
    handleRadius: "6",
    centering: {
      x: false,
      y: true
    }
  }, options);
  const canvasBoundingBox = drawTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);
  drawLink_default(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);
  return canvasBoundingBox;
}
var drawLinkedTextBox_default = drawLinkedTextBox;

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRectByCoordinates.js
function drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, options = {}, dataId = "") {
  const { color, width: _width, lineWidth, lineDash } = Object.assign({
    color: "rgb(0, 255, 0)",
    width: "2",
    lineWidth: void 0,
    lineDash: void 0
  }, options);
  const strokeWidth = lineWidth || _width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "rect", rectangleUID);
  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);
  const [topLeft, topRight, bottomLeft, bottomRight] = canvasCoordinates;
  const width = Math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1]);
  const height = Math.hypot(topLeft[0] - bottomLeft[0], topLeft[1] - bottomLeft[1]);
  const center = [
    (bottomRight[0] + topLeft[0]) / 2,
    (bottomRight[1] + topLeft[1]) / 2
  ];
  const leftEdgeCenter = [
    (bottomLeft[0] + topLeft[0]) / 2,
    (bottomLeft[1] + topLeft[1]) / 2
  ];
  const angle = Math.atan2(center[1] - leftEdgeCenter[1], center[0] - leftEdgeCenter[0]) * 180 / Math.PI;
  const attributes = {
    x: `${center[0] - width / 2}`,
    y: `${center[1] - height / 2}`,
    width: `${width}`,
    height: `${height}`,
    stroke: color,
    fill: "transparent",
    transform: `rotate(${angle} ${center[0]} ${center[1]})`,
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash
  };
  if (existingRect) {
    setAttributesIfNecessary_default(attributes, existingRect);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const svgRectElement = document.createElementNS(svgns2, "rect");
    if (dataId !== "") {
      svgRectElement.setAttribute("data-id", dataId);
    }
    setNewAttributesIfValid_default(attributes, svgRectElement);
    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js
function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = "") {
  const topLeft = [start[0], start[1]];
  const topRight = [end[0], start[1]];
  const bottomLeft = [start[0], end[1]];
  const bottomRight = [end[0], end[1]];
  drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js
var svgns = "http://www.w3.org/2000/svg";
function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {
  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {
    return;
  }
  const { viaMarker = false, color = "rgb(0, 255, 0)", markerSize = 10 } = options;
  if (!viaMarker) {
    legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);
    return;
  }
  const layerId = svgDrawingHelper.svgLayerElement.id;
  const markerBaseId = `arrow-${annotationUID}`;
  const markerFullId = `${markerBaseId}-${layerId}`;
  const defs = svgDrawingHelper.svgLayerElement.querySelector("defs");
  let arrowMarker = defs.querySelector(`#${markerFullId}`);
  if (!arrowMarker) {
    arrowMarker = document.createElementNS(svgns, "marker");
    arrowMarker.setAttribute("id", markerFullId);
    arrowMarker.setAttribute("viewBox", "0 0 10 10");
    arrowMarker.setAttribute("refX", "8");
    arrowMarker.setAttribute("refY", "5");
    arrowMarker.setAttribute("markerWidth", `${markerSize}`);
    arrowMarker.setAttribute("markerHeight", `${markerSize}`);
    arrowMarker.setAttribute("orient", "auto");
    const arrowPath = document.createElementNS(svgns, "path");
    arrowPath.setAttribute("d", "M 0 0 L 10 5 L 0 10 z");
    arrowPath.setAttribute("fill", color);
    arrowMarker.appendChild(arrowPath);
    defs.appendChild(arrowMarker);
  } else {
    arrowMarker.setAttribute("markerWidth", `${markerSize}`);
    arrowMarker.setAttribute("markerHeight", `${markerSize}`);
    const arrowPath = arrowMarker.querySelector("path");
    if (arrowPath) {
      arrowPath.setAttribute("fill", color);
    }
  }
  options.markerEndId = markerFullId;
  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);
}
function legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {
  const { color = "rgb(0, 255, 0)", width = 2, lineWidth, lineDash } = options;
  const headLength = 10;
  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);
  const firstLine = {
    start: [
      end[0] - headLength * Math.cos(angle - Math.PI / 7),
      end[1] - headLength * Math.sin(angle - Math.PI / 7)
    ],
    end
  };
  const secondLine = {
    start: [
      end[0] - headLength * Math.cos(angle + Math.PI / 7),
      end[1] - headLength * Math.sin(angle + Math.PI / 7)
    ],
    end
  };
  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {
    color,
    width,
    lineWidth,
    lineDash
  });
  drawLine(svgDrawingHelper, annotationUID, "2", firstLine.start, firstLine.end, {
    color,
    width,
    lineWidth,
    lineDash
  });
  drawLine(svgDrawingHelper, annotationUID, "3", secondLine.start, secondLine.end, {
    color,
    width,
    lineWidth,
    lineDash
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js
function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {
  const { color, width: _width, lineWidth, lineDash } = Object.assign({
    color: "rgb(0, 255, 0)",
    width: "2",
    lineWidth: void 0,
    lineDash: void 0
  }, options);
  const strokeWidth = lineWidth || _width;
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgNodeHash = getHash_default(annotationUID, "rect", rectangleUID);
  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);
  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];
  const width = Math.abs(start[0] - end[0]);
  const height = Math.abs(start[1] - end[1]);
  const attributes = {
    x: `${tlhc[0]}`,
    y: `${tlhc[1]}`,
    width: `${width}`,
    height: `${height}`,
    stroke: color,
    fill: "black",
    "stroke-width": strokeWidth,
    "stroke-dasharray": lineDash
  };
  if (existingRect) {
    setAttributesIfNecessary_default(attributes, existingRect);
    svgDrawingHelper.setNodeTouched(svgNodeHash);
  } else {
    const svgRectElement = document.createElementNS(svgns2, "rect");
    setNewAttributesIfValid_default(attributes, svgRectElement);
    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js
function getToolsWithModesForElement(element, modesFilter) {
  const enabledElement = getEnabledElement(element);
  const { renderingEngineId, viewportId } = enabledElement;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return [];
  }
  const enabledTools = [];
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const toolOptions = toolGroup.toolOptions[toolName];
    if (!toolOptions) {
      continue;
    }
    if (modesFilter.includes(toolOptions.mode)) {
      const toolInstance = toolGroup.getToolInstance(toolName);
      enabledTools.push(toolInstance);
    }
  }
  return enabledTools;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationRenderingEngine.js
var { Active: Active2, Passive: Passive2, Enabled: Enabled2 } = ToolModes_default;
var AnnotationRenderingEngine = class {
  constructor() {
    this._needsRender = /* @__PURE__ */ new Set();
    this._animationFrameSet = false;
    this._animationFrameHandle = null;
    this._renderFlaggedViewports = () => {
      this._throwIfDestroyed();
      const elements = Array.from(this._viewportElements.values());
      for (let i = 0; i < elements.length; i++) {
        const element = elements[i];
        if (this._needsRender.has(element)) {
          this._triggerRender(element);
          this._needsRender.delete(element);
          if (this._needsRender.size === 0) {
            break;
          }
        }
      }
      this._animationFrameSet = false;
      this._animationFrameHandle = null;
      this._render();
    };
    this._viewportElements = /* @__PURE__ */ new Map();
  }
  addViewportElement(viewportId, element) {
    this._viewportElements.set(viewportId, element);
  }
  removeViewportElement(viewportId, element) {
    this._viewportElements.delete(viewportId);
    this._needsRender.delete(element);
    this._reset();
  }
  renderViewport(element) {
    this._setViewportsToBeRenderedNextFrame([element]);
  }
  _throwIfDestroyed() {
    if (this.hasBeenDestroyed) {
      throw new Error("this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.");
    }
  }
  _setAllViewportsToBeRenderedNextFrame() {
    const elements = [...this._viewportElements.values()];
    elements.forEach((element) => {
      this._needsRender.add(element);
    });
    this._renderFlaggedViewports();
  }
  _setViewportsToBeRenderedNextFrame(elements) {
    const elementsEnabled = [...this._viewportElements.values()];
    elements.forEach((element) => {
      if (elementsEnabled.indexOf(element) !== -1) {
        this._needsRender.add(element);
      }
    });
    this._render();
  }
  _render() {
    if (this._needsRender.size > 0 && this._animationFrameSet === false) {
      this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);
      this._animationFrameSet = true;
    }
  }
  _triggerRender(element) {
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    const renderingEngine = getRenderingEngine(enabledElement.renderingEngineId);
    if (!renderingEngine) {
      console.warn("rendering Engine has been destroyed");
      return;
    }
    const enabledTools = getToolsWithModesForElement(element, [
      Active2,
      Passive2,
      Enabled2
    ]);
    const { renderingEngineId, viewportId } = enabledElement;
    const eventDetail = {
      element,
      renderingEngineId,
      viewportId
    };
    draw_default(element, (svgDrawingHelper) => {
      let anyRendered = false;
      const handleDrawSvg = (tool) => {
        if (tool.renderAnnotation) {
          const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);
          anyRendered = anyRendered || rendered;
        }
      };
      enabledTools.forEach(handleDrawSvg);
      if (anyRendered) {
        triggerEvent(element, Events_default.ANNOTATION_RENDERED, { ...eventDetail });
      }
    });
  }
  _reset() {
    window.cancelAnimationFrame(this._animationFrameHandle);
    this._needsRender.clear();
    this._animationFrameSet = false;
    this._animationFrameHandle = null;
    this._setAllViewportsToBeRenderedNextFrame();
  }
};
var annotationRenderingEngine = new AnnotationRenderingEngine();

// node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js
function triggerAnnotationRender(element) {
  annotationRenderingEngine.renderViewport(element);
}
var triggerAnnotationRender_default = triggerAnnotationRender;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js
function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {
  if (!viewportIdsToRender.length) {
    return;
  }
  viewportIdsToRender.forEach((viewportId) => {
    const enabledElement = getEnabledElementByViewportId(viewportId);
    if (!enabledElement) {
      console.warn(`Viewport not available for ${viewportId}`);
      return;
    }
    const { viewport } = enabledElement;
    if (!viewport) {
      console.warn(`Viewport not available for ${viewportId}`);
      return;
    }
    const element = viewport.element;
    triggerAnnotationRender_default(element);
  });
}
var triggerAnnotationRenderForViewportIds_default = triggerAnnotationRenderForViewportIds;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js
var viewportFilters_exports = {};
__export(viewportFilters_exports, {
  filterViewportsWithFrameOfReferenceUID: () => filterViewportsWithFrameOfReferenceUID,
  filterViewportsWithParallelNormals: () => filterViewportsWithParallelNormals_default,
  filterViewportsWithToolEnabled: () => filterViewportsWithToolEnabled,
  getViewportIdsWithToolToRender: () => getViewportIdsWithToolToRender
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js
function filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID) {
  const numViewports = viewports.length;
  const viewportsWithFrameOfReferenceUID = [];
  for (let vp = 0; vp < numViewports; vp++) {
    const viewport = viewports[vp];
    if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {
      viewportsWithFrameOfReferenceUID.push(viewport);
    }
  }
  return viewportsWithFrameOfReferenceUID;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js
var { Active: Active3, Passive: Passive3, Enabled: Enabled3 } = ToolModes_default;
function filterViewportsWithToolEnabled(viewports, toolName) {
  const numViewports = viewports.length;
  const viewportsWithToolEnabled = [];
  for (let vp = 0; vp < numViewports; vp++) {
    const viewport = viewports[vp];
    const toolGroup = getToolGroupForViewport_default(viewport.id, viewport.renderingEngineId);
    if (!toolGroup) {
      continue;
    }
    const hasTool2 = _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName);
    if (hasTool2) {
      viewportsWithToolEnabled.push(viewport);
    }
  }
  return viewportsWithToolEnabled;
}
function _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName) {
  const { toolOptions } = toolGroup;
  const tool = toolOptions[toolName];
  if (!tool) {
    return false;
  }
  const toolMode = tool.mode;
  return toolMode === Active3 || toolMode === Passive3 || toolMode === Enabled3;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js
function filterViewportsWithParallelNormals(viewports, camera, EPS2 = 0.999) {
  return viewports.filter((viewport) => {
    const vpCamera = viewport.getCamera();
    const isParallel = Math.abs(vec3_exports.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) > EPS2;
    return isParallel;
  });
}
var filterViewportsWithParallelNormals_default = filterViewportsWithParallelNormals;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/getViewportIdsWithToolToRender.js
function getViewportIdsWithToolToRender(element, toolName, requireParallelNormals = true) {
  const enabledElement = getEnabledElement(element);
  const { renderingEngine, FrameOfReferenceUID } = enabledElement;
  let viewports = renderingEngine.getViewports();
  viewports = filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID);
  viewports = filterViewportsWithToolEnabled(viewports, toolName);
  const viewport = renderingEngine.getViewport(enabledElement.viewportId);
  if (requireParallelNormals) {
    viewports = filterViewportsWithParallelNormals_default(viewports, viewport.getCamera());
  }
  const viewportIds = viewports.map((vp) => vp.id);
  return viewportIds;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/sharedOperations.js
var TOLERANCE = 1e-10;
var DEFAULT_CONTOUR_SEG_TOOL_NAME2 = "PlanarFreehandContourSegmentationTool";
function convertContourPolylineToCanvasSpace(polyline, viewport) {
  const numPoints = polyline.length;
  const projectedPolyline = new Array(numPoints);
  for (let i = 0; i < numPoints; i++) {
    projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);
  }
  return projectedPolyline;
}
function convertContourPolylineToWorld(polyline, viewport) {
  const numPoints = polyline.length;
  const projectedPolyline = new Array(numPoints);
  for (let i = 0; i < numPoints; i++) {
    projectedPolyline[i] = viewport.canvasToWorld(polyline[i]);
  }
  return projectedPolyline;
}
function checkIntersection(sourcePolyline, targetPolyline) {
  const sourceAABB = polyline_exports.getAABB(sourcePolyline);
  const targetAABB = polyline_exports.getAABB(targetPolyline);
  const aabbIntersect = aabb_exports.intersectAABB(sourceAABB, targetAABB);
  if (!aabbIntersect) {
    return { hasIntersection: false, isContourHole: false };
  }
  const lineSegmentsIntersect = polyline_exports.intersectPolyline(sourcePolyline, targetPolyline);
  const isContourHole = !lineSegmentsIntersect && polyline_exports.containsPoints(targetPolyline, sourcePolyline);
  const hasIntersection = lineSegmentsIntersect || isContourHole;
  return { hasIntersection, isContourHole };
}
function getContourHolesData(viewport, annotation) {
  return getChildAnnotations(annotation).map((holeAnnotation) => {
    const contourHoleAnnotation = holeAnnotation;
    const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);
    return { annotation: contourHoleAnnotation, polyline };
  });
}
function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {
  addChildAnnotation(targetAnnotation, holeAnnotation);
  removeContourSegmentationAnnotation(holeAnnotation);
  const { contour: holeContour } = holeAnnotation.data;
  const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);
  updateContourPolyline(holeAnnotation, {
    points: holePolylineCanvas,
    closed: holeContour.closed,
    targetWindingDirection: targetAnnotation.data.contour.windingDirection === ContourWindingDirection.Clockwise ? ContourWindingDirection.CounterClockwise : ContourWindingDirection.Clockwise
  }, viewport);
  const { element } = viewport;
  updateViewportsForAnnotations(viewport, [targetAnnotation, holeAnnotation]);
}
function combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {
  if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME2)) {
    console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME2} is not registered in cornerstone. Cannot combine polylines.`);
    return;
  }
  const sourceStartPoint = sourcePolyline[0];
  const mergePolylines2 = polyline_exports.containsPoint(targetPolyline, sourceStartPoint);
  const contourHolesData = getContourHolesData(viewport, targetAnnotation);
  const unassignedContourHolesSet = new Set(contourHolesData);
  const reassignedContourHolesMap = /* @__PURE__ */ new Map();
  const assignHoleToPolyline = (parentPolyline, holeData) => {
    let holes = reassignedContourHolesMap.get(parentPolyline);
    if (!holes) {
      holes = [];
      reassignedContourHolesMap.set(parentPolyline, holes);
    }
    holes.push(holeData);
    unassignedContourHolesSet.delete(holeData);
  };
  const newPolylines = [];
  if (mergePolylines2) {
    const mergedPolyline = polyline_exports.mergePolylines(targetPolyline, sourcePolyline);
    newPolylines.push(mergedPolyline);
    Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));
  } else {
    const subtractedPolylines = polyline_exports.subtractPolylines(targetPolyline, sourcePolyline);
    subtractedPolylines.forEach((newPolyline) => {
      newPolylines.push(newPolyline);
      Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {
        const containsHole = polyline_exports.containsPoints(newPolyline, holeData.polyline);
        if (containsHole) {
          assignHoleToPolyline(newPolyline, holeData);
        }
      });
    });
  }
  Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));
  const { element } = viewport;
  const { metadata, data } = targetAnnotation;
  const { handles, segmentation } = data;
  const { textBox } = handles;
  removeAnnotation(sourceAnnotation.annotationUID);
  removeAnnotation(targetAnnotation.annotationUID);
  removeContourSegmentationAnnotation(sourceAnnotation);
  removeContourSegmentationAnnotation(targetAnnotation);
  const newAnnotations = [];
  for (let i = 0; i < newPolylines.length; i++) {
    const polyline = newPolylines[i];
    if (!polyline || polyline.length < 3) {
      console.warn("Skipping creation of new annotation due to invalid polyline:", polyline);
      continue;
    }
    const newAnnotation = createNewAnnotationFromPolyline(viewport, targetAnnotation, polyline);
    addAnnotation(newAnnotation, element);
    addContourSegmentationAnnotation(newAnnotation);
    triggerAnnotationModified(newAnnotation, viewport.element);
    newAnnotations.push(newAnnotation);
    reassignedContourHolesMap.get(polyline)?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));
  }
  updateViewportsForAnnotations(viewport, [targetAnnotation, sourceAnnotation]);
}
function createNewAnnotationFromPolyline(viewport, templateAnnotation, polyline) {
  const startPointWorld = viewport.canvasToWorld(polyline[0]);
  const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);
  const newAnnotation = {
    metadata: {
      ...templateAnnotation.metadata,
      toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME2,
      originalToolName: templateAnnotation.metadata.originalToolName || templateAnnotation.metadata.toolName
    },
    data: {
      cachedStats: {},
      handles: {
        points: [startPointWorld, endPointWorld],
        textBox: templateAnnotation.data.handles.textBox ? { ...templateAnnotation.data.handles.textBox } : void 0
      },
      contour: {
        polyline: [],
        closed: true
      },
      spline: templateAnnotation.data.spline,
      segmentation: {
        ...templateAnnotation.data.segmentation
      }
    },
    annotationUID: utilities_exports.uuidv4(),
    highlighted: true,
    invalidated: true,
    isLocked: false,
    isVisible: void 0,
    interpolationUID: templateAnnotation.interpolationUID,
    interpolationCompleted: templateAnnotation.interpolationCompleted
  };
  updateContourPolyline(newAnnotation, {
    points: polyline,
    closed: true,
    targetWindingDirection: ContourWindingDirection.Clockwise
  }, viewport);
  return newAnnotation;
}
function updateViewportsForAnnotations(viewport, annotations) {
  const { element } = viewport;
  const updatedToolNames = /* @__PURE__ */ new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME2]);
  annotations.forEach((annotation) => {
    updatedToolNames.add(annotation.metadata.toolName);
  });
  for (const toolName of updatedToolNames.values()) {
    if (hasToolByName(toolName)) {
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    }
  }
}
function removeDuplicatePoints(polyline) {
  if (!polyline || polyline.length < 2) {
    return polyline;
  }
  const cleaned = [polyline[0]];
  for (let i = 1; i < polyline.length; i++) {
    const currentPoint = polyline[i];
    const lastPoint = cleaned[cleaned.length - 1];
    const dx = Math.abs(currentPoint[0] - lastPoint[0]);
    const dy = Math.abs(currentPoint[1] - lastPoint[1]);
    if (dx > TOLERANCE || dy > TOLERANCE) {
      cleaned.push(currentPoint);
    }
  }
  return cleaned;
}
function cleanupPolylines(polylines) {
  const validPolylines = [];
  const seenPolylines = /* @__PURE__ */ new Set();
  for (let polyline of polylines) {
    if (!polyline || polyline.length < 3) {
      continue;
    }
    polyline = removeDuplicatePoints(polyline);
    if (polyline.length < 3) {
      continue;
    }
    const sortedPoints = [...polyline].sort((a, b) => {
      if (a[0] !== b[0]) {
        return a[0] - b[0];
      }
      return a[1] - b[1];
    });
    const polylineKey = sortedPoints.map((p) => `${p[0].toFixed(6)},${p[1].toFixed(6)}`).join("|");
    if (!seenPolylines.has(polylineKey)) {
      seenPolylines.add(polylineKey);
      validPolylines.push(polyline);
    }
  }
  return validPolylines;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addPolylinesToSegmentation.js
var DEFAULT_CONTOUR_SEG_TOOLNAME = "PlanarFreehandContourSegmentationTool";
function addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentationId, polylinesInfo, segmentIndex) {
  polylinesInfo.forEach(({ polyline, viewReference }) => {
    if (polyline.length < 3) {
      return;
    }
    const contourSegmentationAnnotation = {
      annotationUID: utilities_exports.uuidv4(),
      data: {
        contour: {
          closed: true,
          polyline
        },
        segmentation: {
          segmentationId,
          segmentIndex
        },
        handles: {}
      },
      handles: {},
      highlighted: false,
      autoGenerated: false,
      invalidated: false,
      isLocked: false,
      isVisible: true,
      metadata: {
        toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,
        ...viewReference
      }
    };
    addAnnotation(contourSegmentationAnnotation, viewport.element);
    const currentSet = annotationUIDsMap?.get(segmentIndex) || /* @__PURE__ */ new Set();
    currentSet.add(contourSegmentationAnnotation.annotationUID);
    annotationUIDsMap.set(segmentIndex, currentSet);
  });
  return annotationUIDsMap;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getViewReferenceFromAnnotation.js
function getViewReferenceFromAnnotation(annotation) {
  const { metadata } = annotation;
  if (!metadata) {
    return {};
  }
  const { FrameOfReferenceUID, referencedImageId, referencedImageURI, multiSliceReference, cameraFocalPoint, viewPlaneNormal, viewUp, sliceIndex, volumeId, bounds } = metadata;
  const viewReference = {
    FrameOfReferenceUID,
    referencedImageId,
    referencedImageURI,
    multiSliceReference,
    cameraFocalPoint,
    viewPlaneNormal,
    viewUp,
    sliceIndex,
    volumeId,
    bounds
  };
  return viewReference;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areViewReferencesEqual.js
function areViewReferencesEqual(a, b) {
  if (!a || !b) {
    return false;
  }
  if (a.FrameOfReferenceUID !== b.FrameOfReferenceUID) {
    return false;
  }
  if (a.referencedImageId !== b.referencedImageId) {
    return false;
  }
  if (!a.viewPlaneNormal || !b.viewPlaneNormal) {
    return false;
  }
  if (a.viewPlaneNormal.length !== b.viewPlaneNormal.length) {
    return false;
  }
  for (let i = 0; i < a.viewPlaneNormal.length; i++) {
    if (a.viewPlaneNormal[i] !== b.viewPlaneNormal[i]) {
      return false;
    }
  }
  return true;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineUnify.js
function unifyPolylineSets(polylinesSetA, polylinesSetB) {
  const result = [];
  const processedFromA = /* @__PURE__ */ new Set();
  const processedFromB = /* @__PURE__ */ new Set();
  for (let i = 0; i < polylinesSetA.length; i++) {
    if (processedFromA.has(i)) {
      continue;
    }
    const polylineA = polylinesSetA[i];
    let merged = false;
    for (let j = 0; j < polylinesSetB.length; j++) {
      if (processedFromB.has(j)) {
        continue;
      }
      const polylineB = polylinesSetB[j];
      if (!areViewReferencesEqual(polylineA.viewReference, polylineB.viewReference)) {
        continue;
      }
      if (arePolylinesIdentical(polylineA.polyline, polylineB.polyline)) {
        result.push(polylineA);
        processedFromA.add(i);
        processedFromB.add(j);
        merged = true;
        break;
      }
      const intersection = checkIntersection(polylineA.polyline, polylineB.polyline);
      if (intersection.hasIntersection && !intersection.isContourHole) {
        const mergedPolyline = polyline_exports.mergePolylines(polylineA.polyline, polylineB.polyline);
        result.push({
          polyline: mergedPolyline,
          viewReference: polylineA.viewReference
        });
        processedFromA.add(i);
        processedFromB.add(j);
        merged = true;
        break;
      }
    }
    if (!merged) {
      result.push(polylineA);
      processedFromA.add(i);
    }
  }
  for (let j = 0; j < polylinesSetB.length; j++) {
    if (!processedFromB.has(j)) {
      result.push(polylinesSetB[j]);
    }
  }
  return result;
}
function unifyMultiplePolylineSets(polylineSets) {
  if (polylineSets.length === 0) {
    return [];
  }
  if (polylineSets.length === 1) {
    return [...polylineSets[0]];
  }
  let result = [...polylineSets[0]];
  for (let i = 1; i < polylineSets.length; i++) {
    result = unifyPolylineSets(result, polylineSets[i]);
  }
  return result;
}
function unifyAnnotationPolylines(annotationsSetA, annotationsSetB, viewport) {
  const polylinesSetA = annotationsSetA.map((annotation) => ({
    polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),
    viewReference: getViewReferenceFromAnnotation(annotation)
  }));
  const polylinesSetB = annotationsSetB.map((annotation) => ({
    polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),
    viewReference: getViewReferenceFromAnnotation(annotation)
  }));
  return unifyPolylineSets(polylinesSetA, polylinesSetB);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineSubtract.js
function subtractPolylineSets(polylinesSetA, polylinesSetB) {
  const result = [];
  for (let i = 0; i < polylinesSetA.length; i++) {
    let currentPolylines = [polylinesSetA[i]];
    for (let j = 0; j < polylinesSetB.length; j++) {
      const polylineB = polylinesSetB[j];
      const newPolylines = [];
      for (const currentPolyline of currentPolylines) {
        if (!areViewReferencesEqual(currentPolyline.viewReference, polylineB.viewReference)) {
          newPolylines.push(currentPolyline);
          continue;
        }
        if (arePolylinesIdentical(currentPolyline.polyline, polylineB.polyline)) {
          continue;
        }
        const intersection = checkIntersection(currentPolyline.polyline, polylineB.polyline);
        if (intersection.hasIntersection && !intersection.isContourHole) {
          const subtractedPolylines = cleanupPolylines(polyline_exports.subtractPolylines(currentPolyline.polyline, polylineB.polyline));
          for (const subtractedPolyline of subtractedPolylines) {
            const cleaned = removeDuplicatePoints(subtractedPolyline);
            if (cleaned.length >= 3) {
              newPolylines.push({
                polyline: cleaned,
                viewReference: currentPolyline.viewReference
              });
            }
          }
        } else {
          newPolylines.push({
            polyline: currentPolyline.polyline,
            viewReference: currentPolyline.viewReference
          });
        }
      }
      currentPolylines = newPolylines;
    }
    result.push(...currentPolylines);
  }
  return result;
}
function subtractMultiplePolylineSets(basePolylineSet, subtractorSets) {
  if (subtractorSets.length === 0) {
    return [...basePolylineSet];
  }
  let result = [...basePolylineSet];
  for (let i = 0; i < subtractorSets.length; i++) {
    result = subtractPolylineSets(result, subtractorSets[i]);
  }
  return result;
}
function subtractAnnotationPolylines(baseAnnotations, subtractorAnnotations, viewport) {
  const basePolylines = baseAnnotations.map((annotation) => ({
    polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),
    viewReference: getViewReferenceFromAnnotation(annotation)
  }));
  const subtractorPolylines = subtractorAnnotations.map((annotation) => ({
    polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),
    viewReference: getViewReferenceFromAnnotation(annotation)
  }));
  return subtractPolylineSets(basePolylines, subtractorPolylines);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineIntersect.js
function intersectPolylinesSets(set1, set2) {
  if (!set1.length || !set2.length) {
    return [];
  }
  const result = [];
  for (const polyA of set1) {
    for (const polyB of set2) {
      if (!areViewReferencesEqual(polyA.viewReference, polyB.viewReference)) {
        continue;
      }
      if (arePolylinesIdentical(polyA.polyline, polyB.polyline)) {
        result.push({ ...polyA });
        continue;
      }
      const intersection = checkIntersection(polyA.polyline, polyB.polyline);
      if (intersection.hasIntersection && !intersection.isContourHole) {
        const intersectionRegions = cleanupPolylines(intersectPolylines(polyA.polyline, polyB.polyline));
        if (intersectionRegions && intersectionRegions.length > 0) {
          intersectionRegions.forEach((region) => {
            result.push({
              polyline: region,
              viewReference: polyA.viewReference
            });
          });
        }
      }
    }
  }
  return result;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineXor.js
function xorPolylinesSets(polylinesSetA, polylinesSetB) {
  if (!polylinesSetA.length && !polylinesSetB.length) {
    return [];
  }
  if (!polylinesSetA.length) {
    return polylinesSetB;
  }
  if (!polylinesSetB.length) {
    return polylinesSetA;
  }
  if (polylinesSetA.length === polylinesSetB.length) {
    let allIdentical = true;
    for (let i = 0; i < polylinesSetA.length; i++) {
      let foundMatch = false;
      for (let j = 0; j < polylinesSetB.length; j++) {
        if (!areViewReferencesEqual(polylinesSetA[i].viewReference, polylinesSetB[j].viewReference)) {
          continue;
        }
        if (arePolylinesIdentical(polylinesSetA[i].polyline, polylinesSetB[j].polyline)) {
          foundMatch = true;
          break;
        }
      }
      if (!foundMatch) {
        allIdentical = false;
        break;
      }
    }
    if (allIdentical) {
      return [];
    }
  }
  const aMinusB = subtractPolylineSets(polylinesSetA, polylinesSetB);
  const bMinusA = subtractPolylineSets(polylinesSetB, polylinesSetA);
  const xorResult = [...aMinusB, ...bMinusA];
  return xorResult;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/logicalOperators.js
var LogicalOperation;
(function(LogicalOperation2) {
  LogicalOperation2[LogicalOperation2["Union"] = 0] = "Union";
  LogicalOperation2[LogicalOperation2["Subtract"] = 1] = "Subtract";
  LogicalOperation2[LogicalOperation2["Intersect"] = 2] = "Intersect";
  LogicalOperation2[LogicalOperation2["XOR"] = 3] = "XOR";
  LogicalOperation2[LogicalOperation2["Copy"] = 4] = "Copy";
  LogicalOperation2[LogicalOperation2["Delete"] = 5] = "Delete";
})(LogicalOperation || (LogicalOperation = {}));
function getPolylinesInfoWorld(contourRepresentationData, segmentIndex) {
  const polylinesInfo = [];
  const { annotationUIDsMap } = contourRepresentationData || {};
  if (!annotationUIDsMap?.has(segmentIndex)) {
    return;
  }
  const annotationUIDs = annotationUIDsMap.get(segmentIndex);
  for (const annotationUID of annotationUIDs) {
    const annotation = getAnnotation(annotationUID);
    const { polyline } = annotation.data.contour;
    polylinesInfo.push({
      polyline,
      viewReference: getViewReferenceFromAnnotation(annotation)
    });
  }
  return polylinesInfo;
}
function extractPolylinesInCanvasSpace(viewport, segment1, segment2) {
  const segmentation1 = getSegmentation(segment1.segmentationId);
  const segmentation2 = getSegmentation(segment2.segmentationId);
  if (!segmentation1 || !segmentation2) {
    return;
  }
  if (!segmentation1.representationData.Contour || !segmentation2.representationData.Contour) {
    return;
  }
  const polyLinesInfoWorld1 = getPolylinesInfoWorld(segmentation1.representationData.Contour, segment1.segmentIndex);
  const polyLinesInfoWorld2 = getPolylinesInfoWorld(segmentation2.representationData.Contour, segment2.segmentIndex);
  if (!polyLinesInfoWorld1 || !polyLinesInfoWorld2) {
    return;
  }
  const polyLinesInfoCanvas1 = polyLinesInfoWorld1.map(({ polyline, viewReference }) => {
    return {
      polyline: convertContourPolylineToCanvasSpace(polyline, viewport),
      viewReference
    };
  });
  const polyLinesInfoCanvas2 = polyLinesInfoWorld2.map(({ polyline, viewReference }) => {
    return {
      polyline: convertContourPolylineToCanvasSpace(polyline, viewport),
      viewReference
    };
  });
  return { polyLinesInfoCanvas1, polyLinesInfoCanvas2 };
}
function addSegmentInSegmentation(segmentation, { segmentIndex, label, color }) {
  if (!segmentation?.segments) {
    return;
  }
  const segmentData = segmentation.segments[segmentIndex] ?? {
    active: false,
    locked: false,
    segmentIndex,
    cachedStats: {},
    label,
    color
  };
  if (label !== void 0) {
    segmentData.label = label;
  }
  if (color !== void 0) {
    segmentData.color = color;
  }
  segmentation.segments[segmentIndex] = segmentData;
}
function removeAnnotations2(annotationUIDList) {
  annotationUIDList.forEach((annotationUID) => {
    const annotation = getAnnotation(annotationUID);
    removeAnnotation(annotationUID);
    removeContourSegmentationAnnotation(annotation);
  });
  annotationUIDList.clear();
}
function applyLogicalOperation(segment1, segment2, options, operation) {
  const viewport = getViewportAssociatedToSegmentation(segment1.segmentationId);
  if (!viewport) {
    return;
  }
  const { polyLinesInfoCanvas1, polyLinesInfoCanvas2 } = extractPolylinesInCanvasSpace(viewport, segment1, segment2) || {};
  if (!polyLinesInfoCanvas1 || !polyLinesInfoCanvas2) {
    return;
  }
  let polylinesMerged;
  switch (operation) {
    case LogicalOperation.Union:
      polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);
      break;
    case LogicalOperation.Subtract:
      polylinesMerged = subtractPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);
      break;
    case LogicalOperation.Intersect:
      polylinesMerged = intersectPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);
      break;
    case LogicalOperation.XOR:
      polylinesMerged = xorPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);
      break;
    default:
      polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);
      break;
  }
  const polyLinesWorld = polylinesMerged.map(({ polyline, viewReference }) => {
    return {
      polyline: convertContourPolylineToWorld(polyline, viewport),
      viewReference
    };
  });
  const resultSegment = options;
  const segmentation = getSegmentation(resultSegment.segmentationId);
  const segmentIndex = resultSegment.segmentIndex;
  const color = resultSegment.color;
  const label = resultSegment.label;
  const contourRepresentationData = segmentation.representationData.Contour;
  const { annotationUIDsMap } = contourRepresentationData;
  if (!annotationUIDsMap) {
    return;
  }
  if (segment1.segmentationId === resultSegment.segmentationId && segment1.segmentIndex === segmentIndex) {
    const existingAnnotationUIDs = annotationUIDsMap.get(segmentIndex);
    if (existingAnnotationUIDs) {
      removeAnnotations2(existingAnnotationUIDs);
    }
  }
  addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentation.segmentationId, polyLinesWorld, segmentIndex);
  addSegmentInSegmentation(segmentation, { segmentIndex, color, label });
}
function add2(segment1, segment2, options) {
  applyLogicalOperation(segment1, segment2, options, LogicalOperation.Union);
}
function subtract(segment1, segment2, options) {
  applyLogicalOperation(segment1, segment2, options, LogicalOperation.Subtract);
}
function intersect(segment1, segment2, options) {
  applyLogicalOperation(segment1, segment2, options, LogicalOperation.Intersect);
}
function xor(segment1, segment2, options) {
  applyLogicalOperation(segment1, segment2, options, LogicalOperation.XOR);
}
function copy(segment, options) {
  copyContourSegment(segment.segmentationId, segment.segmentIndex, options.segmentationId, options.segmentIndex);
}
function deleteOperation(segment) {
  const segmentation = getSegmentation(segment.segmentationId);
  if (!segmentation) {
    console.log("No active segmentation detected");
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.log("No contour representation found");
    return;
  }
  const representationData = segmentation.representationData.Contour;
  const { annotationUIDsMap } = representationData;
  if (!annotationUIDsMap) {
    console.log("No annotation map found");
    return;
  }
  if (!annotationUIDsMap.has(segment.segmentIndex)) {
    console.log("Segmentation index has no annotations");
    return;
  }
  const annotationUIDList = annotationUIDsMap.get(segment.segmentIndex);
  removeAnnotations2(annotationUIDList);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/isContourSegmentationAnnotation.js
function isContourSegmentationAnnotation(annotation) {
  return !!annotation.data?.segmentation;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getIntersectingAnnotations.js
function findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations) {
  const intersectingContours = [];
  const sourceAABB = polyline_exports.getAABB(sourcePolyline);
  for (let i = 0; i < contourSegmentationAnnotations.length; i++) {
    const targetAnnotation = contourSegmentationAnnotations[i];
    const targetPolyline = convertContourPolylineToCanvasSpace2(targetAnnotation.data.contour.polyline, viewport);
    const targetAABB = polyline_exports.getAABB(targetPolyline);
    const aabbIntersect = aabb_exports.intersectAABB(sourceAABB, targetAABB);
    if (!aabbIntersect) {
      continue;
    }
    const lineSegmentsIntersect = polyline_exports.intersectPolyline(sourcePolyline, targetPolyline);
    const isContourHole = !lineSegmentsIntersect && polyline_exports.containsPoints(targetPolyline, sourcePolyline);
    if (lineSegmentsIntersect || isContourHole) {
      intersectingContours.push({
        targetAnnotation,
        targetPolyline,
        isContourHole
      });
    }
  }
  return intersectingContours;
}
function convertContourPolylineToCanvasSpace2(polyline, viewport) {
  const numPoints = polyline.length;
  const projectedPolyline = new Array(numPoints);
  for (let i = 0; i < numPoints; i++) {
    projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);
  }
  return projectedPolyline;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/mergeMultipleAnnotations.js
var DEFAULT_CONTOUR_SEG_TOOL_NAME3 = "PlanarFreehandContourSegmentationTool";
function processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours) {
  const holeOperations = intersectingContours.filter((item) => item.isContourHole);
  const mergeOperations = intersectingContours.filter((item) => !item.isContourHole);
  if (holeOperations.length > 0) {
    const primaryHoleTarget = holeOperations[0];
    createPolylineHole2(viewport, primaryHoleTarget.targetAnnotation, sourceAnnotation);
    updateViewportsForAnnotations2(viewport, [
      sourceAnnotation,
      primaryHoleTarget.targetAnnotation
    ]);
    return;
  }
  if (mergeOperations.length === 0) {
    return;
  }
  if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME3)) {
    console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME3} is not registered in cornerstone. Cannot process multiple intersections.`);
    return;
  }
  processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations);
}
function processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations) {
  const { element } = viewport;
  const allAnnotationsToRemove = [sourceAnnotation];
  const allResultPolylines = [];
  const allHoles = [];
  mergeOperations.forEach(({ targetAnnotation }) => {
    const holes = getContourHolesData2(viewport, targetAnnotation);
    allHoles.push(...holes);
    allAnnotationsToRemove.push(targetAnnotation);
  });
  const sourceStartPoint = sourcePolyline[0];
  const shouldMerge = mergeOperations.some(({ targetPolyline }) => polyline_exports.containsPoint(targetPolyline, sourceStartPoint));
  if (shouldMerge) {
    let resultPolyline = sourcePolyline;
    mergeOperations.forEach(({ targetPolyline }) => {
      resultPolyline = polyline_exports.mergePolylines(resultPolyline, targetPolyline);
    });
    allResultPolylines.push(resultPolyline);
  } else {
    mergeOperations.forEach(({ targetPolyline }) => {
      const subtractedPolylines = polyline_exports.subtractPolylines(targetPolyline, sourcePolyline);
      allResultPolylines.push(...subtractedPolylines);
    });
  }
  allAnnotationsToRemove.forEach((annotation) => {
    removeAnnotation(annotation.annotationUID);
    removeContourSegmentationAnnotation(annotation);
  });
  allHoles.forEach((holeData) => clearParentAnnotation(holeData.annotation));
  const baseAnnotation = mergeOperations[0].targetAnnotation;
  const newAnnotations = [];
  allResultPolylines.forEach((polyline) => {
    if (!polyline || polyline.length < 3) {
      console.warn("Skipping creation of new annotation due to invalid polyline:", polyline);
      return;
    }
    const newAnnotation = createNewAnnotationFromPolyline2(viewport, baseAnnotation, polyline);
    addAnnotation(newAnnotation, element);
    addContourSegmentationAnnotation(newAnnotation);
    triggerAnnotationModified(newAnnotation, viewport.element);
    newAnnotations.push(newAnnotation);
  });
  reassignHolesToNewAnnotations(viewport, allHoles, newAnnotations);
  updateViewportsForAnnotations2(viewport, allAnnotationsToRemove);
}
function createNewAnnotationFromPolyline2(viewport, baseAnnotation, polyline) {
  const startPointWorld = viewport.canvasToWorld(polyline[0]);
  const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);
  const newAnnotation = {
    metadata: {
      ...baseAnnotation.metadata,
      toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME3,
      originalToolName: baseAnnotation.metadata.originalToolName || baseAnnotation.metadata.toolName
    },
    data: {
      cachedStats: {},
      handles: {
        points: [startPointWorld, endPointWorld],
        textBox: baseAnnotation.data.handles.textBox ? { ...baseAnnotation.data.handles.textBox } : void 0
      },
      contour: {
        polyline: [],
        closed: true
      },
      spline: baseAnnotation.data.spline,
      segmentation: {
        ...baseAnnotation.data.segmentation
      }
    },
    annotationUID: utilities_exports.uuidv4(),
    highlighted: true,
    invalidated: true,
    isLocked: false,
    isVisible: void 0,
    interpolationUID: baseAnnotation.interpolationUID,
    interpolationCompleted: baseAnnotation.interpolationCompleted
  };
  updateContourPolyline(newAnnotation, {
    points: polyline,
    closed: true,
    targetWindingDirection: ContourWindingDirection.Clockwise
  }, viewport);
  return newAnnotation;
}
function reassignHolesToNewAnnotations(viewport, holes, newAnnotations) {
  holes.forEach((holeData) => {
    const parentAnnotation = newAnnotations.find((annotation) => {
      const parentPolyline = convertContourPolylineToCanvasSpace3(annotation.data.contour.polyline, viewport);
      return polyline_exports.containsPoints(parentPolyline, holeData.polyline);
    });
    if (parentAnnotation) {
      addChildAnnotation(parentAnnotation, holeData.annotation);
    }
  });
}
function getContourHolesData2(viewport, annotation) {
  return getChildAnnotations(annotation).map((holeAnnotation) => {
    const contourHoleAnnotation = holeAnnotation;
    const polyline = convertContourPolylineToCanvasSpace3(contourHoleAnnotation.data.contour.polyline, viewport);
    return { annotation: contourHoleAnnotation, polyline };
  });
}
function createPolylineHole2(viewport, targetAnnotation, holeAnnotation) {
  addChildAnnotation(targetAnnotation, holeAnnotation);
  removeContourSegmentationAnnotation(holeAnnotation);
  const { contour: holeContour } = holeAnnotation.data;
  const holePolylineCanvas = convertContourPolylineToCanvasSpace3(holeContour.polyline, viewport);
  updateContourPolyline(holeAnnotation, {
    points: holePolylineCanvas,
    closed: holeContour.closed,
    targetWindingDirection: targetAnnotation.data.contour.windingDirection === ContourWindingDirection.Clockwise ? ContourWindingDirection.CounterClockwise : ContourWindingDirection.Clockwise
  }, viewport);
}
function convertContourPolylineToCanvasSpace3(polyline, viewport) {
  const numPoints = polyline.length;
  const projectedPolyline = new Array(numPoints);
  for (let i = 0; i < numPoints; i++) {
    projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);
  }
  return projectedPolyline;
}
function updateViewportsForAnnotations2(viewport, annotations) {
  const { element } = viewport;
  const updatedToolNames = /* @__PURE__ */ new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME3]);
  annotations.forEach((annotation) => {
    updatedToolNames.add(annotation.metadata.toolName);
  });
  for (const toolName of updatedToolNames.values()) {
    if (hasToolByName(toolName)) {
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportsForAnnotation.js
var { isEqual } = utilities_exports;
function getViewportsForAnnotation(annotation) {
  const { metadata } = annotation;
  return getEnabledElements().filter((enabledElement) => {
    if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {
      const viewport = enabledElement.viewport;
      const { viewPlaneNormal, viewUp } = viewport.getCamera();
      return isEqual(viewPlaneNormal, metadata.viewPlaneNormal) && (!metadata.viewUp || isEqual(viewUp, metadata.viewUp));
    }
    return;
  }).map((enabledElement) => enabledElement.viewport);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/contourSegmentationOperation.js
async function contourSegmentationOperation(sourceAnnotationOrUID, targetAnnotationOrUID, viewport, contourHoleProcessingEnabled = true) {
  const sourceAnnotation = typeof sourceAnnotationOrUID === "string" ? getAnnotation(sourceAnnotationOrUID) : sourceAnnotationOrUID;
  const targetAnnotation = typeof targetAnnotationOrUID === "string" ? getAnnotation(targetAnnotationOrUID) : targetAnnotationOrUID;
  if (!sourceAnnotation || !targetAnnotation) {
    throw new Error("Both source and target annotations must be valid");
  }
  if (!viewport) {
    viewport = getViewportFromAnnotation(sourceAnnotation);
  }
  const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);
  const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);
  const intersectionInfo = checkIntersection(sourcePolyline, targetPolyline);
  if (!intersectionInfo.hasIntersection) {
    console.warn("No intersection found between the two annotations");
    return;
  }
  if (intersectionInfo.isContourHole) {
    if (!contourHoleProcessingEnabled) {
      console.warn("Hole processing is disabled");
      return;
    }
    createPolylineHole(viewport, targetAnnotation, sourceAnnotation);
  } else {
    combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);
  }
}
function getViewportFromAnnotation(annotation) {
  const viewports = getViewportsForAnnotation(annotation);
  if (!viewports.length) {
    throw new Error("No viewport found for the annotation");
  }
  return viewports[0];
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourHandler/utils.js
function validateGeometry(geometry) {
  if (!geometry) {
    throw new Error(`No contours found for geometryId ${geometry.id}`);
  }
  const geometryId = geometry.id;
  if (geometry.type !== enums_exports.GeometryType.CONTOUR) {
    throw new Error(`Geometry type ${geometry.type} not supported for rendering.`);
  }
  if (!geometry.data) {
    console.warn(`No contours found for geometryId ${geometryId}. Skipping render.`);
    return;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourHandler/handleContourSegmentation.js
function handleContourSegmentation(viewport, geometryIds, annotationUIDsMap, contourRepresentation) {
  if (annotationUIDsMap.size) {
    viewport.render();
  } else {
    addContourSetsToElement(viewport, geometryIds, contourRepresentation);
  }
}
function addContourSetsToElement(viewport, geometryIds, contourRepresentation) {
  const { segmentationId } = contourRepresentation;
  const segmentSpecificMap = /* @__PURE__ */ new Map();
  geometryIds.forEach((geometryId) => {
    const geometry = cache_default.getGeometry(geometryId);
    if (!geometry) {
      console.warn(`No geometry found for geometryId ${geometryId}. Skipping render.`);
      return;
    }
    const segmentIndex = geometry.data.segmentIndex;
    validateGeometry(geometry);
    const segmentSpecificConfig = segmentationStyle.getStyle({
      viewportId: viewport.id,
      segmentationId,
      type: SegmentationRepresentations_default.Contour,
      segmentIndex
    });
    const contourSet = geometry.data;
    const viewPlaneNormal = viewport.getCamera().viewPlaneNormal;
    contourSet.contours.forEach((contour) => {
      const { points, color, id } = contour;
      const referencedImageId = getClosestImageIdForStackViewport(viewport, points[0], viewPlaneNormal);
      const contourSegmentationAnnotation = {
        annotationUID: utilities_exports.uuidv4(),
        data: {
          contour: {
            closed: true,
            polyline: points
          },
          segmentation: {
            segmentationId,
            segmentIndex,
            color,
            id
          },
          handles: {}
        },
        handles: {},
        highlighted: false,
        autoGenerated: false,
        invalidated: false,
        isLocked: true,
        isVisible: true,
        metadata: {
          referencedImageId,
          toolName: "PlanarFreehandContourSegmentationTool",
          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
          viewPlaneNormal: viewport.getCamera().viewPlaneNormal
        }
      };
      const annotationGroupSelector = viewport.element;
      addAnnotation(contourSegmentationAnnotation, annotationGroupSelector);
      addContourSegmentationAnnotation(contourSegmentationAnnotation);
    });
    if (segmentSpecificConfig) {
      segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);
    }
  });
  viewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/removeContourFromElement.js
function removeContourFromElement(viewportId, segmentationId, removeFromCache = false) {
  const segmentation = getSegmentation(segmentationId);
  const { annotationUIDsMap } = segmentation.representationData.Contour;
  annotationUIDsMap.forEach((annotationSet) => {
    annotationSet.forEach((annotationUID) => {
      removeAnnotation(annotationUID);
    });
  });
}
var removeContourFromElement_default = removeContourFromElement;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getUniqueSegmentIndices.js
function getUniqueSegmentIndices(segmentationId) {
  const cachedResult = getCachedSegmentIndices(segmentationId);
  if (cachedResult) {
    return cachedResult;
  }
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    throw new Error(`No segmentation found for segmentationId ${segmentationId}`);
  }
  let indices;
  if (segmentation.representationData.Labelmap) {
    indices = handleLabelmapSegmentation(segmentation, segmentationId);
  } else if (segmentation.representationData.Contour) {
    indices = handleContourSegmentation2(segmentation);
  } else if (segmentation.representationData.Surface) {
    indices = handleSurfaceSegmentation(segmentation);
  } else {
    throw new Error(`Unsupported segmentation type: ${segmentation.representationData}`);
  }
  setCachedSegmentIndices(segmentationId, indices);
  return indices;
}
function handleLabelmapSegmentation(segmentation, segmentationId) {
  const labelmapData = segmentation.representationData[SegmentationRepresentations_default.Labelmap];
  const keySet = /* @__PURE__ */ new Set();
  if (labelmapData.imageIds) {
    addImageSegmentIndices(keySet, labelmapData.imageIds);
  } else {
    addVolumeSegmentIndices(keySet, segmentationId);
  }
  return Array.from(keySet).map(Number).sort((a, b) => a - b);
}
function addVolumeSegmentIndices(keySet, segmentationId) {
  const volume = cache_default.getVolume(segmentationId);
  volume.voxelManager.forEach(({ value }) => {
    if (value !== 0) {
      keySet.add(value);
    }
  });
}
function addImageSegmentIndices(keySet, imageIds) {
  imageIds.forEach((segmentationImageId) => {
    const image = cache_default.getImage(segmentationImageId);
    const scalarData = image.voxelManager.getScalarData();
    scalarData.forEach((segmentIndex) => {
      if (segmentIndex !== 0) {
        keySet.add(segmentIndex);
      }
    });
  });
}
function handleContourSegmentation2(segmentation) {
  const { annotationUIDsMap, geometryIds } = segmentation.representationData.Contour || {};
  if (!geometryIds) {
    throw new Error(`No geometryIds found for segmentationId ${segmentation.segmentationId}`);
  }
  const indices = /* @__PURE__ */ new Set([...annotationUIDsMap.keys()]);
  geometryIds.forEach((geometryId) => {
    const geometry = cache_default.getGeometry(geometryId);
    indices.add(geometry.data.segmentIndex);
  });
  return Array.from(indices).sort((a, b) => a - b);
}
function handleSurfaceSegmentation(segmentation) {
  const geometryIds = segmentation.representationData.Surface?.geometryIds ?? [];
  return Array.from(geometryIds.keys()).map(Number).sort((a, b) => a - b);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js
var polySegConversionInProgressForViewportId = /* @__PURE__ */ new Map();
var processedViewportSegmentations = /* @__PURE__ */ new Map();
function removeRepresentation2(viewportId, segmentationId, renderImmediate = false) {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  removeContourFromElement_default(viewportId, segmentationId);
  if (!renderImmediate) {
    return;
  }
  viewport.render();
}
async function render2(viewport, contourRepresentation) {
  const { segmentationId } = contourRepresentation;
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return;
  }
  let contourData = segmentation.representationData[SegmentationRepresentations_default.Contour];
  const polySeg = getPolySeg();
  if (!contourData && getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations_default.Contour) && !polySegConversionInProgressForViewportId.get(viewport.id)) {
    polySegConversionInProgressForViewportId.set(viewport.id, true);
    contourData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations_default.Contour, () => polySeg.computeContourData(segmentationId, { viewport }), () => void 0);
    polySegConversionInProgressForViewportId.set(viewport.id, false);
  } else if (!contourData && !getPolySeg()) {
    console.debug(`No contour data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to contour. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);
  }
  if (!contourData) {
    return;
  }
  if (!contourData.geometryIds?.length) {
    return;
  }
  let hasContourDataButNotMatchingViewport = false;
  const viewportNormal = viewport.getCamera().viewPlaneNormal;
  if (contourData.annotationUIDsMap) {
    hasContourDataButNotMatchingViewport = !_checkContourNormalsMatchViewport(contourData.annotationUIDsMap, viewportNormal);
  }
  if (contourData.geometryIds.length > 0) {
    hasContourDataButNotMatchingViewport = !_checkContourGeometryMatchViewport(contourData.geometryIds, viewportNormal);
  }
  const viewportProcessed = processedViewportSegmentations.get(viewport.id) || /* @__PURE__ */ new Set();
  if (hasContourDataButNotMatchingViewport && !polySegConversionInProgressForViewportId.get(viewport.id) && !viewportProcessed.has(segmentationId) && viewport.viewportStatus === enums_exports.ViewportStatus.RENDERED) {
    polySegConversionInProgressForViewportId.set(viewport.id, true);
    const segmentIndices = getUniqueSegmentIndices(segmentationId);
    const surfacesInfo = await polySeg.computeSurfaceData(segmentationId, {
      segmentIndices,
      viewport
    });
    const geometryIds = surfacesInfo.geometryIds;
    const pointsAndPolys = [];
    for (const geometryId of geometryIds.values()) {
      const geometry = cache_default.getGeometry(geometryId);
      const data = geometry.data;
      pointsAndPolys.push({
        points: data.points,
        polys: data.polys,
        segmentIndex: data.segmentIndex,
        id: data.segmentIndex
      });
    }
    const polyDataCache = await polySeg.clipAndCacheSurfacesForViewport(pointsAndPolys, viewport);
    const rawResults = polySeg.extractContourData(polyDataCache);
    const annotationUIDsMap = polySeg.createAndAddContourSegmentationsFromClippedSurfaces(rawResults, viewport, segmentationId);
    contourData.annotationUIDsMap = new Map([
      ...contourData.annotationUIDsMap,
      ...annotationUIDsMap
    ]);
    viewportProcessed.add(segmentationId);
    processedViewportSegmentations.set(viewport.id, viewportProcessed);
    polySegConversionInProgressForViewportId.set(viewport.id, false);
  }
  handleContourSegmentation(viewport, contourData.geometryIds, contourData.annotationUIDsMap, contourRepresentation);
}
function _checkContourGeometryMatchViewport(geometryIds, viewportNormal) {
  let validGeometry = null;
  let geometryData = null;
  for (const geometryId of geometryIds) {
    const geometry = cache_default.getGeometry(geometryId);
    if (!geometry) {
      continue;
    }
    const data = geometry.data;
    if (data.contours?.[0]?.points?.length >= 3) {
      validGeometry = geometry;
      geometryData = data;
      break;
    }
  }
  if (!validGeometry || !geometryData) {
    return false;
  }
  const contours = geometryData.contours;
  const points = contours[0].points;
  const point1 = points[0];
  const point2 = points[1];
  const point3 = points[2];
  let normal = vec3_exports.cross(vec3_exports.create(), vec3_exports.sub(vec3_exports.create(), point2, point1), vec3_exports.sub(vec3_exports.create(), point3, point1));
  normal = vec3_exports.normalize(vec3_exports.create(), normal);
  const dotProduct = vec3_exports.dot(normal, viewportNormal);
  return Math.abs(dotProduct) > 0.9;
}
function _checkContourNormalsMatchViewport(annotationUIDsMap, viewportNormal) {
  const annotationUIDs = Array.from(annotationUIDsMap.values()).flat().map((uidSet) => Array.from(uidSet)).flat();
  const randomAnnotationUIDs = utilities_exports.getRandomSampleFromArray(annotationUIDs, 3);
  for (const annotationUID of randomAnnotationUIDs) {
    const annotation = getAnnotation(annotationUID);
    if (annotation?.metadata) {
      if (!annotation.metadata.viewPlaneNormal) {
        continue;
      }
      const annotationNormal = annotation.metadata.viewPlaneNormal;
      const dotProduct = Math.abs(viewportNormal[0] * annotationNormal[0] + viewportNormal[1] * annotationNormal[1] + viewportNormal[2] * annotationNormal[2]);
      if (Math.abs(dotProduct - 1) > 0.01) {
        return false;
      }
    }
  }
  return true;
}
var contourDisplay_default = {
  render: render2,
  removeRepresentation: removeRepresentation2
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getCurrentLabelmapImageIdForViewport.js
function getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {
  const imageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);
  return imageIds[0];
}
function getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);
}
function getLabelmapImageIdsForImageId(imageId, segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getLabelmapImageIdsForImageId(imageId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/addVolumesAsIndependentComponents.js
var internalCache = /* @__PURE__ */ new Map();
var load = ({ cfun, ofun, actor }) => {
  actor.getProperty().setRGBTransferFunction(1, cfun);
  actor.getProperty().setScalarOpacity(1, ofun);
};
async function addVolumesAsIndependentComponents({ viewport, volumeInputs, segmentationId }) {
  const defaultActor = viewport.getDefaultActor();
  const { actor } = defaultActor;
  const { uid, callback } = defaultActor;
  const referenceVolumeId = viewport.getVolumeId();
  if (internalCache.get(uid)?.added) {
    return {
      uid,
      actor
    };
  }
  const volumeInputArray = volumeInputs;
  const firstImageVolume = cache_default.getVolume(volumeInputArray[0].volumeId);
  if (!firstImageVolume) {
    throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);
  }
  const { volumeId } = volumeInputArray[0];
  const segImageVolume = await volumeLoader_exports.loadVolume(volumeId);
  if (!segImageVolume) {
    throw new Error(`segImageVolume with id: ${segImageVolume.volumeId} does not exist`);
  }
  const segVoxelManager = segImageVolume.voxelManager;
  const segData = segVoxelManager.getCompleteScalarDataArray();
  const { imageData: segImageData } = segImageVolume;
  const baseVolume = cache_default.getVolume(referenceVolumeId);
  const baseVoxelManager = baseVolume.voxelManager;
  const baseData = baseVoxelManager.getCompleteScalarDataArray();
  const newComp = 2;
  const cubeData = new Float32Array(newComp * baseVolume.voxelManager.getScalarDataLength());
  const dims = segImageData.getDimensions();
  for (let z = 0; z < dims[2]; ++z) {
    for (let y = 0; y < dims[1]; ++y) {
      for (let x = 0; x < dims[0]; ++x) {
        const iTuple = x + dims[0] * (y + dims[1] * z);
        cubeData[iTuple * newComp + 0] = baseData[iTuple];
        cubeData[iTuple * newComp + 1] = segData[iTuple];
      }
    }
  }
  viewport.removeActors([uid]);
  const oldMapper = actor.getMapper();
  const mapper = convertMapperToNotSharedMapper(oldMapper);
  actor.setMapper(mapper);
  mapper.setBlendMode(enums_exports.BlendModes.LABELMAP_EDGE_PROJECTION_BLEND);
  const arrayAgain = mapper.getInputData().getPointData().getArray(0);
  arrayAgain.setData(cubeData);
  arrayAgain.setNumberOfComponents(2);
  actor.getProperty().setColorMixPreset(1);
  actor.getProperty().setForceNearestInterpolation(1, true);
  actor.getProperty().setIndependentComponents(true);
  viewport.addActor({
    actor,
    uid,
    callback,
    referencedId: referenceVolumeId,
    representationUID: `${segmentationId}-${SegmentationRepresentations_default.Labelmap}`
  });
  internalCache.set(uid, {
    added: true,
    segmentationRepresentationUID: `${segmentationId}`,
    originalBlendMode: viewport.getBlendMode()
  });
  actor.set({
    preLoad: load
  });
  function onSegmentationDataModified2(evt) {
    const { segmentationId: segmentationId2 } = evt.detail;
    const { representationData } = getSegmentation(segmentationId2);
    const { volumeId: segVolumeId } = representationData.Labelmap;
    if (segVolumeId !== segImageVolume.volumeId) {
      return;
    }
    const segmentationVolume = cache_default.getVolume(segVolumeId);
    const segVoxelManager2 = segmentationVolume.voxelManager;
    const imageData = mapper.getInputData();
    const array = imageData.getPointData().getArray(0);
    const baseData2 = array.getData();
    const newComp2 = 2;
    const dims2 = segImageData.getDimensions();
    const slices = Array.from({ length: dims2[2] }, (_, i) => i);
    for (const z of slices) {
      for (let y = 0; y < dims2[1]; ++y) {
        for (let x = 0; x < dims2[0]; ++x) {
          const iTuple = x + dims2[0] * (y + dims2[1] * z);
          baseData2[iTuple * newComp2 + 1] = segVoxelManager2.getAtIndex(iTuple);
        }
      }
    }
    array.setData(baseData2);
    imageData.modified();
    viewport.render();
  }
  eventTarget_default.addEventListenerDebounced(Events_default.SEGMENTATION_DATA_MODIFIED, onSegmentationDataModified2, 200);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_REPRESENTATION_REMOVED, async (evt) => {
    eventTarget_default.removeEventListener(Events_default.SEGMENTATION_DATA_MODIFIED, onSegmentationDataModified2);
    const actorEntry = viewport.getActor(uid);
    const { element, id } = viewport;
    viewport.removeActors([uid]);
    const actor2 = await createVolumeActor_default({
      volumeId: uid,
      blendMode: enums_exports.BlendModes.MAXIMUM_INTENSITY_BLEND,
      callback: ({ volumeActor }) => {
        if (actorEntry.callback) {
          actorEntry.callback({
            volumeActor,
            volumeId
          });
        }
      }
    }, element, id);
    viewport.addActor({ actor: actor2, uid });
    viewport.render();
  });
  return {
    uid,
    actor
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/addLabelmapToElement.js
var { uuidv4 } = utilities_exports;
async function addLabelmapToElement(element, labelMapData, segmentationId, config2) {
  const enabledElement = getEnabledElement(element);
  const { renderingEngine, viewport } = enabledElement;
  const { id: viewportId } = viewport;
  const visibility = true;
  const immediateRender = false;
  const suppressEvents = true;
  if (viewport instanceof BaseVolumeViewport_default) {
    const volumeLabelMapData = labelMapData;
    const volumeId = _ensureVolumeHasVolumeId(volumeLabelMapData, segmentationId);
    if (!cache_default.getVolume(volumeId)) {
      await _handleMissingVolume(labelMapData);
    }
    let blendMode = config2?.blendMode ?? enums_exports.BlendModes.MAXIMUM_INTENSITY_BLEND;
    let useIndependentComponents = blendMode === enums_exports.BlendModes.LABELMAP_EDGE_PROJECTION_BLEND;
    if (useIndependentComponents) {
      const referenceVolumeId = viewport.getVolumeId();
      const baseVolume = cache_default.getVolume(referenceVolumeId);
      const segVolume = cache_default.getVolume(volumeId);
      const segDims = segVolume.dimensions;
      const refDims = baseVolume.dimensions;
      if (segDims[0] !== refDims[0] || segDims[1] !== refDims[1] || segDims[2] !== refDims[2]) {
        useIndependentComponents = false;
        blendMode = enums_exports.BlendModes.MAXIMUM_INTENSITY_BLEND;
        console.debug("Dimensions mismatch - falling back to regular volume addition");
      }
    }
    const volumeInputs = [
      {
        volumeId,
        visibility,
        representationUID: `${segmentationId}-${SegmentationRepresentations_default.Labelmap}`,
        useIndependentComponents,
        blendMode
      }
    ];
    if (!volumeInputs[0].useIndependentComponents) {
      await addVolumesToViewports_default(renderingEngine, volumeInputs, [viewportId], immediateRender, suppressEvents);
    } else {
      const result = await addVolumesAsIndependentComponents({
        viewport,
        volumeInputs,
        segmentationId
      });
      return result;
    }
  } else {
    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentationId);
    const stackInputs = segmentationImageIds.map((imageId) => ({
      imageId,
      representationUID: `${segmentationId}-${SegmentationRepresentations_default.Labelmap}-${imageId}`
    }));
    addImageSlicesToViewports_default(renderingEngine, stackInputs, [viewportId]);
  }
  triggerSegmentationDataModified(segmentationId);
}
function _ensureVolumeHasVolumeId(labelMapData, segmentationId) {
  let { volumeId } = labelMapData;
  if (!volumeId) {
    volumeId = uuidv4();
    const segmentation = getSegmentation(segmentationId);
    segmentation.representationData.Labelmap = {
      ...segmentation.representationData.Labelmap,
      volumeId
    };
    labelMapData.volumeId = volumeId;
    triggerSegmentationModified(segmentationId);
  }
  return volumeId;
}
async function _handleMissingVolume(labelMapData) {
  const stackData = labelMapData;
  const hasImageIds = stackData.imageIds.length > 0;
  if (!hasImageIds) {
    throw new Error("cannot create labelmap, no imageIds found for the volume labelmap");
  }
  const volume = await volumeLoader_exports.createAndCacheVolumeFromImages(labelMapData.volumeId || uuidv4(), stackData.imageIds);
  return volume;
}
var addLabelmapToElement_default = addLabelmapToElement;

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/removeLabelmapFromElement.js
function removeLabelmapFromElement(element, segmentationId) {
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  viewport.removeActors([getLabelmapActorUID(viewport.id, segmentationId)]);
}
var removeLabelmapFromElement_default = removeLabelmapFromElement;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js
var activeSegmentation_exports = {};
__export(activeSegmentation_exports, {
  getActiveSegmentation: () => getActiveSegmentation2,
  setActiveSegmentation: () => setActiveSegmentation2
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js
function getActiveSegmentation(viewportId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getActiveSegmentation(viewportId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js
function setActiveSegmentation(viewportId, segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js
function getActiveSegmentation2(viewportId) {
  return getActiveSegmentation(viewportId);
}
function setActiveSegmentation2(viewportId, segmentationId) {
  setActiveSegmentation(viewportId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentIndex.js
function getActiveSegmentIndex(segmentationId) {
  const segmentation = getSegmentation(segmentationId);
  if (segmentation) {
    const activeSegmentIndex = Object.keys(segmentation.segments).find((segmentIndex) => segmentation.segments[segmentIndex].active);
    return activeSegmentIndex ? Number(activeSegmentIndex) : void 0;
  }
  return void 0;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js
var MAX_NUMBER_COLORS = 255;
var labelMapConfigCache = /* @__PURE__ */ new Map();
var polySegConversionInProgress = false;
function removeRepresentation3(viewportId, segmentationId, renderImmediate = false) {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  labelMapConfigCache.forEach((value, key) => {
    if (key.includes(segmentationId)) {
      labelMapConfigCache.delete(key);
    }
  });
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  removeLabelmapFromElement_default(viewport.element, segmentationId);
  if (!renderImmediate) {
    return;
  }
  viewport.render();
}
async function render3(viewport, representation) {
  const { segmentationId, config: config2 } = representation;
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn("No segmentation found for segmentationId: ", segmentationId);
    return;
  }
  let labelmapData = segmentation.representationData[SegmentationRepresentations_default.Labelmap];
  let labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);
  if (!labelmapData && getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations_default.Labelmap) && !polySegConversionInProgress) {
    polySegConversionInProgress = true;
    const polySeg = getPolySeg();
    labelmapData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations_default.Labelmap, () => polySeg.computeLabelmapData(segmentationId, { viewport }), () => null, () => {
      defaultSegmentationStateManager.processLabelmapRepresentationAddition(viewport.id, segmentationId);
      setTimeout(() => {
        triggerSegmentationDataModified(segmentationId);
      }, 0);
    });
    if (!labelmapData) {
      throw new Error(`No labelmap data found for segmentationId ${segmentationId}.`);
    }
    polySegConversionInProgress = false;
  } else if (!labelmapData && !getPolySeg()) {
    console.debug(`No labelmap data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to labelmap. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);
  }
  if (!labelmapData) {
    return;
  }
  if (viewport instanceof VolumeViewport_default) {
    if (!labelmapActorEntries?.length) {
      await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config2);
    }
    labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);
  } else {
    const labelmapImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentationId);
    if (!labelmapImageIds?.length) {
      return;
    }
    if (!labelmapActorEntries) {
      await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config2);
    }
    labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);
  }
  if (!labelmapActorEntries?.length) {
    return;
  }
  for (const labelmapActorEntry of labelmapActorEntries) {
    _setLabelmapColorAndOpacity(viewport.id, labelmapActorEntry, representation);
  }
}
function _setLabelmapColorAndOpacity(viewportId, labelmapActorEntry, segmentationRepresentation) {
  const { segmentationId } = segmentationRepresentation;
  const { cfun, ofun } = segmentationRepresentation.config;
  const { colorLUTIndex } = segmentationRepresentation;
  const activeSegmentation = getActiveSegmentation2(viewportId);
  const isActiveLabelmap = activeSegmentation?.segmentationId === segmentationId;
  const labelmapStyle = segmentationStyle.getStyle({
    viewportId,
    type: SegmentationRepresentations_default.Labelmap,
    segmentationId
  });
  const renderInactiveSegmentations = segmentationStyle.getRenderInactiveSegmentations(viewportId);
  const colorLUT = getColorLUT(colorLUTIndex);
  const numColors = Math.min(256, colorLUT.length);
  const { outlineWidth, renderOutline, outlineOpacity, activeSegmentOutlineWidthDelta } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap);
  const segmentsHidden = internalGetHiddenSegmentIndices(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Labelmap
  });
  for (let i = 0; i < numColors; i++) {
    const segmentIndex = i;
    const segmentColor = colorLUT[segmentIndex];
    const perSegmentStyle = segmentationStyle.getStyle({
      viewportId,
      type: SegmentationRepresentations_default.Labelmap,
      segmentationId,
      segmentIndex
    });
    const segmentSpecificLabelmapConfig = perSegmentStyle;
    const { fillAlpha, outlineWidth: outlineWidth2, renderFill, renderOutline: renderOutline2 } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap, segmentSpecificLabelmapConfig);
    const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, {
      fillAlpha,
      renderFill,
      renderOutline: renderOutline2,
      segmentColor,
      outlineWidth: outlineWidth2,
      segmentsHidden,
      cfun,
      ofun
    });
    if (forceColorUpdate) {
      cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);
    }
    if (forceOpacityUpdate) {
      if (renderFill) {
        const segmentOpacity = segmentsHidden.has(segmentIndex) ? 0 : segmentColor[3] / 255 * fillAlpha;
        ofun.removePoint(segmentIndex);
        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1);
      } else {
        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1);
      }
    }
  }
  ofun.setClamping(false);
  const labelmapActor = labelmapActorEntry.actor;
  const { preLoad } = labelmapActor.get?.("preLoad") || { preLoad: null };
  if (preLoad) {
    preLoad({ cfun, ofun, actor: labelmapActor });
  } else {
    labelmapActor.getProperty().setRGBTransferFunction(0, cfun);
    labelmapActor.getProperty().setScalarOpacity(0, ofun);
    labelmapActor.getProperty().setInterpolationTypeToNearest();
  }
  if (renderOutline) {
    labelmapActor.getProperty().setUseLabelOutline(renderOutline);
    labelmapActor.getProperty().setLabelOutlineOpacity(outlineOpacity);
    const activeSegmentIndex = getActiveSegmentIndex(segmentationRepresentation.segmentationId);
    const outlineWidths = new Array(numColors - 1);
    for (let i = 1; i < numColors; i++) {
      const isHidden = segmentsHidden.has(i);
      if (isHidden) {
        outlineWidths[i - 1] = 0;
        continue;
      }
      outlineWidths[i - 1] = i === activeSegmentIndex ? outlineWidth + activeSegmentOutlineWidthDelta : outlineWidth;
    }
    labelmapActor.getProperty().setLabelOutlineThickness(outlineWidths);
    labelmapActor.modified();
    labelmapActor.getProperty().modified();
    labelmapActor.getMapper().modified();
  } else {
    labelmapActor.getProperty().setLabelOutlineThickness(new Array(numColors - 1).fill(0));
  }
  const visible = isActiveLabelmap || renderInactiveSegmentations;
  labelmapActor.setVisibility(visible);
}
function _getLabelmapConfig(labelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {
  const segmentLabelmapConfig = segmentsLabelmapConfig || {};
  const configToUse = {
    ...labelmapConfig,
    ...segmentLabelmapConfig
  };
  const fillAlpha = isActiveLabelmap ? configToUse.fillAlpha : configToUse.fillAlphaInactive;
  const outlineWidth = isActiveLabelmap ? configToUse.outlineWidth : configToUse.outlineWidthInactive;
  const renderFill = isActiveLabelmap ? configToUse.renderFill : configToUse.renderFillInactive;
  const renderOutline = isActiveLabelmap ? configToUse.renderOutline : configToUse.renderOutlineInactive;
  const outlineOpacity = isActiveLabelmap ? configToUse.outlineOpacity : configToUse.outlineOpacityInactive;
  const activeSegmentOutlineWidthDelta = configToUse.activeSegmentOutlineWidthDelta;
  return {
    fillAlpha,
    outlineWidth,
    renderFill,
    renderOutline,
    outlineOpacity,
    activeSegmentOutlineWidthDelta
  };
}
function _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, cfun, ofun }) {
  const cacheUID = `${viewportId}-${segmentationId}-${segmentIndex}`;
  const oldConfig = labelMapConfigCache.get(cacheUID);
  if (!oldConfig) {
    labelMapConfigCache.set(cacheUID, {
      fillAlpha,
      renderFill,
      renderOutline,
      outlineWidth,
      segmentColor: segmentColor.slice(),
      segmentsHidden: new Set(segmentsHidden),
      cfunMTime: cfun.getMTime(),
      ofunMTime: ofun.getMTime()
    });
    return {
      forceOpacityUpdate: true,
      forceColorUpdate: true
    };
  }
  const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, cfunMTime: oldCfunMTime, ofunMTime: oldOfunMTime } = oldConfig;
  const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] || oldSegmentColor[1] !== segmentColor[1] || oldSegmentColor[2] !== segmentColor[2];
  const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] || oldFillAlpha !== fillAlpha || oldRenderFill !== renderFill || oldRenderOutline !== renderOutline || oldOutlineWidth !== outlineWidth || oldSegmentsHidden !== segmentsHidden;
  if (forceOpacityUpdate || forceColorUpdate) {
    labelMapConfigCache.set(cacheUID, {
      fillAlpha,
      renderFill,
      renderOutline,
      outlineWidth,
      segmentColor: segmentColor.slice(),
      segmentsHidden: new Set(segmentsHidden),
      cfunMTime: cfun.getMTime(),
      ofunMTime: ofun.getMTime()
    });
  }
  return {
    forceOpacityUpdate,
    forceColorUpdate
  };
}
async function _addLabelmapToViewport(viewport, labelmapData, segmentationId, config2) {
  const result = await addLabelmapToElement_default(viewport.element, labelmapData, segmentationId, config2);
  return result || void 0;
}
var labelmapDisplay_default = {
  render: render3,
  removeRepresentation: removeRepresentation3
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js
var { DefaultHistoryMemo } = utilities_exports.HistoryMemo;
var _BaseTool = class _BaseTool {
  constructor(toolProps, defaultToolProps) {
    const mergedDefaults = _BaseTool.mergeDefaultProps(_BaseTool.defaults, defaultToolProps);
    const initialProps = utilities_exports.deepMerge(mergedDefaults, toolProps);
    const { configuration: configuration3 = {}, supportedInteractionTypes, toolGroupId } = initialProps;
    this.toolGroupId = toolGroupId;
    this.supportedInteractionTypes = supportedInteractionTypes || [];
    this.configuration = Object.assign({}, configuration3);
    this.mode = ToolModes_default.Disabled;
  }
  static mergeDefaultProps(defaultProps = {}, additionalProps) {
    if (!additionalProps) {
      return defaultProps;
    }
    return utilities_exports.deepMerge(defaultProps, additionalProps);
  }
  get toolName() {
    return this.getToolName();
  }
  getToolName() {
    return this.constructor.toolName;
  }
  applyActiveStrategy(enabledElement, operationData) {
    const { strategies, activeStrategy } = this.configuration;
    return strategies[activeStrategy]?.call(this, enabledElement, operationData);
  }
  applyActiveStrategyCallback(enabledElement, operationData, callbackType, ...extraArgs) {
    const { strategies, activeStrategy } = this.configuration;
    if (!strategies[activeStrategy]) {
      throw new Error(`applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`);
    }
    return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData, ...extraArgs);
  }
  setConfiguration(newConfiguration) {
    this.configuration = utilities_exports.deepMerge(this.configuration, newConfiguration);
  }
  setActiveStrategy(strategyName) {
    this.setConfiguration({ activeStrategy: strategyName });
  }
  getTargetImageData(targetId) {
    if (targetId.startsWith("imageId:")) {
      const imageId = targetId.split("imageId:")[1];
      const imageURI = utilities_exports.imageIdToURI(imageId);
      let viewports = utilities_exports.getViewportsWithImageURI(imageURI);
      if (!viewports || !viewports.length) {
        return;
      }
      viewports = viewports.filter((viewport) => {
        return viewport.getCurrentImageId() === imageId;
      });
      if (!viewports || !viewports.length) {
        return;
      }
      return viewports[0].getImageData();
    } else if (targetId.startsWith("volumeId:")) {
      const volumeId = utilities_exports.getVolumeId(targetId);
      const viewports = utilities_exports.getViewportsWithVolumeId(volumeId);
      if (!viewports || !viewports.length) {
        return;
      }
      return viewports[0].getImageData();
    } else if (targetId.startsWith("videoId:")) {
      const imageURI = utilities_exports.imageIdToURI(targetId);
      const viewports = utilities_exports.getViewportsWithImageURI(imageURI);
      if (!viewports || !viewports.length) {
        return;
      }
      return viewports[0].getImageData();
    } else {
      throw new Error('getTargetIdImage: targetId must start with "imageId:" or "volumeId:"');
    }
  }
  getTargetId(viewport) {
    const targetId = viewport.getViewReferenceId?.();
    if (targetId) {
      return targetId;
    }
    throw new Error("getTargetId: viewport must have a getViewReferenceId method");
  }
  undo() {
    this.doneEditMemo();
    DefaultHistoryMemo.undo();
  }
  redo() {
    DefaultHistoryMemo.redo();
  }
  static createZoomPanMemo(viewport) {
    const state8 = {
      pan: viewport.getPan(),
      zoom: viewport.getZoom()
    };
    const zoomPanMemo = {
      restoreMemo: () => {
        const currentPan = viewport.getPan();
        const currentZoom = viewport.getZoom();
        viewport.setZoom(state8.zoom);
        viewport.setPan(state8.pan);
        viewport.render();
        state8.pan = currentPan;
        state8.zoom = currentZoom;
      }
    };
    DefaultHistoryMemo.push(zoomPanMemo);
    return zoomPanMemo;
  }
  doneEditMemo() {
    if (this.memo?.commitMemo?.()) {
      DefaultHistoryMemo.push(this.memo);
    }
    this.memo = null;
  }
  static startGroupRecording() {
    DefaultHistoryMemo.startGroupRecording();
  }
  static endGroupRecording() {
    DefaultHistoryMemo.endGroupRecording();
  }
};
_BaseTool.defaults = {
  configuration: {
    strategies: {},
    defaultStrategy: void 0,
    activeStrategy: void 0,
    strategyOptions: {}
  }
};
var BaseTool = _BaseTool;
BaseTool.toolName = "BaseTool";
var BaseTool_default = BaseTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinSlice.js
var { isEqual: isEqual2 } = utilities_exports;
var { EPSILON: EPSILON6 } = constants_exports;
var PARALLEL_THRESHOLD = 1 - EPSILON6;
function filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {
  const { viewPlaneNormal } = camera;
  const annotationsWithParallelNormals = annotations.filter((td) => {
    const { planeRestriction, referencedImageId } = td.metadata;
    let { viewPlaneNormal: annotationViewPlaneNormal } = td.metadata;
    if (planeRestriction) {
      const { inPlaneVector1, inPlaneVector2 } = planeRestriction;
      if (inPlaneVector1 && !isEqual2(0, vec3_exports.dot(viewPlaneNormal, inPlaneVector1))) {
        return false;
      }
      if (inPlaneVector2 && !isEqual2(0, vec3_exports.dot(viewPlaneNormal, inPlaneVector2))) {
        return false;
      }
      return true;
    }
    if (!td.metadata.referencedImageId && !annotationViewPlaneNormal && td.metadata.FrameOfReferenceUID) {
      for (const point of td.data.handles.points) {
        const vector = vec3_exports.sub(vec3_exports.create(), point, camera.focalPoint);
        const dotProduct = vec3_exports.dot(vector, viewPlaneNormal);
        if (!isEqual2(dotProduct, 0)) {
          return false;
        }
      }
      td.metadata.viewPlaneNormal = viewPlaneNormal;
      td.metadata.cameraFocalPoint = camera.focalPoint;
      return true;
    }
    if (!annotationViewPlaneNormal && referencedImageId) {
      const { imageOrientationPatient } = metaData_exports.get("imagePlaneModule", referencedImageId);
      const rowCosineVec = vec3_exports.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);
      const colCosineVec = vec3_exports.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);
      annotationViewPlaneNormal = vec3_exports.create();
      vec3_exports.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);
      td.metadata.viewPlaneNormal = annotationViewPlaneNormal;
    }
    const isParallel = Math.abs(vec3_exports.dot(viewPlaneNormal, annotationViewPlaneNormal)) > PARALLEL_THRESHOLD;
    return annotationViewPlaneNormal && isParallel;
  });
  if (!annotationsWithParallelNormals.length) {
    return [];
  }
  const halfSpacingInNormalDirection = spacingInNormalDirection / 2;
  const { focalPoint } = camera;
  const annotationsWithinSlice = [];
  for (const annotation of annotationsWithParallelNormals) {
    const data = annotation.data;
    const point = data.handles.points[0] || data.contour?.polyline[0];
    if (!annotation.isVisible) {
      continue;
    }
    const dir = vec3_exports.create();
    if (!point) {
      annotationsWithinSlice.push(annotation);
      continue;
    }
    vec3_exports.sub(dir, focalPoint, point);
    const dot2 = vec3_exports.dot(dir, viewPlaneNormal);
    if (Math.abs(dot2) < halfSpacingInNormalDirection) {
      annotationsWithinSlice.push(annotation);
    }
  }
  return annotationsWithinSlice;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsForDisplay.js
function filterAnnotationsForDisplay(viewport, annotations, filterOptions = {}) {
  if (viewport instanceof VolumeViewport_default) {
    const camera = viewport.getCamera();
    const { spacingInNormalDirection } = utilities_exports.getTargetVolumeAndSpacingInNormalDir(viewport, camera);
    return filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);
  }
  if (viewport instanceof StackViewport_default) {
    const imageId = viewport.getCurrentImageId();
    if (!imageId) {
      return [];
    }
    const colonIndex = imageId.indexOf(":");
    filterOptions.imageURI = imageId.substring(colonIndex + 1);
  }
  return annotations.filter((annotation) => {
    if (!annotation.isVisible) {
      return false;
    }
    if (annotation.data.isCanvasAnnotation) {
      return true;
    }
    return viewport.isReferenceViewable(annotation.metadata, filterOptions);
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/index.js
var config_exports = {};
__export(config_exports, {
  getFont: () => getFont_default,
  getState: () => getState_default,
  style: () => ToolStyle_default
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js
function getState(annotation) {
  if (annotation) {
    if (annotation.data && annotation.highlighted) {
      return AnnotationStyleStates_default.Highlighted;
    }
    if (isAnnotationSelected(annotation.annotationUID)) {
      return AnnotationStyleStates_default.Selected;
    }
    if (isAnnotationLocked(annotation.annotationUID)) {
      return AnnotationStyleStates_default.Locked;
    }
    if (annotation.data && annotation.autoGenerated) {
      return AnnotationStyleStates_default.AutoGenerated;
    }
  }
  return AnnotationStyleStates_default.Default;
}
var getState_default = getState;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js
function getFont(styleSpecifier, state8, mode) {
  const fontSize = getStyleProperty("textBoxFontSize", styleSpecifier, state8, mode);
  const fontFamily = getStyleProperty("textBoxFontFamily", styleSpecifier, state8, mode);
  return `${fontSize}px ${fontFamily}`;
}
var getFont_default = getFont;

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js
var AnnotationDisplayTool = class _AnnotationDisplayTool extends BaseTool_default {
  constructor() {
    super(...arguments);
    this.onImageSpacingCalibrated = (evt) => {
      const { element, imageId } = evt.detail;
      const imageURI = utilities_exports.imageIdToURI(imageId);
      const annotationManager = getAnnotationManager();
      const framesOfReference = annotationManager.getFramesOfReference();
      framesOfReference.forEach((frameOfReference) => {
        const frameOfReferenceSpecificAnnotations = annotationManager.getAnnotations(frameOfReference);
        const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];
        if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {
          return;
        }
        toolSpecificAnnotations.forEach((annotation) => {
          if (!annotation.metadata?.referencedImageId) {
            return;
          }
          const referencedImageURI = utilities_exports.imageIdToURI(annotation.metadata.referencedImageId);
          if (referencedImageURI === imageURI) {
            annotation.invalidated = true;
            annotation.data.cachedStats = {};
          }
        });
        triggerAnnotationRender_default(element);
      });
    };
  }
  filterInteractableAnnotationsForElement(element, annotations) {
    if (!annotations?.length) {
      return [];
    }
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    return filterAnnotationsForDisplay(viewport, annotations);
  }
  static createAnnotation(...annotationBaseData) {
    let annotation = {
      annotationUID: null,
      highlighted: true,
      invalidated: true,
      isLocked: false,
      isVisible: true,
      metadata: {
        toolName: this.toolName
      },
      data: {
        handles: {
          points: new Array(),
          activeHandleIndex: null,
          textBox: {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          }
        },
        cachedStats: {},
        label: ""
      }
    };
    for (const baseData of annotationBaseData) {
      annotation = utilities_exports.deepMerge(annotation, baseData);
    }
    return annotation;
  }
  createAnnotation(evt, points, ...annotationBaseData) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const { world: worldPos } = currentPoints;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    const { viewPlaneNormal, viewUp, position: cameraPosition } = camera;
    const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
    const viewReference = viewport.getViewReference({ points: [worldPos] });
    const annotation = _AnnotationDisplayTool.createAnnotation({
      metadata: {
        toolName: this.getToolName(),
        ...viewReference,
        referencedImageId,
        viewUp,
        cameraPosition
      },
      data: {
        handles: {
          points: points || []
        }
      }
    }, ...annotationBaseData);
    return annotation;
  }
  getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {
    const targetId = this.getTargetId(viewport);
    let referencedImageId = targetId.split(/^[a-zA-Z]+:/)[1];
    if (viewport instanceof BaseVolumeViewport_default) {
      const volumeId = utilities_exports.getVolumeId(targetId);
      const imageVolume = cache_default.getVolume(volumeId);
      referencedImageId = utilities_exports.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
    }
    return referencedImageId;
  }
  getStyle(property, specifications, annotation) {
    return getStyleProperty(property, specifications, getState_default(annotation), this.mode);
  }
};
AnnotationDisplayTool.toolName = "AnnotationDisplayTool";
var AnnotationDisplayTool_default = AnnotationDisplayTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationTool.js
var { DefaultHistoryMemo: DefaultHistoryMemo2 } = utilities_exports.HistoryMemo;
var { PointsManager: PointsManager2 } = utilities_exports;
var AnnotationTool = class _AnnotationTool extends AnnotationDisplayTool_default {
  static createAnnotationForViewport(viewport, ...annotationBaseData) {
    return this.createAnnotation({ metadata: viewport.getViewReference() }, ...annotationBaseData);
  }
  static createAndAddAnnotation(viewport, ...annotationBaseData) {
    const annotation = this.createAnnotationForViewport(viewport, ...annotationBaseData);
    addAnnotation(annotation, viewport.element);
    triggerAnnotationModified(annotation, viewport.element);
  }
  constructor(toolProps, defaultToolProps) {
    super(toolProps, defaultToolProps);
    this.mouseMoveCallback = (evt, filteredAnnotations) => {
      if (!filteredAnnotations) {
        return false;
      }
      const { element, currentPoints } = evt.detail;
      const canvasCoords = currentPoints.canvas;
      let annotationsNeedToBeRedrawn = false;
      for (const annotation of filteredAnnotations) {
        if (isAnnotationLocked(annotation.annotationUID) || !isAnnotationVisible(annotation.annotationUID)) {
          continue;
        }
        const { data } = annotation;
        const activateHandleIndex = data.handles ? data.handles.activeHandleIndex : void 0;
        const near = this._imagePointNearToolOrHandle(element, annotation, canvasCoords, 6);
        const nearToolAndNotMarkedActive = near && !annotation.highlighted;
        const notNearToolAndMarkedActive = !near && annotation.highlighted;
        if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {
          annotation.highlighted = !annotation.highlighted;
          annotationsNeedToBeRedrawn = true;
        } else if (data.handles && data.handles.activeHandleIndex !== activateHandleIndex) {
          annotationsNeedToBeRedrawn = true;
        }
      }
      return annotationsNeedToBeRedrawn;
    };
    this.isSuvScaled = _AnnotationTool.isSuvScaled;
    if (toolProps.configuration?.getTextLines) {
      this.configuration.getTextLines = toolProps.configuration.getTextLines;
    }
    if (toolProps.configuration?.statsCalculator) {
      this.configuration.statsCalculator = toolProps.configuration.statsCalculator;
    }
  }
  getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { data } = annotation;
    const { isCanvasAnnotation } = data;
    const { points, textBox } = data.handles;
    if (textBox) {
      const { worldBoundingBox } = textBox;
      if (worldBoundingBox) {
        const canvasBoundingBox = {
          topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),
          topRight: viewport.worldToCanvas(worldBoundingBox.topRight),
          bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),
          bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight)
        };
        if (canvasCoords[0] >= canvasBoundingBox.topLeft[0] && canvasCoords[0] <= canvasBoundingBox.bottomRight[0] && canvasCoords[1] >= canvasBoundingBox.topLeft[1] && canvasCoords[1] <= canvasBoundingBox.bottomRight[1]) {
          data.handles.activeHandleIndex = null;
          return textBox;
        }
      }
    }
    for (let i = 0; i < points?.length; i++) {
      const point = points[i];
      const annotationCanvasCoordinate = isCanvasAnnotation ? point.slice(0, 2) : viewport.worldToCanvas(point);
      const near = vec2_exports.distance(canvasCoords, annotationCanvasCoordinate) < proximity;
      if (near === true) {
        data.handles.activeHandleIndex = i;
        return point;
      }
    }
    data.handles.activeHandleIndex = null;
  }
  getLinkedTextBoxStyle(specifications, annotation) {
    return {
      visibility: this.getStyle("textBoxVisibility", specifications, annotation),
      fontFamily: this.getStyle("textBoxFontFamily", specifications, annotation),
      fontSize: this.getStyle("textBoxFontSize", specifications, annotation),
      color: this.getStyle("textBoxColor", specifications, annotation),
      shadow: this.getStyle("textBoxShadow", specifications, annotation),
      background: this.getStyle("textBoxBackground", specifications, annotation),
      lineWidth: this.getStyle("textBoxLinkLineWidth", specifications, annotation),
      lineDash: this.getStyle("textBoxLinkLineDash", specifications, annotation)
    };
  }
  static isSuvScaled(viewport, targetId, imageId) {
    if (viewport instanceof BaseVolumeViewport_default) {
      const volumeId = utilities_exports.getVolumeId(targetId);
      const volume = cache_default.getVolume(volumeId);
      return volume?.scaling?.PT !== void 0;
    }
    const scalingModule = imageId && metaData_exports.get("scalingModule", imageId);
    return typeof scalingModule?.suvbw === "number";
  }
  getAnnotationStyle(context) {
    const { annotation, styleSpecifier } = context;
    const getStyle2 = (property) => this.getStyle(property, styleSpecifier, annotation);
    const { annotationUID } = annotation;
    const visibility = isAnnotationVisible(annotationUID);
    const locked = isAnnotationLocked(annotationUID);
    const lineWidth = getStyle2("lineWidth");
    const lineDash = getStyle2("lineDash");
    const angleArcLineDash = getStyle2("angleArcLineDash");
    const color = getStyle2("color");
    const markerSize = getStyle2("markerSize");
    const shadow = getStyle2("shadow");
    const textboxStyle = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
    return {
      visibility,
      locked,
      color,
      lineWidth,
      lineDash,
      lineOpacity: 1,
      fillColor: color,
      fillOpacity: 0,
      shadow,
      textbox: textboxStyle,
      markerSize,
      angleArcLineDash
    };
  }
  _imagePointNearToolOrHandle(element, annotation, canvasCoords, proximity) {
    const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, proximity);
    if (handleNearImagePoint) {
      return true;
    }
    const toolNewImagePoint = this.isPointNearTool(element, annotation, canvasCoords, proximity, "mouse");
    if (toolNewImagePoint) {
      return true;
    }
  }
  static createAnnotationState(annotation, deleting) {
    const { data, annotationUID } = annotation;
    const cloneData = {
      ...data,
      cachedStats: {}
    };
    delete cloneData.contour;
    delete cloneData.spline;
    const state8 = {
      annotationUID,
      data: structuredClone(cloneData),
      deleting
    };
    const contour = data.contour;
    if (contour) {
      state8.data.contour = {
        ...contour,
        polyline: null,
        pointsManager: PointsManager2.create3(contour.polyline.length, contour.polyline)
      };
    }
    return state8;
  }
  static createAnnotationMemo(element, annotation, options) {
    if (!annotation) {
      return;
    }
    const { newAnnotation, deleting = newAnnotation ? false : void 0 } = options || {};
    const { annotationUID } = annotation;
    const state8 = _AnnotationTool.createAnnotationState(annotation, deleting);
    const annotationMemo = {
      restoreMemo: () => {
        const newState = _AnnotationTool.createAnnotationState(annotation, deleting);
        const { viewport } = getEnabledElement(element) || {};
        viewport?.setViewReference(annotation.metadata);
        if (state8.deleting === true) {
          state8.deleting = false;
          Object.assign(annotation.data, state8.data);
          if (annotation.data.contour) {
            const annotationData = annotation.data;
            annotationData.contour.polyline = state8.data.contour.pointsManager.points;
            delete state8.data.contour.pointsManager;
            if (annotationData.segmentation) {
              addContourSegmentationAnnotation(annotation);
            }
          }
          state8.data = newState.data;
          addAnnotation(annotation, element);
          setAnnotationSelected(annotation.annotationUID, true);
          viewport?.render();
          return;
        }
        if (state8.deleting === false) {
          state8.deleting = true;
          state8.data = newState.data;
          setAnnotationSelected(annotation.annotationUID);
          removeAnnotation(annotation.annotationUID);
          viewport?.render();
          return;
        }
        const currentAnnotation = getAnnotation(annotationUID);
        if (!currentAnnotation) {
          console.warn("No current annotation");
          return;
        }
        Object.assign(currentAnnotation.data, state8.data);
        if (currentAnnotation.data.contour) {
          currentAnnotation.data.contour.polyline = state8.data.contour.pointsManager.points;
        }
        state8.data = newState.data;
        currentAnnotation.invalidated = true;
        triggerAnnotationModified(currentAnnotation, element, ChangeTypes_default.History);
      },
      id: annotationUID,
      operationType: "annotation"
    };
    DefaultHistoryMemo2.push(annotationMemo);
    return annotationMemo;
  }
  createMemo(element, annotation, options) {
    this.memo ||= _AnnotationTool.createAnnotationMemo(element, annotation, options);
  }
  static hydrateBase(ToolClass, enabledElement, points, options = {}) {
    if (!enabledElement) {
      return null;
    }
    const { viewport } = enabledElement;
    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
    const camera = viewport.getCamera();
    const viewPlaneNormal = options.viewplaneNormal ?? camera.viewPlaneNormal;
    const viewUp = options.viewUp ?? camera.viewUp;
    const instance = options.toolInstance || new ToolClass();
    let referencedImageId;
    let finalViewPlaneNormal = viewPlaneNormal;
    let finalViewUp = viewUp;
    if (options.referencedImageId) {
      referencedImageId = options.referencedImageId;
      finalViewPlaneNormal = void 0;
      finalViewUp = void 0;
    } else {
      if (viewport instanceof StackViewport_default) {
        const closestImageIndex = utilities_exports.getClosestStackImageIndexForPoint(points[0], viewport);
        if (closestImageIndex !== void 0) {
          referencedImageId = viewport.getImageIds()[closestImageIndex];
        }
      } else if (viewport instanceof BaseVolumeViewport_default) {
        referencedImageId = instance.getReferencedImageId(viewport, points[0], viewPlaneNormal, viewUp);
      } else {
        throw new Error("Unsupported viewport type");
      }
    }
    return {
      FrameOfReferenceUID,
      referencedImageId,
      viewPlaneNormal: finalViewPlaneNormal,
      viewUp: finalViewUp,
      instance,
      viewport
    };
  }
};
AnnotationTool.toolName = "AnnotationTool";
var AnnotationTool_default = AnnotationTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js
var { CalibrationTypes } = enums_exports;
var PIXEL_UNITS = "px";
var VOXEL_UNITS = "voxels";
var SUPPORTED_REGION_DATA_TYPES = [
  1,
  2,
  3,
  4
];
var SUPPORTED_LENGTH_VARIANT = [
  "3,3",
  "4,7"
];
var SUPPORTED_PROBE_VARIANT = [
  "4,3",
  "4,7"
];
var UNIT_MAPPING = {
  0: "px",
  1: "percent",
  2: "dB",
  3: "cm",
  4: "seconds",
  5: "hertz",
  6: "dB/seconds",
  7: "cm/sec",
  8: "cm²",
  9: "cm²/s",
  12: "degrees"
};
var EPS = 1e-3;
var SQUARE = "²";
var getCalibratedLengthUnitsAndScale = (image, handles) => {
  const { calibration, hasPixelSpacing } = image;
  let unit = hasPixelSpacing ? "mm" : PIXEL_UNITS;
  const volumeUnit = hasPixelSpacing ? "mm³" : VOXEL_UNITS;
  let areaUnit = unit + SQUARE;
  let scale2 = 1;
  let calibrationType = "";
  if (!calibration || !calibration.type && !calibration.sequenceOfUltrasoundRegions) {
    return { unit, areaUnit, scale: scale2, volumeUnit };
  }
  if (calibration.type === CalibrationTypes.UNCALIBRATED) {
    return {
      unit: PIXEL_UNITS,
      areaUnit: PIXEL_UNITS + SQUARE,
      scale: scale2,
      volumeUnit: VOXEL_UNITS
    };
  }
  if (calibration.sequenceOfUltrasoundRegions) {
    let imageIndex1, imageIndex2;
    if (Array.isArray(handles) && handles.length === 2) {
      [imageIndex1, imageIndex2] = handles;
    } else if (typeof handles === "function") {
      const points = handles();
      imageIndex1 = points[0];
      imageIndex2 = points[1];
    }
    let regions = calibration.sequenceOfUltrasoundRegions.filter((region2) => imageIndex1[0] >= region2.regionLocationMinX0 && imageIndex1[0] <= region2.regionLocationMaxX1 && imageIndex1[1] >= region2.regionLocationMinY0 && imageIndex1[1] <= region2.regionLocationMaxY1 && imageIndex2[0] >= region2.regionLocationMinX0 && imageIndex2[0] <= region2.regionLocationMaxX1 && imageIndex2[1] >= region2.regionLocationMinY0 && imageIndex2[1] <= region2.regionLocationMaxY1);
    if (!regions?.length) {
      return { unit, areaUnit, scale: scale2, volumeUnit };
    }
    regions = regions.filter((region2) => SUPPORTED_REGION_DATA_TYPES.includes(region2.regionDataType) && SUPPORTED_LENGTH_VARIANT.includes(`${region2.physicalUnitsXDirection},${region2.physicalUnitsYDirection}`));
    if (!regions.length) {
      return {
        unit: PIXEL_UNITS,
        areaUnit: PIXEL_UNITS + SQUARE,
        scale: scale2,
        volumeUnit: VOXEL_UNITS
      };
    }
    const region = regions[0];
    const physicalDeltaX = Math.abs(region.physicalDeltaX);
    const physicalDeltaY = Math.abs(region.physicalDeltaY);
    const isSamePhysicalDelta = utilities_exports.isEqual(physicalDeltaX, physicalDeltaY, EPS);
    if (isSamePhysicalDelta) {
      scale2 = 1 / physicalDeltaX;
      calibrationType = "US Region";
      unit = UNIT_MAPPING[region.physicalUnitsXDirection] || "unknown";
      areaUnit = unit + SQUARE;
    } else {
      return {
        unit: PIXEL_UNITS,
        areaUnit: PIXEL_UNITS + SQUARE,
        scale: scale2,
        volumeUnit: VOXEL_UNITS
      };
    }
  } else if (calibration.scale) {
    scale2 = calibration.scale;
  }
  const types = [
    CalibrationTypes.ERMF,
    CalibrationTypes.USER,
    CalibrationTypes.ERROR,
    CalibrationTypes.PROJECTION,
    CalibrationTypes.CALIBRATED,
    CalibrationTypes.UNKNOWN
  ];
  if (types.includes(calibration?.type)) {
    calibrationType = calibration.type;
  }
  return {
    unit: unit + (calibrationType ? ` ${calibrationType}` : ""),
    areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ""),
    scale: scale2,
    volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : "")
  };
};
var getCalibratedProbeUnitsAndValue = (image, handles) => {
  const [imageIndex] = handles;
  const { calibration } = image;
  let units = ["raw"];
  let values = [null];
  let calibrationType = "";
  if (!calibration || !calibration.type && !calibration.sequenceOfUltrasoundRegions) {
    return { units, values };
  }
  if (calibration.sequenceOfUltrasoundRegions) {
    const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region2) => SUPPORTED_REGION_DATA_TYPES.includes(region2.regionDataType) && SUPPORTED_PROBE_VARIANT.includes(`${region2.physicalUnitsXDirection},${region2.physicalUnitsYDirection}`));
    if (!supportedRegionsMetadata?.length) {
      return { units, values };
    }
    const region = supportedRegionsMetadata.find((region2) => imageIndex[0] >= region2.regionLocationMinX0 && imageIndex[0] <= region2.regionLocationMaxX1 && imageIndex[1] >= region2.regionLocationMinY0 && imageIndex[1] <= region2.regionLocationMaxY1);
    if (!region) {
      return { units, values };
    }
    const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;
    const { physicalDeltaX, physicalDeltaY } = region;
    const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) * physicalDeltaY;
    const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) * physicalDeltaX;
    calibrationType = "US Region";
    values = [xValue, yValue];
    units = [
      UNIT_MAPPING[region.physicalUnitsXDirection],
      UNIT_MAPPING[region.physicalUnitsYDirection]
    ];
  }
  return {
    units,
    values,
    calibrationType
  };
};
var getCalibratedAspect = (image) => image.calibration?.aspect || 1;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js
var planar_exports = {};
__export(planar_exports, {
  default: () => planar_default,
  filterAnnotationsForDisplay: () => filterAnnotationsForDisplay,
  filterAnnotationsWithinSamePlane: () => filterAnnotationsWithinSamePlane,
  filterAnnotationsWithinSlice: () => filterAnnotationsWithinSlice,
  getPointInLineOfSightWithCriteria: () => getPointInLineOfSightWithCriteria,
  getPointsInLineOfSight: () => getPointsInLineOfSight,
  getWorldWidthAndHeightFromCorners: () => getWorldWidthAndHeightFromCorners,
  getWorldWidthAndHeightFromTwoPoints: () => getWorldWidthAndHeightFromTwoPoints,
  isPlaneIntersectingAABB: () => isPlaneIntersectingAABB
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js
function getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, topLeftWorld, bottomRightWorld) {
  const viewRight = vec3_exports.create();
  vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
  const pos1 = vec3_exports.fromValues(...topLeftWorld);
  const pos2 = vec3_exports.fromValues(...bottomRightWorld);
  const diagonal = vec3_exports.create();
  vec3_exports.subtract(diagonal, pos1, pos2);
  const diagonalLength = vec3_exports.length(diagonal);
  if (diagonalLength < 1e-4) {
    return { worldWidth: 0, worldHeight: 0 };
  }
  const cosTheta = vec3_exports.dot(diagonal, viewRight) / (diagonalLength * vec3_exports.length(viewRight));
  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
  const worldWidth = sinTheta * diagonalLength;
  const worldHeight = cosTheta * diagonalLength;
  return { worldWidth, worldHeight };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromTwoPoints.js
function getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2) {
  const viewRight = vec3_exports.create();
  vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
  const pos1 = vec3_exports.fromValues(...worldPos1);
  const pos2 = vec3_exports.fromValues(...worldPos2);
  const diagonal = vec3_exports.create();
  vec3_exports.subtract(diagonal, pos1, pos2);
  const diagonalLength = vec3_exports.length(diagonal);
  if (diagonalLength < 1e-4) {
    return { worldWidth: 0, worldHeight: 0 };
  }
  const cosTheta = vec3_exports.dot(diagonal, viewRight) / (diagonalLength * vec3_exports.length(viewRight));
  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
  const worldWidth = sinTheta * diagonalLength;
  const worldHeight = cosTheta * diagonalLength;
  return { worldWidth, worldHeight };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getPointInLineOfSightWithCriteria.js
function getPointInLineOfSightWithCriteria(viewport, worldPos, targetVolumeId, criteriaFunction, stepSize = 0.25) {
  const points = getPointsInLineOfSight(viewport, worldPos, {
    targetVolumeId,
    stepSize
  });
  let pickedPoint;
  for (const point of points) {
    const intensity = viewport.getIntensityFromWorld(point);
    const pointToPick = criteriaFunction(intensity, point);
    if (pointToPick) {
      pickedPoint = pointToPick;
    }
  }
  return pickedPoint;
}
function getPointsInLineOfSight(viewport, worldPos, { targetVolumeId, stepSize }) {
  const camera = viewport.getCamera();
  const { viewPlaneNormal: normalDirection } = camera;
  const { spacingInNormalDirection } = utilities_exports.getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetVolumeId);
  const step = spacingInNormalDirection * stepSize || 1;
  const bounds = viewport.getBounds();
  const points = [];
  let currentPos = [...worldPos];
  while (_inBounds(currentPos, bounds)) {
    points.push([...currentPos]);
    currentPos[0] += normalDirection[0] * step;
    currentPos[1] += normalDirection[1] * step;
    currentPos[2] += normalDirection[2] * step;
  }
  currentPos = [...worldPos];
  while (_inBounds(currentPos, bounds)) {
    points.push([...currentPos]);
    currentPos[0] -= normalDirection[0] * step;
    currentPos[1] -= normalDirection[1] * step;
    currentPos[2] -= normalDirection[2] * step;
  }
  return points;
}
var _inBounds = function(point, bounds) {
  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;
  const padding = 10;
  return point[0] > xMin + padding && point[0] < xMax - padding && point[1] > yMin + padding && point[1] < yMax - padding && point[2] > zMin + padding && point[2] < zMax - padding;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/isPlaneIntersectingAABB.js
var isPlaneIntersectingAABB = (origin, normal, minX, minY, minZ, maxX, maxY, maxZ) => {
  const vertices = [
    vec3_exports.fromValues(minX, minY, minZ),
    vec3_exports.fromValues(maxX, minY, minZ),
    vec3_exports.fromValues(minX, maxY, minZ),
    vec3_exports.fromValues(maxX, maxY, minZ),
    vec3_exports.fromValues(minX, minY, maxZ),
    vec3_exports.fromValues(maxX, minY, maxZ),
    vec3_exports.fromValues(minX, maxY, maxZ),
    vec3_exports.fromValues(maxX, maxY, maxZ)
  ];
  const normalVec = vec3_exports.fromValues(normal[0], normal[1], normal[2]);
  const originVec = vec3_exports.fromValues(origin[0], origin[1], origin[2]);
  const planeDistance = -vec3_exports.dot(normalVec, originVec);
  let initialSign = null;
  for (const vertex of vertices) {
    const distance = vec3_exports.dot(normalVec, vertex) + planeDistance;
    if (initialSign === null) {
      initialSign = Math.sign(distance);
    } else if (Math.sign(distance) !== initialSign) {
      return true;
    }
  }
  return false;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinPlane.js
var { EPSILON: EPSILON7 } = constants_exports;
var PARALLEL_THRESHOLD2 = 1 - EPSILON7;
function filterAnnotationsWithinSamePlane(annotations, camera) {
  const { viewPlaneNormal } = camera;
  const annotationsWithParallelNormals = annotations.filter((td) => {
    let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;
    if (!annotationViewPlaneNormal) {
      const { referencedImageId } = td.metadata;
      const { imageOrientationPatient } = metaData_exports.get("imagePlaneModule", referencedImageId);
      const rowCosineVec = vec3_exports.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);
      const colCosineVec = vec3_exports.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);
      annotationViewPlaneNormal = vec3_exports.create();
      vec3_exports.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);
      td.metadata.viewPlaneNormal = annotationViewPlaneNormal;
    }
    const isParallel = Math.abs(vec3_exports.dot(viewPlaneNormal, annotationViewPlaneNormal)) > PARALLEL_THRESHOLD2;
    return annotationViewPlaneNormal && isParallel;
  });
  if (!annotationsWithParallelNormals.length) {
    return [];
  }
  return annotationsWithParallelNormals;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js
var planar_default = {
  filterAnnotationsWithinSlice,
  getWorldWidthAndHeightFromCorners,
  getWorldWidthAndHeightFromTwoPoints,
  filterAnnotationsForDisplay,
  getPointInLineOfSightWithCriteria,
  isPlaneIntersectingAABB,
  filterAnnotationsWithinSamePlane,
  getPointsInLineOfSight
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js
function throttle(func, wait, options) {
  let leading = true;
  let trailing = true;
  if (typeof func !== "function") {
    throw new TypeError("Expected a function");
  }
  if (isObject_default(options)) {
    leading = "leading" in options ? Boolean(options.leading) : leading;
    trailing = "trailing" in options ? Boolean(options.trailing) : trailing;
  }
  return debounce_default(func, wait, {
    leading,
    trailing,
    maxWait: wait
  });
}
var throttle_default = throttle;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/algorithms/bspline.js
function isPoints3D(points) {
  return points[0]?.length === 3;
}
function interpolatePoints(originalPoints, knotsIndexes) {
  if (!knotsIndexes || knotsIndexes.length === 0 || knotsIndexes.length === originalPoints.length) {
    return originalPoints;
  }
  const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;
  const xInterpolator = basis_default(knotsIndexes.map((k) => originalPoints[k][0]));
  const yInterpolator = basis_default(knotsIndexes.map((k) => originalPoints[k][1]));
  if (isPoints3D(originalPoints)) {
    const zInterpolator = basis_default(knotsIndexes.map((k) => originalPoints[k][2]));
    return zip(quantize_default(xInterpolator, n), quantize_default(yInterpolator, n), quantize_default(zInterpolator, n));
  } else {
    return zip(quantize_default(xInterpolator, n), quantize_default(yInterpolator, n));
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js
function getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {
  const result = [];
  const [intervalIni, intervalEnd] = closedInterval;
  const intervalSize = intervalEnd - intervalIni + 1;
  const intensity = Math.floor(intervalSize / minDistributionDistance);
  let x = 0;
  let continuosDistributionValue = Math.round((intervalSize - 1) / (intensity - 1) * x) + intervalIni;
  while (continuosDistributionValue <= intervalEnd) {
    result.push(continuosDistributionValue);
    x++;
    continuosDistributionValue = Math.round((intervalSize - 1) / (intensity - 1) * x) + intervalIni;
  }
  return result;
}
function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {
  const segmentSize = endIndex - iniIndex + 1;
  const amountOfKnots = Math.floor(knotsRatioPercentage / 100 * segmentSize) ?? 1;
  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;
  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {
    return points;
  }
  if (segmentSize / minKnotDistance < 2) {
    return points;
  }
  const interpolationIniIndex = Math.max(0, iniIndex);
  const interpolationEndIndex = Math.min(points.length - 1, endIndex);
  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);
  const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);
  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [
    interpolationIniIndex,
    interpolationEndIndex
  ]);
  const interpolatedPoints = interpolatePoints(points, knotsIndexes);
  return [
    ...segmentPointsUnchangedBeg,
    ...interpolatedPoints,
    ...segmentPointsUnchangedEnd
  ];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/smoothPoints.js
function shouldSmooth(configuration3, annotation) {
  if (annotation?.autoGenerated) {
    return false;
  }
  const shouldSmooth2 = configuration3?.smoothing?.smoothOnAdd === true || configuration3?.smoothing?.smoothOnEdit === true;
  return shouldSmooth2;
}
function isEqualByProximity(pointA, pointB) {
  return point_exports.distanceToPoint(pointA, pointB) < 1e-3;
}
function isEqual3(pointA, pointB) {
  return point_exports.distanceToPoint(pointA, pointB) === 0;
}
function findMatchIndexes(points, otherPoints) {
  for (let i = 0; i < points.length; i++) {
    for (let j = 0; j < otherPoints.length; j++) {
      if (isEqual3(points[i], otherPoints[j])) {
        return [i, j];
      }
    }
  }
}
function followingIndex(index, size, direction) {
  return (index + size + direction) % size;
}
function circularFindNextIndexBy(listParams, otherListParams, criteria, direction) {
  const [, indexDelimiter, points] = listParams;
  const [, otherIndexDelimiter, otherPoints] = otherListParams;
  const pointsLength = points.length;
  const otherPointsLength = otherPoints.length;
  let startIndex = listParams[0];
  let otherStartIndex = otherListParams[0];
  if (!points[startIndex] || !otherPoints[otherStartIndex] || !points[indexDelimiter] || !otherPoints[otherIndexDelimiter]) {
    return [void 0, void 0];
  }
  while (startIndex !== indexDelimiter && otherStartIndex !== otherIndexDelimiter) {
    if (criteria(otherPoints[otherStartIndex], points[startIndex])) {
      return [startIndex, otherStartIndex];
    }
    startIndex = followingIndex(startIndex, pointsLength, direction);
    otherStartIndex = followingIndex(otherStartIndex, otherPointsLength, direction);
  }
  return [void 0, void 0];
}
function findChangedSegment(points, previousPoints) {
  const [firstMatchIndex, previousFirstMatchIndex] = findMatchIndexes(points, previousPoints) || [];
  const toBeNotEqualCriteria = (pointA, pointB) => isEqualByProximity(pointA, pointB) === false;
  const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy([
    followingIndex(firstMatchIndex, points.length, 1),
    firstMatchIndex,
    points
  ], [
    followingIndex(previousFirstMatchIndex, previousPoints.length, 1),
    previousFirstMatchIndex,
    previousPoints
  ], toBeNotEqualCriteria, 1);
  const [highIndex] = circularFindNextIndexBy([followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points], [
    followingIndex(lowOtherDiffIndex, previousPoints.length, -1),
    lowOtherDiffIndex,
    previousPoints
  ], toBeNotEqualCriteria, -1);
  return [lowDiffIndex, highIndex];
}
function getInterpolatedPoints(configuration3, points, pointsOfReference) {
  const { interpolation, smoothing } = configuration3;
  const result = points;
  if (interpolation) {
    const { knotsRatioPercentageOnAdd, knotsRatioPercentageOnEdit, smoothOnAdd = false, smoothOnEdit = false } = smoothing;
    const knotsRatioPercentage = pointsOfReference ? knotsRatioPercentageOnEdit : knotsRatioPercentageOnAdd;
    const isEnabled = pointsOfReference ? smoothOnEdit : smoothOnAdd;
    if (isEnabled) {
      const [changedIniIndex, changedEndIndex] = pointsOfReference ? findChangedSegment(points, pointsOfReference) : [0, points.length - 1];
      if (!points[changedIniIndex] || !points[changedEndIndex]) {
        return points;
      }
      return interpolateSegmentPoints(points, changedIniIndex, changedEndIndex, knotsRatioPercentage);
    }
  }
  return result;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getMouseModifier.js
var getMouseModifierKey = (evt) => {
  if (evt.shiftKey) {
    if (evt.ctrlKey) {
      return KeyboardBindings.ShiftCtrl;
    }
    if (evt.altKey) {
      return KeyboardBindings.ShiftAlt;
    }
    if (evt.metaKey) {
      return KeyboardBindings.ShiftMeta;
    }
    return KeyboardBindings.Shift;
  }
  if (evt.ctrlKey) {
    if (evt.altKey) {
      return KeyboardBindings.CtrlAlt;
    }
    if (evt.metaKey) {
      return KeyboardBindings.CtrlMeta;
    }
    return KeyboardBindings.Ctrl;
  }
  if (evt.altKey) {
    return evt.metaKey && KeyboardBindings.AltMeta || KeyboardBindings.Alt;
  }
  if (evt.metaKey) {
    return KeyboardBindings.Meta;
  }
  return void 0;
};
var getMouseModifier_default = getMouseModifierKey;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js
function findOpenUShapedContourVectorToPeak(canvasPoints, viewport) {
  const first = canvasPoints[0];
  const last = canvasPoints[canvasPoints.length - 1];
  const firstToLastUnitVector = vec2_exports.create();
  vec2_exports.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);
  vec2_exports.normalize(firstToLastUnitVector, firstToLastUnitVector);
  const normalVector1 = vec2_exports.create();
  const normalVector2 = vec2_exports.create();
  vec2_exports.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);
  vec2_exports.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);
  const centerOfFirstToLast = [
    (first[0] + last[0]) / 2,
    (first[1] + last[1]) / 2
  ];
  const furthest = {
    dist: 0,
    index: null
  };
  for (let i = 0; i < canvasPoints.length; i++) {
    const canvasPoint = canvasPoints[i];
    const distance = vec2_exports.dist(canvasPoint, centerOfFirstToLast);
    if (distance > furthest.dist) {
      furthest.dist = distance;
      furthest.index = i;
    }
  }
  const toFurthest = [
    canvasPoints[furthest.index],
    centerOfFirstToLast
  ];
  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);
  return toFurthestWorld;
}
function findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation) {
  const { viewport } = enabledElement;
  const canvasPoints = annotation.data.contour.polyline.map(viewport.worldToCanvas);
  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/drawLoop.js
var { addCanvasPointsToArray: addCanvasPointsToArray2, pointsAreWithinCloseContourProximity: pointsAreWithinCloseContourProximity2, getFirstLineSegmentIntersectionIndexes: getFirstLineSegmentIntersectionIndexes2, getSubPixelSpacingAndXYDirections: getSubPixelSpacingAndXYDirections2 } = polyline_exports;
function activateDraw(evt, annotation, viewportIdsToRender) {
  this.isDrawing = true;
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const contourHoleProcessingEnabled = getMouseModifier_default(evt.detail.event) === this.configuration.contourHoleAdditionModifierKey;
  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections2(viewport, this.configuration.subPixelResolution) || {};
  if (!spacing || !xDir || !yDir) {
    return;
  }
  this.drawData = {
    canvasPoints: [canvasPos],
    polylineIndex: 0,
    contourHoleProcessingEnabled,
    newAnnotation: true
  };
  this.commonData = {
    annotation,
    viewportIdsToRender,
    spacing,
    xDir,
    yDir,
    movingTextBox: false
  };
  state.isInteractingWithTool = true;
  element.addEventListener(Events_default.MOUSE_UP, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.MOUSE_DRAG, this.mouseDragDrawCallback);
  element.addEventListener(Events_default.MOUSE_CLICK, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.TOUCH_END, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.TOUCH_DRAG, this.mouseDragDrawCallback);
  element.addEventListener(Events_default.TOUCH_TAP, this.mouseUpDrawCallback);
  hideElementCursor(element);
}
function deactivateDraw(element) {
  state.isInteractingWithTool = false;
  element.removeEventListener(Events_default.MOUSE_UP, this.mouseUpDrawCallback);
  element.removeEventListener(Events_default.MOUSE_DRAG, this.mouseDragDrawCallback);
  element.removeEventListener(Events_default.MOUSE_CLICK, this.mouseUpDrawCallback);
  element.removeEventListener(Events_default.TOUCH_END, this.mouseUpDrawCallback);
  element.removeEventListener(Events_default.TOUCH_DRAG, this.mouseDragDrawCallback);
  element.removeEventListener(Events_default.TOUCH_TAP, this.mouseUpDrawCallback);
  resetElementCursor(element);
}
function mouseDragDrawCallback(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const worldPos = currentPoints.world;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { annotation, viewportIdsToRender, xDir, yDir, spacing, movingTextBox } = this.commonData;
  const { polylineIndex, canvasPoints, newAnnotation } = this.drawData;
  this.createMemo(element, annotation, { newAnnotation });
  const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];
  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
  const worldPosDiff = vec3_exports.create();
  vec3_exports.subtract(worldPosDiff, worldPos, lastWorldPoint);
  const xDist = Math.abs(vec3_exports.dot(worldPosDiff, xDir));
  const yDist = Math.abs(vec3_exports.dot(worldPosDiff, yDir));
  if (xDist <= spacing[0] && yDist <= spacing[1]) {
    return;
  }
  if (movingTextBox) {
    this.isDrawing = false;
    const { deltaPoints } = eventDetail;
    const worldPosDelta = deltaPoints.world;
    const { textBox } = annotation.data.handles;
    const { worldPosition } = textBox;
    worldPosition[0] += worldPosDelta[0];
    worldPosition[1] += worldPosDelta[1];
    worldPosition[2] += worldPosDelta[2];
    textBox.hasMoved = true;
  } else {
    const crossingIndex = this.findCrossingIndexDuringCreate(evt);
    if (crossingIndex !== void 0) {
      this.applyCreateOnCross(evt, crossingIndex);
    } else {
      const numPointsAdded = addCanvasPointsToArray2(element, canvasPoints, canvasPos, this.commonData);
      this.drawData.polylineIndex = polylineIndex + numPointsAdded;
    }
    annotation.invalidated = true;
  }
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  if (annotation.invalidated) {
    triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
  }
}
function mouseUpDrawCallback(evt) {
  const { allowOpenContours } = this.configuration;
  const { canvasPoints, contourHoleProcessingEnabled } = this.drawData;
  const firstPoint = canvasPoints[0];
  const lastPoint = canvasPoints[canvasPoints.length - 1];
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  this.doneEditMemo();
  this.drawData.newAnnotation = false;
  if (allowOpenContours && !pointsAreWithinCloseContourProximity2(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
    this.completeDrawOpenContour(element, { contourHoleProcessingEnabled });
  } else {
    this.completeDrawClosedContour(element, { contourHoleProcessingEnabled });
  }
}
function completeDrawClosedContour(element, options) {
  this.removeCrossedLinesOnCompleteDraw();
  const { canvasPoints } = this.drawData;
  const { contourHoleProcessingEnabled, minPointsToSave } = options ?? {};
  if (minPointsToSave && canvasPoints.length < minPointsToSave) {
    return false;
  }
  if (this.haltDrawing(element, canvasPoints)) {
    return false;
  }
  const { annotation, viewportIdsToRender } = this.commonData;
  const enabledElement = getEnabledElement(element);
  const { viewport, renderingEngine } = enabledElement;
  addCanvasPointsToArray2(element, canvasPoints, canvasPoints[0], this.commonData);
  canvasPoints.pop();
  const updatedPoints = shouldSmooth(this.configuration, annotation) ? getInterpolatedPoints(this.configuration, canvasPoints) : canvasPoints;
  this.updateContourPolyline(annotation, {
    points: updatedPoints,
    closed: true,
    targetWindingDirection: ContourWindingDirection.Clockwise
  }, viewport);
  const { textBox } = annotation.data.handles;
  if (!textBox?.hasMoved) {
    triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);
  }
  this.isDrawing = false;
  this.drawData = void 0;
  this.commonData = void 0;
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  this.deactivateDraw(element);
  return true;
}
function removeCrossedLinesOnCompleteDraw() {
  const { canvasPoints } = this.drawData;
  const numPoints = canvasPoints.length;
  const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];
  const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);
  const lineSegment = getFirstLineSegmentIntersectionIndexes2(canvasPointsMinusEnds, endToStart[0], endToStart[1], false);
  if (lineSegment) {
    const indexToRemoveUpTo = lineSegment[1];
    if (indexToRemoveUpTo === 1) {
      this.drawData.canvasPoints = canvasPoints.splice(1);
    } else {
      this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);
    }
  }
}
function completeDrawOpenContour(element, options) {
  const { canvasPoints } = this.drawData;
  const { contourHoleProcessingEnabled } = options ?? {};
  if (this.haltDrawing(element, canvasPoints)) {
    return false;
  }
  const { annotation, viewportIdsToRender } = this.commonData;
  const enabledElement = getEnabledElement(element);
  const { viewport, renderingEngine } = enabledElement;
  const updatedPoints = shouldSmooth(this.configuration, annotation) ? getInterpolatedPoints(this.configuration, canvasPoints) : canvasPoints;
  this.updateContourPolyline(annotation, {
    points: updatedPoints,
    closed: false
  }, viewport);
  const { textBox } = annotation.data.handles;
  const worldPoints = annotation.data.contour.polyline;
  annotation.data.handles.points = [
    worldPoints[0],
    worldPoints[worldPoints.length - 1]
  ];
  if (annotation.data.isOpenUShapeContour) {
    annotation.data.openUShapeContourVectorToPeak = findOpenUShapedContourVectorToPeak(canvasPoints, viewport);
  }
  if (!textBox.hasMoved) {
    triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);
  }
  this.isDrawing = false;
  this.drawData = void 0;
  this.commonData = void 0;
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  this.deactivateDraw(element);
  return true;
}
function findCrossingIndexDuringCreate(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, lastPoints } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const lastCanvasPoint = lastPoints.canvas;
  const { canvasPoints } = this.drawData;
  const pointsLessLastOne = canvasPoints.slice(0, -1);
  const lineSegment = getFirstLineSegmentIntersectionIndexes2(pointsLessLastOne, canvasPos, lastCanvasPoint, false);
  if (lineSegment === void 0) {
    return;
  }
  const crossingIndex = lineSegment[0];
  return crossingIndex;
}
function applyCreateOnCross(evt, crossingIndex) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const { canvasPoints, contourHoleProcessingEnabled } = this.drawData;
  const { annotation, viewportIdsToRender } = this.commonData;
  addCanvasPointsToArray2(element, canvasPoints, canvasPoints[crossingIndex], this.commonData);
  canvasPoints.pop();
  const remainingPoints = canvasPoints.slice(crossingIndex);
  const newArea = polyline_exports.getArea(remainingPoints);
  if (utilities_exports.isEqual(newArea, 0)) {
    canvasPoints.splice(crossingIndex + 1);
    return;
  }
  canvasPoints.splice(0, crossingIndex);
  const options = { contourHoleProcessingEnabled, minPointsToSave: 3 };
  if (this.completeDrawClosedContour(element, options)) {
    this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);
  }
}
function cancelDrawing(element) {
  const { allowOpenContours } = this.configuration;
  const { canvasPoints, contourHoleProcessingEnabled } = this.drawData;
  const firstPoint = canvasPoints[0];
  const lastPoint = canvasPoints[canvasPoints.length - 1];
  if (allowOpenContours && !pointsAreWithinCloseContourProximity2(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
    this.completeDrawOpenContour(element, { contourHoleProcessingEnabled });
  } else {
    this.completeDrawClosedContour(element, { contourHoleProcessingEnabled });
  }
}
function shouldHaltDrawing(canvasPoints, subPixelResolution) {
  const minPoints = Math.max(subPixelResolution * 3, 3);
  return canvasPoints.length < minPoints;
}
function haltDrawing(element, canvasPoints) {
  const { subPixelResolution } = this.configuration;
  if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {
    const { annotation, viewportIdsToRender } = this.commonData;
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    removeAnnotation(annotation.annotationUID);
    this.isDrawing = false;
    this.drawData = void 0;
    this.commonData = void 0;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    this.deactivateDraw(element);
    return true;
  }
  return false;
}
function registerDrawLoop(toolInstance) {
  toolInstance.activateDraw = activateDraw.bind(toolInstance);
  toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);
  toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);
  toolInstance.findCrossingIndexDuringCreate = findCrossingIndexDuringCreate.bind(toolInstance);
  toolInstance.completeDrawOpenContour = completeDrawOpenContour.bind(toolInstance);
  toolInstance.removeCrossedLinesOnCompleteDraw = removeCrossedLinesOnCompleteDraw.bind(toolInstance);
  toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);
  toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);
  toolInstance.completeDrawClosedContour = completeDrawClosedContour.bind(toolInstance);
  toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);
  toolInstance.haltDrawing = haltDrawing.bind(toolInstance);
}
var drawLoop_default = registerDrawLoop;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/editLoopCommon.js
var { addCanvasPointsToArray: addCanvasPointsToArray3, getFirstLineSegmentIntersectionIndexes: getFirstLineSegmentIntersectionIndexes3 } = polyline_exports;
function checkForFirstCrossing(evt, isClosedContour) {
  const eventDetail = evt.detail;
  const { element, currentPoints, lastPoints } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const lastCanvasPoint = lastPoints.canvas;
  const { editCanvasPoints, prevCanvasPoints } = this.editData;
  const crossedLineSegment = getFirstLineSegmentIntersectionIndexes3(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);
  if (crossedLineSegment) {
    this.editData.startCrossingIndex = crossedLineSegment[0];
    this.removePointsUpUntilFirstCrossing(isClosedContour);
  } else if (prevCanvasPoints.length >= 2) {
    if (editCanvasPoints.length > this.configuration.checkCanvasEditFallbackProximity) {
      const firstEditCanvasPoint = editCanvasPoints[0];
      const distanceIndexPairs = [];
      for (let i = 0; i < prevCanvasPoints.length; i++) {
        const prevCanvasPoint = prevCanvasPoints[i];
        const distance = vec2_exports.distance(prevCanvasPoint, firstEditCanvasPoint);
        distanceIndexPairs.push({ distance, index: i });
      }
      distanceIndexPairs.sort((a, b) => a.distance - b.distance);
      const twoClosestDistanceIndexPairs = [
        distanceIndexPairs[0],
        distanceIndexPairs[1]
      ];
      const lowestIndex = Math.min(twoClosestDistanceIndexPairs[0].index, twoClosestDistanceIndexPairs[1].index);
      this.editData.startCrossingIndex = lowestIndex;
    } else {
      const dir = vec2_exports.create();
      vec2_exports.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);
      vec2_exports.normalize(dir, dir);
      const proximity = 6;
      const extendedPoint = [
        editCanvasPoints[0][0] - dir[0] * proximity,
        editCanvasPoints[0][1] - dir[1] * proximity
      ];
      const crossedLineSegmentFromExtendedPoint = getFirstLineSegmentIntersectionIndexes3(prevCanvasPoints, extendedPoint, editCanvasPoints[0], isClosedContour);
      if (crossedLineSegmentFromExtendedPoint) {
        const pointsToPrepend = [extendedPoint];
        addCanvasPointsToArray3(element, pointsToPrepend, editCanvasPoints[0], this.commonData);
        editCanvasPoints.unshift(...pointsToPrepend);
        this.removePointsUpUntilFirstCrossing(isClosedContour);
        this.editData.editIndex = editCanvasPoints.length - 1;
        this.editData.startCrossingIndex = crossedLineSegmentFromExtendedPoint[0];
      }
    }
  }
}
function removePointsUpUntilFirstCrossing(isClosedContour) {
  const { editCanvasPoints, prevCanvasPoints } = this.editData;
  let numPointsToRemove = 0;
  for (let i = 0; i < editCanvasPoints.length - 1; i++) {
    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];
    const didCrossLine = !!getFirstLineSegmentIntersectionIndexes3(prevCanvasPoints, firstLine[0], firstLine[1], isClosedContour);
    numPointsToRemove++;
    if (didCrossLine) {
      break;
    }
  }
  editCanvasPoints.splice(0, numPointsToRemove);
  this.editData.editIndex = editCanvasPoints.length - 1;
}
function checkForSecondCrossing(evt, isClosedContour) {
  const eventDetail = evt.detail;
  const { currentPoints, lastPoints } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const lastCanvasPoint = lastPoints.canvas;
  const { prevCanvasPoints } = this.editData;
  const crossedLineSegment = getFirstLineSegmentIntersectionIndexes3(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);
  if (!crossedLineSegment) {
    return false;
  }
  return true;
}
function removePointsAfterSecondCrossing(isClosedContour) {
  const { prevCanvasPoints, editCanvasPoints } = this.editData;
  for (let i = editCanvasPoints.length - 1; i > 0; i--) {
    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];
    const didCrossLine = !!getFirstLineSegmentIntersectionIndexes3(prevCanvasPoints, lastLine[0], lastLine[1], isClosedContour);
    editCanvasPoints.pop();
    if (didCrossLine) {
      break;
    }
  }
}
function findSnapIndex() {
  const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } = this.editData;
  if (startCrossingIndex === void 0) {
    return;
  }
  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
  const distanceIndexPairs = [];
  for (let i = 0; i < prevCanvasPoints.length; i++) {
    const prevCanvasPoint = prevCanvasPoints[i];
    const distance = vec2_exports.distance(prevCanvasPoint, lastEditCanvasPoint);
    distanceIndexPairs.push({ distance, index: i });
  }
  distanceIndexPairs.sort((a, b) => a.distance - b.distance);
  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);
  for (let i = 0; i < distanceIndexPairs.length; i++) {
    const { index } = distanceIndexPairs[i];
    const snapCanvasPosition = prevCanvasPoints[index];
    const lastEditCanvasPoint2 = editCanvasPoints[editCanvasPoints.length - 1];
    const crossedLineSegment = getFirstLineSegmentIntersectionIndexes3(editCanvasPointsLessLastOne, snapCanvasPosition, lastEditCanvasPoint2, false);
    if (!crossedLineSegment) {
      return index;
    }
  }
  return -1;
}
function checkAndRemoveCrossesOnEditLine(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, lastPoints } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const lastCanvasPoint = lastPoints.canvas;
  const { editCanvasPoints } = this.editData;
  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);
  const crossedLineSegment = getFirstLineSegmentIntersectionIndexes3(editCanvasPointsLessLastOne, canvasPos, lastCanvasPoint, false);
  if (!crossedLineSegment) {
    return;
  }
  const editIndexCrossed = crossedLineSegment[0];
  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;
  for (let i = 0; i < numPointsToRemove; i++) {
    editCanvasPoints.pop();
  }
}
function registerEditLoopCommon(toolInstance) {
  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);
  toolInstance.removePointsUpUntilFirstCrossing = removePointsUpUntilFirstCrossing.bind(toolInstance);
  toolInstance.checkForSecondCrossing = checkForSecondCrossing.bind(toolInstance);
  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);
  toolInstance.removePointsAfterSecondCrossing = removePointsAfterSecondCrossing.bind(toolInstance);
  toolInstance.checkAndRemoveCrossesOnEditLine = checkAndRemoveCrossesOnEditLine.bind(toolInstance);
}
var editLoopCommon_default = registerEditLoopCommon;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/closedContourEditLoop.js
var { getSubPixelSpacingAndXYDirections: getSubPixelSpacingAndXYDirections3, addCanvasPointsToArray: addCanvasPointsToArray4, getArea: getArea2 } = polyline_exports;
function activateClosedContourEdit(evt, annotation, viewportIdsToRender) {
  this.isEditingClosed = true;
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  const prevCanvasPoints = annotation.data.contour.polyline.map(viewport.worldToCanvas);
  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections3(viewport, this.configuration.subPixelResolution);
  this.editData = {
    prevCanvasPoints,
    editCanvasPoints: [canvasPos],
    startCrossingIndex: void 0,
    editIndex: 0,
    annotation
  };
  this.commonData = {
    annotation,
    viewportIdsToRender,
    spacing,
    xDir,
    yDir,
    movingTextBox: false
  };
  state.isInteractingWithTool = true;
  element.addEventListener(Events_default.MOUSE_UP, this.mouseUpClosedContourEditCallback);
  element.addEventListener(Events_default.MOUSE_DRAG, this.mouseDragClosedContourEditCallback);
  element.addEventListener(Events_default.MOUSE_CLICK, this.mouseUpClosedContourEditCallback);
  element.addEventListener(Events_default.TOUCH_END, this.mouseUpClosedContourEditCallback);
  element.addEventListener(Events_default.TOUCH_DRAG, this.mouseDragClosedContourEditCallback);
  element.addEventListener(Events_default.TOUCH_TAP, this.mouseUpClosedContourEditCallback);
  hideElementCursor(element);
}
function deactivateClosedContourEdit(element) {
  state.isInteractingWithTool = false;
  element.removeEventListener(Events_default.MOUSE_UP, this.mouseUpClosedContourEditCallback);
  element.removeEventListener(Events_default.MOUSE_DRAG, this.mouseDragClosedContourEditCallback);
  element.removeEventListener(Events_default.MOUSE_CLICK, this.mouseUpClosedContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_END, this.mouseUpClosedContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_DRAG, this.mouseDragClosedContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_TAP, this.mouseUpClosedContourEditCallback);
  resetElementCursor(element);
}
function mouseDragClosedContourEditCallback(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const worldPos = currentPoints.world;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;
  const { editIndex, editCanvasPoints, startCrossingIndex, annotation } = this.editData;
  this.createMemo(element, annotation);
  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
  const worldPosDiff = vec3_exports.create();
  vec3_exports.subtract(worldPosDiff, worldPos, lastWorldPoint);
  const xDist = Math.abs(vec3_exports.dot(worldPosDiff, xDir));
  const yDist = Math.abs(vec3_exports.dot(worldPosDiff, yDir));
  if (xDist <= spacing[0] && yDist <= spacing[1]) {
    return;
  }
  if (startCrossingIndex !== void 0) {
    this.checkAndRemoveCrossesOnEditLine(evt);
  }
  const numPointsAdded = addCanvasPointsToArray4(element, editCanvasPoints, canvasPos, this.commonData);
  const currentEditIndex = editIndex + numPointsAdded;
  this.editData.editIndex = currentEditIndex;
  if (startCrossingIndex === void 0 && editCanvasPoints.length > 1) {
    this.checkForFirstCrossing(evt, true);
  }
  this.editData.snapIndex = this.findSnapIndex();
  if (this.editData.snapIndex === -1) {
    this.finishEditAndStartNewEdit(evt);
    return;
  }
  this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);
  if (startCrossingIndex !== void 0 && this.checkForSecondCrossing(evt, true)) {
    this.removePointsAfterSecondCrossing(true);
    this.finishEditAndStartNewEdit(evt);
  }
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
}
function finishEditAndStartNewEdit(evt) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const enabledElement = getEnabledElement(element);
  const { viewport, renderingEngine } = enabledElement;
  const { annotation, viewportIdsToRender } = this.commonData;
  const { fusedCanvasPoints, editCanvasPoints } = this.editData;
  updateContourPolyline(annotation, {
    points: fusedCanvasPoints,
    closed: true,
    targetWindingDirection: ContourWindingDirection.Clockwise
  }, viewport);
  if (annotation.autoGenerated) {
    annotation.autoGenerated = false;
  }
  triggerAnnotationModified(annotation, element);
  const lastEditCanvasPoint = editCanvasPoints.pop();
  this.editData = {
    prevCanvasPoints: fusedCanvasPoints,
    editCanvasPoints: [lastEditCanvasPoint],
    startCrossingIndex: void 0,
    editIndex: 0,
    snapIndex: void 0,
    annotation
  };
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
}
function fuseEditPointsWithClosedContour(evt) {
  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } = this.editData;
  if (startCrossingIndex === void 0 || snapIndex === void 0) {
    return;
  }
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const augmentedEditCanvasPoints = [...editCanvasPoints];
  addCanvasPointsToArray4(element, augmentedEditCanvasPoints, prevCanvasPoints[snapIndex], this.commonData);
  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {
    augmentedEditCanvasPoints.pop();
  }
  let lowIndex;
  let highIndex;
  if (startCrossingIndex > snapIndex) {
    lowIndex = snapIndex;
    highIndex = startCrossingIndex;
  } else {
    lowIndex = startCrossingIndex;
    highIndex = snapIndex;
  }
  const distanceBetweenLowAndFirstPoint = vec2_exports.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[0]);
  const distanceBetweenLowAndLastPoint = vec2_exports.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
  const distanceBetweenHighAndFirstPoint = vec2_exports.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[0]);
  const distanceBetweenHighAndLastPoint = vec2_exports.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
  const pointSet1 = [];
  for (let i = 0; i < lowIndex; i++) {
    const canvasPoint = prevCanvasPoints[i];
    pointSet1.push([canvasPoint[0], canvasPoint[1]]);
  }
  let inPlaceDistance = distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;
  let reverseDistance = distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;
  if (inPlaceDistance < reverseDistance) {
    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointSet1.push([canvasPoint[0], canvasPoint[1]]);
    }
  } else {
    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointSet1.push([canvasPoint[0], canvasPoint[1]]);
    }
  }
  for (let i = highIndex; i < prevCanvasPoints.length; i++) {
    const canvasPoint = prevCanvasPoints[i];
    pointSet1.push([canvasPoint[0], canvasPoint[1]]);
  }
  const pointSet2 = [];
  for (let i = lowIndex; i < highIndex; i++) {
    const canvasPoint = prevCanvasPoints[i];
    pointSet2.push([canvasPoint[0], canvasPoint[1]]);
  }
  inPlaceDistance = distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;
  reverseDistance = distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;
  if (inPlaceDistance < reverseDistance) {
    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointSet2.push([canvasPoint[0], canvasPoint[1]]);
    }
  } else {
    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointSet2.push([canvasPoint[0], canvasPoint[1]]);
    }
  }
  const areaPointSet1 = getArea2(pointSet1);
  const areaPointSet2 = getArea2(pointSet2);
  const pointsToRender = areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;
  return pointsToRender;
}
function mouseUpClosedContourEditCallback(evt) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  this.completeClosedContourEdit(element);
}
function completeClosedContourEdit(element) {
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { annotation, viewportIdsToRender } = this.commonData;
  this.doneEditMemo();
  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;
  if (fusedCanvasPoints) {
    const updatedPoints = shouldSmooth(this.configuration, annotation) ? getInterpolatedPoints(this.configuration, fusedCanvasPoints, prevCanvasPoints) : fusedCanvasPoints;
    const decimateConfig = this.configuration?.decimate || {};
    updateContourPolyline(annotation, {
      points: updatedPoints,
      closed: true,
      targetWindingDirection: ContourWindingDirection.Clockwise
    }, viewport, {
      decimate: {
        enabled: !!decimateConfig.enabled,
        epsilon: decimateConfig.epsilon
      }
    });
    if (annotation.autoGenerated) {
      annotation.autoGenerated = false;
    }
    triggerAnnotationModified(annotation, element);
  }
  this.isEditingClosed = false;
  this.editData = void 0;
  this.commonData = void 0;
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  this.deactivateClosedContourEdit(element);
}
function cancelClosedContourEdit(element) {
  this.completeClosedContourEdit(element);
}
function registerClosedContourEditLoop(toolInstance) {
  toolInstance.activateClosedContourEdit = activateClosedContourEdit.bind(toolInstance);
  toolInstance.deactivateClosedContourEdit = deactivateClosedContourEdit.bind(toolInstance);
  toolInstance.mouseDragClosedContourEditCallback = mouseDragClosedContourEditCallback.bind(toolInstance);
  toolInstance.mouseUpClosedContourEditCallback = mouseUpClosedContourEditCallback.bind(toolInstance);
  toolInstance.finishEditAndStartNewEdit = finishEditAndStartNewEdit.bind(toolInstance);
  toolInstance.fuseEditPointsWithClosedContour = fuseEditPointsWithClosedContour.bind(toolInstance);
  toolInstance.cancelClosedContourEdit = cancelClosedContourEdit.bind(toolInstance);
  toolInstance.completeClosedContourEdit = completeClosedContourEdit.bind(toolInstance);
}
var closedContourEditLoop_default = registerClosedContourEditLoop;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEditLoop.js
var { addCanvasPointsToArray: addCanvasPointsToArray5, getSubPixelSpacingAndXYDirections: getSubPixelSpacingAndXYDirections4 } = polyline_exports;
function activateOpenContourEdit(evt, annotation, viewportIdsToRender) {
  this.isEditingOpen = true;
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  this.doneEditMemo();
  const prevCanvasPoints = annotation.data.contour.polyline.map(viewport.worldToCanvas);
  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections4(viewport, this.configuration.subPixelResolution);
  this.editData = {
    prevCanvasPoints,
    editCanvasPoints: [canvasPos],
    startCrossingIndex: void 0,
    editIndex: 0
  };
  this.commonData = {
    annotation,
    viewportIdsToRender,
    spacing,
    xDir,
    yDir,
    movingTextBox: false
  };
  state.isInteractingWithTool = true;
  element.addEventListener(Events_default.MOUSE_UP, this.mouseUpOpenContourEditCallback);
  element.addEventListener(Events_default.MOUSE_DRAG, this.mouseDragOpenContourEditCallback);
  element.addEventListener(Events_default.MOUSE_CLICK, this.mouseUpOpenContourEditCallback);
  element.addEventListener(Events_default.TOUCH_END, this.mouseUpOpenContourEditCallback);
  element.addEventListener(Events_default.TOUCH_DRAG, this.mouseDragOpenContourEditCallback);
  element.addEventListener(Events_default.TOUCH_TAP, this.mouseUpOpenContourEditCallback);
  hideElementCursor(element);
}
function deactivateOpenContourEdit(element) {
  state.isInteractingWithTool = false;
  element.removeEventListener(Events_default.MOUSE_UP, this.mouseUpOpenContourEditCallback);
  element.removeEventListener(Events_default.MOUSE_DRAG, this.mouseDragOpenContourEditCallback);
  element.removeEventListener(Events_default.MOUSE_CLICK, this.mouseUpOpenContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_END, this.mouseUpOpenContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_DRAG, this.mouseDragOpenContourEditCallback);
  element.removeEventListener(Events_default.TOUCH_TAP, this.mouseUpOpenContourEditCallback);
  resetElementCursor(element);
}
function mouseDragOpenContourEditCallback(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, element } = eventDetail;
  const worldPos = currentPoints.world;
  const canvasPos = currentPoints.canvas;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;
  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;
  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
  const worldPosDiff = vec3_exports.create();
  this.createMemo(element, this.commonData.annotation);
  vec3_exports.subtract(worldPosDiff, worldPos, lastWorldPoint);
  const xDist = Math.abs(vec3_exports.dot(worldPosDiff, xDir));
  const yDist = Math.abs(vec3_exports.dot(worldPosDiff, yDir));
  if (xDist <= spacing[0] && yDist <= spacing[1]) {
    return;
  }
  if (startCrossingIndex !== void 0) {
    this.checkAndRemoveCrossesOnEditLine(evt);
  }
  const numPointsAdded = addCanvasPointsToArray5(element, editCanvasPoints, canvasPos, this.commonData);
  const currentEditIndex = editIndex + numPointsAdded;
  this.editData.editIndex = currentEditIndex;
  if (startCrossingIndex === void 0 && editCanvasPoints.length > 1) {
    this.checkForFirstCrossing(evt, false);
  }
  this.editData.snapIndex = this.findSnapIndex();
  this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);
  if (startCrossingIndex !== void 0 && this.checkForSecondCrossing(evt, false)) {
    this.removePointsAfterSecondCrossing(false);
    this.finishEditOpenOnSecondCrossing(evt);
  } else if (this.checkIfShouldOverwriteAnEnd(evt)) {
    this.openContourEditOverwriteEnd(evt);
  }
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
}
function openContourEditOverwriteEnd(evt) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { annotation, viewportIdsToRender } = this.commonData;
  const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();
  updateContourPolyline(annotation, {
    points: fusedCanvasPoints,
    closed: false
  }, viewport);
  const worldPoints = annotation.data.contour.polyline;
  annotation.data.handles.points = [
    worldPoints[0],
    worldPoints[worldPoints.length - 1]
  ];
  annotation.data.handles.activeHandleIndex = 1;
  triggerAnnotationModified(annotation, element);
  this.isEditingOpen = false;
  this.editData = void 0;
  this.commonData = void 0;
  this.doneEditMemo();
  this.deactivateOpenContourEdit(element);
  this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);
}
function checkIfShouldOverwriteAnEnd(evt) {
  const eventDetail = evt.detail;
  const { currentPoints, lastPoints } = eventDetail;
  const canvasPos = currentPoints.canvas;
  const lastCanvasPos = lastPoints.canvas;
  const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;
  if (startCrossingIndex === void 0 || snapIndex === void 0) {
    return false;
  }
  if (snapIndex === -1) {
    return true;
  }
  if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {
    return false;
  }
  const p1 = canvasPos;
  const p2 = lastCanvasPos;
  const p3 = prevCanvasPoints[snapIndex];
  const a = vec2_exports.create();
  const b = vec2_exports.create();
  vec2_exports.set(a, p1[0] - p2[0], p1[1] - p2[1]);
  vec2_exports.set(b, p1[0] - p3[0], p1[1] - p3[1]);
  const aDotb = vec2_exports.dot(a, b);
  const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);
  const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);
  const theta = Math.acos(aDotb / (magA * magB));
  if (theta < Math.PI / 2) {
    return true;
  }
  return false;
}
function fuseEditPointsForOpenContourEndEdit() {
  const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } = this.editData;
  const newCanvasPoints = [];
  if (snapIndex === 0) {
    for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {
      const canvasPoint = prevCanvasPoints[i];
      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
    }
  } else {
    for (let i = 0; i < startCrossingIndex; i++) {
      const canvasPoint = prevCanvasPoints[i];
      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
    }
  }
  const distanceBetweenCrossingIndexAndFirstPoint = vec2_exports.distance(prevCanvasPoints[startCrossingIndex], editCanvasPoints[0]);
  const distanceBetweenCrossingIndexAndLastPoint = vec2_exports.distance(prevCanvasPoints[startCrossingIndex], editCanvasPoints[editCanvasPoints.length - 1]);
  if (distanceBetweenCrossingIndexAndFirstPoint < distanceBetweenCrossingIndexAndLastPoint) {
    for (let i = 0; i < editCanvasPoints.length; i++) {
      const canvasPoint = editCanvasPoints[i];
      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
    }
  } else {
    for (let i = editCanvasPoints.length - 1; i >= 0; i--) {
      const canvasPoint = editCanvasPoints[i];
      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
    }
  }
  return newCanvasPoints;
}
function fuseEditPointsWithOpenContour(evt) {
  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } = this.editData;
  if (startCrossingIndex === void 0 || snapIndex === void 0) {
    return void 0;
  }
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const augmentedEditCanvasPoints = [...editCanvasPoints];
  addCanvasPointsToArray5(element, augmentedEditCanvasPoints, prevCanvasPoints[snapIndex], this.commonData);
  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {
    augmentedEditCanvasPoints.pop();
  }
  let lowIndex;
  let highIndex;
  if (startCrossingIndex > snapIndex) {
    lowIndex = snapIndex;
    highIndex = startCrossingIndex;
  } else {
    lowIndex = startCrossingIndex;
    highIndex = snapIndex;
  }
  const distanceBetweenLowAndFirstPoint = vec2_exports.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[0]);
  const distanceBetweenLowAndLastPoint = vec2_exports.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
  const distanceBetweenHighAndFirstPoint = vec2_exports.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[0]);
  const distanceBetweenHighAndLastPoint = vec2_exports.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
  const pointsToRender = [];
  for (let i = 0; i < lowIndex; i++) {
    const canvasPoint = prevCanvasPoints[i];
    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
  }
  const inPlaceDistance = distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;
  const reverseDistance = distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;
  if (inPlaceDistance < reverseDistance) {
    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
    }
  } else {
    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
      const canvasPoint = augmentedEditCanvasPoints[i];
      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
    }
  }
  for (let i = highIndex; i < prevCanvasPoints.length; i++) {
    const canvasPoint = prevCanvasPoints[i];
    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
  }
  return pointsToRender;
}
function finishEditOpenOnSecondCrossing(evt) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const enabledElement = getEnabledElement(element);
  const { viewport, renderingEngine } = enabledElement;
  const { annotation, viewportIdsToRender } = this.commonData;
  const { fusedCanvasPoints, editCanvasPoints } = this.editData;
  updateContourPolyline(annotation, {
    points: fusedCanvasPoints,
    closed: false
  }, viewport);
  const worldPoints = annotation.data.contour.polyline;
  annotation.data.handles.points = [
    worldPoints[0],
    worldPoints[worldPoints.length - 1]
  ];
  triggerAnnotationModified(annotation, element);
  const lastEditCanvasPoint = editCanvasPoints.pop();
  this.editData = {
    prevCanvasPoints: fusedCanvasPoints,
    editCanvasPoints: [lastEditCanvasPoint],
    startCrossingIndex: void 0,
    editIndex: 0
  };
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
}
function mouseUpOpenContourEditCallback(evt) {
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  this.completeOpenContourEdit(element);
}
function completeOpenContourEdit(element) {
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { annotation, viewportIdsToRender } = this.commonData;
  this.doneEditMemo();
  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;
  if (fusedCanvasPoints) {
    const updatedPoints = shouldSmooth(this.configuration) ? getInterpolatedPoints(this.configuration, fusedCanvasPoints, prevCanvasPoints) : fusedCanvasPoints;
    const decimateConfig = this.configuration?.decimate || {};
    updateContourPolyline(annotation, {
      points: updatedPoints,
      closed: false
    }, viewport, {
      decimate: {
        enabled: !!decimateConfig.enabled,
        epsilon: decimateConfig.epsilon
      }
    });
    const worldPoints = annotation.data.contour.polyline;
    annotation.data.handles.points = [
      worldPoints[0],
      worldPoints[worldPoints.length - 1]
    ];
    if (annotation.data.isOpenUShapeContour) {
      annotation.data.openUShapeContourVectorToPeak = findOpenUShapedContourVectorToPeak(fusedCanvasPoints, viewport);
    }
    triggerAnnotationModified(annotation, element);
  }
  this.isEditingOpen = false;
  this.editData = void 0;
  this.commonData = void 0;
  triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  this.deactivateOpenContourEdit(element);
}
function cancelOpenContourEdit(element) {
  this.completeOpenContourEdit(element);
}
function registerOpenContourEditLoop(toolInstance) {
  toolInstance.activateOpenContourEdit = activateOpenContourEdit.bind(toolInstance);
  toolInstance.deactivateOpenContourEdit = deactivateOpenContourEdit.bind(toolInstance);
  toolInstance.mouseDragOpenContourEditCallback = mouseDragOpenContourEditCallback.bind(toolInstance);
  toolInstance.mouseUpOpenContourEditCallback = mouseUpOpenContourEditCallback.bind(toolInstance);
  toolInstance.fuseEditPointsWithOpenContour = fuseEditPointsWithOpenContour.bind(toolInstance);
  toolInstance.finishEditOpenOnSecondCrossing = finishEditOpenOnSecondCrossing.bind(toolInstance);
  toolInstance.checkIfShouldOverwriteAnEnd = checkIfShouldOverwriteAnEnd.bind(toolInstance);
  toolInstance.fuseEditPointsForOpenContourEndEdit = fuseEditPointsForOpenContourEndEdit.bind(toolInstance);
  toolInstance.openContourEditOverwriteEnd = openContourEditOverwriteEnd.bind(toolInstance);
  toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);
  toolInstance.completeOpenContourEdit = completeOpenContourEdit.bind(toolInstance);
}
var openContourEditLoop_default = registerOpenContourEditLoop;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEndEditLoop.js
var { getSubPixelSpacingAndXYDirections: getSubPixelSpacingAndXYDirections5 } = polyline_exports;
function activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle) {
  this.isDrawing = true;
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const enabledElement = getEnabledElement(element);
  const { viewport } = enabledElement;
  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections5(viewport, this.configuration.subPixelResolution);
  const canvasPoints = annotation.data.contour.polyline.map(viewport.worldToCanvas);
  const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;
  if (handleIndexGrabbed === 0) {
    canvasPoints.reverse();
  }
  let movingTextBox = false;
  if (handle?.worldPosition) {
    movingTextBox = true;
  }
  this.drawData = {
    canvasPoints,
    polylineIndex: canvasPoints.length - 1
  };
  this.commonData = {
    annotation,
    viewportIdsToRender,
    spacing,
    xDir,
    yDir,
    movingTextBox
  };
  state.isInteractingWithTool = true;
  element.addEventListener(Events_default.MOUSE_UP, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.MOUSE_DRAG, this.mouseDragDrawCallback);
  element.addEventListener(Events_default.MOUSE_CLICK, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.TOUCH_END, this.mouseUpDrawCallback);
  element.addEventListener(Events_default.TOUCH_DRAG, this.mouseDragDrawCallback);
  element.addEventListener(Events_default.TOUCH_TAP, this.mouseUpDrawCallback);
  hideElementCursor(element);
}
function registerOpenContourEndEditLoop(toolInstance) {
  toolInstance.activateOpenContourEndEdit = activateOpenContourEndEdit.bind(toolInstance);
}
var openContourEndEditLoop_default = registerOpenContourEndEditLoop;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataWorld.js
function getContourHolesDataWorld(annotation) {
  const childAnnotationUIDs = annotation.childAnnotationUIDs ?? [];
  return childAnnotationUIDs.map((uid) => getAnnotation(uid).data.contour.polyline);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataCanvas.js
function getContourHolesDataCanvas(annotation, viewport) {
  const worldHoleContours = getContourHolesDataWorld(annotation);
  const canvasHoleContours = [];
  worldHoleContours.forEach((worldHoleContour) => {
    const numPoints = worldHoleContour.length;
    const canvasHoleContour = new Array(numPoints);
    for (let i = 0; i < numPoints; i++) {
      canvasHoleContour[i] = viewport.worldToCanvas(worldHoleContour[i]);
    }
    canvasHoleContours.push(canvasHoleContour);
  });
  return canvasHoleContours;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/renderMethods.js
var { pointsAreWithinCloseContourProximity: pointsAreWithinCloseContourProximity3 } = polyline_exports;
function _getRenderingOptions(enabledElement, annotation) {
  const styleSpecifier = {
    toolGroupId: this.toolGroupId,
    toolName: this.getToolName(),
    viewportId: enabledElement.viewport.id,
    annotationUID: annotation.annotationUID
  };
  const { lineWidth, lineDash, color, fillColor, fillOpacity } = this.getAnnotationStyle({
    annotation,
    styleSpecifier
  });
  const { closed: isClosedContour } = annotation.data.contour;
  const options = {
    color,
    width: lineWidth,
    lineDash,
    fillColor,
    fillOpacity,
    closePath: isClosedContour
  };
  return options;
}
function renderContour(enabledElement, svgDrawingHelper, annotation) {
  if (!enabledElement?.viewport?.getImageData()) {
    return;
  }
  if (annotation.data.contour.closed) {
    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);
  } else {
    if (annotation.data.isOpenUShapeContour) {
      calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation);
      this.renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation);
    } else {
      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
    }
  }
}
function calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation) {
  if (!annotation.data.openUShapeContourVectorToPeak) {
    annotation.data.openUShapeContourVectorToPeak = findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);
  }
}
function renderClosedContour(enabledElement, svgDrawingHelper, annotation) {
  if (annotation.parentAnnotationUID) {
    return;
  }
  const { viewport } = enabledElement;
  const options = this._getRenderingOptions(enabledElement, annotation);
  const canvasPolyline = annotation.data.contour.polyline.map((worldPos) => viewport.worldToCanvas(worldPos));
  const childContours = getContourHolesDataCanvas(annotation, viewport);
  const allContours = [canvasPolyline, ...childContours];
  const polylineUID = "1";
  drawPath(svgDrawingHelper, annotation.annotationUID, polylineUID, allContours, options);
}
function renderOpenContour(enabledElement, svgDrawingHelper, annotation) {
  const { viewport } = enabledElement;
  const options = this._getRenderingOptions(enabledElement, annotation);
  const canvasPoints = annotation.data.contour.polyline.map((worldPos) => viewport.worldToCanvas(worldPos));
  const polylineUID = "1";
  drawPolyline(svgDrawingHelper, annotation.annotationUID, polylineUID, canvasPoints, options);
  const activeHandleIndex = annotation.data.handles.activeHandleIndex;
  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {
    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;
    const handleGroupUID = "0";
    const handlePoints = [
      canvasPoints[0],
      canvasPoints[canvasPoints.length - 1]
    ];
    if (activeHandleIndex === 0) {
      handlePoints.shift();
    } else if (activeHandleIndex === 1) {
      handlePoints.pop();
    }
    drawHandles_default(svgDrawingHelper, annotation.annotationUID, handleGroupUID, handlePoints, {
      color: options.color,
      handleRadius: radius
    });
  }
  if (activeHandleIndex !== null) {
    const handleGroupUID = "1";
    const indexOfCanvasPoints = activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;
    const handlePoint = canvasPoints[indexOfCanvasPoints];
    drawHandles_default(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [handlePoint], { color: options.color });
  }
}
function renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation) {
  const { viewport } = enabledElement;
  const { openUShapeContourVectorToPeak } = annotation.data;
  const { polyline } = annotation.data.contour;
  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
  if (!openUShapeContourVectorToPeak) {
    return;
  }
  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);
  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);
  const openUShapeContourVectorToPeakCanvas = [
    viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),
    viewport.worldToCanvas(openUShapeContourVectorToPeak[1])
  ];
  const options = this._getRenderingOptions(enabledElement, annotation);
  drawPolyline(svgDrawingHelper, annotation.annotationUID, "first-to-last", [firstCanvasPoint, lastCanvasPoint], {
    color: options.color,
    width: options.width,
    closePath: false,
    lineDash: "2,2"
  });
  drawPolyline(svgDrawingHelper, annotation.annotationUID, "midpoint-to-open-contour", [
    openUShapeContourVectorToPeakCanvas[0],
    openUShapeContourVectorToPeakCanvas[1]
  ], {
    color: options.color,
    width: options.width,
    closePath: false,
    lineDash: "2,2"
  });
}
function renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation) {
  const options = this._getRenderingOptions(enabledElement, annotation);
  const { allowOpenContours } = this.configuration;
  const { canvasPoints } = this.drawData;
  options.closePath = false;
  drawPolyline(svgDrawingHelper, annotation.annotationUID, "1", canvasPoints, options);
  if (allowOpenContours) {
    const firstPoint = canvasPoints[0];
    const lastPoint = canvasPoints[canvasPoints.length - 1];
    if (pointsAreWithinCloseContourProximity3(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
      drawPolyline(svgDrawingHelper, annotation.annotationUID, "2", [lastPoint, firstPoint], options);
    } else {
      const handleGroupUID = "0";
      drawHandles_default(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [firstPoint], { color: options.color, handleRadius: 2 });
    }
  }
}
function renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {
  const { viewport } = enabledElement;
  const { fusedCanvasPoints } = this.editData;
  if (fusedCanvasPoints === void 0) {
    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);
    return;
  }
  const childContours = getContourHolesDataCanvas(annotation, viewport);
  const allContours = [fusedCanvasPoints, ...childContours];
  const options = this._getRenderingOptions(enabledElement, annotation);
  const polylineUIDToRender = "preview-1";
  if (annotation.parentAnnotationUID && options.fillOpacity) {
    options.fillOpacity = 0;
  }
  drawPath(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, allContours, options);
}
function renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {
  const { fusedCanvasPoints } = this.editData;
  if (fusedCanvasPoints === void 0) {
    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
    return;
  }
  const options = this._getRenderingOptions(enabledElement, annotation);
  const polylineUIDToRender = "preview-1";
  drawPolyline(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, fusedCanvasPoints, options);
}
function renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation) {
  if (annotation.parentAnnotationUID) {
    return;
  }
  const { viewport } = enabledElement;
  const options = this._getRenderingOptions(enabledElement, annotation);
  const canvasPolyline = annotation.data.contour.polyline.map((worldPos) => viewport.worldToCanvas(worldPos));
  const childContours = getContourHolesDataCanvas(annotation, viewport);
  const polylineUID = "1";
  const center = canvasPolyline[0];
  const radius = 6;
  const numberOfPoints = 100;
  const circlePoints = [];
  for (let i = 0; i < numberOfPoints; i++) {
    const angle = i / numberOfPoints * 2 * Math.PI;
    const x = center[0] + radius * Math.cos(angle);
    const y = center[1] + radius * Math.sin(angle);
    circlePoints.push([x, y]);
  }
  const crosshair = [
    [center[0] - radius * 2, center[1]],
    [center[0] + radius * 2, center[1]],
    [center[0], center[1] - radius * 2],
    [center[0], center[1] + radius * 2]
  ];
  drawPath(svgDrawingHelper, annotation.annotationUID, polylineUID + "-crosshair_v", [crosshair[0], crosshair[1]], options);
  drawPath(svgDrawingHelper, annotation.annotationUID, polylineUID + "-crosshair_h", [crosshair[2], crosshair[3]], options);
  const allContours = [circlePoints, ...childContours];
  drawPath(svgDrawingHelper, annotation.annotationUID, polylineUID, allContours, options);
}
function registerRenderMethods(toolInstance) {
  toolInstance.renderContour = renderContour.bind(toolInstance);
  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);
  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);
  toolInstance.renderPointContourWithMarker = renderPointContourWithMarker.bind(toolInstance);
  toolInstance.renderOpenUShapedContour = renderOpenUShapedContour.bind(toolInstance);
  toolInstance.renderContourBeingDrawn = renderContourBeingDrawn.bind(toolInstance);
  toolInstance.renderClosedContourBeingEdited = renderClosedContourBeingEdited.bind(toolInstance);
  toolInstance.renderOpenContourBeingEdited = renderOpenContourBeingEdited.bind(toolInstance);
  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);
}
var renderMethods_default = registerRenderMethods;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js
var drawing_exports = {};
__export(drawing_exports, {
  getTextBoxCoordsCanvas: () => getTextBoxCoordsCanvas
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js
function getTextBoxCoordsCanvas(annotationCanvasPoints) {
  const corners = _determineCorners(annotationCanvasPoints);
  const centerY = (corners.top[1] + corners.bottom[1]) / 2;
  const textBoxCanvas = [corners.right[0], centerY];
  return textBoxCanvas;
}
function _determineCorners(canvasPoints) {
  const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);
  const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);
  const right = handlesLeftToRight[handlesLeftToRight.length - 1];
  const top = handlesTopToBottom[0];
  const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];
  return {
    top,
    bottom,
    right
  };
  function _compareX(a, b) {
    return a[0] < b[0] ? -1 : 1;
  }
  function _compareY(a, b) {
    return a[1] < b[1] ? -1 : 1;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js
function isViewportPreScaled(viewport, targetId) {
  if (viewport instanceof BaseVolumeViewport_default) {
    const volumeId = utilities_exports.getVolumeId(targetId);
    const volume = cache_default.getVolume(volumeId);
    return !!volume?.scaling && Object.keys(volume.scaling).length > 0;
  } else if (viewport instanceof StackViewport_default) {
    const { preScale } = viewport.getImageData() || {};
    return !!preScale?.scaled;
  } else {
    return false;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/calculatePerimeter.js
function calculatePerimeter(polyline, closed2) {
  let perimeter = 0;
  for (let i = 0; i < polyline.length - 1; i++) {
    const point1 = polyline[i];
    const point2 = polyline[i + 1];
    perimeter += Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));
  }
  if (closed2) {
    const firstPoint = polyline[0];
    const lastPoint = polyline[polyline.length - 1];
    perimeter += Math.sqrt(Math.pow(lastPoint[0] - firstPoint[0], 2) + Math.pow(lastPoint[1] - firstPoint[1], 2));
  }
  return perimeter;
}
var calculatePerimeter_default = calculatePerimeter;

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/ContourBaseTool.js
var ContourBaseTool = class extends AnnotationTool_default {
  constructor(toolProps, defaultToolProps) {
    super(toolProps, defaultToolProps);
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    let renderStatus = false;
    const { viewport } = enabledElement;
    const { element } = viewport;
    if (!viewport.getRenderingEngine()) {
      console.warn("Rendering Engine has been destroyed");
      return renderStatus;
    }
    let annotations = getAnnotations(this.getToolName(), element);
    if (!annotations?.length) {
      return renderStatus;
    }
    annotations = this.filterInteractableAnnotationsForElement(element, annotations);
    if (!annotations?.length) {
      return renderStatus;
    }
    const targetId = this.getTargetId(viewport);
    const styleSpecifier = {
      toolGroupId: this.toolGroupId,
      toolName: this.getToolName(),
      viewportId: enabledElement.viewport.id
    };
    for (let i = 0; i < annotations.length; i++) {
      const annotation = annotations[i];
      styleSpecifier.annotationUID = annotation.annotationUID;
      const annotationStyle = this.getAnnotationStyle({
        annotation,
        styleSpecifier
      });
      if (!annotationStyle.visibility) {
        continue;
      }
      const annotationRendered = this.renderAnnotationInstance({
        enabledElement,
        targetId,
        annotation,
        annotationStyle,
        svgDrawingHelper
      });
      renderStatus ||= annotationRendered;
      annotation.invalidated = false;
    }
    return renderStatus;
  }
  createAnnotation(evt) {
    const annotation = super.createAnnotation(evt);
    Object.assign(annotation.data, {
      contour: {
        polyline: [],
        closed: false
      }
    });
    Object.assign(annotation, {
      interpolationUID: "",
      autoGenerated: false
    });
    return annotation;
  }
  addAnnotation(annotation, element) {
    return addAnnotation(annotation, element);
  }
  cancelAnnotation(annotation) {
  }
  moveAnnotation(annotation, worldPosDelta) {
    const { points } = annotation.data.handles;
    for (let i = 0, numPoints = points.length; i < numPoints; i++) {
      const point = points[i];
      point[0] += worldPosDelta[0];
      point[1] += worldPosDelta[1];
      point[2] += worldPosDelta[2];
    }
    annotation.invalidated = true;
    getChildAnnotations(annotation).forEach((childAnnotation) => this.moveAnnotation(childAnnotation, worldPosDelta));
  }
  updateContourPolyline(annotation, polylineData, transforms, options) {
    const decimateConfig = this.configuration?.decimate || {};
    updateContourPolyline(annotation, polylineData, transforms, {
      decimate: {
        enabled: !!decimateConfig.enabled,
        epsilon: decimateConfig.epsilon
      },
      updateWindingDirection: options?.updateWindingDirection
    });
  }
  getPolylinePoints(annotation) {
    return annotation.data.contour?.polyline ?? annotation.data.polyline;
  }
  renderAnnotationInstance(renderContext) {
    const { enabledElement, annotationStyle, svgDrawingHelper } = renderContext;
    const annotation = renderContext.annotation;
    if (annotation.parentAnnotationUID) {
      return;
    }
    const { annotationUID } = annotation;
    const { viewport } = enabledElement;
    const { worldToCanvas } = viewport;
    const polylineCanvasPoints = this.getPolylinePoints(annotation).map((point) => worldToCanvas(point));
    const { lineWidth, lineDash, color, fillColor, fillOpacity } = annotationStyle;
    const childContours = getContourHolesDataCanvas(annotation, viewport);
    const allContours = [polylineCanvasPoints, ...childContours];
    drawPath(svgDrawingHelper, annotationUID, "contourPolyline", allContours, {
      color,
      lineDash,
      lineWidth: Math.max(0.1, lineWidth),
      fillColor,
      fillOpacity
    });
    return true;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js
var annotation_exports = {};
__export(annotation_exports, {
  AnnotationGroup: () => AnnotationGroup,
  FrameOfReferenceSpecificAnnotationManager: () => FrameOfReferenceSpecificAnnotationManager_default,
  config: () => config_exports,
  locking: () => annotationLocking_exports,
  selection: () => annotationSelection_exports,
  state: () => state5,
  visibility: () => annotationVisibility_exports
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationGroup.js
var AnnotationGroup = class {
  constructor() {
    this.annotationUIDs = /* @__PURE__ */ new Set();
    this._isVisible = true;
    this.visibleFilter = this.unboundVisibleFilter.bind(this);
  }
  unboundVisibleFilter(uid) {
    return !this._isVisible || !this.annotationUIDs.has(uid);
  }
  has(uid) {
    return this.annotationUIDs.has(uid);
  }
  setVisible(isVisible = true, baseEvent, filter) {
    if (this._isVisible === isVisible) {
      return;
    }
    this._isVisible = isVisible;
    this.annotationUIDs.forEach((uid) => {
      const annotation = getAnnotation(uid);
      if (!annotation) {
        this.annotationUIDs.delete(uid);
        return;
      }
      if (annotation.isVisible === isVisible) {
        return;
      }
      if (!isVisible && filter?.(uid) === false) {
        return;
      }
      annotation.isVisible = isVisible;
      const eventDetail = {
        ...baseEvent,
        annotation
      };
      triggerEvent(eventTarget_default, Events_default.ANNOTATION_MODIFIED, eventDetail);
    });
  }
  get isVisible() {
    return this._isVisible;
  }
  findNearby(uid, direction) {
    const uids = [...this.annotationUIDs];
    if (uids.length === 0) {
      return null;
    }
    if (!uid) {
      return uids[direction === 1 ? 0 : uids.length - 1];
    }
    const index = uids.indexOf(uid);
    if (index === -1 || index + direction < 0 || index + direction >= uids.length) {
      return null;
    }
    return uids[index + direction];
  }
  add(...annotationUIDs) {
    annotationUIDs.forEach((annotationUID) => this.annotationUIDs.add(annotationUID));
  }
  remove(...annotationUIDs) {
    annotationUIDs.forEach((annotationUID) => this.annotationUIDs.delete(annotationUID));
  }
  clear() {
    this.annotationUIDs.clear();
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js
var state5 = {
  ...annotationState_exports,
  ...state_exports,
  resetAnnotationManager
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/getInterpolationData.js
var DEFAULT_CONTOUR_SEG_TOOLNAME2 = "PlanarFreehandContourSegmentationTool";
function getInterpolationData(viewportData, filterParams = []) {
  const { viewport, sliceData, annotation } = viewportData;
  const interpolationDatas = /* @__PURE__ */ new Map();
  const { toolName, originalToolName } = annotation.metadata;
  const testToolName = originalToolName || toolName;
  const annotations = (getAnnotations(testToolName, viewport.element) || []).filter((annotation2) => !annotation2.metadata.originalToolName || annotation2.metadata.originalToolName === testToolName);
  if (testToolName !== DEFAULT_CONTOUR_SEG_TOOLNAME2) {
    const modifiedAnnotations = getAnnotations(DEFAULT_CONTOUR_SEG_TOOLNAME2, viewport.element);
    if (modifiedAnnotations?.length) {
      modifiedAnnotations.forEach((annotation2) => {
        const { metadata } = annotation2;
        if (metadata.originalToolName === testToolName && metadata.originalToolName !== metadata.toolName) {
          annotations.push(annotation2);
        }
      });
    }
  }
  if (!annotations?.length) {
    return interpolationDatas;
  }
  for (let i = 0; i < sliceData.numberOfSlices; i++) {
    const imageAnnotations = annotations.filter((x) => x.metadata.sliceIndex === i);
    if (!imageAnnotations?.length) {
      continue;
    }
    const filteredInterpolatedAnnotations = imageAnnotations.filter((imageAnnotation) => {
      return filterParams.every((x) => {
        const parent = x.parentKey ? x.parentKey(imageAnnotation) : imageAnnotation;
        const value = parent?.[x.key];
        if (Array.isArray(value)) {
          return value.every((item, index) => item === x.value[index]);
        }
        return value === x.value;
      });
    });
    if (filteredInterpolatedAnnotations.length) {
      interpolationDatas.set(i, filteredInterpolatedAnnotations);
    }
  }
  return interpolationDatas;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/getInterpolationDataCollection.js
function getInterpolationDataCollection(viewportData, filterParams) {
  const imageAnnotations = getInterpolationData(viewportData, filterParams);
  const interpolatedDataCollection = [];
  if (!imageAnnotations?.size) {
    return interpolatedDataCollection;
  }
  for (const annotations of imageAnnotations.values()) {
    annotations.forEach((annotation) => {
      interpolatedDataCollection.push(annotation);
    });
  }
  return interpolatedDataCollection;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/createPolylineToolData.js
function createPolylineToolData(polyline, handlePoints, referencedToolData) {
  const annotation = utilities_exports.deepMerge({
    data: {},
    metadata: {}
  }, referencedToolData);
  Object.assign(annotation, {
    highlighted: false,
    invalidated: true,
    autoGenerated: true,
    annotationUID: void 0,
    cachedStats: {},
    childAnnotationUIDs: [],
    parentAnnotationUID: void 0
  });
  Object.assign(annotation.data, {
    handles: {
      points: handlePoints.points || handlePoints || [],
      interpolationSources: handlePoints.sources,
      activeHandleIndex: null,
      textBox: {
        hasMoved: false,
        worldPosition: [0, 0, 0],
        worldBoundingBox: {
          topLeft: [0, 0, 0],
          topRight: [0, 0, 0],
          bottomLeft: [0, 0, 0],
          bottomRight: [0, 0, 0]
        }
      }
    },
    contour: {
      ...referencedToolData.data.contour,
      polyline
    }
  });
  return annotation;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/findAnnotationForInterpolation.js
function findAnnotationsForInterpolation(toolData, viewportData) {
  const interpolationData = getInterpolationData(viewportData, [
    {
      key: "interpolationUID",
      value: viewportData.interpolationUID
    }
  ]);
  const rangeToInterpolate = getRangeToInterpolate(interpolationData);
  if (!rangeToInterpolate) {
    console.warn("No annotations found to interpolate", interpolationData);
    return;
  }
  const sliceEdited = _getSlicePositionOfToolData(interpolationData, toolData.annotationUID);
  const interpolationList = [];
  for (let i = rangeToInterpolate[0] + 1; i < rangeToInterpolate[1]; i++) {
    if (_sliceNeedsInterpolating(interpolationData, i)) {
      const contourPair = _getBoundingPair(i, rangeToInterpolate, interpolationData);
      if (contourPair?.[0] === sliceEdited || contourPair?.[1] === sliceEdited) {
        _appendInterpolationList(contourPair, interpolationList, i);
      }
    }
  }
  return {
    interpolationData,
    interpolationList
  };
}
function getRangeToInterpolate(interpolationData) {
  let first = Infinity;
  let last = -Infinity;
  let found = false;
  for (const [sliceIndex, annotations] of interpolationData.entries()) {
    if (annotations.length) {
      first = Math.min(sliceIndex, first);
      last = Math.max(sliceIndex, last);
      found = true;
    }
  }
  if (!found) {
    return;
  }
  return [first, last];
}
function _getSlicePositionOfToolData(interpolationData, annotationUID) {
  for (const [sliceIndex, annotations] of interpolationData) {
    for (let j = 0; j < annotations.length; j++) {
      if (annotations[j].annotationUID === annotationUID) {
        return sliceIndex;
      }
    }
  }
  return;
}
function _sliceNeedsInterpolating(interpolationData, sliceIndex) {
  const annotations = interpolationData.get(sliceIndex);
  return !annotations?.length || annotations.length === 1 && annotations[0].autoGenerated;
}
function _appendInterpolationList(contourPair, interpolationList, itemIndex) {
  const [startIndex] = contourPair;
  interpolationList[startIndex] ||= {
    pair: contourPair,
    list: []
  };
  interpolationList[startIndex].list.push(itemIndex);
}
function _getBoundingPair(sliceIndex, sliceRange, interpolationData) {
  const annotationPair = [];
  let canInterpolate = true;
  for (let i = sliceIndex - 1; i >= sliceRange[0]; i--) {
    const annotations = interpolationData.get(i);
    if (annotations?.length) {
      if (annotations[0].autoGenerated) {
        continue;
      }
      if (annotations.length > 1) {
        canInterpolate = false;
      }
      annotationPair.push(i);
      break;
    }
  }
  if (!canInterpolate || !annotationPair.length) {
    return;
  }
  for (let i = sliceIndex + 1; i <= sliceRange[1]; i++) {
    const annotations = interpolationData.get(i);
    if (annotations?.length) {
      if (annotations[0].autoGenerated) {
        continue;
      }
      if (annotations.length > 1) {
        canInterpolate = false;
      }
      annotationPair.push(i);
      break;
    }
  }
  if (!canInterpolate || annotationPair.length < 2) {
    return;
  }
  return annotationPair;
}
var findAnnotationForInterpolation_default = findAnnotationsForInterpolation;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/selectHandles.js
var { PointsManager: PointsManager3 } = utilities_exports;
function selectHandles(polyline, handleCount = 12) {
  const handles = PointsManager3.create3(handleCount);
  handles.sources = [];
  const { sources: destPoints } = handles;
  const { length, sources: sourcePoints = [] } = polyline;
  const distance = 5;
  if (length < distance * 3) {
    return polyline.subselect(handleCount);
  }
  const interval = Math.floor(Math.max(2 * length / handleCount, distance * 2));
  sourcePoints.forEach(() => destPoints.push(PointsManager3.create3(handleCount)));
  const dotValues = createDotValues(polyline, distance);
  const minimumRegions = findMinimumRegions(dotValues, handleCount);
  const indices = [];
  if (minimumRegions?.length > 2) {
    let lastHandle = -1;
    const thirdInterval = interval / 3;
    minimumRegions.forEach((region) => {
      const [start, , end] = region;
      const midIndex = Math.ceil((start + end) / 2);
      if (end - lastHandle < thirdInterval) {
        return;
      }
      if (midIndex - start > 2 * thirdInterval) {
        addInterval(indices, lastHandle, start, interval, length);
        lastHandle = addInterval(indices, start, midIndex, interval, length);
      } else {
        lastHandle = addInterval(indices, lastHandle, midIndex, interval, length);
      }
      if (end - lastHandle > thirdInterval) {
        lastHandle = addInterval(indices, lastHandle, end, interval, length);
      }
    });
    const firstHandle = indices[0];
    const lastDistance = indexValue(firstHandle + length - lastHandle, length);
    if (lastDistance > 2 * thirdInterval) {
      addInterval(indices, lastHandle, firstHandle - thirdInterval, interval, length);
    }
  } else {
    const interval2 = Math.floor(length / handleCount);
    addInterval(indices, -1, length - interval2, interval2, length);
  }
  indices.forEach((index) => {
    const point = polyline.getPointArray(index);
    handles.push(point);
    sourcePoints.forEach((source, destSourceIndex) => destPoints[destSourceIndex].push(source.getPoint(index)));
  });
  return handles;
}
function createDotValues(polyline, distance = 6) {
  const { length } = polyline;
  const prevVec3 = vec3_exports.create();
  const nextVec3 = vec3_exports.create();
  const dotValues = new Float32Array(length);
  for (let i = 0; i < length; i++) {
    const point = polyline.getPoint(i);
    const prevPoint = polyline.getPoint(i - distance);
    const nextPoint = polyline.getPoint((i + distance) % length);
    vec3_exports.sub(prevVec3, point, prevPoint);
    vec3_exports.sub(nextVec3, nextPoint, point);
    const dot2 = vec3_exports.dot(prevVec3, nextVec3) / (vec3_exports.len(prevVec3) * vec3_exports.len(nextVec3));
    dotValues[i] = dot2;
  }
  return dotValues;
}
function findMinimumRegions(dotValues, handleCount) {
  const { max, deviation } = getStats(dotValues);
  const { length } = dotValues;
  if (deviation < 0.01 || length < handleCount * 3) {
    return [];
  }
  const inflection = [];
  let pair = null;
  let minValue;
  let minIndex = 0;
  for (let i = 0; i < length; i++) {
    const dot2 = dotValues[i];
    if (dot2 < max - deviation) {
      if (pair) {
        pair[2] = i;
        if (dot2 < minValue) {
          minValue = dot2;
          minIndex = i;
        }
        pair[1] = minIndex;
      } else {
        minValue = dot2;
        minIndex = i;
        pair = [i, i, i];
      }
    } else {
      if (pair) {
        inflection.push(pair);
        pair = null;
      }
    }
  }
  if (pair) {
    if (inflection[0][0] === 0) {
      inflection[0][0] = pair[0];
    } else {
      pair[1] = minIndex;
      pair[2] = length - 1;
      inflection.push(pair);
    }
  }
  return inflection;
}
function addInterval(indices, start, finish, interval, length) {
  if (finish < start) {
    finish += length;
  }
  const distance = finish - start;
  const count = Math.ceil(distance / interval);
  if (count <= 0) {
    if (indices[indices.length - 1] !== finish) {
      indices.push(indexValue(finish, length));
    }
    return finish;
  }
  for (let i = 1; i <= count; i++) {
    const index = indexValue(start + i * distance / count, length);
    indices.push(index);
  }
  return indices[indices.length - 1];
}
function indexValue(v, length) {
  return (Math.round(v) + length) % length;
}
function getStats(dotValues) {
  const { length } = dotValues;
  let sum = 0;
  let min = Infinity;
  let max = -Infinity;
  let sumSq = 0;
  for (let i = 0; i < length; i++) {
    const dot2 = dotValues[i];
    sum += dot2;
    min = Math.min(min, dot2);
    max = Math.max(max, dot2);
  }
  const mean = sum / length;
  for (let i = 0; i < length; i++) {
    const valueDiff = dotValues[i] - mean;
    sumSq += valueDiff * valueDiff;
  }
  return {
    mean,
    max,
    min,
    sumSq,
    deviation: Math.sqrt(sumSq / length)
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/updateChildInterpolationUID.js
function updateChildInterpolationUID(annotation) {
  const { parentAnnotationUID, annotationUID } = annotation;
  if (!parentAnnotationUID) {
    return annotation.interpolationUID;
  }
  const parentAnnotation = state5.getAnnotation(parentAnnotationUID);
  const { interpolationUID } = parentAnnotation;
  const index = parentAnnotation.childAnnotationUIDs.indexOf(annotationUID);
  annotation.interpolationUID = `${interpolationUID}-${index}`;
  return annotation.interpolationUID;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/interpolate.js
var { PointsManager: PointsManager4 } = utilities_exports;
var dP = 0.2;
function interpolate(viewportData) {
  if (!viewportData.annotation) {
    return;
  }
  const { isInterpolationUpdate, annotation } = viewportData;
  queueMicrotask(() => {
    try {
      if (isInterpolationUpdate) {
        annotation.isInterpolationUpdate = true;
        annotation.autoGenerated = false;
      }
      startInterpolation(viewportData);
    } finally {
      if (isInterpolationUpdate) {
        annotation.autoGenerated = true;
      }
    }
  });
}
function startInterpolation(viewportData) {
  const { annotation: toolData } = viewportData;
  updateChildInterpolationUID(toolData);
  const { interpolationData, interpolationList } = findAnnotationForInterpolation_default(toolData, viewportData) || {};
  if (!interpolationData || !interpolationList) {
    return;
  }
  const eventData = {
    toolName: toolData.metadata.toolName,
    toolType: toolData.metadata.toolName,
    viewport: viewportData.viewport
  };
  for (let i = 0; i < interpolationList.length; i++) {
    if (interpolationList[i]) {
      _linearlyInterpolateBetween(interpolationList[i].list, interpolationList[i].pair, interpolationData, eventData);
    }
  }
  const { id, renderingEngineId, element } = viewportData.viewport;
  const eventDetails = {
    annotation: toolData,
    element,
    viewportId: id,
    renderingEngineId
  };
  if (interpolationList.length) {
    triggerEvent(viewportData.viewport.element, Events_default.ANNOTATION_INTERPOLATION_PROCESS_COMPLETED, eventDetails);
  }
}
function _linearlyInterpolateBetween(indices, annotationPair, interpolationData, eventData) {
  const annotation0 = interpolationData.get(annotationPair[0])[0];
  const annotation1 = interpolationData.get(annotationPair[1])[0];
  const c1 = _generateClosedContour(annotation0.data.contour.polyline);
  const c2 = _generateClosedContour(annotation1.data.contour.polyline);
  const { c1Interp, c2Interp } = _generateInterpolationContourPair(c1, c2);
  c1Interp.kIndex = annotationPair[0];
  c2Interp.kIndex = annotationPair[1];
  indices.forEach(function(index) {
    _linearlyInterpolateContour(c1Interp, c2Interp, index, annotationPair, interpolationData, c1.x.length > c2.x.length, eventData);
  });
}
function _linearlyInterpolateContour(c1Interp, c2Interp, sliceIndex, annotationPair, interpolationData, c1HasMoreNodes, eventData) {
  const [startIndex, endIndex] = annotationPair;
  const zInterp = (sliceIndex - startIndex) / (endIndex - startIndex);
  const annotation0 = interpolationData.get(startIndex)[0];
  const annotation1 = interpolationData.get(endIndex)[0];
  const interpolated3DPoints = _generateInterpolatedOpenContour(c1Interp, c2Interp, zInterp, c1HasMoreNodes);
  const nearestAnnotation = zInterp > 0.5 ? annotation1 : annotation0;
  const handlePoints = selectHandles(interpolated3DPoints);
  if (interpolationData.has(sliceIndex)) {
    _editInterpolatedContour(interpolated3DPoints, handlePoints, sliceIndex, nearestAnnotation, eventData);
  } else {
    _addInterpolatedContour(interpolated3DPoints, handlePoints, sliceIndex, nearestAnnotation, eventData);
  }
}
function _addInterpolatedContour(interpolated3DPoints, handlePoints, sliceIndex, referencedToolData, eventData) {
  const points = interpolated3DPoints.points;
  const { viewport } = eventData;
  const interpolatedAnnotation = createPolylineToolData(points, handlePoints, referencedToolData);
  const viewRef = viewport.getViewReference({ sliceIndex });
  if (!viewRef) {
    throw new Error(`Can't find slice ${sliceIndex}`);
  }
  Object.assign(interpolatedAnnotation.metadata, viewRef);
  state5.addAnnotation(interpolatedAnnotation, viewport.element);
  referencedToolData.onInterpolationComplete?.(interpolatedAnnotation, referencedToolData);
  const { parentAnnotationUID } = referencedToolData;
  if (parentAnnotationUID) {
    const parentReferenced = state5.getAnnotation(parentAnnotationUID);
    const parentAnnotation = _findExistingAnnotation(parentReferenced, sliceIndex, eventData);
    createPolylineHole(viewport, parentAnnotation, interpolatedAnnotation);
  }
}
function _findExistingAnnotation(referencedToolData, sliceIndex, eventData) {
  const { viewport } = eventData;
  const annotations = state5.getAnnotations(referencedToolData.metadata.toolName, viewport.element);
  for (let i = 0; i < annotations.length; i++) {
    const annotation = annotations[i];
    if (annotation.interpolationUID === referencedToolData.interpolationUID && annotation.metadata.sliceIndex === sliceIndex) {
      return annotation;
    }
  }
}
function _editInterpolatedContour(interpolated3DPoints, handlePoints, sliceIndex, referencedToolData, eventData) {
  const oldAnnotationData = _findExistingAnnotation(referencedToolData, sliceIndex, eventData);
  const points = interpolated3DPoints.points;
  const interpolatedAnnotation = createPolylineToolData(points, handlePoints, oldAnnotationData);
  Object.assign(oldAnnotationData, {
    metadata: interpolatedAnnotation.metadata,
    data: interpolatedAnnotation.data
  });
}
function _generateInterpolatedOpenContour(c1ir, c2ir, zInterp, c1HasMoreNodes) {
  const indices = c1HasMoreNodes ? c1ir.I : c2ir.I;
  const c1 = PointsManager4.fromXYZ(c1ir);
  const c2 = PointsManager4.fromXYZ(c2ir);
  const { length } = c1;
  const cInterp = PointsManager4.create3(length);
  const vecSubtract = vec3_exports.create();
  const vecResult = vec3_exports.create();
  const c1Source = PointsManager4.create3(length);
  c1Source.kIndex = c1ir.kIndex;
  const c2Source = PointsManager4.create3(length);
  c2Source.kIndex = c2ir.kIndex;
  for (let i = 0; i < c1ir.x.length; i++) {
    if (indices[i]) {
      const c1point = c1.getPoint(i);
      const c2point = c2.getPoint(i);
      c1Source.push(c1point);
      c2Source.push(c2point);
      vec3_exports.sub(vecSubtract, c2point, c1point);
      cInterp.push(vec3_exports.scaleAndAdd(vecResult, c1point, vecSubtract, zInterp));
    }
  }
  cInterp.sources = [c1Source, c2Source];
  return cInterp;
}
function _generateInterpolationContourPair(c1, c2) {
  const cumPerim1 = _getCumulativePerimeter(c1);
  const cumPerim2 = _getCumulativePerimeter(c2);
  const interpNodes = Math.max(Math.ceil(cumPerim1[cumPerim1.length - 1] / dP), Math.ceil(cumPerim2[cumPerim2.length - 1] / dP));
  const cumPerim1Norm = _normalisedCumulativePerimeter(cumPerim1);
  const cumPerim2Norm = _normalisedCumulativePerimeter(cumPerim2);
  const numNodes1 = interpNodes + c2.x.length;
  const numNodes2 = interpNodes + c1.x.length;
  const perim1Interp = _getInterpolatedPerim(numNodes1, cumPerim1Norm);
  const perim2Interp = _getInterpolatedPerim(numNodes2, cumPerim2Norm);
  const perim1Ind = _getIndicatorArray(numNodes1 - 2, c1.x.length);
  const perim2Ind = _getIndicatorArray(numNodes2 - 2, c2.x.length);
  const nodesPerSegment1 = _getNodesPerSegment(perim1Interp, perim1Ind);
  const nodesPerSegment2 = _getNodesPerSegment(perim2Interp, perim2Ind);
  const c1i = _getSuperSampledContour(c1, nodesPerSegment1);
  const c2i = _getSuperSampledContour(c2, nodesPerSegment2);
  _shiftSuperSampledContourInPlace(c1i, c2i);
  return _reduceContoursToOriginNodes(c1i, c2i);
}
function _reduceContoursToOriginNodes(c1i, c2i) {
  const c1Interp = {
    x: [],
    y: [],
    z: [],
    I: []
  };
  const c2Interp = {
    x: [],
    y: [],
    z: [],
    I: []
  };
  for (let i = 0; i < c1i.x.length; i++) {
    if (c1i.I[i] || c2i.I[i]) {
      c1Interp.x.push(c1i.x[i]);
      c1Interp.y.push(c1i.y[i]);
      c1Interp.z.push(c1i.z[i]);
      c1Interp.I.push(c1i.I[i]);
      c2Interp.x.push(c2i.x[i]);
      c2Interp.y.push(c2i.y[i]);
      c2Interp.z.push(c2i.z[i]);
      c2Interp.I.push(c2i.I[i]);
    }
  }
  return {
    c1Interp,
    c2Interp
  };
}
function _shiftSuperSampledContourInPlace(c1i, c2i) {
  const c1iLength = c1i.x.length;
  const optimal = {
    startingNode: 0,
    totalSquaredXYLengths: Infinity
  };
  for (let startingNode = 0; startingNode < c1iLength; startingNode++) {
    let node2 = startingNode;
    let totalSquaredXYLengths = 0;
    for (let iteration = 0; iteration < c1iLength; iteration++) {
      totalSquaredXYLengths += (c1i.x[node2] - c2i.x[iteration]) ** 2 + (c1i.y[node2] - c2i.y[iteration]) ** 2 + (c1i.z[node2] - c2i.z[iteration]) ** 2;
      node2++;
      if (node2 === c1iLength) {
        node2 = 0;
      }
    }
    if (totalSquaredXYLengths < optimal.totalSquaredXYLengths) {
      optimal.totalSquaredXYLengths = totalSquaredXYLengths;
      optimal.startingNode = startingNode;
    }
  }
  const node = optimal.startingNode;
  _shiftCircularArray(c1i.x, node);
  _shiftCircularArray(c1i.y, node);
  _shiftCircularArray(c1i.z, node);
  _shiftCircularArray(c1i.I, node);
}
function _shiftCircularArray(arr, count) {
  count -= arr.length * Math.floor(count / arr.length);
  const slicedArray = arr.splice(0, count);
  arr.push(...slicedArray);
  return arr;
}
function _getSuperSampledContour(c, nodesPerSegment) {
  const ci = {
    x: [],
    y: [],
    z: [],
    I: []
  };
  for (let n = 0; n < c.x.length - 1; n++) {
    ci.x.push(c.x[n]);
    ci.y.push(c.y[n]);
    ci.z.push(c.z[n]);
    ci.I.push(true);
    const xSpacing = (c.x[n + 1] - c.x[n]) / (nodesPerSegment[n] + 1);
    const ySpacing = (c.y[n + 1] - c.y[n]) / (nodesPerSegment[n] + 1);
    const zSpacing = (c.z[n + 1] - c.z[n]) / (nodesPerSegment[n] + 1);
    for (let i = 0; i < nodesPerSegment[n] - 1; i++) {
      ci.x.push(ci.x[ci.x.length - 1] + xSpacing);
      ci.y.push(ci.y[ci.y.length - 1] + ySpacing);
      ci.z.push(ci.z[ci.z.length - 1] + zSpacing);
      ci.I.push(false);
    }
  }
  return ci;
}
function _getNodesPerSegment(perimInterp, perimInd) {
  const idx = [];
  for (let i = 0; i < perimInterp.length; ++i) {
    idx[i] = i;
  }
  idx.sort(function(a, b) {
    return perimInterp[a] < perimInterp[b] ? -1 : 1;
  });
  const perimIndSorted = [];
  for (let i = 0; i < perimInd.length; i++) {
    perimIndSorted.push(perimInd[idx[i]]);
  }
  const indicesOfOriginNodes = perimIndSorted.reduce(function(arr, elementValue, i) {
    if (elementValue) {
      arr.push(i);
    }
    return arr;
  }, []);
  const nodesPerSegment = [];
  for (let i = 0; i < indicesOfOriginNodes.length - 1; i++) {
    nodesPerSegment.push(indicesOfOriginNodes[i + 1] - indicesOfOriginNodes[i]);
  }
  return nodesPerSegment;
}
function _getIndicatorArray(numFalse, numTrue) {
  const perimInd = new Array(numFalse + numTrue);
  perimInd.fill(false, 0, numFalse);
  perimInd.fill(true, numFalse, numFalse + numTrue);
  return perimInd;
}
function _getInterpolatedPerim(numNodes, cumPerimNorm) {
  const diff = 1 / (numNodes - 1);
  const linspace = [diff];
  for (let i = 1; i < numNodes - 2; i++) {
    linspace.push(linspace[linspace.length - 1] + diff);
  }
  return linspace.concat(cumPerimNorm);
}
function _normalisedCumulativePerimeter(cumPerim) {
  const cumPerimNorm = [];
  for (let i = 0; i < cumPerim.length; i++) {
    cumPerimNorm.push(cumPerim[i] / cumPerim[cumPerim.length - 1]);
  }
  return cumPerimNorm;
}
function _getCumulativePerimeter(contour) {
  const cumulativePerimeter = [0];
  for (let i = 1; i < contour.x.length; i++) {
    const lengthOfSegment = Math.sqrt((contour.x[i] - contour.x[i - 1]) ** 2 + (contour.y[i] - contour.y[i - 1]) ** 2 + (contour.z[i] - contour.z[i - 1]) ** 2);
    cumulativePerimeter.push(cumulativePerimeter[i - 1] + lengthOfSegment);
  }
  return cumulativePerimeter;
}
function _generateClosedContour(points) {
  const c = {
    x: [],
    y: [],
    z: []
  };
  for (let i = 0; i < points.length; i++) {
    c.x[i] = points[i][0];
    c.y[i] = points[i][1];
    c.z[i] = points[i][2];
  }
  c.x.push(c.x[0]);
  c.y.push(c.y[0]);
  c.z.push(c.z[0]);
  return c;
}
var interpolate_default = interpolate;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/InterpolationManager/deleteRelatedAnnotations.js
function deleteRelatedAnnotations(viewportData) {
  const { annotation } = viewportData;
  const interpolationAnnotations = getInterpolationData(viewportData, [
    { key: "interpolationUID", value: viewportData.interpolationUID }
  ]);
  const referencedSliceIndex = annotation.metadata.sliceIndex;
  let minInterpolation = -1;
  let maxInterpolation = viewportData.sliceData.numberOfSlices;
  for (const [sliceIndex, annotations] of interpolationAnnotations.entries()) {
    if (sliceIndex === referencedSliceIndex) {
      continue;
    }
    const nonInterpolated = annotations.find((annotation2) => !annotation2.autoGenerated);
    if (!nonInterpolated) {
      continue;
    }
    if (sliceIndex < referencedSliceIndex) {
      minInterpolation = Math.max(sliceIndex, minInterpolation);
    } else {
      maxInterpolation = Math.min(sliceIndex, maxInterpolation);
    }
  }
  const removedAnnotations = [];
  for (const [sliceIndex, annotations] of interpolationAnnotations.entries()) {
    if (sliceIndex <= minInterpolation || sliceIndex >= maxInterpolation || sliceIndex === referencedSliceIndex) {
      continue;
    }
    annotations.forEach((annotationToDelete) => {
      if (annotationToDelete.autoGenerated) {
        state5.removeAnnotation(annotationToDelete.annotationUID);
        removedAnnotations.push(annotationToDelete);
      }
    });
  }
  if (removedAnnotations.length) {
    const eventDetails = {
      annotations: removedAnnotations,
      element: viewportData.viewport.element,
      viewportId: viewportData.viewport.id,
      renderingEngineId: viewportData.viewport.getRenderingEngine().id
    };
    triggerEvent(viewportData.viewport.element, Events_default.INTERPOLATED_ANNOTATIONS_REMOVED, eventDetails);
  }
  if (minInterpolation >= 0 && maxInterpolation < viewportData.sliceData.numberOfSlices) {
    const nextAnnotation = interpolationAnnotations.get(maxInterpolation)[0];
    const viewportNewData = {
      viewport: viewportData.viewport,
      sliceData: {
        numberOfSlices: viewportData.sliceData.numberOfSlices,
        imageIndex: nextAnnotation.metadata.sliceIndex
      },
      annotation: nextAnnotation,
      interpolationUID: nextAnnotation.interpolationUID
    };
    interpolate_default(viewportNewData);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js
function getViewportForAnnotation(annotation) {
  const viewports = getViewportsForAnnotation(annotation);
  if (!viewports?.length) {
    return void 0;
  }
  const viewport = viewports.find((viewport2) => viewport2.getImageIds().some((imageId) => imageId === annotation.metadata.referencedImageId));
  return viewport ?? viewports[0];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/InterpolationManager/InterpolationManager.js
var { uuidv4: uuidv42 } = utilities_exports;
var ChangeTypesForInterpolation = [
  ChangeTypes_default.HandlesUpdated,
  ChangeTypes_default.InterpolationUpdated
];
var _InterpolationManager = class _InterpolationManager {
  static addTool(toolName) {
    if (!this.toolNames.includes(toolName)) {
      this.toolNames.push(toolName);
    }
  }
  static removeTool(toolName) {
    if (this.toolNames.includes(toolName)) {
      this.toolNames = this.toolNames.filter((name) => name !== toolName);
    }
  }
  static acceptAutoGenerated(annotationGroupSelector, selector = {}) {
    const { toolNames, segmentationId, segmentIndex, sliceIndex } = selector;
    for (const toolName of toolNames || _InterpolationManager.toolNames) {
      const annotations = state5.getAnnotations(toolName, annotationGroupSelector);
      if (!annotations?.length) {
        continue;
      }
      for (const annotation of annotations) {
        const { interpolationUID, data, autoGenerated, metadata } = annotation;
        if (interpolationUID) {
          annotation.interpolationCompleted = true;
        }
        if (!autoGenerated) {
          continue;
        }
        if (segmentIndex && segmentIndex !== data.segmentation.segmentIndex) {
          continue;
        }
        if (sliceIndex !== void 0 && metadata && sliceIndex !== metadata.sliceIndex) {
          continue;
        }
        if (segmentationId && segmentationId !== data.segmentation.segmentationId) {
          continue;
        }
        addContourSegmentationAnnotation(annotation);
        annotation.autoGenerated = false;
      }
    }
  }
};
_InterpolationManager.toolNames = [];
_InterpolationManager.handleAnnotationCompleted = (evt) => {
  const annotation = evt.detail.annotation;
  if (!annotation?.metadata) {
    return;
  }
  const { toolName, originalToolName } = annotation.metadata;
  if (!_InterpolationManager.toolNames.includes(toolName) && !_InterpolationManager.toolNames.includes(originalToolName)) {
    return;
  }
  const viewport = getViewportForAnnotation(annotation);
  if (!viewport) {
    console.warn("Unable to find viewport for", annotation);
    return;
  }
  const sliceData = getSliceData(viewport);
  const viewportData = {
    viewport,
    sliceData,
    annotation,
    interpolationUID: annotation.interpolationUID
  };
  const hasInterpolationUID = !!annotation.interpolationUID;
  annotation.autoGenerated = false;
  if (hasInterpolationUID) {
    deleteRelatedAnnotations(viewportData);
    interpolate_default(viewportData);
    return;
  }
  const filterData = [
    {
      key: "segmentIndex",
      value: annotation.data.segmentation.segmentIndex,
      parentKey: (annotation2) => annotation2.data.segmentation
    },
    {
      key: "viewPlaneNormal",
      value: annotation.metadata.viewPlaneNormal,
      parentKey: (annotation2) => annotation2.metadata
    },
    {
      key: "viewUp",
      value: annotation.metadata.viewUp,
      parentKey: (annotation2) => annotation2.metadata
    }
  ];
  let interpolationAnnotations = getInterpolationDataCollection(viewportData, filterData);
  const { sliceIndex } = annotation.metadata;
  const skipUIDs = /* @__PURE__ */ new Set();
  interpolationAnnotations.forEach((interpolationAnnotation) => {
    if (interpolationAnnotation.interpolationCompleted || interpolationAnnotation.metadata.sliceIndex === sliceIndex) {
      const { interpolationUID } = interpolationAnnotation;
      skipUIDs.add(interpolationUID);
    }
  });
  interpolationAnnotations = interpolationAnnotations.filter((interpolationAnnotation) => !skipUIDs.has(interpolationAnnotation.interpolationUID));
  annotation.interpolationUID = interpolationAnnotations[0]?.interpolationUID || uuidv42();
  viewportData.interpolationUID = annotation.interpolationUID;
  interpolate_default(viewportData);
};
_InterpolationManager.handleAnnotationUpdate = (evt) => {
  const annotation = evt.detail.annotation;
  const { changeType = ChangeTypes_default.HandlesUpdated } = evt.detail;
  if (!annotation?.metadata) {
    return;
  }
  const { toolName, originalToolName } = annotation.metadata;
  if (!_InterpolationManager.toolNames.includes(toolName) && !_InterpolationManager.toolNames.includes(originalToolName) || !ChangeTypesForInterpolation.includes(changeType)) {
    return;
  }
  const viewport = getViewportForAnnotation(annotation);
  if (!viewport) {
    console.warn("Unable to find matching viewport for annotation interpolation", annotation);
    return;
  }
  if (annotation.autoGenerated) {
    addContourSegmentationAnnotation(annotation);
    annotation.autoGenerated = false;
  }
  const sliceData = getSliceData(viewport);
  const viewportData = {
    viewport,
    sliceData,
    annotation,
    interpolationUID: annotation.interpolationUID,
    isInterpolationUpdate: changeType === ChangeTypes_default.InterpolationUpdated
  };
  interpolate_default(viewportData);
};
_InterpolationManager.handleAnnotationDelete = (evt) => {
  const annotation = evt.detail.annotation;
  if (!annotation?.metadata) {
    return;
  }
  const { toolName } = annotation.metadata;
  if (!_InterpolationManager.toolNames.includes(toolName) || annotation.autoGenerated) {
    return;
  }
  const viewport = getViewportForAnnotation(annotation);
  if (!viewport) {
    console.warn("No viewport, can't delete interpolated results", annotation);
    return;
  }
  const sliceData = getSliceData(viewport);
  const viewportData = {
    viewport,
    sliceData,
    annotation,
    interpolationUID: annotation.interpolationUID
  };
  annotation.autoGenerated = false;
  deleteRelatedAnnotations(viewportData);
};
var InterpolationManager = _InterpolationManager;
function getSliceData(viewport) {
  const sliceData = {
    numberOfSlices: viewport.getNumberOfSlices(),
    imageIndex: viewport.getCurrentImageIdIndex()
  };
  return sliceData;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js
function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {
  toolGroupIds.forEach((toolGroupId) => {
    const toolGroup = getToolGroup_default(toolGroupId);
    if (!toolGroup) {
      console.warn(`ToolGroup not available for ${toolGroupId}`);
      return;
    }
    const viewportsInfo = toolGroup.getViewportsInfo();
    viewportsInfo.forEach((viewportInfo) => {
      const { renderingEngineId, viewportId } = viewportInfo;
      const renderingEngine = getRenderingEngine(renderingEngineId);
      if (!renderingEngine) {
        console.warn(`RenderingEngine not available for ${renderingEngineId}`);
        return;
      }
      const viewport = renderingEngine.getViewport(viewportId);
      triggerAnnotationRender_default(viewport.element);
    });
  });
}
var triggerAnnotationRenderForToolGroupIds_default = triggerAnnotationRenderForToolGroupIds;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js
var segmentLocking_exports = {};
__export(segmentLocking_exports, {
  getLockedSegmentIndices: () => getLockedSegmentIndices,
  isSegmentIndexLocked: () => isSegmentIndexLocked,
  setSegmentIndexLocked: () => setSegmentIndexLocked
});
function isSegmentIndexLocked(segmentationId, segmentIndex) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    throw new Error(`No segmentation state found for ${segmentationId}`);
  }
  const { segments } = segmentation;
  return segments[segmentIndex].locked;
}
function setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    throw new Error(`No segmentation state found for ${segmentationId}`);
  }
  const { segments } = segmentation;
  segments[segmentIndex].locked = locked;
  triggerSegmentationModified(segmentationId);
}
function getLockedSegmentIndices(segmentationId) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    throw new Error(`No segmentation state found for ${segmentationId}`);
  }
  const { segments } = segmentation;
  const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);
  return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js
var segmentationColor_exports = {};
__export(segmentationColor_exports, {
  addColorLUT: () => addColorLUT2,
  getSegmentIndexColor: () => getSegmentIndexColor,
  setColorLUT: () => setColorLUT,
  setSegmentIndexColor: () => setSegmentIndexColor
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js
function getNextColorLUTIndex() {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getNextColorLUTIndex();
}

// node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js
var CORNERSTONE_COLOR_LUT = [
  [0, 0, 0, 0],
  [221, 84, 84, 255],
  [77, 228, 121, 255],
  [166, 70, 235, 255],
  [189, 180, 116, 255],
  [109, 182, 196, 255],
  [204, 101, 157, 255],
  [123, 211, 94, 255],
  [93, 87, 218, 255],
  [225, 128, 80, 255],
  [73, 232, 172, 255],
  [181, 119, 186, 255],
  [176, 193, 112, 255],
  [105, 153, 200, 255],
  [208, 97, 120, 255],
  [90, 215, 101, 255],
  [135, 83, 222, 255],
  [229, 178, 76, 255],
  [122, 183, 181, 255],
  [190, 115, 171, 255],
  [149, 197, 108, 255],
  [100, 118, 205, 255],
  [212, 108, 93, 255],
  [86, 219, 141, 255],
  [183, 79, 226, 255],
  [233, 233, 72, 255],
  [118, 167, 187, 255],
  [194, 111, 146, 255],
  [116, 201, 104, 255],
  [115, 96, 209, 255],
  [216, 147, 89, 255],
  [82, 223, 188, 255],
  [230, 75, 224, 255],
  [163, 184, 121, 255],
  [114, 143, 191, 255],
  [198, 107, 114, 255],
  [99, 206, 122, 255],
  [153, 92, 213, 255],
  [220, 192, 85, 255],
  [78, 215, 227, 255],
  [234, 71, 173, 255],
  [141, 188, 117, 255],
  [110, 113, 195, 255],
  [202, 128, 103, 255],
  [95, 210, 157, 255],
  [195, 88, 217, 255],
  [206, 224, 81, 255],
  [74, 166, 231, 255],
  [185, 120, 139, 255],
  [113, 192, 113, 255],
  [133, 106, 199, 255],
  [207, 162, 98, 255],
  [91, 214, 198, 255],
  [221, 84, 198, 255],
  [159, 228, 77, 255],
  [70, 111, 235, 255],
  [189, 119, 116, 255],
  [109, 196, 138, 255],
  [165, 101, 204, 255],
  [211, 201, 94, 255],
  [87, 191, 218, 255],
  [225, 80, 153, 255],
  [106, 232, 73, 255],
  [124, 119, 186, 255],
  [193, 142, 112, 255],
  [105, 200, 168, 255],
  [203, 97, 208, 255],
  [184, 215, 90, 255],
  [83, 147, 222, 255],
  [229, 76, 101, 255],
  [122, 183, 130, 255],
  [146, 115, 190, 255],
  [197, 171, 108, 255],
  [100, 205, 205, 255],
  [212, 93, 177, 255],
  [141, 219, 86, 255],
  [79, 97, 226, 255],
  [233, 99, 72, 255],
  [118, 187, 150, 255],
  [173, 111, 194, 255],
  [197, 201, 104, 255],
  [96, 171, 209, 255],
  [216, 89, 137, 255],
  [94, 223, 82, 255],
  [107, 75, 230, 255],
  [184, 153, 121, 255],
  [114, 191, 175, 255],
  [198, 107, 191, 255],
  [166, 206, 99, 255],
  [92, 132, 213, 255],
  [220, 85, 91, 255],
  [78, 227, 115, 255],
  [159, 71, 234, 255],
  [188, 176, 117, 255],
  [110, 185, 195, 255],
  [202, 103, 161, 255],
  [129, 210, 95, 255],
  [88, 88, 217, 255],
  [224, 123, 81, 255],
  [74, 231, 166, 255],
  [177, 120, 185, 255],
  [179, 192, 113, 255],
  [106, 156, 199, 255],
  [207, 98, 125, 255],
  [91, 214, 96, 255],
  [130, 84, 221, 255],
  [228, 171, 77, 255],
  [70, 235, 221, 255],
  [189, 116, 174, 255],
  [153, 196, 109, 255],
  [101, 123, 204, 255],
  [211, 104, 94, 255],
  [87, 218, 136, 255],
  [177, 80, 225, 255],
  [232, 225, 73, 255],
  [119, 169, 186, 255],
  [193, 112, 149, 255],
  [121, 200, 105, 255],
  [111, 97, 208, 255],
  [215, 142, 90, 255],
  [83, 222, 181, 255],
  [229, 76, 229, 255],
  [165, 183, 122, 255],
  [115, 146, 190, 255],
  [197, 108, 119, 255],
  [100, 205, 118, 255],
  [148, 93, 212, 255],
  [219, 186, 86, 255],
  [79, 220, 226, 255],
  [233, 72, 179, 255],
  [144, 187, 118, 255],
  [111, 118, 194, 255],
  [201, 124, 104, 255],
  [96, 209, 153, 255],
  [189, 89, 216, 255],
  [211, 223, 82, 255],
  [75, 172, 230, 255],
  [184, 121, 142, 255],
  [117, 191, 114, 255],
  [130, 107, 198, 255],
  [206, 157, 99, 255],
  [92, 213, 193, 255],
  [220, 85, 203, 255],
  [165, 227, 78, 255],
  [71, 118, 234, 255],
  [188, 117, 117, 255],
  [110, 195, 135, 255],
  [161, 103, 202, 255],
  [210, 195, 95, 255],
  [88, 195, 217, 255],
  [224, 81, 158, 255],
  [113, 231, 74, 255],
  [123, 120, 185, 255],
  [192, 139, 113, 255],
  [106, 199, 164, 255],
  [198, 98, 207, 255],
  [188, 214, 91, 255],
  [84, 153, 221, 255],
  [228, 77, 108, 255],
  [70, 235, 84, 255],
  [143, 116, 189, 255],
  [196, 167, 109, 255],
  [101, 204, 199, 255],
  [211, 94, 182, 255],
  [147, 218, 87, 255],
  [80, 104, 225, 255],
  [232, 93, 73, 255],
  [119, 186, 147, 255],
  [170, 112, 193, 255],
  [200, 200, 105, 255],
  [97, 175, 208, 255],
  [215, 90, 142, 255],
  [100, 222, 83, 255],
  [101, 76, 229, 255],
  [183, 150, 122, 255],
  [115, 190, 171, 255],
  [197, 108, 194, 255],
  [170, 205, 100, 255],
  [93, 138, 212, 255],
  [219, 86, 97, 255],
  [79, 226, 110, 255],
  [153, 72, 233, 255],
  [187, 173, 118, 255],
  [111, 187, 194, 255],
  [201, 104, 165, 255],
  [134, 209, 96, 255],
  [89, 95, 216, 255],
  [223, 117, 82, 255],
  [75, 230, 159, 255],
  [174, 121, 184, 255],
  [182, 191, 114, 255],
  [107, 160, 198, 255],
  [206, 99, 130, 255],
  [92, 213, 92, 255],
  [124, 85, 220, 255],
  [227, 165, 78, 255],
  [71, 234, 214, 255],
  [188, 117, 176, 255],
  [156, 195, 110, 255],
  [103, 128, 202, 255],
  [210, 100, 95, 255],
  [88, 217, 131, 255],
  [170, 81, 224, 255],
  [231, 218, 74, 255],
  [120, 172, 185, 255],
  [192, 113, 153, 255],
  [125, 199, 106, 255],
  [107, 98, 207, 255],
  [214, 137, 91, 255],
  [84, 221, 175, 255],
  [222, 77, 228, 255],
  [194, 235, 70, 255],
  [116, 149, 189, 255],
  [196, 109, 123, 255],
  [101, 204, 114, 255],
  [143, 94, 211, 255],
  [218, 180, 87, 255],
  [80, 225, 225, 255],
  [232, 73, 186, 255],
  [147, 186, 119, 255],
  [112, 122, 193, 255],
  [200, 121, 105, 255],
  [97, 208, 148, 255],
  [184, 90, 215, 255],
  [216, 222, 83, 255],
  [76, 178, 229, 255],
  [183, 122, 145, 255],
  [121, 190, 115, 255],
  [126, 108, 197, 255],
  [205, 153, 100, 255],
  [93, 212, 187, 255],
  [219, 86, 208, 255],
  [171, 226, 79, 255],
  [72, 126, 233, 255],
  [187, 118, 121, 255],
  [111, 194, 132, 255],
  [157, 104, 201, 255],
  [209, 190, 96, 255],
  [89, 200, 216, 255],
  [223, 82, 164, 255],
  [120, 230, 75, 255],
  [121, 121, 184, 255],
  [191, 136, 114, 255],
  [107, 198, 160, 255],
  [192, 99, 206, 255],
  [193, 213, 92, 255],
  [85, 158, 220, 255],
  [227, 78, 115, 255],
  [71, 234, 78, 255],
  [141, 117, 188, 255],
  [195, 163, 110, 255],
  [103, 202, 194, 255],
  [210, 95, 186, 255],
  [153, 217, 88, 255],
  [81, 111, 224, 255]
];
var COLOR_LUT_default = CORNERSTONE_COLOR_LUT;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js
function addColorLUT(colorLUT, index) {
  const segmentationStateManager = defaultSegmentationStateManager;
  const indexToUse = index ?? getNextColorLUTIndex();
  let colorLUTToUse = [...colorLUT];
  if (!utilities_exports.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {
    console.warn("addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it");
    colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];
  }
  colorLUTToUse = colorLUTToUse.map((color) => {
    if (color.length === 3) {
      return [color[0], color[1], color[2], 255];
    }
    return color;
  });
  if (colorLUTToUse.length < 255) {
    const missingColorLUTs = COLOR_LUT_default.slice(colorLUTToUse.length);
    colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];
  }
  segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);
  return indexToUse;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js
function addColorLUT2(colorLUT, colorLUTIndex) {
  if (!colorLUT) {
    throw new Error("addColorLUT: colorLUT is required");
  }
  return addColorLUT(colorLUT, colorLUTIndex);
}
function setColorLUT(viewportId, segmentationId, colorLUTsIndex) {
  if (!getColorLUT(colorLUTsIndex)) {
    throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);
  }
  const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });
  if (!segmentationRepresentations) {
    throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);
  }
  segmentationRepresentations.forEach((segmentationRepresentation) => {
    segmentationRepresentation.colorLUTIndex = colorLUTsIndex;
  });
  triggerSegmentationRepresentationModified(viewportId, segmentationId);
}
function getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {
  const representations = getSegmentationRepresentations(viewportId, {
    segmentationId
  });
  if (!representations || representations.length === 0) {
    return null;
  }
  const representation = representations[0];
  const { colorLUTIndex } = representation;
  const colorLUT = getColorLUT(colorLUTIndex);
  let colorValue = colorLUT[segmentIndex];
  if (!colorValue) {
    if (typeof segmentIndex !== "number") {
      console.warn(`Can't create colour for LUT index ${segmentIndex}`);
      return null;
    }
    colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];
  }
  return colorValue;
}
function setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {
  const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);
  for (let i = 0; i < color.length; i++) {
    colorReference[i] = color[i];
  }
  triggerSegmentationRepresentationModified(viewportId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js
function getSegmentationRepresentationVisibility(viewportId, specifier) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSVGStyleForSegment.js
function getSVGStyleForSegment({ segmentationId, segmentIndex, viewportId, autoGenerated = false }) {
  const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);
  const segmentationVisible = getSegmentationRepresentationVisibility(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Contour
  });
  const activeSegmentation = getActiveSegmentation(viewportId);
  const isActive = activeSegmentation?.segmentationId === segmentationId;
  const style = segmentationStyle.getStyle({
    viewportId,
    segmentationId,
    type: SegmentationRepresentations_default.Contour,
    segmentIndex
  });
  const mergedConfig = style;
  let lineWidth = 1;
  let lineDash = void 0;
  let lineOpacity = 1;
  let fillOpacity = 0;
  if (autoGenerated) {
    lineWidth = mergedConfig.outlineWidthAutoGenerated ?? lineWidth;
    lineDash = mergedConfig.outlineDashAutoGenerated ?? lineDash;
    lineOpacity = mergedConfig.outlineOpacity ?? lineOpacity;
    fillOpacity = mergedConfig.fillAlphaAutoGenerated ?? fillOpacity;
  } else if (isActive) {
    lineWidth = mergedConfig.outlineWidth ?? lineWidth;
    lineDash = mergedConfig.outlineDash ?? lineDash;
    lineOpacity = mergedConfig.outlineOpacity ?? lineOpacity;
    fillOpacity = mergedConfig.fillAlpha ?? fillOpacity;
  } else {
    lineWidth = mergedConfig.outlineWidthInactive ?? lineWidth;
    lineDash = mergedConfig.outlineDashInactive ?? lineDash;
    lineOpacity = mergedConfig.outlineOpacityInactive ?? lineOpacity;
    fillOpacity = mergedConfig.fillAlphaInactive ?? fillOpacity;
  }
  if (getActiveSegmentIndex(segmentationId) === segmentIndex) {
    lineWidth += mergedConfig.activeSegmentOutlineWidthDelta;
  }
  lineWidth = mergedConfig.renderOutline ? lineWidth : 0;
  fillOpacity = mergedConfig.renderFill ? fillOpacity : 0;
  const color = `rgba(${segmentColor[0]}, ${segmentColor[1]}, ${segmentColor[2]}, ${lineOpacity})`;
  const fillColor = `rgb(${segmentColor[0]}, ${segmentColor[1]}, ${segmentColor[2]})`;
  const hiddenSegments = internalGetHiddenSegmentIndices(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Contour
  });
  const isVisible = !hiddenSegments.has(segmentIndex);
  return {
    color,
    fillColor,
    lineWidth,
    fillOpacity,
    lineDash,
    textbox: {
      color
    },
    visibility: segmentationVisible && isVisible
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/ContourSegmentationBaseTool.js
var _ContourSegmentationBaseTool = class _ContourSegmentationBaseTool extends ContourBaseTool {
  constructor(toolProps, defaultToolProps) {
    super(toolProps, defaultToolProps);
    if (this.configuration.interpolation?.enabled) {
      InterpolationManager.addTool(this.getToolName());
    }
  }
  onSetToolConfiguration() {
    if (this.configuration.interpolation?.enabled) {
      InterpolationManager.addTool(this.getToolName());
    } else {
      InterpolationManager.removeTool(this.getToolName());
    }
  }
  isContourSegmentationTool() {
    return true;
  }
  createAnnotation(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    const { viewport } = enabledElement;
    const contourAnnotation = super.createAnnotation(evt);
    if (!this.isContourSegmentationTool()) {
      return contourAnnotation;
    }
    const activeSeg = getActiveSegmentation(viewport.id);
    if (!activeSeg) {
      throw new Error("No active segmentation detected, create one before using scissors tool");
    }
    if (!activeSeg.representationData.Contour) {
      throw new Error(`A contour segmentation must be active`);
    }
    const { segmentationId } = activeSeg;
    const segmentIndex = getActiveSegmentIndex(segmentationId);
    return utilities_exports.deepMerge(contourAnnotation, {
      data: {
        segmentation: {
          segmentationId,
          segmentIndex
        }
      }
    });
  }
  addAnnotation(annotation, element) {
    const annotationUID = super.addAnnotation(annotation, element);
    if (this.isContourSegmentationTool()) {
      const contourSegAnnotation = annotation;
      addContourSegmentationAnnotation(contourSegAnnotation);
    }
    return annotationUID;
  }
  cancelAnnotation(annotation) {
    if (this.isContourSegmentationTool()) {
      removeContourSegmentationAnnotation(annotation);
    }
    super.cancelAnnotation(annotation);
  }
  getAnnotationStyle(context) {
    const annotationStyle = super.getAnnotationStyle(context);
    if (!this.isContourSegmentationTool()) {
      return annotationStyle;
    }
    const contourSegmentationStyle = this._getContourSegmentationStyle(context);
    return utilities_exports.deepMerge(annotationStyle, contourSegmentationStyle);
  }
  renderAnnotationInstance(renderContext) {
    const { annotation } = renderContext;
    const { invalidated } = annotation;
    const renderResult = super.renderAnnotationInstance(renderContext);
    if (invalidated && this.isContourSegmentationTool()) {
      const { segmentationId } = annotation.data.segmentation;
      triggerSegmentationDataModified(segmentationId);
      const viewportIds = getViewportIdsWithSegmentation(segmentationId);
      const toolGroupIds = viewportIds.map((viewportId) => {
        const toolGroup = getToolGroupForViewport_default(viewportId);
        return toolGroup.id;
      });
      triggerAnnotationRenderForToolGroupIds(toolGroupIds);
    }
    return renderResult;
  }
  _getContourSegmentationStyle(context) {
    const annotation = context.annotation;
    const { segmentationId, segmentIndex } = annotation.data.segmentation;
    const { viewportId } = context.styleSpecifier;
    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });
    if (!segmentationRepresentations?.length) {
      return {};
    }
    let segmentationRepresentation;
    if (segmentationRepresentations.length > 1) {
      segmentationRepresentation = segmentationRepresentations.find((rep) => rep.segmentationId === segmentationId && rep.type === SegmentationRepresentations_default.Contour);
    } else {
      segmentationRepresentation = segmentationRepresentations[0];
    }
    const { autoGenerated } = annotation;
    const segmentsLocked = getLockedSegmentIndices(segmentationId);
    const annotationLocked = segmentsLocked.includes(segmentIndex);
    const { color, fillColor, lineWidth, fillOpacity, lineDash, visibility } = getSVGStyleForSegment({
      segmentationId,
      segmentIndex,
      viewportId,
      autoGenerated
    });
    return {
      color,
      fillColor,
      lineWidth,
      fillOpacity,
      lineDash,
      textbox: {
        color
      },
      visibility,
      locked: annotationLocked
    };
  }
};
_ContourSegmentationBaseTool.PreviewSegmentIndex = 255;
var ContourSegmentationBaseTool = _ContourSegmentationBaseTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getPixelValueUnits.js
function getPixelValueUnitsImageId(imageId, options) {
  const generalSeriesModule = metaData_exports.get("generalSeriesModule", imageId);
  return getPixelValueUnits(generalSeriesModule.modality, imageId, options);
}
function getPixelValueUnits(modality, imageId, options) {
  if (modality === "CT") {
    return "HU";
  } else if (modality === "PT") {
    return _handlePTModality(imageId, options);
  } else {
    return "";
  }
}
function _handlePTModality(imageId, options) {
  if (!options.isPreScaled) {
    return "raw";
  }
  if (options.isSuvScaled) {
    return "SUV";
  }
  const generalSeriesModule = metaData_exports.get("generalSeriesModule", imageId);
  if (generalSeriesModule?.modality === "PT") {
    const petSeriesModule = metaData_exports.get("petSeriesModule", imageId);
    return petSeriesModule?.units || "unitless";
  }
  return "unknown";
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js
var { pointCanProjectOnLine: pointCanProjectOnLine2 } = polyline_exports;
var { EPSILON: EPSILON8 } = constants_exports;
var PARALLEL_THRESHOLD3 = 1 - EPSILON8;
var _PlanarFreehandROITool = class _PlanarFreehandROITool extends ContourSegmentationBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      storePointData: false,
      shadow: true,
      preventHandleOutsideImage: false,
      contourHoleAdditionModifierKey: KeyboardBindings.Shift,
      alwaysRenderOpenContourHandles: {
        enabled: false,
        radius: 2
      },
      allowOpenContours: true,
      closeContourProximity: 10,
      checkCanvasEditFallbackProximity: 6,
      makeClockWise: true,
      subPixelResolution: 4,
      smoothing: {
        smoothOnAdd: false,
        smoothOnEdit: false,
        knotsRatioPercentageOnAdd: 40,
        knotsRatioPercentageOnEdit: 40
      },
      interpolation: {
        enabled: false,
        onInterpolationComplete: null
      },
      decimate: {
        enabled: false,
        epsilon: 0.1
      },
      displayOnePointAsCrosshairs: false,
      calculateStats: true,
      getTextLines: defaultGetTextLines,
      statsCalculator: BasicStatsCalculator
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isDrawing = false;
    this.isEditingClosed = false;
    this.isEditingOpen = false;
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const annotation = this.createAnnotation(evt);
      this.addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.activateDraw(evt, annotation, viewportIdsToRender);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      if (annotation.data.contour.closed) {
        this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);
      } else {
        this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);
      }
      evt.preventDefault();
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { polyline: points } = annotation.data.contour;
      let previousPoint = viewport.worldToCanvas(points[0]);
      for (let i = 1; i < points.length; i++) {
        const p1 = previousPoint;
        const p2 = viewport.worldToCanvas(points[i]);
        const canProject = pointCanProjectOnLine2(canvasCoords, p1, p2, proximity);
        if (canProject) {
          return true;
        }
        previousPoint = p2;
      }
      if (!annotation.data.contour.closed) {
        return false;
      }
      const pStart = viewport.worldToCanvas(points[0]);
      const pEnd = viewport.worldToCanvas(points[points.length - 1]);
      return pointCanProjectOnLine2(canvasCoords, pStart, pEnd, proximity);
    };
    this.cancel = (element) => {
      const isDrawing = this.isDrawing;
      const isEditingOpen = this.isEditingOpen;
      const isEditingClosed = this.isEditingClosed;
      if (isDrawing) {
        this.cancelDrawing(element);
      } else if (isEditingOpen) {
        this.cancelOpenContourEdit(element);
      } else if (isEditingClosed) {
        this.cancelClosedContourEdit(element);
      }
    };
    this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {
      const { data } = annotation;
      const { cachedStats } = data;
      const { polyline: points, closed: closed2 } = data.contour;
      const targetIds = Object.keys(cachedStats);
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { imageData, metadata } = image;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const modalityUnitOptions = {
          isPreScaled: isViewportPreScaled(viewport, targetId),
          isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
        };
        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);
        const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {
          const polyline = data.contour.polyline;
          const numPoints = polyline.length;
          const projectedPolyline = new Array(numPoints);
          for (let i2 = 0; i2 < numPoints; i2++) {
            projectedPolyline[i2] = viewport.worldToCanvas(polyline[i2]);
          }
          const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY } = polyline_exports.getAABB(projectedPolyline);
          const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);
          const topLeftBBIndex = utilities_exports.transformWorldToIndex(imageData, topLeftBBWorld);
          const bottomRightBBWorld = viewport.canvasToWorld([
            canvasMaxX,
            canvasMaxY
          ]);
          const bottomRightBBIndex = utilities_exports.transformWorldToIndex(imageData, bottomRightBBWorld);
          return [topLeftBBIndex, bottomRightBBIndex];
        });
        const canvasPoint = canvasCoordinates[0];
        const originalWorldPoint = viewport.canvasToWorld(canvasPoint);
        const deltaXPoint = viewport.canvasToWorld([
          canvasPoint[0] + 1,
          canvasPoint[1]
        ]);
        const deltaYPoint = viewport.canvasToWorld([
          canvasPoint[0],
          canvasPoint[1] + 1
        ]);
        const deltaInX = vec3_exports.distance(originalWorldPoint, deltaXPoint);
        const deltaInY = vec3_exports.distance(originalWorldPoint, deltaYPoint);
        if (closed2) {
          this.updateClosedCachedStats({
            targetId,
            viewport,
            canvasCoordinates,
            points,
            imageData,
            metadata,
            cachedStats,
            modalityUnit,
            calibratedScale,
            deltaInX,
            deltaInY
          });
        } else {
          this.updateOpenCachedStats({
            metadata,
            canvasCoordinates,
            targetId,
            cachedStats,
            modalityUnit,
            calibratedScale,
            deltaInX,
            deltaInY
          });
        }
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {
      const { data } = annotation;
      const targetId = this.getTargetId(viewport);
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id,
        annotationUID: annotation.annotationUID
      };
      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
      if (!options.visibility) {
        return;
      }
      const textLines = this.configuration.getTextLines(data, targetId);
      if (!textLines || textLines.length === 0) {
        return;
      }
      const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));
      if (!data.handles.textBox.hasMoved) {
        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
        data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
      }
      const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
      const textBoxUID = "1";
      const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotation.annotationUID ?? "", textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
      const { x: left, y: top, width, height } = boundingBox;
      data.handles.textBox.worldBoundingBox = {
        topLeft: viewport.canvasToWorld([left, top]),
        topRight: viewport.canvasToWorld([left + width, top]),
        bottomLeft: viewport.canvasToWorld([left, top + height]),
        bottomRight: viewport.canvasToWorld([left + width, top + height])
      };
    };
    drawLoop_default(this);
    editLoopCommon_default(this);
    closedContourEditLoop_default(this);
    openContourEditLoop_default(this);
    openContourEndEditLoop_default(this);
    renderMethods_default(this);
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  filterInteractableAnnotationsForElement(element, annotations) {
    if (!annotations || !annotations.length) {
      return;
    }
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    let annotationsToDisplay;
    if (viewport instanceof VolumeViewport_default) {
      const camera = viewport.getCamera();
      const { spacingInNormalDirection } = utilities_exports.getTargetVolumeAndSpacingInNormalDir(viewport, camera);
      annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);
    } else {
      annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);
    }
    return annotationsToDisplay;
  }
  filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {
    const { viewPlaneNormal } = camera;
    const annotationsWithParallelNormals = annotations.filter((td) => {
      let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;
      if (!td.metadata.referencedImageId && !annotationViewPlaneNormal && td.metadata.FrameOfReferenceUID) {
        for (const point of td.data.contour.polyline) {
          const vector = vec3_exports.sub(vec3_exports.create(), point, camera.focalPoint);
          const dotProduct = vec3_exports.dot(vector, camera.viewPlaneNormal);
          if (!utilities_exports.isEqual(dotProduct, 0)) {
            return false;
          }
        }
        td.metadata.viewPlaneNormal = camera.viewPlaneNormal;
        td.metadata.cameraFocalPoint = camera.focalPoint;
        return true;
      }
      if (!annotationViewPlaneNormal) {
        const { referencedImageId } = td.metadata;
        const { imageOrientationPatient } = metaData_exports.get("imagePlaneModule", referencedImageId);
        const rowCosineVec = vec3_exports.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);
        const colCosineVec = vec3_exports.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);
        annotationViewPlaneNormal = vec3_exports.create();
        vec3_exports.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);
        td.metadata.viewPlaneNormal = annotationViewPlaneNormal;
      }
      const isParallel = Math.abs(vec3_exports.dot(viewPlaneNormal, annotationViewPlaneNormal)) > PARALLEL_THRESHOLD3;
      return annotationViewPlaneNormal && isParallel;
    });
    if (!annotationsWithParallelNormals.length) {
      return [];
    }
    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;
    const { focalPoint } = camera;
    const annotationsWithinSlice = [];
    for (const annotation of annotationsWithParallelNormals) {
      const data = annotation.data;
      const point = data.contour.polyline[0];
      if (!annotation.isVisible) {
        continue;
      }
      const dir = vec3_exports.create();
      vec3_exports.sub(dir, focalPoint, point);
      const dot2 = vec3_exports.dot(dir, viewPlaneNormal);
      if (Math.abs(dot2) < halfSpacingInNormalDirection) {
        annotationsWithinSlice.push(annotation);
      }
    }
    return annotationsWithinSlice;
  }
  isContourSegmentationTool() {
    return false;
  }
  createAnnotation(evt) {
    const worldPos = evt.detail.currentPoints.world;
    const contourAnnotation = super.createAnnotation(evt);
    const onInterpolationComplete = (annotation2) => {
      annotation2.data.handles.points.length = 0;
    };
    const annotation = utilities_exports.deepMerge(contourAnnotation, {
      data: {
        contour: {
          polyline: [[...worldPos]]
        },
        label: "",
        cachedStats: {}
      },
      onInterpolationComplete
    });
    return annotation;
  }
  getAnnotationStyle(context) {
    return super.getAnnotationStyle(context);
  }
  renderAnnotationInstance(renderContext) {
    const { enabledElement, targetId, svgDrawingHelper } = renderContext;
    const annotation = renderContext.annotation;
    let renderStatus = false;
    const { viewport, renderingEngine } = enabledElement;
    const isDrawing = this.isDrawing;
    const isEditingOpen = this.isEditingOpen;
    const isEditingClosed = this.isEditingClosed;
    if (!(isDrawing || isEditingOpen || isEditingClosed)) {
      if (this.configuration.displayOnePointAsCrosshairs && annotation.data.contour.polyline.length === 1) {
        this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);
      } else {
        this.renderContour(enabledElement, svgDrawingHelper, annotation);
      }
    } else {
      const activeAnnotationUID = this.commonData.annotation.annotationUID;
      if (annotation.annotationUID === activeAnnotationUID) {
        if (isDrawing) {
          this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);
        } else if (isEditingClosed) {
          this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);
        } else if (isEditingOpen) {
          this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);
        } else {
          throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);
        }
      } else {
        if (this.configuration.displayOnePointAsCrosshairs && annotation.data.contour.polyline.length === 1) {
          this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);
        } else {
          this.renderContour(enabledElement, svgDrawingHelper, annotation);
        }
      }
      renderStatus = true;
    }
    if (!this.configuration.calculateStats) {
      return;
    }
    this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);
    this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);
    return renderStatus;
  }
  _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {
    const activeAnnotationUID = this.commonData?.annotation.annotationUID;
    if (annotation.annotationUID === activeAnnotationUID && !this.commonData?.movingTextBox) {
      return;
    }
    if (!this.commonData?.movingTextBox) {
      const { data } = annotation;
      if (!data.cachedStats[targetId]?.unit) {
        data.cachedStats[targetId] = {
          Modality: null,
          area: null,
          max: null,
          mean: null,
          stdDev: null,
          areaUnit: null,
          unit: null
        };
        this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
      } else if (annotation.invalidated) {
        this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
      }
    }
  }
  updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, deltaInX, deltaInY }) {
    const { scale: scale2, areaUnit, unit } = calibratedScale;
    const { voxelManager } = viewport.getImageData();
    const worldPosIndex = utilities_exports.transformWorldToIndex(imageData, points[0]);
    worldPosIndex[0] = Math.floor(worldPosIndex[0]);
    worldPosIndex[1] = Math.floor(worldPosIndex[1]);
    worldPosIndex[2] = Math.floor(worldPosIndex[2]);
    let iMin = worldPosIndex[0];
    let iMax = worldPosIndex[0];
    let jMin = worldPosIndex[1];
    let jMax = worldPosIndex[1];
    let kMin = worldPosIndex[2];
    let kMax = worldPosIndex[2];
    for (let j = 1; j < points.length; j++) {
      const worldPosIndex3 = utilities_exports.transformWorldToIndex(imageData, points[j]);
      worldPosIndex3[0] = Math.floor(worldPosIndex3[0]);
      worldPosIndex3[1] = Math.floor(worldPosIndex3[1]);
      worldPosIndex3[2] = Math.floor(worldPosIndex3[2]);
      iMin = Math.min(iMin, worldPosIndex3[0]);
      iMax = Math.max(iMax, worldPosIndex3[0]);
      jMin = Math.min(jMin, worldPosIndex3[1]);
      jMax = Math.max(jMax, worldPosIndex3[1]);
      kMin = Math.min(kMin, worldPosIndex3[2]);
      kMax = Math.max(kMax, worldPosIndex3[2]);
    }
    const worldPosIndex2 = utilities_exports.transformWorldToIndex(imageData, points[1]);
    worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);
    worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);
    worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);
    let area = polyline_exports.getArea(canvasCoordinates) / scale2 / scale2;
    area *= deltaInX * deltaInY;
    let perimeter = calculatePerimeter_default(canvasCoordinates, closed) / scale2;
    perimeter *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));
    const iDelta = 0.01 * (iMax - iMin);
    const jDelta = 0.01 * (jMax - jMin);
    const kDelta = 0.01 * (kMax - kMin);
    iMin = Math.floor(iMin - iDelta);
    iMax = Math.ceil(iMax + iDelta);
    jMin = Math.floor(jMin - jDelta);
    jMax = Math.ceil(jMax + jDelta);
    kMin = Math.floor(kMin - kDelta);
    kMax = Math.ceil(kMax + kDelta);
    const boundsIJK = [
      [iMin, iMax],
      [jMin, jMax],
      [kMin, kMax]
    ];
    const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);
    const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);
    let curRow = 0;
    let intersections = [];
    let intersectionCounter = 0;
    let pointsInShape;
    if (voxelManager) {
      pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
        imageData,
        isInObject: (pointLPS, _pointIJK) => {
          let result = true;
          const point = viewport.worldToCanvas(pointLPS);
          if (point[1] != curRow) {
            intersectionCounter = 0;
            curRow = point[1];
            intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);
            intersections.sort(/* @__PURE__ */ (function(index) {
              return function(a, b) {
                return a[index] === b[index] ? 0 : a[index] < b[index] ? -1 : 1;
              };
            })(0));
          }
          if (intersections.length && point[0] > intersections[0][0]) {
            intersections.shift();
            intersectionCounter++;
          }
          if (intersectionCounter % 2 === 0) {
            result = false;
          }
          return result;
        },
        boundsIJK,
        returnPoints: this.configuration.storePointData
      });
    }
    const stats = this.configuration.statsCalculator.getStatistics();
    cachedStats[targetId] = {
      Modality: metadata.Modality,
      area,
      perimeter,
      mean: stats.mean?.value,
      max: stats.max?.value,
      min: stats.min?.value,
      stdDev: stats.stdDev?.value,
      statsArray: stats.array,
      pointsInShape,
      areaUnit,
      modalityUnit,
      unit
    };
  }
  updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, deltaInX, deltaInY }) {
    const { scale: scale2, unit } = calibratedScale;
    let length = calculatePerimeter_default(canvasCoordinates, closed) / scale2;
    length *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));
    cachedStats[targetId] = {
      Modality: metadata.Modality,
      length,
      modalityUnit,
      unit
    };
  }
};
_PlanarFreehandROITool.toolName = "PlanarFreehandROI";
var PlanarFreehandROITool = _PlanarFreehandROITool;
function defaultGetTextLines(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { area, mean, stdDev, length, perimeter, max, min, isEmptyArea, unit, areaUnit, modalityUnit } = cachedVolumeStats || {};
  const textLines = [];
  if (utilities_exports.isNumber(area)) {
    const areaLine = isEmptyArea ? `Area: Oblique not supported` : `Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`;
    textLines.push(areaLine);
  }
  if (utilities_exports.isNumber(mean)) {
    textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(max)) {
    textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(min)) {
    textLines.push(`Min: ${utilities_exports.roundNumber(min)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(stdDev)) {
    textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(perimeter)) {
    textLines.push(`Perimeter: ${utilities_exports.roundNumber(perimeter)} ${unit}`);
  }
  if (utilities_exports.isNumber(length)) {
    textLines.push(`${utilities_exports.roundNumber(length)} ${unit}`);
  }
  return textLines;
}
var PlanarFreehandROITool_default = PlanarFreehandROITool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js
var _PlanarFreehandContourSegmentationTool = class _PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool_default {
  constructor(toolProps) {
    const initialProps = utilities_exports.deepMerge({
      configuration: {
        calculateStats: false,
        allowOpenContours: false
      }
    }, toolProps);
    super(initialProps);
  }
  isContourSegmentationTool() {
    return true;
  }
  renderAnnotationInstance(renderContext) {
    const annotation = renderContext.annotation;
    const { invalidated } = annotation;
    const renderResult = super.renderAnnotationInstance(renderContext);
    if (invalidated) {
      const { segmentationId } = annotation.data.segmentation;
      triggerSegmentationDataModified(segmentationId);
    }
    return renderResult;
  }
};
_PlanarFreehandContourSegmentationTool.toolName = "PlanarFreehandContourSegmentationTool";
var PlanarFreehandContourSegmentationTool = _PlanarFreehandContourSegmentationTool;
var PlanarFreehandContourSegmentationTool_default = PlanarFreehandContourSegmentationTool;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js
var renderers = {
  [SegmentationRepresentations_default.Labelmap]: labelmapDisplay_default,
  [SegmentationRepresentations_default.Contour]: contourDisplay_default,
  [SegmentationRepresentations_default.Surface]: surfaceDisplay_default
};
var planarContourToolName = PlanarFreehandContourSegmentationTool_default.toolName;
var SegmentationRenderingEngine = class {
  constructor() {
    this._needsRender = /* @__PURE__ */ new Set();
    this._pendingRenderQueue = [];
    this._animationFrameSet = false;
    this._animationFrameHandle = null;
    this._getAllViewports = () => {
      const renderingEngine = getRenderingEngines();
      return renderingEngine.flatMap((renderingEngine2) => renderingEngine2.getViewports());
    };
    this._renderFlaggedSegmentations = () => {
      this._throwIfDestroyed();
      const viewportIds = Array.from(this._needsRender);
      viewportIds.forEach((viewportId) => {
        this._triggerRender(viewportId);
      });
      this._needsRender.clear();
      this._animationFrameSet = false;
      this._animationFrameHandle = null;
      if (this._pendingRenderQueue.length > 0) {
        const nextViewportIds = this._pendingRenderQueue.shift();
        if (nextViewportIds && nextViewportIds.length > 0) {
          this._setViewportsToBeRenderedNextFrame(nextViewportIds);
        }
      }
    };
  }
  renderSegmentationsForViewport(viewportId) {
    const viewportIds = viewportId ? [viewportId] : this._getViewportIdsForSegmentation();
    this._setViewportsToBeRenderedNextFrame(viewportIds);
  }
  renderSegmentation(segmentationId) {
    const viewportIds = this._getViewportIdsForSegmentation(segmentationId);
    this._setViewportsToBeRenderedNextFrame(viewportIds);
  }
  _getViewportIdsForSegmentation(segmentationId) {
    const viewports = this._getAllViewports();
    const viewportIds = [];
    for (const viewport of viewports) {
      const viewportId = viewport.id;
      if (segmentationId) {
        const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });
        if (segmentationRepresentations?.length > 0) {
          viewportIds.push(viewportId);
        }
      } else {
        const segmentationRepresentations = getSegmentationRepresentations(viewportId);
        if (segmentationRepresentations?.length > 0) {
          viewportIds.push(viewportId);
        }
      }
    }
    return viewportIds;
  }
  _throwIfDestroyed() {
    if (this.hasBeenDestroyed) {
      throw new Error("this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.");
    }
  }
  _setViewportsToBeRenderedNextFrame(viewportIds) {
    if (this._animationFrameSet) {
      this._pendingRenderQueue.push(viewportIds);
      return;
    }
    viewportIds.forEach((viewportId) => {
      this._needsRender.add(viewportId);
    });
    this._render();
  }
  _render() {
    if (this._needsRender.size > 0 && this._animationFrameSet === false) {
      this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);
      this._animationFrameSet = true;
    }
  }
  _triggerRender(viewportId) {
    const segmentationRepresentations = getSegmentationRepresentations(viewportId);
    if (!segmentationRepresentations?.length) {
      return;
    }
    const { viewport } = getEnabledElementByViewportId(viewportId) || {};
    if (!viewport) {
      return;
    }
    const viewportRenderList = [];
    const segmentationRenderList = segmentationRepresentations.map((representation) => {
      if (representation.type === SegmentationRepresentations_default.Contour) {
        this._addPlanarFreeHandToolIfAbsent(viewport);
      }
      const display = renderers[representation.type];
      try {
        const viewportId2 = display.render(viewport, representation);
        viewportRenderList.push(viewportId2);
      } catch (error) {
        console.error(error);
      }
      return Promise.resolve({
        segmentationId: representation.segmentationId,
        type: representation.type
      });
    });
    Promise.allSettled(segmentationRenderList).then((results) => {
      const segmentationDetails = results.filter((r) => r.status === "fulfilled").map((r) => r.value);
      function onSegmentationRender(evt) {
        const { element: element2, viewportId: viewportId2 } = evt.detail;
        element2.removeEventListener(enums_exports.Events.IMAGE_RENDERED, onSegmentationRender);
        segmentationDetails.forEach((detail) => {
          const eventDetail = {
            viewportId: viewportId2,
            segmentationId: detail.segmentationId,
            type: detail.type
          };
          triggerEvent(eventTarget_default, Events_default.SEGMENTATION_RENDERED, {
            ...eventDetail
          });
        });
      }
      const element = viewport.element;
      element.addEventListener(enums_exports.Events.IMAGE_RENDERED, onSegmentationRender);
      viewport.render();
    });
  }
  _addPlanarFreeHandToolIfAbsent(viewport) {
    if (!(planarContourToolName in state.tools)) {
      addTool(PlanarFreehandContourSegmentationTool_default);
    }
    const toolGroup = getToolGroupForViewport_default(viewport.id);
    if (!toolGroup.hasTool(planarContourToolName)) {
      toolGroup.addTool(planarContourToolName);
      toolGroup.setToolPassive(planarContourToolName);
    }
  }
};
function triggerSegmentationRender(viewportId) {
  segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);
}
function triggerSegmentationRenderBySegmentationId(segmentationId) {
  segmentationRenderingEngine.renderSegmentation(segmentationId);
}
var segmentationRenderingEngine = new SegmentationRenderingEngine();

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performVolumeLabelmapUpdate.js
function performVolumeLabelmapUpdate({ modifiedSlicesToUse, representationData, type }) {
  const segmentationVolume = cache_default.getVolume(representationData[type].volumeId);
  if (!segmentationVolume) {
    console.warn("segmentation not found in cache");
    return;
  }
  const { imageData, vtkOpenGLTexture } = segmentationVolume;
  let slicesToUpdate;
  if (modifiedSlicesToUse?.length > 0) {
    slicesToUpdate = modifiedSlicesToUse;
  } else {
    const numSlices = imageData.getDimensions()[2];
    slicesToUpdate = [...Array(numSlices).keys()];
  }
  slicesToUpdate.forEach((i) => {
    vtkOpenGLTexture.setUpdatedFrame(i);
  });
  imageData.modified();
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performStackLabelmapUpdate.js
function performStackLabelmapUpdate({ viewportIds, segmentationId }) {
  viewportIds.forEach((viewportId) => {
    let representations = getSegmentationRepresentations(viewportId, {
      segmentationId
    });
    representations = representations.filter((representation) => representation.type === SegmentationRepresentations_default.Labelmap);
    representations.forEach((representation) => {
      if (representation.segmentationId !== segmentationId) {
        return;
      }
      const enabledElement = getEnabledElementByViewportId(viewportId);
      if (!enabledElement) {
        return;
      }
      const { viewport } = enabledElement;
      if (viewport instanceof VolumeViewport_default) {
        return;
      }
      const actorEntries = getLabelmapActorEntries(viewportId, segmentationId);
      if (!actorEntries?.length) {
        return;
      }
      actorEntries.forEach((actorEntry, i) => {
        const segImageData = actorEntry.actor.getMapper().getInputData();
        const currentSegmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);
        const segmentationImage = cache_default.getImage(currentSegmentationImageIds[i]);
        segImageData.modified();
        utilities_exports.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);
      });
    });
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/onLabelmapSegmentationDataModified.js
var onLabelmapSegmentationDataModified = function(evt) {
  const { segmentationId, modifiedSlicesToUse } = evt.detail;
  const { representationData } = getSegmentation(segmentationId);
  const viewportIds = getViewportIdsWithSegmentation(segmentationId);
  const hasVolumeViewport = viewportIds.some((viewportId) => {
    const { viewport } = getEnabledElementByViewportId(viewportId);
    return viewport instanceof VolumeViewport_default;
  });
  const hasStackViewport = viewportIds.some((viewportId) => {
    const { viewport } = getEnabledElementByViewportId(viewportId);
    return viewport instanceof StackViewport_default;
  });
  const hasBothStackAndVolume = hasVolumeViewport && hasStackViewport;
  viewportIds.forEach((viewportId) => {
    const { viewport } = getEnabledElementByViewportId(viewportId);
    if (viewport instanceof VolumeViewport_default) {
      performVolumeLabelmapUpdate({
        modifiedSlicesToUse: hasBothStackAndVolume ? [] : modifiedSlicesToUse,
        representationData,
        type: SegmentationRepresentations_default.Labelmap
      });
    }
    if (viewport instanceof StackViewport_default) {
      performStackLabelmapUpdate({
        viewportIds,
        segmentationId
      });
    }
  });
};
var onLabelmapSegmentationDataModified_default = onLabelmapSegmentationDataModified;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js
var onSegmentationDataModified = function(evt) {
  const { segmentationId } = evt.detail;
  const { representationData } = getSegmentation(segmentationId);
  if (representationData.Labelmap) {
    onLabelmapSegmentationDataModified_default(evt);
  }
  triggerSegmentationRenderBySegmentationId(segmentationId);
};
var segmentationDataModifiedEventListener_default = onSegmentationDataModified;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js
var segmentationModifiedListener = function(evt) {
  const { segmentationId } = evt.detail;
  triggerSegmentationRenderBySegmentationId(segmentationId);
};
var segmentationModifiedEventListener_default = segmentationModifiedListener;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js
function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js
var enable6 = function(element) {
  if (!element) {
    return;
  }
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  if (viewport instanceof BaseVolumeViewport_default) {
    return;
  }
  element.addEventListener(enums_exports.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);
  element.addEventListener(enums_exports.Events.IMAGE_RENDERED, _imageChangeEventListener);
};
var disable6 = function(element) {
  element.removeEventListener(enums_exports.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);
  element.removeEventListener(enums_exports.Events.IMAGE_RENDERED, _imageChangeEventListener);
};
function _imageChangeEventListener(evt) {
  const eventData = evt.detail;
  const { viewportId, renderingEngineId } = eventData;
  const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
  const representations = getSegmentationRepresentations(viewportId);
  if (!representations?.length) {
    return;
  }
  const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations_default.Labelmap);
  const actors = viewport.getActors();
  labelmapRepresentations.forEach((representation) => {
    const { segmentationId } = representation;
    updateLabelmapSegmentationImageReferences(viewportId, segmentationId);
  });
  const labelmapActors = labelmapRepresentations.flatMap((representation) => {
    return getLabelmapActorEntries(viewportId, representation.segmentationId);
  }).filter((actor) => actor !== void 0);
  if (!labelmapActors.length) {
    return;
  }
  labelmapActors.forEach((actor) => {
    const validActor = labelmapRepresentations.find((representation) => {
      const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);
      return derivedImageIds?.includes(actor.referencedId);
    });
    if (!validActor) {
      viewport.removeActors([actor.uid]);
    }
  });
  labelmapRepresentations.forEach((representation) => {
    const { segmentationId } = representation;
    const currentImageId = viewport.getCurrentImageId();
    const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);
    if (!derivedImageIds) {
      return;
    }
    let shouldTriggerSegmentationRender = false;
    const updateSegmentationActor = (derivedImageId) => {
      const derivedImage = cache_default.getImage(derivedImageId);
      if (!derivedImage) {
        console.warn("No derived image found in the cache for segmentation representation", representation);
        return;
      }
      const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);
      if (!segmentationActorInput) {
        const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);
        const currentImage = cache_default.getImage(currentImageId) || {
          imageId: currentImageId
        };
        const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);
        const originToUse = currentOrigin;
        const constructor = derivedImage.voxelManager.getConstructor();
        const newPixelData = derivedImage.voxelManager.getScalarData();
        const scalarArray = vtkDataArray$1.newInstance({
          name: "Pixels",
          numberOfComponents: 1,
          values: new constructor(newPixelData)
        });
        const imageData = vtkImageData$1.newInstance();
        imageData.setDimensions(dimensions[0], dimensions[1], 1);
        imageData.setSpacing(spacing);
        imageData.setDirection(direction);
        imageData.setOrigin(originToUse);
        imageData.getPointData().setScalars(scalarArray);
        imageData.modified();
        viewport.addImages([
          {
            imageId: derivedImageId,
            representationUID: `${segmentationId}-${SegmentationRepresentations_default.Labelmap}-${derivedImage.imageId}`,
            callback: ({ imageActor }) => {
              imageActor.getMapper().setInputData(imageData);
            }
          }
        ]);
        shouldTriggerSegmentationRender = true;
        return;
      } else {
        const segmentationImageData = segmentationActorInput.actor.getMapper().getInputData();
        if (segmentationImageData.setDerivedImage) {
          segmentationImageData.setDerivedImage(derivedImage);
        } else {
          utilities_exports.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);
        }
      }
    };
    derivedImageIds.forEach(updateSegmentationActor);
    if (shouldTriggerSegmentationRender) {
      triggerSegmentationRender(viewportId);
    }
    viewport.render();
    if (evt.type === enums_exports.Events.IMAGE_RENDERED) {
      viewport.element.removeEventListener(enums_exports.Events.IMAGE_RENDERED, _imageChangeEventListener);
    }
  });
}
var imageChangeEventListener_default = {
  enable: enable6,
  disable: disable6
};

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js
async function contourSegmentationCompletedListener(evt) {
  const sourceAnnotation = evt.detail.annotation;
  if (!isContourSegmentationAnnotation(sourceAnnotation)) {
    return;
  }
  const viewport = getViewport(sourceAnnotation);
  const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);
  if (!contourSegmentationAnnotations.length) {
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {
      element: viewport.element,
      sourceAnnotation
    });
    return;
  }
  const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);
  const intersectingContours = findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations);
  if (!intersectingContours.length) {
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {
      element: viewport.element,
      sourceAnnotation
    });
    return;
  }
  if (intersectingContours.length > 1) {
    processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours);
    return;
  }
  const { targetAnnotation, targetPolyline, isContourHole } = intersectingContours[0];
  if (isContourHole) {
    const { contourHoleProcessingEnabled = false } = evt.detail;
    if (!contourHoleProcessingEnabled) {
      return;
    }
    createPolylineHole(viewport, targetAnnotation, sourceAnnotation);
  } else {
    combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);
  }
}
function isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {
  const toolName = "PlanarFreehandContourSegmentationTool";
  const toolGroup = getToolGroupForViewport_default(viewport.id, viewport.renderingEngineId);
  let errorMessage;
  if (!toolGroup) {
    errorMessage = `ToolGroup not found for viewport ${viewport.id}`;
  } else if (!toolGroup.hasTool(toolName)) {
    errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;
  } else if (!toolGroup.getToolOptions(toolName)) {
    errorMessage = `Tool ${toolName} must be in active/passive state in ${toolGroup.id} toolGroup`;
  }
  if (errorMessage && !silent) {
    console.warn(errorMessage);
  }
  return !errorMessage;
}
function getViewport(annotation) {
  const viewports = getViewportsForAnnotation(annotation);
  const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));
  return viewportWithToolRegistered ?? viewports[0];
}
function getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {
  const { annotationUID: sourceAnnotationUID } = sourceAnnotation;
  const allAnnotations = getAllAnnotations();
  return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID && targetAnnotation.annotationUID !== sourceAnnotationUID && isContourSegmentationAnnotation(targetAnnotation) && areSameSegment(targetAnnotation, sourceAnnotation) && viewport.isReferenceViewable(targetAnnotation.metadata));
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationRemoved.js
function contourSegmentationRemovedListener(evt) {
  const annotation = evt.detail.annotation;
  removeContourSegmentationAnnotation(annotation);
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationCompletedListener.js
function annotationCompletedListener(evt) {
  const annotation = evt.detail.annotation;
  if (isContourSegmentationAnnotation(annotation)) {
    contourSegmentationCompletedListener(evt);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js
function annotationSelectionListener(evt) {
  const deselectedAnnotation = evt.detail.removed;
  if (!deselectedAnnotation.length) {
    return;
  }
  const renderingEngines = getRenderingEngines();
  renderingEngines.forEach((renderingEngine) => {
    const viewports = renderingEngine.getViewports();
    const viewportIds = viewports.map((vp) => vp.id);
    triggerAnnotationRenderForViewportIds(viewportIds);
  });
}
var annotationSelectionListener_default = annotationSelectionListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js
function annotationModifiedListener(evt) {
  const { viewportId } = evt.detail;
  triggerAnnotationRenderForViewportIds_default([viewportId]);
}
var annotationModifiedListener_default = annotationModifiedListener;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationRemovedListener.js
function annotationRemovedListener(evt) {
  const annotation = evt.detail.annotation;
  if (isContourSegmentationAnnotation(annotation)) {
    contourSegmentationRemovedListener(evt);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js
var onImageRendered = function(evt) {
  triggerAnnotationRender_default(evt.detail.element);
};
var enable7 = function(element) {
  element.addEventListener(enums_exports.Events.IMAGE_RENDERED, onImageRendered);
};
var disable7 = function(element) {
  element.removeEventListener(enums_exports.Events.IMAGE_RENDERED, onImageRendered);
};
var imageRenderedEventDispatcher_default = {
  enable: enable7,
  disable: disable7
};

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js
var { Active: Active4 } = ToolModes_default;
function customCallbackHandler(handlerType, customFunction, evt) {
  if (state.isInteractingWithTool) {
    return false;
  }
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return false;
  }
  let activeTool;
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const tool = toolGroup.toolOptions[toolName];
    const toolInstance = toolGroup.getToolInstance(toolName);
    if (tool.mode === Active4 && typeof toolInstance[customFunction] === "function") {
      activeTool = toolGroup.getToolInstance(toolName);
      break;
    }
  }
  if (!activeTool) {
    return;
  }
  activeTool[customFunction](evt);
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseClick.js
var mouseClick = customCallbackHandler.bind(null, "Mouse", "mouseClickCallback");
var mouseClick_default = mouseClick;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDoubleClick.js
var mouseDoubleClick = customCallbackHandler.bind(null, "Mouse", "doubleClickCallback");
var mouseDoubleClick_default = mouseDoubleClick;

// node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithMoveableHandles.js
function filterToolsWithMoveableHandles(element, ToolAndAnnotations, canvasCoords, interactionType = "mouse") {
  const proximity = interactionType === "touch" ? 36 : 6;
  const toolsWithMoveableHandles = [];
  ToolAndAnnotations.forEach(({ tool, annotations }) => {
    for (const annotation of annotations) {
      if (annotation.isLocked || !annotation.isVisible) {
        continue;
      }
      const handle = tool.getHandleNearImagePoint(element, annotation, canvasCoords, proximity);
      if (handle) {
        toolsWithMoveableHandles.push({
          tool,
          annotation,
          handle
        });
        break;
      }
    }
  });
  return toolsWithMoveableHandles;
}

// node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js
function filterToolsWithAnnotationsForElement(element, tools) {
  const result = [];
  for (let i = 0; i < tools.length; i++) {
    const tool = tools[i];
    if (!tool) {
      console.warn("undefined tool in filterToolsWithAnnotationsForElement");
      continue;
    }
    let annotations = getAnnotations(tool.constructor.toolName, element);
    if (!annotations?.length) {
      continue;
    }
    if (typeof tool.filterInteractableAnnotationsForElement === "function") {
      annotations = tool.filterInteractableAnnotationsForElement(element, annotations);
    }
    if (annotations?.length > 0) {
      result.push({ tool, annotations });
    }
  }
  return result;
}

// node_modules/@cornerstonejs/tools/dist/esm/store/filterMoveableAnnotationTools.js
function filterMoveableAnnotationTools(element, ToolAndAnnotations, canvasCoords, interactionType = "mouse") {
  const proximity = interactionType === "touch" ? 36 : 6;
  const moveableAnnotationTools = [];
  ToolAndAnnotations.forEach(({ tool, annotations }) => {
    for (const annotation of annotations) {
      if (annotation.isLocked || !annotation.isVisible) {
        continue;
      }
      const near = tool.isPointNearTool(element, annotation, canvasCoords, proximity, interactionType);
      if (near) {
        moveableAnnotationTools.push({
          tool,
          annotation
        });
        break;
      }
    }
  });
  return moveableAnnotationTools;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js
var { Active: Active5 } = ToolModes_default;
function getActiveToolForMouseEvent(evt) {
  const { renderingEngineId, viewportId, event: mouseEvent } = evt.detail;
  const modifierKey = getMouseModifier_default(mouseEvent) || keyboard_default.getModifierKey();
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return null;
  }
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
  const mouseButton = evt.detail.buttons ?? mouseEvent?.buttons ?? defaultMousePrimary;
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const toolOptions = toolGroup.toolOptions[toolName];
    const correctBinding = toolOptions.bindings.length && toolOptions.bindings.some((binding) => {
      return binding.mouseButton === mouseButton && binding.modifierKey === modifierKey;
    });
    if (toolOptions.mode === Active5 && correctBinding) {
      return toolGroup.getToolInstance(toolName);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js
function getToolsWithModesForMouseEvent(evt, modesFilter, evtButton) {
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return [];
  }
  const enabledTools = [];
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const tool = toolGroup.toolOptions[toolName];
    const correctBinding = evtButton != null && tool.bindings.length && tool.bindings.some((binding) => binding.mouseButton === evtButton);
    if (modesFilter.includes(tool.mode) && (!evtButton || correctBinding)) {
      const toolInstance = toolGroup.getToolInstance(toolName);
      enabledTools.push(toolInstance);
    }
  }
  return enabledTools;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithActionsForMouseEvent.js
function getToolsWithActionsForMouseEvent(evt, toolModes) {
  const toolsWithActions = /* @__PURE__ */ new Map();
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return toolsWithActions;
  }
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
  const mouseEvent = evt.detail.event;
  const mouseButton = mouseEvent?.buttons ?? defaultMousePrimary;
  const modifierKey = getMouseModifier_default(mouseEvent) || keyboard_default.getModifierKey();
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const tool = toolGroup.getToolInstance(toolName);
    const actionsConfig = tool.configuration?.actions ?? {};
    const actions = Object.values(actionsConfig);
    if (!actions?.length || !toolModes.includes(tool.mode)) {
      continue;
    }
    const action = actions.find((action2) => action2.bindings?.length && action2.bindings.some((binding) => binding.mouseButton === mouseButton && binding.modifierKey === modifierKey));
    if (action) {
      toolsWithActions.set(tool, action);
    }
  }
  return toolsWithActions;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDownAnnotationAction.js
var { Active: Active6, Passive: Passive4 } = ToolModes_default;
function mouseDownAnnotationAction(evt) {
  if (state.isInteractingWithTool) {
    return false;
  }
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const enabledElement = getEnabledElement(element);
  const { canvas: canvasCoords } = eventDetail.currentPoints;
  if (!enabledElement) {
    return false;
  }
  const toolsWithActions = getToolsWithActionsForMouseEvent(evt, [
    Active6,
    Passive4
  ]);
  const tools = Array.from(toolsWithActions.keys());
  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(element, tools);
  const moveableAnnotationTools = filterMoveableAnnotationTools(element, annotationToolsWithAnnotations, canvasCoords);
  if (moveableAnnotationTools.length > 0) {
    const { tool, annotation } = moveableAnnotationTools[0];
    const action = toolsWithActions.get(tool);
    const method = typeof action.method === "string" ? tool[action.method] : action.method;
    method.call(tool, evt, annotation);
    return true;
  }
  return false;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDown.js
var { Active: Active7, Passive: Passive5 } = ToolModes_default;
function mouseDown(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForMouseEvent(evt);
  if (activeTool && typeof activeTool.preMouseDownCallback === "function") {
    const consumedEvent = activeTool.preMouseDownCallback(evt);
    if (consumedEvent) {
      return;
    }
  }
  const isPrimaryClick = evt.detail.event.buttons === 1;
  const activeToolsWithEventBinding = getToolsWithModesForMouseEvent(evt, [Active7], evt.detail.event.buttons);
  const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick ? getToolsWithModesForMouseEvent(evt, [Passive5]) : void 0;
  const applicableTools = [
    ...activeToolsWithEventBinding || [],
    ...passiveToolsIfEventWasPrimaryMouseButton || []
  ];
  const actionExecuted = mouseDownAnnotationAction(evt);
  if (actionExecuted) {
    return;
  }
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(element, applicableTools);
  const canvasCoords = eventDetail.currentPoints.canvas;
  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(element, annotationToolsWithAnnotations, canvasCoords, "mouse");
  const isMultiSelect = !!evt.detail.event.shiftKey;
  if (annotationToolsWithMoveableHandles.length > 0) {
    const { tool, annotation, handle } = getAnnotationForSelection(annotationToolsWithMoveableHandles);
    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
    tool.handleSelectedCallback(evt, annotation, handle, "Mouse");
    return;
  }
  const moveableAnnotationTools = filterMoveableAnnotationTools(element, annotationToolsWithAnnotations, canvasCoords, "mouse");
  if (moveableAnnotationTools.length > 0) {
    const { tool, annotation } = getAnnotationForSelection(moveableAnnotationTools);
    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
    tool.toolSelectedCallback(evt, annotation, "Mouse", canvasCoords);
    return;
  }
  if (activeTool && typeof activeTool.postMouseDownCallback === "function") {
    const consumedEvent = activeTool.postMouseDownCallback(evt);
    if (consumedEvent) {
      return;
    }
  }
}
function getAnnotationForSelection(toolsWithMovableHandles) {
  if (toolsWithMovableHandles.length > 1) {
    const unlockAndVisibleAnnotation = toolsWithMovableHandles.find((item) => {
      const isUnlocked = !isAnnotationLocked(item.annotation.annotationUID);
      const isVisible = isAnnotationVisible(item.annotation.annotationUID);
      return isUnlocked && isVisible;
    });
    if (unlockAndVisibleAnnotation) {
      return unlockAndVisibleAnnotation;
    }
  }
  return toolsWithMovableHandles[0];
}
function toggleAnnotationSelection(annotationUID, isMultiSelect = false) {
  if (isMultiSelect) {
    if (isAnnotationSelected(annotationUID)) {
      setAnnotationSelected(annotationUID, false);
    } else {
      const preserveSelected = true;
      setAnnotationSelected(annotationUID, true, preserveSelected);
    }
  } else {
    const preserveSelected = false;
    setAnnotationSelected(annotationUID, true, preserveSelected);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDownActivate.js
function mouseDownActivate(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForMouseEvent(evt);
  if (!activeTool) {
    return;
  }
  if (state.isMultiPartToolActive) {
    return;
  }
  if (activeTool.addNewAnnotation) {
    const annotation = activeTool.addNewAnnotation(evt, "mouse");
    setAnnotationSelected(annotation.annotationUID);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDrag.js
function mouseDrag(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForMouseEvent(evt);
  const noFoundToolOrDoesNotHaveMouseDragCallback = !activeTool || typeof activeTool.mouseDragCallback !== "function";
  if (noFoundToolOrDoesNotHaveMouseDragCallback) {
    return;
  }
  activeTool.mouseDragCallback(evt);
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseMove.js
var { Active: Active8, Passive: Passive6 } = ToolModes_default;
function mouseMove(evt) {
  if (state.isInteractingWithTool || state.isMultiPartToolActive) {
    return;
  }
  const activeAndPassiveTools = getToolsWithModesForMouseEvent(evt, [
    Active8,
    Passive6
  ]);
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const toolsWithAnnotations = filterToolsWithAnnotationsForElement(element, activeAndPassiveTools);
  const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {
    const doesNotHaveAnnotations = !toolsWithAnnotations.some((toolAndAnnotation) => toolAndAnnotation.tool.getToolName() === tool.getToolName());
    return doesNotHaveAnnotations;
  });
  let annotationsNeedToBeRedrawn = false;
  for (const { tool, annotations } of toolsWithAnnotations) {
    if (typeof tool.mouseMoveCallback === "function") {
      annotationsNeedToBeRedrawn = tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;
    }
  }
  toolsWithoutAnnotations.forEach((tool) => {
    if (typeof tool.mouseMoveCallback === "function") {
      tool.mouseMoveCallback(evt);
    }
  });
  if (annotationsNeedToBeRedrawn === true) {
    triggerAnnotationRender_default(element);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseUp.js
var mouseUp = customCallbackHandler.bind(null, "Mouse", "mouseUpCallback");
var mouseUp_default = mouseUp;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseWheel.js
function mouseWheel(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  evt.detail.buttons = MouseBindings.Wheel | (evt.detail.event.buttons || 0);
  const activeTool = getActiveToolForMouseEvent(evt);
  if (!activeTool) {
    return;
  }
  return activeTool.mouseWheelCallback(evt);
}
var mouseWheel_default = mouseWheel;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js
var enable8 = function(element) {
  element.addEventListener(Events_default.MOUSE_CLICK, mouseClick_default);
  element.addEventListener(Events_default.MOUSE_DOWN, mouseDown);
  element.addEventListener(Events_default.MOUSE_DOWN_ACTIVATE, mouseDownActivate);
  element.addEventListener(Events_default.MOUSE_DOUBLE_CLICK, mouseDoubleClick_default);
  element.addEventListener(Events_default.MOUSE_DRAG, mouseDrag);
  element.addEventListener(Events_default.MOUSE_MOVE, mouseMove);
  element.addEventListener(Events_default.MOUSE_UP, mouseUp_default);
  element.addEventListener(Events_default.MOUSE_WHEEL, mouseWheel_default);
};
var disable8 = function(element) {
  element.removeEventListener(Events_default.MOUSE_CLICK, mouseClick_default);
  element.removeEventListener(Events_default.MOUSE_DOWN, mouseDown);
  element.removeEventListener(Events_default.MOUSE_DOWN_ACTIVATE, mouseDownActivate);
  element.removeEventListener(Events_default.MOUSE_DOUBLE_CLICK, mouseDoubleClick_default);
  element.removeEventListener(Events_default.MOUSE_DRAG, mouseDrag);
  element.removeEventListener(Events_default.MOUSE_MOVE, mouseMove);
  element.removeEventListener(Events_default.MOUSE_UP, mouseUp_default);
  element.removeEventListener(Events_default.MOUSE_WHEEL, mouseWheel_default);
};
var mouseToolEventDispatcher = {
  enable: enable8,
  disable: disable8
};
var mouseToolEventDispatcher_default = mouseToolEventDispatcher;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForKeyboardEvent.js
var { Active: Active9 } = ToolModes_default;
function getActiveToolForKeyboardEvent(evt) {
  const { renderingEngineId, viewportId } = evt.detail;
  const mouseButton = getMouseButton();
  const modifierKey = keyboard_default.getModifierKey();
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return null;
  }
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const toolOptions = toolGroup.toolOptions[toolName];
    if (toolOptions.mode !== Active9) {
      continue;
    }
    const correctBinding = toolOptions.bindings.length && toolOptions.bindings.some((binding) => binding.mouseButton === (mouseButton ?? defaultMousePrimary) && binding.modifierKey === modifierKey);
    if (correctBinding) {
      return toolGroup.getToolInstance(toolName);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithActionsForKeyboardEvents.js
function getToolsWithModesForKeyboardEvent(evt, toolModes) {
  const toolsWithActions = /* @__PURE__ */ new Map();
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return toolsWithActions;
  }
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  const key = evt.detail.key;
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const tool = toolGroup.getToolInstance(toolName);
    const actionsConfig = tool.configuration?.actions;
    if (!actionsConfig) {
      continue;
    }
    const actions = Object.values(actionsConfig);
    if (!actions?.length || !toolModes.includes(tool.mode)) {
      continue;
    }
    const action = actions.find((action2) => action2.bindings?.some((binding) => binding.key === key));
    if (action) {
      toolsWithActions.set(tool, action);
    }
  }
  return toolsWithActions;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyDown.js
function keyDown(evt) {
  const activeTool = getActiveToolForKeyboardEvent(evt);
  if (activeTool) {
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
    const toolName = activeTool.getToolName();
    if (Object.keys(toolGroup.toolOptions).includes(toolName)) {
      toolGroup.setViewportsCursorByToolName(toolName);
    }
  }
  const activeToolsWithEventBinding = getToolsWithModesForKeyboardEvent(evt, [
    ToolModes_default.Active
  ]);
  if (activeToolsWithEventBinding?.size) {
    const { element } = evt.detail;
    for (const [key, value] of [...activeToolsWithEventBinding.entries()]) {
      const method = typeof value.method === "function" ? value.method : key[value.method];
      method.call(key, element, value, evt);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyUp.js
function keyUp(evt) {
  const activeTool = getActiveToolForKeyboardEvent(evt);
  if (!activeTool) {
    return;
  }
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  resetModifierKey();
  const toolName = activeTool.getToolName();
  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {
    toolGroup.setViewportsCursorByToolName(toolName);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js
var enable9 = function(element) {
  element.addEventListener(Events_default.KEY_DOWN, keyDown);
  element.addEventListener(Events_default.KEY_UP, keyUp);
};
var disable9 = function(element) {
  element.removeEventListener(Events_default.KEY_DOWN, keyDown);
  element.removeEventListener(Events_default.KEY_UP, keyUp);
};
var keyboardToolEventDispatcher = {
  enable: enable9,
  disable: disable9
};
var keyboardToolEventDispatcher_default = keyboardToolEventDispatcher;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js
var { Active: Active10, Passive: Passive7, Enabled: Enabled4 } = ToolModes_default;
var onCameraModified = function(evt) {
  const enabledTools = getToolsWithModesForMouseEvent(evt, [
    Active10,
    Passive7,
    Enabled4
  ]);
  enabledTools.forEach((tool) => {
    if (tool.onCameraModified) {
      tool.onCameraModified(evt);
    }
  });
};
var enable10 = function(element) {
  element.addEventListener(enums_exports.Events.CAMERA_MODIFIED, onCameraModified);
};
var disable10 = function(element) {
  element.removeEventListener(enums_exports.Events.CAMERA_MODIFIED, onCameraModified);
};
var cameraModifiedEventDispatcher_default = {
  enable: enable10,
  disable: disable10
};

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js
var { Active: Active11, Passive: Passive8, Enabled: Enabled5 } = ToolModes_default;
var onImageSpacingCalibrated = function(evt) {
  const enabledTools = getToolsWithModesForMouseEvent(evt, [
    Active11,
    Passive8,
    Enabled5
  ]);
  enabledTools.forEach((tool) => {
    if (tool.onImageSpacingCalibrated) {
      tool.onImageSpacingCalibrated(evt);
    }
  });
};
var enable11 = function(element) {
  element.addEventListener(enums_exports.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);
};
var disable11 = function(element) {
  element.removeEventListener(enums_exports.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);
};
var imageSpacingCalibratedEventDispatcher_default = {
  enable: enable11,
  disable: disable11
};

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js
var { Active: Active12 } = ToolModes_default;
function getActiveToolForTouchEvent(evt) {
  const { renderingEngineId, viewportId } = evt.detail;
  const touchEvent = evt.detail.event;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return null;
  }
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  const numTouchPoints = Object.keys(touchEvent.touches).length;
  const modifierKey = getMouseModifier_default(touchEvent) || keyboard_default.getModifierKey();
  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const toolOptions = toolGroup.toolOptions[toolName];
    const correctBinding = toolOptions.bindings.length && toolOptions.bindings.some((binding) => (binding.numTouchPoints === numTouchPoints || numTouchPoints === 1 && binding.mouseButton === defaultMousePrimary) && binding.modifierKey === modifierKey);
    if (toolOptions.mode === Active12 && correctBinding) {
      return toolGroup.getToolInstance(toolName);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForTouchEvent.js
function getToolsWithModesForTouchEvent(evt, modesFilter, numTouchPoints) {
  const { renderingEngineId, viewportId } = evt.detail;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return [];
  }
  const enabledTools = [];
  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
  for (let j = 0; j < toolGroupToolNames.length; j++) {
    const toolName = toolGroupToolNames[j];
    const tool = toolGroup.toolOptions[toolName];
    const correctBinding = numTouchPoints != null && tool.bindings.length && tool.bindings.some((binding) => binding.numTouchPoints === numTouchPoints);
    if (modesFilter.includes(tool.mode) && (!numTouchPoints || correctBinding)) {
      const toolInstance = toolGroup.getToolInstance(toolName);
      enabledTools.push(toolInstance);
    }
  }
  return enabledTools;
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStart.js
var { Active: Active13, Passive: Passive9 } = ToolModes_default;
function touchStart(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForTouchEvent(evt);
  if (activeTool && typeof activeTool.preTouchStartCallback === "function") {
    const consumedEvent = activeTool.preTouchStartCallback(evt);
    if (consumedEvent) {
      return;
    }
  }
  const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;
  const activeToolsWithEventBinding = getToolsWithModesForTouchEvent(evt, [Active13], Object.keys(evt.detail.event.touches).length);
  const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick ? getToolsWithModesForTouchEvent(evt, [Passive9]) : void 0;
  const applicableTools = [
    ...activeToolsWithEventBinding || [],
    ...passiveToolsIfEventWasPrimaryTouchButton || [],
    activeTool
  ];
  const eventDetail = evt.detail;
  const { element } = eventDetail;
  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(element, applicableTools);
  const canvasCoords = eventDetail.currentPoints.canvas;
  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(element, annotationToolsWithAnnotations, canvasCoords, "touch");
  const isMultiSelect = false;
  if (annotationToolsWithMoveableHandles.length > 0) {
    const { tool, annotation, handle } = getAnnotationForSelection2(annotationToolsWithMoveableHandles);
    toggleAnnotationSelection2(annotation.annotationUID, isMultiSelect);
    tool.handleSelectedCallback(evt, annotation, handle, "Touch");
    return;
  }
  const moveableAnnotationTools = filterMoveableAnnotationTools(element, annotationToolsWithAnnotations, canvasCoords, "touch");
  if (moveableAnnotationTools.length > 0) {
    const { tool, annotation } = getAnnotationForSelection2(moveableAnnotationTools);
    toggleAnnotationSelection2(annotation.annotationUID, isMultiSelect);
    tool.toolSelectedCallback(evt, annotation, "Touch", canvasCoords);
    return;
  }
  if (activeTool && typeof activeTool.postTouchStartCallback === "function") {
    const consumedEvent = activeTool.postTouchStartCallback(evt);
    if (consumedEvent) {
      return;
    }
  }
}
function getAnnotationForSelection2(toolsWithMovableHandles) {
  return toolsWithMovableHandles.length > 1 && toolsWithMovableHandles.find((item) => !isAnnotationLocked(item.annotation.annotationUID) && isAnnotationVisible(item.annotation.annotationUID)) || toolsWithMovableHandles[0];
}
function toggleAnnotationSelection2(annotationUID, isMultiSelect = false) {
  if (isMultiSelect) {
    if (isAnnotationSelected(annotationUID)) {
      setAnnotationSelected(annotationUID, false);
    } else {
      const preserveSelected = true;
      setAnnotationSelected(annotationUID, true, preserveSelected);
    }
  } else {
    const preserveSelected = false;
    setAnnotationSelected(annotationUID, true, preserveSelected);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStartActivate.js
function touchStartActivate(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForTouchEvent(evt);
  if (!activeTool) {
    return;
  }
  if (state.isMultiPartToolActive) {
    return;
  }
  if (activeTool.addNewAnnotation) {
    const annotation = activeTool.addNewAnnotation(evt, "touch");
    setAnnotationSelected(annotation.annotationUID);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchDrag.js
function touchDrag(evt) {
  if (state.isInteractingWithTool) {
    return;
  }
  const activeTool = getActiveToolForTouchEvent(evt);
  const noFoundToolOrDoesNotHaveTouchDragCallback = !activeTool || typeof activeTool.touchDragCallback !== "function";
  if (noFoundToolOrDoesNotHaveTouchDragCallback) {
    return;
  }
  activeTool.touchDragCallback(evt);
}

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchEnd.js
var touchEnd = customCallbackHandler.bind(null, "Touch", "touchEndCallback");
var touchEnd_default = touchEnd;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchTap.js
var touchTap = customCallbackHandler.bind(null, "Touch", "touchTapCallback");
var touchTap_default = touchTap;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchPress.js
var touchPress = customCallbackHandler.bind(null, "Touch", "touchPressCallback");
var touchPress_default = touchPress;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js
var enable12 = function(element) {
  element.addEventListener(Events_default.TOUCH_START, touchStart);
  element.addEventListener(Events_default.TOUCH_START_ACTIVATE, touchStartActivate);
  element.addEventListener(Events_default.TOUCH_DRAG, touchDrag);
  element.addEventListener(Events_default.TOUCH_END, touchEnd_default);
  element.addEventListener(Events_default.TOUCH_TAP, touchTap_default);
  element.addEventListener(Events_default.TOUCH_PRESS, touchPress_default);
};
var disable12 = function(element) {
  element.removeEventListener(Events_default.TOUCH_START, touchStart);
  element.removeEventListener(Events_default.TOUCH_START_ACTIVATE, touchStartActivate);
  element.removeEventListener(Events_default.TOUCH_DRAG, touchDrag);
  element.removeEventListener(Events_default.TOUCH_END, touchEnd_default);
  element.removeEventListener(Events_default.TOUCH_PRESS, touchPress_default);
};
var touchToolEventDispatcher = {
  enable: enable12,
  disable: disable12
};
var touchToolEventDispatcher_default = touchToolEventDispatcher;

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js
var enable13 = function() {
  eventTarget_default.addEventListener(Events_default.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);
};
var disable13 = function() {
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);
};
var annotationInterpolationEventDispatcher_default = {
  enable: enable13,
  disable: disable13
};

// node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js
var { Active: Active14, Passive: Passive10, Enabled: Enabled6 } = ToolModes_default;
var onCameraReset = function(evt) {
  const enabledTools = getToolsWithModesForMouseEvent(evt, [
    Active14,
    Passive10,
    Enabled6
  ]);
  enabledTools.forEach((tool) => {
    if (tool.onResetCamera) {
      tool.onResetCamera(evt);
    }
  });
};
var enable14 = function(element) {
  element.addEventListener(enums_exports.Events.CAMERA_RESET, onCameraReset);
};
var disable14 = function(element) {
  element.removeEventListener(enums_exports.Events.CAMERA_RESET, onCameraReset);
};
var cameraResetEventDispatcher_default = {
  enable: enable14,
  disable: disable14
};

// node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js
function addEnabledElement(evt) {
  const { element, viewportId } = evt.detail;
  const svgLayer = _createSvgAnnotationLayer(viewportId);
  _setSvgNodeCache(element);
  _appendChild(svgLayer, element);
  annotationRenderingEngine.addViewportElement(viewportId, element);
  mouse_default.enable(element);
  wheel_default.enable(element);
  touch_default.enable(element);
  keyboard_default.enable(element);
  imageChangeEventListener_default.enable(element);
  imageRenderedEventDispatcher_default.enable(element);
  cameraModifiedEventDispatcher_default.enable(element);
  imageSpacingCalibratedEventDispatcher_default.enable(element);
  cameraResetEventDispatcher_default.enable(element);
  mouseToolEventDispatcher_default.enable(element);
  keyboardToolEventDispatcher_default.enable(element);
  touchToolEventDispatcher_default.enable(element);
  state.enabledElements.push(element);
}
function _createSvgAnnotationLayer(viewportId) {
  const svgns2 = "http://www.w3.org/2000/svg";
  const svgLayer = document.createElementNS(svgns2, "svg");
  const svgLayerId = `svg-layer-${viewportId}`;
  svgLayer.classList.add("svg-layer");
  svgLayer.setAttribute("id", svgLayerId);
  svgLayer.setAttribute("xmlns", "http://www.w3.org/2000/svg");
  svgLayer.style.width = "100%";
  svgLayer.style.height = "100%";
  svgLayer.style.pointerEvents = "none";
  svgLayer.style.position = "absolute";
  const defs = document.createElementNS(svgns2, "defs");
  const filter = document.createElementNS(svgns2, "filter");
  const feOffset = document.createElementNS(svgns2, "feOffset");
  const feColorMatrix = document.createElementNS(svgns2, "feColorMatrix");
  const feBlend = document.createElementNS(svgns2, "feBlend");
  filter.setAttribute("id", `shadow-${svgLayerId}`);
  filter.setAttribute("filterUnits", "userSpaceOnUse");
  feOffset.setAttribute("result", "offOut");
  feOffset.setAttribute("in", "SourceGraphic");
  feOffset.setAttribute("dx", "0.5");
  feOffset.setAttribute("dy", "0.5");
  feColorMatrix.setAttribute("result", "matrixOut");
  feColorMatrix.setAttribute("in", "offOut");
  feColorMatrix.setAttribute("in2", "matrix");
  feColorMatrix.setAttribute("values", "0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0");
  feBlend.setAttribute("in", "SourceGraphic");
  feBlend.setAttribute("in2", "matrixOut");
  feBlend.setAttribute("mode", "normal");
  filter.appendChild(feOffset);
  filter.appendChild(feColorMatrix);
  filter.appendChild(feBlend);
  defs.appendChild(filter);
  svgLayer.appendChild(defs);
  return svgLayer;
}
function _setSvgNodeCache(element) {
  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;
  const elementHash = `${viewportId}:${renderingEngineId}`;
  state.svgNodeCache[elementHash] = {};
}
function _appendChild(newNode, referenceNode) {
  referenceNode.querySelector("div.viewport-element").appendChild(newNode);
}

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js
function getSynchronizersForViewport(viewportId, renderingEngineId) {
  const synchronizersFilteredByIds = [];
  if (!renderingEngineId && !viewportId) {
    throw new Error("At least one of renderingEngineId or viewportId should be given");
  }
  for (let i = 0; i < state.synchronizers.length; i++) {
    const synchronizer = state.synchronizers[i];
    const notDisabled = !synchronizer.isDisabled();
    const hasSourceViewport = synchronizer.hasSourceViewport(renderingEngineId, viewportId);
    const hasTargetViewport = synchronizer.hasTargetViewport(renderingEngineId, viewportId);
    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {
      synchronizersFilteredByIds.push(synchronizer);
    }
  }
  return synchronizersFilteredByIds;
}
var getSynchronizersForViewport_default = getSynchronizersForViewport;

// node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js
var VIEWPORT_ELEMENT2 = "viewport-element";
function removeEnabledElement(elementDisabledEvt) {
  const { element, viewportId } = elementDisabledEvt.detail;
  _resetSvgNodeCache(element);
  _removeSvgNode(element);
  annotationRenderingEngine.removeViewportElement(viewportId, element);
  mouse_default.disable(element);
  wheel_default.disable(element);
  touch_default.disable(element);
  keyboard_default.disable(element);
  imageChangeEventListener_default.disable(element);
  imageRenderedEventDispatcher_default.disable(element);
  cameraModifiedEventDispatcher_default.disable(element);
  imageSpacingCalibratedEventDispatcher_default.disable(element);
  cameraResetEventDispatcher_default.disable(element);
  mouseToolEventDispatcher_default.disable(element);
  keyboardToolEventDispatcher_default.disable(element);
  touchToolEventDispatcher_default.disable(element);
  _removeViewportFromSynchronizers(element);
  _removeViewportFromToolGroup(element);
  _removeEnabledElement(element);
}
var _removeViewportFromSynchronizers = (element) => {
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return;
  }
  const synchronizers = getSynchronizersForViewport_default(enabledElement.viewportId, enabledElement.renderingEngineId);
  synchronizers.forEach((sync) => {
    sync.remove(enabledElement);
  });
};
var _removeViewportFromToolGroup = (element) => {
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return;
  }
  const { renderingEngineId, viewportId } = enabledElement;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (toolGroup) {
    toolGroup.removeViewports(renderingEngineId, viewportId);
  }
};
function _resetSvgNodeCache(element) {
  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;
  const elementHash = `${viewportId}:${renderingEngineId}`;
  delete state.svgNodeCache[elementHash];
}
function _removeSvgNode(element) {
  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT2}`);
  const svgLayer = internalViewportNode.querySelector("svg");
  if (svgLayer) {
    internalViewportNode.removeChild(svgLayer);
  }
}
var _removeEnabledElement = function(element) {
  const foundElementIndex = state.enabledElements.findIndex((el) => el === element);
  if (foundElementIndex > -1) {
    state.enabledElements.splice(foundElementIndex, 1);
  }
};
var removeEnabledElement_default = removeEnabledElement;

// node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js
function cancelActiveManipulations(element) {
  const tools = getToolsWithModesForElement(element, [
    ToolModes_default.Active,
    ToolModes_default.Passive
  ]);
  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);
  for (const { tool } of toolsWithData) {
    const annotationUID = tool.cancel(element);
    if (annotationUID) {
      return annotationUID;
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js
var Synchronizer = class {
  constructor(synchronizerId, eventName2, eventHandler, options) {
    this._viewportOptions = {};
    this._onEvent = (evt) => {
      if (this._ignoreFiredEvents === true) {
        return;
      }
      if (!this._targetViewports.length) {
        return;
      }
      const enabledElement = this._eventSource === "element" ? getEnabledElement(evt.currentTarget) : getEnabledElementByViewportId(evt.detail?.viewportId);
      if (!enabledElement) {
        return;
      }
      const { renderingEngineId, viewportId } = enabledElement;
      if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {
        return;
      }
      this.fireEvent({
        renderingEngineId,
        viewportId
      }, evt);
    };
    this._enabled = true;
    this._eventName = eventName2;
    this._eventHandler = eventHandler;
    this._ignoreFiredEvents = false;
    this._sourceViewports = [];
    this._targetViewports = [];
    this._options = options || {};
    this._eventSource = this._options.eventSource || "element";
    this._auxiliaryEvents = this._options.auxiliaryEvents || [];
    this.id = synchronizerId;
  }
  isDisabled() {
    return !this._enabled || !this._hasSourceElements();
  }
  setOptions(viewportId, options = {}) {
    this._viewportOptions[viewportId] = options;
  }
  setEnabled(enabled) {
    this._enabled = enabled;
  }
  getOptions(viewportId) {
    return this._viewportOptions[viewportId];
  }
  add(viewportInfo) {
    this.addTarget(viewportInfo);
    this.addSource(viewportInfo);
  }
  addSource(viewportInfo) {
    if (_containsViewport(this._sourceViewports, viewportInfo)) {
      return;
    }
    const { renderingEngineId, viewportId } = viewportInfo;
    const viewport = getRenderingEngine(renderingEngineId).getViewport(viewportId);
    if (!viewport) {
      console.warn(`Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`);
      return;
    }
    const eventSource = this._eventSource === "element" ? viewport.element : eventTarget_default;
    eventSource.addEventListener(this._eventName, this._onEvent.bind(this));
    this._auxiliaryEvents.forEach(({ name, source }) => {
      const target = source === "element" ? viewport.element : eventTarget_default;
      target.addEventListener(name, this._onEvent.bind(this));
    });
    this._updateDisableHandlers();
    this._sourceViewports.push(viewportInfo);
  }
  addTarget(viewportInfo) {
    if (_containsViewport(this._targetViewports, viewportInfo)) {
      return;
    }
    this._targetViewports.push(viewportInfo);
    this._updateDisableHandlers();
  }
  getSourceViewports() {
    return this._sourceViewports;
  }
  getTargetViewports() {
    return this._targetViewports;
  }
  destroy() {
    this._sourceViewports.forEach((s) => this.removeSource(s));
    this._targetViewports.forEach((t) => this.removeTarget(t));
  }
  remove(viewportInfo) {
    this.removeTarget(viewportInfo);
    this.removeSource(viewportInfo);
  }
  removeSource(viewportInfo) {
    const index = _getViewportIndex(this._sourceViewports, viewportInfo);
    if (index === -1) {
      return;
    }
    const eventSource = this._eventSource === "element" ? this.getViewportElement(viewportInfo) : eventTarget_default;
    this._sourceViewports.splice(index, 1);
    eventSource.removeEventListener(this._eventName, this._eventHandler);
    this._auxiliaryEvents.forEach(({ name, source }) => {
      const target = source === "element" ? this.getViewportElement(viewportInfo) : eventTarget_default;
      target.removeEventListener(name, this._eventHandler);
    });
    this._updateDisableHandlers();
  }
  removeTarget(viewportInfo) {
    const index = _getViewportIndex(this._targetViewports, viewportInfo);
    if (index === -1) {
      return;
    }
    this._targetViewports.splice(index, 1);
    this._updateDisableHandlers();
  }
  hasSourceViewport(renderingEngineId, viewportId) {
    return _containsViewport(this._sourceViewports, {
      renderingEngineId,
      viewportId
    });
  }
  hasTargetViewport(renderingEngineId, viewportId) {
    return _containsViewport(this._targetViewports, {
      renderingEngineId,
      viewportId
    });
  }
  fireEvent(sourceViewport, sourceEvent) {
    if (this.isDisabled() || this._ignoreFiredEvents) {
      return;
    }
    this._ignoreFiredEvents = true;
    const promises = [];
    try {
      for (let i = 0; i < this._targetViewports.length; i++) {
        const targetViewport = this._targetViewports[i];
        const targetIsSource = sourceViewport.viewportId === targetViewport.viewportId;
        if (targetIsSource) {
          continue;
        }
        const result = this._eventHandler(this, sourceViewport, targetViewport, sourceEvent, this._options);
        if (result instanceof Promise) {
          promises.push(result);
        }
      }
    } catch (ex) {
      console.warn(`Synchronizer, for: ${this._eventName}`, ex);
    } finally {
      if (promises.length) {
        Promise.allSettled(promises).then(() => {
          this._ignoreFiredEvents = false;
        });
      } else {
        this._ignoreFiredEvents = false;
      }
    }
  }
  _hasSourceElements() {
    return this._sourceViewports.length !== 0;
  }
  _updateDisableHandlers() {
    const viewports = _getUniqueViewports(this._sourceViewports, this._targetViewports);
    const _remove = this.remove.bind(this);
    const disableHandler = (elementDisabledEvent) => {
      _remove(elementDisabledEvent.detail.element);
    };
    viewports.forEach((vp) => {
      const eventSource = this.getEventSource(vp);
      if (!eventSource) {
        return;
      }
      eventSource.removeEventListener(enums_exports.Events.ELEMENT_DISABLED, disableHandler);
      eventSource.addEventListener(enums_exports.Events.ELEMENT_DISABLED, disableHandler);
    });
  }
  getEventSource(viewportInfo) {
    return this._eventSource === "element" ? this.getViewportElement(viewportInfo) : eventTarget_default;
  }
  getViewportElement(viewportInfo) {
    const { renderingEngineId, viewportId } = viewportInfo;
    const renderingEngine = getRenderingEngine(renderingEngineId);
    if (!renderingEngine) {
      return null;
    }
    const viewport = renderingEngine.getViewport(viewportId);
    if (!viewport) {
      return null;
    }
    return viewport.element;
  }
};
function _getUniqueViewports(vp1, vp2) {
  const unique = [];
  const vps = vp1.concat(vp2);
  for (let i = 0; i < vps.length; i++) {
    const vp = vps[i];
    if (!unique.some((u) => vp.renderingEngineId === u.renderingEngineId && vp.viewportId === u.viewportId)) {
      unique.push(vp);
    }
  }
  return unique;
}
function _getViewportIndex(arr, vp) {
  return arr.findIndex((ar) => vp.renderingEngineId === ar.renderingEngineId && vp.viewportId === ar.viewportId);
}
function _containsViewport(arr, vp) {
  return arr.some((ar) => ar.renderingEngineId === vp.renderingEngineId && ar.viewportId === vp.viewportId);
}
var Synchronizer_default = Synchronizer;

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js
var SynchronizerManager_exports = {};
__export(SynchronizerManager_exports, {
  createSynchronizer: () => createSynchronizer_default,
  destroy: () => destroy_default2,
  destroySynchronizer: () => destroySynchronizer_default,
  getAllSynchronizers: () => getAllSynchronizers_default,
  getSynchronizer: () => getSynchronizer_default,
  getSynchronizersForViewport: () => getSynchronizersForViewport_default
});

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js
function createSynchronizer(synchronizerId, eventName2, eventHandler, options) {
  const synchronizerWithSameIdExists = state.synchronizers.some((sync) => sync.id === synchronizerId);
  if (synchronizerWithSameIdExists) {
    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);
  }
  const synchronizer = new Synchronizer_default(synchronizerId, eventName2, eventHandler, options);
  state.synchronizers.push(synchronizer);
  return synchronizer;
}
var createSynchronizer_default = createSynchronizer;

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js
function destroy2() {
  while (state.synchronizers.length > 0) {
    const synchronizer = state.synchronizers.pop();
    synchronizer.destroy();
  }
}
var destroy_default2 = destroy2;

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js
function getSynchronizer(synchronizerId) {
  return state.synchronizers.find((s) => s.id === synchronizerId);
}
var getSynchronizer_default = getSynchronizer;

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js
function getAllSynchronizers() {
  return state.synchronizers;
}
var getAllSynchronizers_default = getAllSynchronizers;

// node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js
function destroySynchronizer(synchronizerId) {
  const synchronizerIndex = state.synchronizers.findIndex((sync) => sync.id === synchronizerId);
  if (synchronizerIndex > -1) {
    const synchronizer = state.synchronizers[synchronizerIndex];
    synchronizer.destroy();
    state.synchronizers.splice(synchronizerIndex, 1);
  }
}
var destroySynchronizer_default = destroySynchronizer;

// node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedListener.js
var segmentationRepresentationModifiedListener = function(evt) {
  const { viewportId } = evt.detail;
  triggerSegmentationRender(viewportId);
};
var segmentationRepresentationModifiedListener_default = segmentationRepresentationModifiedListener;

// node_modules/@cornerstonejs/tools/dist/esm/init.js
var csToolsInitialized = false;
function init(defaultConfiguration = {}) {
  if (csToolsInitialized) {
    return;
  }
  setConfig(defaultConfiguration);
  _addCornerstoneEventListeners();
  _addCornerstoneToolsEventListeners();
  csToolsInitialized = true;
}
function destroy3() {
  _removeCornerstoneEventListeners();
  _removeCornerstoneToolsEventListeners();
  destroy_default();
  resetCornerstoneToolsState();
  const annotationManager = getAnnotationManager();
  const segmentationStateManager = defaultSegmentationStateManager;
  annotationManager.restoreAnnotations({});
  segmentationStateManager.resetState();
  csToolsInitialized = false;
}
function _addCornerstoneEventListeners() {
  _removeCornerstoneEventListeners();
  const elementEnabledEvent = enums_exports.Events.ELEMENT_ENABLED;
  const elementDisabledEvent = enums_exports.Events.ELEMENT_DISABLED;
  eventTarget_default.addEventListener(elementEnabledEvent, addEnabledElement);
  eventTarget_default.addEventListener(elementDisabledEvent, removeEnabledElement_default);
  annotationInterpolationEventDispatcher_default.enable();
}
function _removeCornerstoneEventListeners() {
  const elementEnabledEvent = enums_exports.Events.ELEMENT_ENABLED;
  const elementDisabledEvent = enums_exports.Events.ELEMENT_DISABLED;
  eventTarget_default.removeEventListener(elementEnabledEvent, addEnabledElement);
  eventTarget_default.removeEventListener(elementDisabledEvent, removeEnabledElement_default);
  annotationInterpolationEventDispatcher_default.disable();
}
function _addCornerstoneToolsEventListeners() {
  _removeCornerstoneToolsEventListeners();
  eventTarget_default.addEventListener(Events_default.ANNOTATION_COMPLETED, annotationCompletedListener);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_MODIFIED, annotationModifiedListener_default);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener_default);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener_default);
  eventTarget_default.addEventListener(Events_default.ANNOTATION_REMOVED, annotationRemovedListener);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_MODIFIED, segmentationModifiedEventListener_default);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener_default);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener_default);
  eventTarget_default.addEventListener(Events_default.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener_default);
}
function _removeCornerstoneToolsEventListeners() {
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_COMPLETED, annotationCompletedListener);
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_MODIFIED, annotationModifiedListener_default);
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener_default);
  eventTarget_default.removeEventListener(Events_default.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener_default);
  eventTarget_default.removeEventListener(Events_default.SEGMENTATION_MODIFIED, segmentationModifiedEventListener_default);
  eventTarget_default.removeEventListener(Events_default.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener_default);
  eventTarget_default.removeEventListener(Events_default.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener_default);
  eventTarget_default.removeEventListener(Events_default.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener_default);
}

// node_modules/@cornerstonejs/tools/dist/esm/constants/index.js
var constants_exports2 = {};
__export(constants_exports2, {
  COLOR_LUT: () => COLOR_LUT_default
});

// node_modules/@cornerstonejs/tools/dist/esm/version.js
var version = "4.5.8";

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js
var synchronizers_exports = {};
__export(synchronizers_exports, {
  createCameraPositionSynchronizer: () => createCameraPositionSynchronizer,
  createImageSliceSynchronizer: () => createImageSliceSynchronizer,
  createPresentationViewSynchronizer: () => createPresentationViewSynchronizer,
  createSlabThicknessSynchronizer: () => createPresentationViewSynchronizer2,
  createStackImageSynchronizer: () => createStackImageSynchronizer,
  createVOISynchronizer: () => createVOISynchronizer,
  createZoomPanSynchronizer: () => createZoomPanSynchronizer
});

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js
function cameraSyncCallback(synchronizerInstance, sourceViewport, targetViewport, cameraModifiedEvent) {
  const { camera } = cameraModifiedEvent.detail;
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
  }
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  tViewport.setCamera(camera);
  tViewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js
var { CAMERA_MODIFIED } = enums_exports.Events;
function createCameraPositionSynchronizer(synchronizerName) {
  const cameraPositionSynchronizer = createSynchronizer_default(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);
  return cameraPositionSynchronizer;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/presentationViewSyncCallback.js
function presentationViewSyncCallback(_synchronizerInstance, sourceViewport, targetViewport, _sourceEvent, options) {
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
  }
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
  const presentationView = sViewport.getViewPresentation(options);
  tViewport.setViewPresentation(presentationView);
  tViewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js
var { CAMERA_MODIFIED: CAMERA_MODIFIED2 } = enums_exports.Events;
function createPresentationViewSynchronizer(synchronizerName, options) {
  const presentationView = createSynchronizer_default(synchronizerName, CAMERA_MODIFIED2, presentationViewSyncCallback, { viewPresentation: options });
  return presentationView;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js
function voiSyncCallback(synchronizerInstance, sourceViewport, targetViewport, modifiedEvent, options) {
  const eventDetail = modifiedEvent.detail;
  const { volumeId, range: range2, invertStateChanged, invert, colormap } = eventDetail;
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`Rendering Engine does not exist: ${targetViewport.renderingEngineId}`);
  }
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  const tProperties = {
    voiRange: range2
  };
  if (options?.syncInvertState && invertStateChanged) {
    tProperties.invert = invert;
  }
  if (options?.syncColormap && colormap) {
    tProperties.colormap = colormap;
  }
  if (tViewport instanceof BaseVolumeViewport_default) {
    const isFusion = tViewport._actors && tViewport._actors.size > 1;
    if (isFusion) {
      tViewport.setProperties(tProperties, volumeId);
    } else {
      tViewport.setProperties(tProperties);
    }
  } else if (tViewport instanceof StackViewport_default) {
    tViewport.setProperties(tProperties);
  } else {
    throw new Error("Viewport type not supported.");
  }
  tViewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js
function createVOISynchronizer(synchronizerName, options) {
  options = Object.assign({ syncInvertState: true, syncColormap: true }, options);
  const VOISynchronizer = createSynchronizer_default(synchronizerName, enums_exports.Events.VOI_MODIFIED, voiSyncCallback, {
    auxiliaryEvents: [
      {
        name: enums_exports.Events.COLORMAP_MODIFIED
      }
    ],
    ...options
  });
  return VOISynchronizer;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js
function zoomPanSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
  }
  const options = synchronizerInstance.getOptions(targetViewport.viewportId);
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
  if (options?.syncZoom !== false) {
    const srcZoom = sViewport.getZoom();
    tViewport.setZoom(srcZoom);
  }
  if (options?.syncPan !== false) {
    const srcPan = sViewport.getPan();
    tViewport.setPan(srcPan);
  }
  tViewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js
var { CAMERA_MODIFIED: CAMERA_MODIFIED3 } = enums_exports.Events;
function createZoomPanSynchronizer(synchronizerName) {
  const zoomPanSynchronizer = createSynchronizer_default(synchronizerName, CAMERA_MODIFIED3, zoomPanSyncCallback);
  return zoomPanSynchronizer;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar.js
function areViewportsCoplanar(viewport1, viewport2) {
  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();
  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();
  const dotProducts = vec3_exports.dot(viewPlaneNormal1, viewPlaneNormal2);
  return Math.abs(dotProducts) > 0.9;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/imageSliceSyncCallback.js
var getSpatialRegistration = (targetId, sourceId) => utilities_exports.spatialRegistrationMetadataProvider.get("spatialRegistrationModule", targetId, sourceId);
async function imageSliceSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
  }
  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
  const options = synchronizerInstance.getOptions(targetViewport.viewportId);
  if (options?.disabled) {
    return;
  }
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  const imageId1 = sViewport.getCurrentImageId();
  const imagePlaneModule1 = metaData_exports.get("imagePlaneModule", imageId1);
  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;
  const targetImageIds = tViewport.getImageIds();
  if (!areViewportsCoplanar(sViewport, tViewport)) {
    return;
  }
  let registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);
  if (!registrationMatrixMat4) {
    const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();
    const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();
    if (frameOfReferenceUID1 === frameOfReferenceUID2 && options?.useInitialPosition !== false) {
      registrationMatrixMat4 = mat4_exports.identity(mat4_exports.create());
    } else {
      utilities_exports.calculateViewportsSpatialRegistration(sViewport, tViewport);
      registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);
    }
    if (!registrationMatrixMat4) {
      return;
    }
  }
  const targetImagePositionPatientWithRegistrationMatrix = vec3_exports.transformMat4(vec3_exports.create(), sourceImagePositionPatient, registrationMatrixMat4);
  const closestImageIdIndex2 = _getClosestImageIdIndex(targetImagePositionPatientWithRegistrationMatrix, targetImageIds);
  let imageIndexToSet = closestImageIdIndex2.index;
  if (tViewport instanceof VolumeViewport_default) {
    imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;
  }
  if (closestImageIdIndex2.index !== -1 && tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index) {
    await utilities_exports.jumpToSlice(tViewport.element, {
      imageIndex: imageIndexToSet
    });
  }
}
function _getClosestImageIdIndex(targetPoint, imageIds) {
  return imageIds.reduce((closestImageIdIndex, imageId, index) => {
    const { imagePositionPatient } = metaData_exports.get("imagePlaneModule", imageId);
    const distance = vec3_exports.distance(imagePositionPatient, targetPoint);
    if (distance < closestImageIdIndex.distance) {
      return {
        distance,
        index
      };
    }
    return closestImageIdIndex;
  }, {
    distance: Infinity,
    index: -1
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js
var { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = enums_exports.Events;
function createImageSliceSynchronizer(synchronizerName) {
  const stackImageSynchronizer = createSynchronizer_default(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {
    auxiliaryEvents: [
      {
        name: "VOLUME_NEW_IMAGE"
      }
    ]
  });
  return stackImageSynchronizer;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/slabThicknessSyncCallback.js
function slabThicknessSyncCallback(_synchronizerInstance, sourceViewport, targetViewport) {
  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);
  if (!renderingEngine) {
    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
  }
  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
  const slabThickness = sViewport.getSlabThickness?.();
  if (!slabThickness) {
    return;
  }
  tViewport.setSlabThickness?.(slabThickness);
  tViewport.render();
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js
var { CAMERA_MODIFIED: CAMERA_MODIFIED4 } = enums_exports.Events;
function createPresentationViewSynchronizer2(synchronizerName) {
  const presentationView = createSynchronizer_default(synchronizerName, CAMERA_MODIFIED4, slabThicknessSyncCallback);
  return presentationView;
}

// node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js
var createStackImageSynchronizer = createImageSliceSynchronizer;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js
var utilities_exports2 = {};
__export(utilities_exports2, {
  AnnotationMultiSlice: () => AnnotationMultiSlice,
  IslandRemoval: () => IslandRemoval,
  annotationHydration: () => annotationHydration,
  boundingBox: () => boundingBox_exports,
  calibrateImageSpacing: () => calibrateImageSpacing,
  cine: () => cine_exports,
  contourSegmentation: () => contourSegmentation_exports,
  contours: () => contours_exports,
  debounce: () => debounce_default,
  drawing: () => drawing_exports,
  dynamicVolume: () => dynamicVolume_exports,
  geometricSurfaceUtils: () => geometricSurfaceUtils_exports,
  getAnnotationNearPoint: () => getAnnotationNearPoint,
  getAnnotationNearPointOnEnabledElement: () => getAnnotationNearPointOnEnabledElement,
  getCalibratedAspect: () => getCalibratedAspect,
  getCalibratedLengthUnitsAndScale: () => getCalibratedLengthUnitsAndScale,
  getCalibratedProbeUnitsAndValue: () => getCalibratedProbeUnitsAndValue,
  getClosestImageIdForStackViewport: () => getClosestImageIdForStackViewport,
  getOrCreateImageVolume: () => getOrCreateImageVolume_default,
  getPixelValueUnits: () => getPixelValueUnits,
  getPixelValueUnitsImageId: () => getPixelValueUnitsImageId,
  getSphereBoundsInfo: () => getSphereBoundsInfo,
  getViewportForAnnotation: () => getViewportForAnnotation,
  isObject: () => isObject_default,
  math: () => math_exports,
  moveAnnotationToViewPlane: () => moveAnnotationToViewPlane,
  normalizeViewportPlane: () => normalizeViewportPlane,
  orientation: () => orientation_exports,
  planar: () => planar_exports,
  planarFreehandROITool: () => planarFreehandROITool_exports,
  pointInSurroundingSphereCallback: () => pointInSurroundingSphereCallback,
  pointToString: () => pointToString,
  polyDataUtils: () => utils_exports,
  rectangleROITool: () => rectangleROITool_exports,
  roundNumber: () => roundNumber,
  segmentation: () => segmentation_exports,
  setAnnotationLabel: () => setAnnotationLabel,
  stackContextPrefetch: () => stackContextPrefetch_default,
  stackPrefetch: () => stackPrefetch_default,
  throttle: () => throttle_default,
  touch: () => touch_exports,
  triggerAnnotationRender: () => triggerAnnotationRender_default,
  triggerAnnotationRenderForToolGroupIds: () => triggerAnnotationRenderForToolGroupIds_default,
  triggerAnnotationRenderForViewportIds: () => triggerAnnotationRenderForViewportIds_default,
  triggerEvent: () => triggerEvent,
  usFanExtraction: () => fanExtraction_exports,
  viewport: () => viewport_exports,
  viewportFilters: () => viewportFilters_exports,
  voi: () => voi_exports
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js
function getAnnotationNearPoint(element, canvasPoint, proximity = 5) {
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    throw new Error("getAnnotationNearPoint: enabledElement not found");
  }
  return getAnnotationNearPointOnEnabledElement(enabledElement, canvasPoint, proximity);
}
function getAnnotationNearPointOnEnabledElement(enabledElement, point, proximity) {
  const { renderingEngineId, viewportId } = enabledElement;
  const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
  if (!toolGroup) {
    return null;
  }
  const { _toolInstances: tools } = toolGroup;
  for (const name in tools) {
    const found = findAnnotationNearPointByTool(tools[name], enabledElement, point, proximity);
    if (found) {
      return found;
    }
  }
  return null;
}
function findAnnotationNearPointByTool(tool, enabledElement, point, proximity) {
  const { viewport } = enabledElement;
  const annotations = getAnnotations(tool.constructor.toolName, viewport?.element);
  const currentId = viewport?.getCurrentImageId?.();
  if (annotations?.length) {
    const { element } = enabledElement.viewport;
    for (const annotation of annotations) {
      const referencedImageId = annotation.metadata?.referencedImageId;
      if (currentId && referencedImageId && currentId !== referencedImageId || !tool.isPointNearTool) {
        continue;
      }
      if (tool.isPointNearTool(element, annotation, point, proximity, "") || tool.getHandleNearImagePoint(element, annotation, point, proximity)) {
        return annotation;
      }
    }
  }
  return null;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js
var { calibratedPixelSpacingMetadataProvider } = utilities_exports;
function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {
  if (typeof calibrationOrScale === "number") {
    calibrationOrScale = {
      type: enums_exports.CalibrationTypes.USER,
      scale: calibrationOrScale
    };
  }
  calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);
  const viewports = renderingEngine.getStackViewports();
  viewports.forEach((viewport) => {
    const imageIds = viewport.getImageIds();
    if (imageIds.includes(imageId)) {
      viewport.calibrateSpacing(imageId);
    }
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js
var boundingBox_exports = {};
__export(boundingBox_exports, {
  extend2DBoundingBoxInViewAxis: () => extend2DBoundingBoxInViewAxis_default,
  getBoundingBoxAroundShape: () => getBoundingBoxAroundShapeIJK,
  getBoundingBoxAroundShapeIJK: () => getBoundingBoxAroundShapeIJK,
  getBoundingBoxAroundShapeWorld: () => getBoundingBoxAroundShapeWorld
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js
function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {
  const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);
  if (sliceNormalIndex === -1) {
    throw new Error("3D bounding boxes not supported in an oblique plane");
  }
  boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;
  boundsIJK[sliceNormalIndex][1] += numSlicesToProject;
  return boundsIJK;
}
var extend2DBoundingBoxInViewAxis_default = extend2DBoundingBoxInViewAxis;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js
var { transformWorldToIndex } = utilities_exports;
function _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {
  const [bottom, top] = circlePoints;
  const centerWorld = vec3_exports.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);
  const radiusWorld = vec3_exports.distance(bottom, top) / 2;
  const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);
  return {
    boundsIJK,
    centerWorld,
    radiusWorld,
    topLeftWorld,
    bottomRightWorld
  };
}
function getSphereBoundsInfo(circlePoints, imageData) {
  const direction = imageData.getDirection();
  const rowCosine = vec3_exports.fromValues(direction[0], direction[1], direction[2]);
  const columnCosine = vec3_exports.fromValues(direction[3], direction[4], direction[5]);
  const scanAxis = vec3_exports.fromValues(direction[6], direction[7], direction[8]);
  const viewPlaneNormal = vec3_exports.negate(vec3_exports.create(), scanAxis);
  const directionVectors = {
    row: rowCosine,
    column: columnCosine,
    normal: viewPlaneNormal
  };
  return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);
}
function getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {
  if (!viewport) {
    throw new Error("viewport is required in order to calculate the sphere bounds");
  }
  const camera = viewport.getCamera();
  const viewUp = vec3_exports.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);
  const viewPlaneNormal = vec3_exports.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);
  const viewRight = vec3_exports.create();
  vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
  const directionVectors = {
    row: viewRight,
    normal: viewPlaneNormal,
    column: vec3_exports.negate(vec3_exports.create(), viewUp)
  };
  return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);
}
function _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {
  const dimensions = imageData.getDimensions();
  const { row: rowCosine, column: columnCosine, normal: vecNormal } = directionVectors;
  const topLeftWorld = vec3_exports.create();
  const bottomRightWorld = vec3_exports.create();
  vec3_exports.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);
  vec3_exports.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);
  vec3_exports.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);
  vec3_exports.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);
  vec3_exports.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);
  vec3_exports.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);
  const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);
  const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);
  const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));
  const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);
  return { boundsIJK, topLeftWorld, bottomRightWorld };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js
function pointToString(point, decimals = 5) {
  return parseFloat(point[0]).toFixed(decimals) + "," + parseFloat(point[1]).toFixed(decimals) + "," + parseFloat(point[2]).toFixed(decimals) + ",";
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/AnnotationMultiSlice.js
var AnnotationMultiSlice = class {
  static setStartRange(viewport, annotation, startRange = viewport.getCurrentImageIdIndex()) {
    this.setRange(viewport, annotation, startRange);
  }
  static setEndRange(viewport, annotation, endRange = viewport.getCurrentImageIdIndex()) {
    this.setRange(viewport, annotation, void 0, endRange);
  }
  static setRange(viewport, annotation, startRange, endRange) {
    const { metadata } = annotation;
    if (startRange === void 0) {
      startRange = metadata.sliceIndex < endRange ? metadata.sliceIndex : 0;
      if (endRange === void 0) {
        endRange = viewport.getNumberOfSlices() - 1;
      }
    }
    const rangeEndSliceIndex = viewport.getSliceIndexForImage(metadata.multiSliceReference);
    if (endRange === void 0) {
      endRange = rangeEndSliceIndex >= startRange ? rangeEndSliceIndex : viewport.getNumberOfSlices() - 1;
    }
    endRange = Math.max(startRange, endRange);
    metadata.sliceIndex = Math.min(startRange, endRange);
    metadata.referencedImageId = viewport.getCurrentImageId(metadata.sliceIndex);
    metadata.referencedImageURI = void 0;
    if (endRange === metadata.sliceIndex) {
      metadata.multiSliceReference = void 0;
    } else if (endRange !== metadata.multiSliceReference?.sliceIndex) {
      metadata.multiSliceReference = {
        referencedImageId: viewport.getCurrentImageId(endRange),
        sliceIndex: endRange
      };
    }
    const eventDetail = {
      viewportId: viewport.id,
      renderingEngineId: viewport.renderingEngineId,
      changeType: ChangeTypes_default.MetadataReferenceModified,
      annotation
    };
    triggerEvent(eventTarget_default, Events_default.ANNOTATION_MODIFIED, eventDetail);
    this.setViewportFrameRange(viewport, metadata);
  }
  static setSingle(viewport, annotation, current = viewport.getCurrentImageIdIndex()) {
    this.setRange(viewport, annotation, current, current);
  }
  static getFrameRange(annotation) {
    const { metadata } = annotation;
    const { sliceIndex, multiSliceReference } = metadata;
    const rangeEndSliceIndex = multiSliceReference?.sliceIndex;
    return rangeEndSliceIndex ? [sliceIndex + 1, rangeEndSliceIndex + 1] : sliceIndex + 1;
  }
  static getFrameRangeStr(annotation) {
    const range2 = this.getFrameRange(annotation);
    return Array.isArray(range2) ? `${range2[0]}-${range2[1]}` : String(range2);
  }
  static setViewportFrameRange(viewport, specifier) {
    if (viewport.setFrameRange && specifier.multiSliceReference?.sliceIndex) {
      viewport.setFrameRange(specifier.sliceIndex + 1, specifier.multiSliceReference.sliceIndex + 1);
    }
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/index.js
var contours_exports = {};
__export(contours_exports, {
  AnnotationToPointData: () => AnnotationToPointData_default,
  acceptAutogeneratedInterpolations: () => acceptAutogeneratedInterpolations,
  areCoplanarContours: () => areCoplanarContours,
  calculatePerimeter: () => calculatePerimeter_default,
  contourFinder: () => contourFinder_default,
  detectContourHoles: () => detectContourHoles_default,
  findContourHoles: () => findContourHoles,
  findHandlePolylineIndex: () => findHandlePolylineIndex,
  findIslands: () => findIslands,
  generateContourSetsFromLabelmap: () => generateContourSetsFromLabelmap,
  getContourHolesDataCanvas: () => getContourHolesDataCanvas,
  getContourHolesDataWorld: () => getContourHolesDataWorld,
  getDeduplicatedVTKPolyDataPoints: () => getDeduplicatedVTKPolyDataPoints,
  updateContourPolyline: () => updateContourPolyline
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/areCoplanarContours.js
function areCoplanarContours(firstAnnotation, secondAnnotation) {
  const { viewPlaneNormal: firstViewPlaneNormal } = firstAnnotation.metadata;
  const { viewPlaneNormal: secondViewPlaneNormal } = secondAnnotation.metadata;
  const dot2 = vec3_exports.dot(firstViewPlaneNormal, secondViewPlaneNormal);
  const parallelPlanes = common_exports.equals(1, Math.abs(dot2));
  if (!parallelPlanes) {
    return false;
  }
  const { polyline: firstPolyline } = firstAnnotation.data.contour;
  const { polyline: secondPolyline } = secondAnnotation.data.contour;
  const firstDistance = vec3_exports.dot(firstViewPlaneNormal, firstPolyline[0]);
  const secondDistance = vec3_exports.dot(firstViewPlaneNormal, secondPolyline[0]);
  return common_exports.equals(firstDistance, secondDistance);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/contourFinder.js
function findNextLink(line, lines, contourPoints) {
  let index = -1;
  lines.forEach((cell, i) => {
    if (index >= 0) {
      return;
    }
    if (cell.a == line.b) {
      index = i;
    }
  });
  if (index >= 0) {
    const nextLine = lines[index];
    lines.splice(index, 1);
    contourPoints.push(nextLine.b);
    if (contourPoints[0] == nextLine.b) {
      return {
        remainingLines: lines,
        contourPoints,
        type: "CLOSED_PLANAR"
      };
    }
    return findNextLink(nextLine, lines, contourPoints);
  }
  return {
    remainingLines: lines,
    contourPoints,
    type: "OPEN_PLANAR"
  };
}
function findContours(lines) {
  if (lines.length == 0) {
    return [];
  }
  const contourPoints = [];
  const firstCell = lines.shift();
  contourPoints.push(firstCell.a);
  contourPoints.push(firstCell.b);
  const result = findNextLink(firstCell, lines, contourPoints);
  if (result.remainingLines.length == 0) {
    return [
      {
        type: result.type,
        contourPoints: result.contourPoints
      }
    ];
  } else {
    const extraContours = findContours(result.remainingLines);
    extraContours.push({
      type: result.type,
      contourPoints: result.contourPoints
    });
    return extraContours;
  }
}
function findContoursFromReducedSet(lines) {
  return findContours(lines);
}
var contourFinder_default = {
  findContours,
  findContoursFromReducedSet
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getDeduplicatedVTKPolyDataPoints.js
function getDeduplicatedVTKPolyDataPoints(polyData, bypass = false) {
  const points = polyData.getPoints();
  const lines = polyData.getLines();
  const pointsArray = new Array(points.getNumberOfPoints()).fill(0).map((_, i) => points.getPoint(i).slice());
  const linesArray = new Array(lines.getNumberOfCells()).fill(0).map((_, i) => {
    const cell = lines.getCell(i * 3).slice();
    return { a: cell[0], b: cell[1] };
  });
  if (bypass) {
    return { points: pointsArray, lines: linesArray };
  }
  const newPoints = [];
  for (const [i, pt] of pointsArray.entries()) {
    const index = newPoints.findIndex((point) => point[0] === pt[0] && point[1] === pt[1] && point[2] === pt[2]);
    if (index >= 0) {
      linesArray.map((line) => {
        if (line.a === i) {
          line.a = index;
        }
        if (line.b === i) {
          line.b = index;
        }
        return line;
      });
    } else {
      const newIndex = newPoints.length;
      newPoints.push(pt);
      linesArray.map((line) => {
        if (line.a === i) {
          line.a = newIndex;
        }
        if (line.b === i) {
          line.b = newIndex;
        }
        return line;
      });
    }
  }
  const newLines = linesArray.filter((line) => line.a !== line.b);
  return { points: newPoints, lines: newLines };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/detectContourHoles.js
var getIsPointInsidePolygon = (point, vertices) => {
  const x = point[0];
  const y = point[1];
  let inside = false;
  for (let i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {
    const xi = vertices[i][0], yi = vertices[i][1];
    const xj = vertices[j][0], yj = vertices[j][1];
    const intersect2 = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect2) {
      inside = !inside;
    }
  }
  return inside;
};
function checkEnclosed(outerContour, innerContour, points) {
  const vertices = [];
  outerContour.contourPoints.forEach((point) => {
    vertices.push([points[point][0], points[point][1]]);
  });
  let pointsNotEnclosed = 0;
  innerContour.contourPoints.forEach((point) => {
    const result = getIsPointInsidePolygon([points[point][0], points[point][1]], vertices);
    if (!result) {
      pointsNotEnclosed++;
    }
  });
  return pointsNotEnclosed === 0;
}
function processContourHoles(contours, points, useXOR = true) {
  const retContours = contours.filter((contour) => contour.type !== "CLOSED_PLANAR");
  const closedContours = contours.filter((contour) => contour.type === "CLOSED_PLANAR");
  const contourWithHoles = [];
  let contourWithoutHoles = [];
  closedContours.forEach((contour, index) => {
    const holes = [];
    closedContours.forEach((hContour, hIndex) => {
      if (index != hIndex) {
        if (checkEnclosed(contour, hContour, points)) {
          holes.push(hIndex);
        }
      }
    });
    if (holes.length > 0) {
      contourWithHoles.push({
        contour,
        holes
      });
    } else {
      contourWithoutHoles.push(index);
    }
  });
  if (useXOR) {
    contourWithHoles.forEach((contourHoleSet) => {
      contourHoleSet.contour.type = "CLOSEDPLANAR_XOR";
      retContours.push(contourHoleSet.contour);
      contourHoleSet.holes.forEach((holeIndex) => {
        closedContours[holeIndex].type = "CLOSEDPLANAR_XOR";
        retContours.push(closedContours[holeIndex]);
        contourWithoutHoles = contourWithoutHoles.filter((contourIndex2) => {
          return contourIndex2 !== holeIndex;
        });
      });
    });
    contourWithoutHoles.forEach((contourIndex2) => {
      retContours.push(closedContours[contourIndex2]);
    });
  } else {
  }
  return retContours;
}
var detectContourHoles_default = { processContourHoles };

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findContourHoles.js
function isPolygonInsidePolygon(inner, outer) {
  return containsPoints(outer, inner);
}
function findContourHoles(polylines) {
  const results = [];
  const closedPolylines = [];
  polylines.forEach((polyline, index) => {
    if (isClosed(polyline)) {
      closedPolylines.push({ polyline, originalIndex: index });
    }
  });
  for (let i = 0; i < closedPolylines.length; i++) {
    const outerContour = closedPolylines[i];
    const outerArea = Math.abs(getSignedArea(outerContour.polyline));
    const holeIndexes = [];
    for (let j = 0; j < closedPolylines.length; j++) {
      if (i === j) {
        continue;
      }
      const potentialHole = closedPolylines[j];
      const holeArea = Math.abs(getSignedArea(potentialHole.polyline));
      if (holeArea < outerArea && isPolygonInsidePolygon(potentialHole.polyline, outerContour.polyline)) {
        holeIndexes.push(potentialHole.originalIndex);
      }
    }
    if (holeIndexes.length > 0) {
      results.push({
        contourIndex: outerContour.originalIndex,
        holeIndexes: holeIndexes.sort((a, b) => a - b)
      });
    }
  }
  return results.sort((a, b) => a.contourIndex - b.contourIndex);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/registerComputeWorker.js
var registered = false;
function registerComputeWorker() {
  if (registered) {
    return;
  }
  registered = true;
  const workerFn = () => {
    return new Worker(new URL("../workers/computeWorker.js", import.meta.url), {
      name: "compute",
      type: "module"
    });
  };
  const workerManager = getWebWorkerManager();
  const config2 = getConfig();
  const computeWorkerConfig = config2.computeWorker;
  const options = {
    maxWorkerInstances: 1,
    autoTerminateOnIdle: computeWorkerConfig?.autoTerminateOnIdle ?? {
      enabled: true,
      idleTimeThreshold: 2e3
    }
  };
  workerManager.registerWorker("compute", workerFn, options);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js
var segmentationState_exports = {};
__export(segmentationState_exports, {
  addColorLUT: () => addColorLUT,
  addSegmentations: () => addSegmentations,
  destroy: () => destroy4,
  getColorLUT: () => getColorLUT,
  getCurrentLabelmapImageIdForViewport: () => getCurrentLabelmapImageIdForViewport,
  getCurrentLabelmapImageIdsForViewport: () => getCurrentLabelmapImageIdsForViewport,
  getNextColorLUTIndex: () => getNextColorLUTIndex,
  getSegmentation: () => getSegmentation,
  getSegmentationRepresentation: () => getSegmentationRepresentation,
  getSegmentationRepresentations: () => getSegmentationRepresentations,
  getSegmentationRepresentationsBySegmentationId: () => getSegmentationRepresentationsBySegmentationId,
  getSegmentations: () => getSegmentations,
  getStackSegmentationImageIdsForViewport: () => getStackSegmentationImageIdsForViewport,
  getViewportIdsWithSegmentation: () => getViewportIdsWithSegmentation,
  getViewportSegmentationRepresentations: () => getViewportSegmentationRepresentations,
  getViewportSegmentations: () => getViewportSegmentations,
  removeAllSegmentationRepresentations: () => removeAllSegmentationRepresentations,
  removeAllSegmentations: () => removeAllSegmentations,
  removeColorLUT: () => removeColorLUT,
  removeContourRepresentation: () => removeContourRepresentation,
  removeLabelmapRepresentation: () => removeLabelmapRepresentation,
  removeSegmentation: () => removeSegmentation,
  removeSegmentationRepresentation: () => removeSegmentationRepresentation,
  removeSurfaceRepresentation: () => removeSurfaceRepresentation,
  updateLabelmapSegmentationImageReferences: () => updateLabelmapSegmentationImageReferences
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js
function getSegmentations() {
  const segmentationStateManager = defaultSegmentationStateManager;
  const state8 = segmentationStateManager.getState();
  return state8.segmentations;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js
function normalizeSegmentationInput(segmentationInput) {
  const { segmentationId, representation, config: config2 } = segmentationInput;
  const { type, data: inputData } = representation;
  const data = inputData ? { ...inputData } : {};
  if (!data) {
    throw new Error("Segmentation representation data may not be undefined");
  }
  if (type === SegmentationRepresentations_default.Contour) {
    normalizeContourData(data);
  }
  const normalizedSegments = normalizeSegments(config2?.segments, type, data);
  delete config2?.segments;
  return {
    segmentationId,
    label: config2?.label ?? null,
    cachedStats: config2?.cachedStats ?? {},
    segments: normalizedSegments,
    representationData: {
      [type]: {
        ...data
      }
    }
  };
}
function normalizeContourData(contourData) {
  contourData.geometryIds = contourData.geometryIds ?? [];
  contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? /* @__PURE__ */ new Map();
}
function normalizeSegments(segmentsConfig, type, data) {
  const normalizedSegments = {};
  if (segmentsConfig) {
    Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {
      const { label, locked, cachedStats, active, ...rest } = segment;
      const normalizedSegment = {
        segmentIndex: Number(segmentIndex),
        label: label ?? `Segment ${segmentIndex}`,
        locked: locked ?? false,
        cachedStats: cachedStats ?? {},
        active: active ?? false,
        ...rest
      };
      normalizedSegments[segmentIndex] = normalizedSegment;
    });
  } else if (type === SegmentationRepresentations_default.Contour) {
    normalizeContourSegments(normalizedSegments, data);
  } else if (type === SegmentationRepresentations_default.Surface) {
    normalizeSurfaceSegments(normalizedSegments, data);
  } else {
    normalizedSegments[1] = createDefaultSegment();
  }
  return normalizedSegments;
}
function normalizeContourSegments(normalizedSegments, contourData) {
  const { geometryIds } = contourData;
  geometryIds?.forEach((geometryId) => {
    const geometry = cache_default.getGeometry(geometryId);
    if (geometry?.data) {
      const { segmentIndex } = geometry.data;
      normalizedSegments[segmentIndex] = { segmentIndex };
    }
  });
}
function normalizeSurfaceSegments(normalizedSegments, surfaceData) {
  const { geometryIds } = surfaceData;
  geometryIds?.forEach((geometryId) => {
    const geometry = cache_default.getGeometry(geometryId);
    if (geometry?.data) {
      const { segmentIndex } = geometry.data;
      normalizedSegments[segmentIndex] = { segmentIndex };
    }
  });
}
function createDefaultSegment() {
  return {
    segmentIndex: 1,
    label: "Segment 1",
    locked: false,
    cachedStats: {},
    active: true
  };
}
var normalizeSegmentationInput_default = normalizeSegmentationInput;

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js
function addSegmentations(segmentationInputArray, suppressEvents) {
  const segmentationStateManager = defaultSegmentationStateManager;
  segmentationInputArray.forEach((segmentationInput) => {
    const segmentation = normalizeSegmentationInput_default(segmentationInput);
    segmentationStateManager.addSegmentation(segmentation);
    if (!suppressEvents) {
      triggerSegmentationModified(segmentation.segmentationId);
    }
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js
function removeSegmentationRepresentation(viewportId, specifier, immediate) {
  return _removeSegmentationRepresentations(viewportId, specifier, immediate);
}
function removeSegmentationRepresentations(viewportId, specifier, immediate) {
  return _removeSegmentationRepresentations(viewportId, specifier, immediate);
}
function _removeSegmentationRepresentations(viewportId, specifier, immediate) {
  const { segmentationId, type } = specifier;
  _removeRepresentationObject(viewportId, segmentationId, type, immediate);
  return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {
    segmentationId,
    type
  });
}
function removeAllSegmentationRepresentations() {
  const state8 = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();
  state8.forEach(({ viewportId, representations }) => {
    representations.forEach(({ segmentationId, type }) => {
      removeSegmentationRepresentation(viewportId, {
        segmentationId,
        type
      });
    });
  });
  defaultSegmentationStateManager.resetState();
}
function removeLabelmapRepresentation(viewportId, segmentationId, immediate) {
  removeSegmentationRepresentation(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Labelmap
  }, immediate);
}
function removeContourRepresentation(viewportId, segmentationId, immediate) {
  removeSegmentationRepresentation(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Contour
  }, immediate);
}
function removeSurfaceRepresentation(viewportId, segmentationId, immediate) {
  removeSegmentationRepresentation(viewportId, {
    segmentationId,
    type: SegmentationRepresentations_default.Surface
  }, immediate);
}
function _removeRepresentationObject(viewportId, segmentationId, type, immediate) {
  const representations = getSegmentationRepresentations(viewportId, {
    segmentationId,
    type
  });
  representations.forEach((representation) => {
    if (representation.type === SegmentationRepresentations_default.Labelmap) {
      labelmapDisplay_default.removeRepresentation(viewportId, representation.segmentationId, immediate);
    } else if (representation.type === SegmentationRepresentations_default.Contour) {
      contourDisplay_default.removeRepresentation(viewportId, representation.segmentationId, immediate);
    } else if (representation.type === SegmentationRepresentations_default.Surface) {
      surfaceDisplay_default.removeRepresentation(viewportId, representation.segmentationId, immediate);
    }
  });
  const { viewport } = getEnabledElementByViewportId(viewportId) || {};
  if (viewport) {
    viewport.render();
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js
function removeSegmentation(segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  const viewportsWithSegmentation = segmentationStateManager.getAllViewportSegmentationRepresentations().filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId)).map(({ viewportId }) => viewportId);
  viewportsWithSegmentation.forEach((viewportId) => {
    removeSegmentationRepresentations(viewportId, { segmentationId });
  });
  segmentationStateManager.removeSegmentation(segmentationId);
  triggerSegmentationRemoved(segmentationId);
}
function removeAllSegmentations() {
  const segmentationStateManager = defaultSegmentationStateManager;
  const segmentations = segmentationStateManager.getState().segmentations;
  const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);
  segmentationIds.forEach((segmentationId) => {
    removeSegmentation(segmentationId);
  });
  segmentationStateManager.resetState();
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js
function removeColorLUT(colorLUTIndex) {
  const segmentationStateManager = defaultSegmentationStateManager;
  segmentationStateManager.removeColorLUT(colorLUTIndex);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js
function getViewportSegmentations(viewportId, type) {
  const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);
  const segmentations = viewportRepresentations.map((representation) => {
    if (type && representation.type === type) {
      return getSegmentation(representation.segmentationId);
    }
    return getSegmentation(representation.segmentationId);
  });
  const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== void 0);
  return filteredSegmentations;
}
function getViewportSegmentationRepresentations(viewportId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  const state8 = segmentationStateManager.getState();
  const viewportRepresentations = state8.viewportSegRepresentations[viewportId];
  return viewportRepresentations;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js
function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js
function destroy4() {
  defaultSegmentationStateManager.resetState();
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/validateLabelmap.js
var validateLabelmap_exports = {};
__export(validateLabelmap_exports, {
  validate: () => validate,
  validatePublic: () => validatePublic
});
function validateRepresentationData(segmentationRepresentationData) {
  if ("volumeId" in segmentationRepresentationData) {
    segmentationRepresentationData = segmentationRepresentationData;
    const cachedVolume = cache_default.getVolume(segmentationRepresentationData.volumeId);
    if (!cachedVolume) {
      throw new Error(`volumeId of ${segmentationRepresentationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`);
    }
  } else if ("imageIds" in segmentationRepresentationData) {
    segmentationRepresentationData = segmentationRepresentationData;
    if (!segmentationRepresentationData.imageIds) {
      throw new Error("The segmentationInput.representationData.imageIds is undefined, please provide a valid representationData.imageIds for stack data");
    }
  } else {
    throw new Error("The segmentationInput.representationData is undefined, please provide a valid representationData");
  }
}
function validatePublic(segmentationInput) {
  if (!segmentationInput.representation.data) {
    throw new Error("The segmentationInput.representationData.data is undefined, please provide a valid representationData.data");
  }
  const representationData = segmentationInput.representation.data;
  validateRepresentationData(representationData);
}
function validate(segmentationRepresentationData) {
  validateRepresentationData(segmentationRepresentationData);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentationVolume.js
function getReferenceVolumeForSegmentationVolume(segmentationVolumeId) {
  const segmentationVolume = cache_default.getVolume(segmentationVolumeId);
  if (!segmentationVolume) {
    return null;
  }
  const referencedVolumeId = segmentationVolume.referencedVolumeId;
  let imageVolume;
  if (referencedVolumeId) {
    imageVolume = cache_default.getVolume(referencedVolumeId);
  } else {
    const imageIds = segmentationVolume.imageIds;
    const image = cache_default.getImage(imageIds[0]);
    const referencedImageId = image.referencedImageId;
    const volumeInfo = cache_default.getVolumeContainingImageId(referencedImageId);
    imageVolume = volumeInfo?.volume;
  }
  return imageVolume;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/utils/getStrategyData.js
function getStrategyDataForVolumeViewport({ operationData }) {
  const { volumeId } = operationData;
  if (!volumeId) {
    const event = new CustomEvent(enums_exports.Events.ERROR_EVENT, {
      detail: {
        type: "Segmentation",
        message: "No volume id found for the segmentation"
      },
      cancelable: true
    });
    eventTarget_default.dispatchEvent(event);
    return null;
  }
  const segmentationVolume = cache_default.getVolume(volumeId);
  const imageVolume = getReferenceVolumeForSegmentationVolume(volumeId);
  if (!segmentationVolume || !imageVolume) {
    return null;
  }
  const { imageData: segmentationImageData } = segmentationVolume;
  const { voxelManager: segmentationVoxelManager } = segmentationVolume;
  const { voxelManager: imageVoxelManager, imageData } = imageVolume;
  return {
    segmentationImageData,
    segmentationVoxelManager,
    segmentationScalarData: null,
    imageScalarData: null,
    imageVoxelManager,
    imageData
  };
}
function getStrategyDataForStackViewport({ operationData, viewport, strategy }) {
  const { segmentationId } = operationData;
  let segmentationImageData;
  let segmentationVoxelManager;
  let segmentationScalarData;
  let imageScalarData;
  let imageVoxelManager;
  let imageData;
  if (strategy.ensureSegmentationVolumeFor3DManipulation) {
    strategy.ensureSegmentationVolumeFor3DManipulation({
      operationData,
      viewport
    });
    segmentationVoxelManager = operationData.segmentationVoxelManager;
    segmentationImageData = operationData.segmentationImageData;
    segmentationScalarData = null;
  } else {
    const labelmapImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
    if (!labelmapImageId) {
      return null;
    }
    const actorEntry = getLabelmapActorEntry(viewport.id, segmentationId);
    if (!actorEntry) {
      return null;
    }
    const currentSegImage = cache_default.getImage(labelmapImageId);
    segmentationImageData = actorEntry.actor.getMapper().getInputData();
    segmentationVoxelManager = currentSegImage.voxelManager;
    const currentSegmentationImageId = operationData.imageId;
    const segmentationImage = cache_default.getImage(currentSegmentationImageId);
    if (!segmentationImage) {
      return null;
    }
    segmentationScalarData = segmentationImage.getPixelData?.();
  }
  if (strategy.ensureImageVolumeFor3DManipulation) {
    strategy.ensureImageVolumeFor3DManipulation({
      operationData,
      viewport
    });
    imageVoxelManager = operationData.imageVoxelManager;
    imageScalarData = operationData.imageScalarData;
    imageData = operationData.imageData;
  } else {
    const currentImageId = viewport.getCurrentImageId();
    if (!currentImageId) {
      return null;
    }
    const image = cache_default.getImage(currentImageId);
    imageData = image ? null : viewport.getImageData();
    imageScalarData = image?.getPixelData() || imageData.getScalarData();
    imageVoxelManager = image?.voxelManager;
  }
  return {
    segmentationImageData,
    segmentationScalarData,
    imageScalarData,
    segmentationVoxelManager,
    imageVoxelManager,
    imageData
  };
}
function getStrategyData({ operationData, viewport, strategy }) {
  if (!operationData) {
    return null;
  }
  if ("volumeId" in operationData && operationData.volumeId != null || "referencedVolumeId" in operationData && operationData.referencedVolumeId != null) {
    return getStrategyDataForVolumeViewport({ operationData });
  }
  return getStrategyDataForStackViewport({ operationData, viewport, strategy });
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateSegmentationVolume.js
function getOrCreateSegmentationVolume(segmentationId) {
  const { representationData } = getSegmentation(segmentationId);
  let { volumeId } = representationData.Labelmap;
  let segVolume;
  if (volumeId) {
    segVolume = cache_default.getVolume(volumeId);
    if (segVolume) {
      return segVolume;
    }
  }
  const { imageIds: labelmapImageIds } = representationData.Labelmap;
  volumeId = cache_default.generateVolumeId(labelmapImageIds);
  if (!labelmapImageIds || labelmapImageIds.length === 1) {
    return;
  }
  const isValidVolume = utilities_exports.isValidVolume(labelmapImageIds);
  if (!isValidVolume) {
    return;
  }
  segVolume = volumeLoader_exports.createAndCacheVolumeFromImagesSync(volumeId, labelmapImageIds);
  return segVolume;
}
var getOrCreateSegmentationVolume_default = getOrCreateSegmentationVolume;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureSegmentationVolume.js
var ensureSegmentationVolume_default = {
  [StrategyCallbacks_default.EnsureSegmentationVolumeFor3DManipulation]: (data) => {
    const { operationData, viewport } = data;
    const { segmentationId, imageIds: segImageIds } = operationData;
    const referencedImageIds = viewport ? viewport.getImageIds() : segImageIds.map((imageId) => cache_default.getImage(imageId).referencedImageId);
    const isValidVolumeForSphere = utilities_exports.isValidVolume(referencedImageIds);
    if (!isValidVolumeForSphere) {
      throw new Error("Volume is not reconstructable for sphere manipulation");
    }
    const segVolume = getOrCreateSegmentationVolume_default(segmentationId);
    if (!segVolume) {
      return;
    }
    operationData.segmentationVoxelManager = segVolume.voxelManager;
    operationData.segmentationImageData = segVolume.imageData;
    return;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateImageVolume.js
function getOrCreateImageVolume(referencedImageIds) {
  if (!referencedImageIds || referencedImageIds.length <= 1) {
    return;
  }
  const isValidVolume = utilities_exports.isValidVolume(referencedImageIds);
  if (!isValidVolume) {
    return;
  }
  const volumeId = cache_default.generateVolumeId(referencedImageIds);
  let imageVolume = cache_default.getVolume(volumeId);
  if (imageVolume) {
    return imageVolume;
  }
  imageVolume = volumeLoader_exports.createAndCacheVolumeFromImagesSync(volumeId, referencedImageIds);
  return imageVolume;
}
var getOrCreateImageVolume_default = getOrCreateImageVolume;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureImageVolume.js
var ensureImageVolume_default = {
  [StrategyCallbacks_default.EnsureImageVolumeFor3DManipulation]: (data) => {
    const { operationData, viewport } = data;
    let referencedImageIds;
    if (viewport) {
      referencedImageIds = viewport.getImageIds();
      const isValidVolumeForSphere = utilities_exports.isValidVolume(referencedImageIds);
      if (!isValidVolumeForSphere) {
        throw new Error("Volume is not reconstructable for sphere manipulation");
      }
    } else {
      const segmentation = getSegmentation(operationData.segmentationId);
      const imageIds = segmentation.representationData.Labelmap.imageIds;
      referencedImageIds = imageIds.map((imageId) => {
        const image = cache_default.getImage(imageId);
        return image.referencedImageId;
      });
    }
    const imageVolume = getOrCreateImageVolume_default(referencedImageIds);
    if (!imageVolume) {
      throw new Error("Failed to create or get image volume");
    }
    operationData.imageVoxelManager = imageVolume.voxelManager;
    operationData.imageData = imageVolume.imageData;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilsForWorker.js
var triggerWorkerProgress = (workerType, progress) => {
  triggerEvent(eventTarget_default, enums_exports.Events.WEB_WORKER_PROGRESS, {
    progress,
    type: workerType
  });
};
var getSegmentationDataForWorker = (segmentationId, segmentIndices) => {
  const segmentation = getSegmentation(segmentationId);
  const { representationData } = segmentation;
  const { Labelmap: Labelmap2 } = representationData;
  if (!Labelmap2) {
    console.debug("No labelmap found for segmentation", segmentationId);
    return null;
  }
  const segVolumeId = Labelmap2.volumeId;
  const segImageIds = Labelmap2.imageIds;
  const operationData = {
    segmentationId,
    volumeId: segVolumeId,
    imageIds: segImageIds
  };
  let reconstructableVolume = false;
  if (segImageIds) {
    const refImageIds = segImageIds.map((imageId) => {
      const image = cache_default.getImage(imageId);
      return image.referencedImageId;
    });
    reconstructableVolume = utilities_exports.isValidVolume(refImageIds);
  }
  let indices = segmentIndices;
  if (!indices) {
    indices = [getActiveSegmentIndex(segmentationId)];
  } else if (!Array.isArray(indices)) {
    indices = [indices, 255];
  }
  return {
    operationData,
    segVolumeId,
    segImageIds,
    reconstructableVolume,
    indices
  };
};
var prepareVolumeStrategyDataForWorker = (operationData) => {
  return getStrategyData({
    operationData,
    strategy: {
      ensureSegmentationVolumeFor3DManipulation: ensureSegmentationVolume_default.ensureSegmentationVolumeFor3DManipulation,
      ensureImageVolumeFor3DManipulation: ensureImageVolume_default.ensureImageVolumeFor3DManipulation
    }
  });
};
var prepareStackDataForWorker = (segImageIds) => {
  const segmentationInfo = [];
  const imageInfo = [];
  for (const segImageId of segImageIds) {
    const segImage = cache_default.getImage(segImageId);
    const segPixelData = segImage.getPixelData();
    const { origin, direction, spacing, dimensions } = utilities_exports.getImageDataMetadata(segImage);
    segmentationInfo.push({
      scalarData: segPixelData,
      dimensions,
      spacing,
      origin,
      direction
    });
    const refImageId = segImage.referencedImageId;
    if (refImageId) {
      const refImage = cache_default.getImage(refImageId);
      if (!refImage) {
        continue;
      }
      const refPixelData = refImage.getPixelData();
      const refVoxelManager = refImage.voxelManager;
      const refSpacing = [
        refImage.rowPixelSpacing,
        refImage.columnPixelSpacing
      ];
      imageInfo.push({
        scalarData: refPixelData,
        dimensions: refVoxelManager ? refVoxelManager.dimensions : [refImage.columns, refImage.rows, 1],
        spacing: refSpacing
      });
    }
  }
  return { segmentationInfo, imageInfo };
};
var getImageReferenceInfo = (segVolumeId, segImageIds) => {
  let refImageId;
  if (segVolumeId) {
    const segmentationVolume = cache_default.getVolume(segVolumeId);
    const imageIds = segmentationVolume.imageIds;
    const cachedImage = cache_default.getImage(imageIds[0]);
    if (cachedImage) {
      refImageId = cachedImage.referencedImageId;
    }
  } else if (segImageIds?.length) {
    const segImage = cache_default.getImage(segImageIds[0]);
    refImageId = segImage.referencedImageId;
  }
  const refImage = cache_default.getImage(refImageId);
  const scalingModule = metaData_exports.get("scalingModule", refImageId);
  const modalityUnitOptions = {
    isPreScaled: Boolean(refImage?.preScale?.scaled),
    isSuvScaled: typeof scalingModule?.suvbw === "number"
  };
  return { refImageId, modalityUnitOptions };
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/generateContourSetsFromLabelmap.js
var { Labelmap } = SegmentationRepresentations_default;
async function generateContourSetsFromLabelmap({ segmentations }) {
  registerComputeWorker();
  triggerWorkerProgress(WorkerTypes_default.GENERATE_CONTOUR_SETS, 0);
  const { representationData, segments = [0, 1], segmentationId } = segmentations;
  let { volumeId: segVolumeId } = representationData[Labelmap];
  if (!segVolumeId) {
    const segVolume = getOrCreateSegmentationVolume_default(segmentationId);
    if (segVolume) {
      segVolumeId = segVolume.volumeId;
    }
  }
  const vol = cache_default.getVolume(segVolumeId);
  if (!vol) {
    console.warn(`No volume found for ${segVolumeId}`);
    return;
  }
  const voxelManager = vol.voxelManager;
  const segScalarData = voxelManager.getCompleteScalarDataArray();
  const segmentationInfo = {
    scalarData: segScalarData,
    dimensions: vol.dimensions,
    spacing: vol.imageData.getSpacing(),
    origin: vol.imageData.getOrigin(),
    direction: vol.imageData.getDirection()
  };
  const indices = Array.isArray(segments) ? segments.filter((segment) => segment !== null).map((segment) => segment.segmentIndex || segment) : Object.values(segments).filter((segment) => segment !== null).map((segment) => segment.segmentIndex || segment);
  const contourSets = await getWebWorkerManager().executeTask("compute", "generateContourSetsFromLabelmapVolume", {
    segmentation: segmentationInfo,
    indices,
    mode: "individual"
  });
  const refImages = vol.imageIds.map((imageId) => {
    const refImageId = cache_default.getImage(imageId)?.referencedImageId;
    return refImageId ? cache_default.getImage(refImageId) : void 0;
  });
  const refImageDataMetadata = refImages.map((image) => {
    return utilities_exports.getImageDataMetadata(image);
  });
  const processedContourSets = contourSets.map((contourSet) => {
    const segment = segments[contourSet.segment.segmentIndex] || {};
    if (!contourSet.sliceContours.length) {
      return null;
    }
    const p1 = contourSet.sliceContours[0].polyData.points[0];
    let refImageId;
    if (p1) {
      const refImageIndex = refImageDataMetadata.findIndex((imageDataMetadata) => {
        const { scanAxisNormal, origin } = imageDataMetadata;
        const plane = utilities_exports.planar.planeEquation(scanAxisNormal, origin);
        return utilities_exports.planar.isPointOnPlane(p1, plane);
      });
      if (refImageIndex !== -1) {
        refImageId = refImages[refImageIndex].imageId;
      }
    }
    return {
      label: segment.label,
      color: segment.color,
      metadata: {
        FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,
        referencedImageId: refImageId
      },
      sliceContours: contourSet.sliceContours.map((contourData) => ({
        contours: contourData.contours,
        polyData: contourData.polyData,
        FrameNumber: contourData.sliceIndex + 1,
        sliceIndex: contourData.sliceIndex,
        FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,
        referencedImageId: refImageId
      }))
    };
  }).filter((contourSet) => contourSet !== null);
  triggerWorkerProgress(WorkerTypes_default.GENERATE_CONTOUR_SETS, 100);
  return processedContourSets;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/RectangleROIStartEndThreshold.js
var RectangleROIStartEndThreshold = class {
  constructor() {
  }
  static getContourSequence(toolData, metadataProvider) {
    const { data } = toolData;
    const { projectionPoints, projectionPointsImageIds } = data.cachedStats;
    return projectionPoints.map((point, index) => {
      const ContourData = getPointData(point);
      const ContourImageSequence = getContourImageSequence(projectionPointsImageIds[index], metadataProvider);
      return {
        NumberOfContourPoints: ContourData.length / 3,
        ContourImageSequence,
        ContourGeometricType: "CLOSED_PLANAR",
        ContourData
      };
    });
  }
};
RectangleROIStartEndThreshold.toolName = "RectangleROIStartEndThreshold";
function getPointData(points) {
  const orderedPoints = [
    ...points[0],
    ...points[1],
    ...points[3],
    ...points[2]
  ];
  const pointsArray = orderedPoints.flat();
  const pointsArrayWithPrecision = pointsArray.map((point) => {
    return point.toFixed(2);
  });
  return pointsArrayWithPrecision;
}
function getContourImageSequence(imageId, metadataProvider) {
  const sopCommon = metadataProvider.get("sopCommonModule", imageId);
  return {
    ReferencedSOPClassUID: sopCommon.sopClassUID,
    ReferencedSOPInstanceUID: sopCommon.sopInstanceUID
  };
}
var RectangleROIStartEndThreshold_default = RectangleROIStartEndThreshold;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/AnnotationToPointData.js
function validateAnnotation(annotation) {
  if (!annotation?.data) {
    throw new Error("Tool data is empty");
  }
  if (!annotation.metadata || annotation.metadata.referencedImageId) {
    throw new Error("Tool data is not associated with any imageId");
  }
}
var _AnnotationToPointData = class _AnnotationToPointData {
  constructor() {
  }
  static convert(annotation, index, metadataProvider) {
    validateAnnotation(annotation);
    const { toolName } = annotation.metadata;
    const toolClass = _AnnotationToPointData.TOOL_NAMES[toolName];
    if (!toolClass) {
      throw new Error(`Unknown tool type: ${toolName}, cannot convert to RTSSReport`);
    }
    const ContourSequence = toolClass.getContourSequence(annotation, metadataProvider);
    const color = [
      Math.floor(Math.random() * 255),
      Math.floor(Math.random() * 255),
      Math.floor(Math.random() * 255)
    ];
    return {
      ReferencedROINumber: index + 1,
      ROIDisplayColor: color,
      ContourSequence
    };
  }
  static register(toolClass) {
    _AnnotationToPointData.TOOL_NAMES[toolClass.toolName] = toolClass;
  }
};
_AnnotationToPointData.TOOL_NAMES = {};
var AnnotationToPointData = _AnnotationToPointData;
AnnotationToPointData.register(RectangleROIStartEndThreshold_default);
var AnnotationToPointData_default = AnnotationToPointData;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/acceptAutogeneratedInterpolations.js
function acceptAutogeneratedInterpolations(annotationGroupSelector, selector) {
  InterpolationManager.acceptAutoGenerated(annotationGroupSelector, selector);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js
var { isEqual: isEqual4 } = utilities_exports;
function findHandlePolylineIndex(annotation, handleIndex) {
  const { polyline } = annotation.data.contour;
  const { points } = annotation.data.handles;
  const { length } = points;
  if (handleIndex === length) {
    return polyline.length;
  }
  if (handleIndex < 0) {
    handleIndex = (handleIndex + length) % length;
  }
  if (handleIndex === 0) {
    return 0;
  }
  const handle = points[handleIndex];
  const index = polyline.findIndex((point) => isEqual4(handle, point));
  if (index !== -1) {
    return index;
  }
  let closestDistance = Infinity;
  return polyline.reduce((closestIndex, point, testIndex) => {
    const distance = vec3_exports.squaredDistance(point, handle);
    if (distance < closestDistance) {
      closestDistance = distance;
      return testIndex;
    }
    return closestIndex;
  }, -1);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findIslands.js
function findIslands(polylines, threshold) {
  if (!polylines || polylines.length === 0) {
    return [];
  }
  if (threshold <= 0) {
    return [];
  }
  const islandIndexes = [];
  for (let i = 0; i < polylines.length; i++) {
    const polyline = polylines[i];
    if (!polyline || polyline.length < 3) {
      continue;
    }
    const isClosedPolyline = isClosed(polyline);
    if (isClosedPolyline) {
      const area = Math.abs(getSignedArea(polyline)) / 100;
      if (area < threshold) {
        islandIndexes.push(i);
      }
    }
  }
  return islandIndexes;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/index.js
var segmentation_exports = {};
__export(segmentation_exports, {
  IslandRemoval: () => IslandRemoval,
  LabelmapMemo: () => createLabelmapMemo_exports,
  SegmentStatsCalculator: () => SegmentStatsCalculator,
  VolumetricCalculator: () => VolumetricCalculator_default,
  computeMetabolicStats: () => computeMetabolicStats,
  computeStackLabelmapFromVolume: () => computeStackLabelmapFromVolume,
  computeVolumeLabelmapFromStack: () => computeVolumeLabelmapFromStack,
  contourAndFindLargestBidirectional: () => contourAndFindLargestBidirectional,
  createBidirectionalToolData: () => createBidirectionalToolData,
  createLabelmapVolumeForViewport: () => createLabelmapVolumeForViewport,
  createMergedLabelmapForIndex: () => createMergedLabelmapForIndex_default,
  floodFill: () => floodFill_default,
  getBrushSizeForToolGroup: () => getBrushSizeForToolGroup,
  getBrushThresholdForToolGroup: () => getBrushThresholdForToolGroup,
  getBrushToolInstances: () => getBrushToolInstances,
  getHoveredContourSegmentationAnnotation: () => getHoveredContourSegmentationAnnotation,
  getOrCreateImageVolume: () => getOrCreateImageVolume_default,
  getOrCreateSegmentationVolume: () => getOrCreateSegmentationVolume_default,
  getReferenceVolumeForSegmentationVolume: () => getReferenceVolumeForSegmentationVolume,
  getSegmentIndexAtLabelmapBorder: () => getSegmentIndexAtLabelmapBorder,
  getSegmentIndexAtWorldPoint: () => getSegmentIndexAtWorldPoint,
  getSegmentLargestBidirectional: () => getSegmentLargestBidirectional,
  getStatistics: () => getStatistics_default,
  getUniqueSegmentIndices: () => getUniqueSegmentIndices,
  growCut: () => growCut_exports,
  invalidateBrushCursor: () => invalidateBrushCursor,
  rectangleROIThresholdVolumeByRange: () => rectangleROIThresholdVolumeByRange_default,
  segmentContourAction: () => segmentContourAction,
  setBrushSizeForToolGroup: () => setBrushSizeForToolGroup,
  setBrushThresholdForToolGroup: () => setBrushThresholdForToolGroup,
  thresholdSegmentationByRange: () => thresholdSegmentationByRange_default,
  thresholdVolumeByRange: () => thresholdVolumeByRange_default,
  triggerSegmentationRender: () => triggerSegmentationRender,
  triggerSegmentationRenderBySegmentationId: () => triggerSegmentationRenderBySegmentationId,
  validateLabelmap: () => validateLabelmap_exports
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js
function thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {
  const { imageData: segmentationImageData } = segmentationVolume;
  const { overwrite, boundsIJK, segmentationId } = options;
  if (!segmentationId) {
    throw new Error("Segmentation ID is required to be passed inside thresholdVolumeByRange as options");
  }
  const overlapType = options?.overlapType || 0;
  const segVoxelManager = segmentationVolume.voxelManager;
  const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();
  if (overwrite) {
    for (let i = 0; i < scalarDataLength; i++) {
      segVoxelManager.setAtIndex(i, 0);
    }
  }
  const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);
  let overlaps, total, range2;
  const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {
    const callbackOverlap = ({ value }) => {
      total = total + 1;
      if (value >= range2.lower && value <= range2.upper) {
        overlaps = overlaps + 1;
      }
    };
    const { imageData, dimensions, lower, upper } = volumeInfo;
    const overlapBounds = getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter);
    total = 0;
    overlaps = 0;
    range2 = { lower, upper };
    let overlapTest = false;
    const { voxelManager: voxelManager2 } = imageData.get("voxelManager");
    voxelManager2.forEach(callbackOverlap, {
      imageData,
      boundsIJK: overlapBounds
    });
    if (overlapType === 0) {
      overlapTest = overlaps > 0;
    } else if (overlapType == 1) {
      overlapTest = overlaps === total;
    }
    return overlapTest;
  };
  const testRange = (volumeInfo, pointIJK) => {
    const { imageData, lower, upper } = volumeInfo;
    const voxelManager2 = imageData.get("voxelManager").voxelManager;
    const offset = voxelManager2.toIndex(pointIJK);
    const value = voxelManager2.getAtIndex(offset);
    if (value <= lower || value >= upper) {
      return false;
    } else {
      return true;
    }
  };
  const callback = ({ index, pointIJK, pointLPS }) => {
    let insert = volumeInfoList.length > 0;
    for (let i = 0; i < volumeInfoList.length; i++) {
      if (volumeInfoList[i].volumeSize === scalarDataLength) {
        insert = testRange(volumeInfoList[i], pointIJK);
      } else {
        insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);
      }
      if (!insert) {
        break;
      }
    }
    if (insert) {
      segVoxelManager.setAtIndex(index, options.segmentIndex || 1);
    }
  };
  const voxelManager = segmentationVolume.voxelManager;
  voxelManager.forEach(callback, {
    imageData: segmentationImageData,
    boundsIJK
  });
  triggerSegmentationDataModified(options.segmentationId);
  return segmentationVolume;
}
var thresholdVolumeByRange_default = thresholdVolumeByRange;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js
var { transformWorldToIndex: transformWorldToIndex2 } = utilities_exports;
var _RectangleROITool = class _RectangleROITool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      storePointData: false,
      shadow: true,
      preventHandleOutsideImage: false,
      calculateStats: true,
      getTextLines: defaultGetTextLines2,
      statsCalculator: BasicStatsCalculator
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const annotation = this.constructor.createAnnotationForViewport(viewport, {
        data: {
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            textBox: {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            }
          },
          cachedStats: {}
        }
      });
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 3,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      const canvasPoint1 = viewport.worldToCanvas(points[0]);
      const canvasPoint2 = viewport.worldToCanvas(points[3]);
      const rect = this._getRectangleImageCoordinates([
        canvasPoint1,
        canvasPoint2
      ]);
      const point = [canvasCoords[0], canvasCoords[1]];
      const { left, top, width, height } = rect;
      const distanceToPoint5 = distanceToPoint4([left, top, width, height], point);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        handleIndex = data.handles.points.findIndex((p) => p === handle);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        movingTextBox
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.doneEditMemo();
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { points } = data.handles;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const enabledElement2 = getEnabledElement(element);
        const { worldToCanvas, canvasToWorld } = enabledElement2.viewport;
        const worldPos = currentPoints.world;
        const { points } = data.handles;
        points[handleIndex] = [...worldPos];
        let bottomLeftCanvas;
        let bottomRightCanvas;
        let topLeftCanvas;
        let topRightCanvas;
        let bottomLeftWorld;
        let bottomRightWorld;
        let topLeftWorld;
        let topRightWorld;
        switch (handleIndex) {
          case 0:
          case 3:
            bottomLeftCanvas = worldToCanvas(points[0]);
            topRightCanvas = worldToCanvas(points[3]);
            bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];
            topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];
            bottomRightWorld = canvasToWorld(bottomRightCanvas);
            topLeftWorld = canvasToWorld(topLeftCanvas);
            points[1] = bottomRightWorld;
            points[2] = topLeftWorld;
            break;
          case 1:
          case 2:
            bottomRightCanvas = worldToCanvas(points[1]);
            topLeftCanvas = worldToCanvas(points[2]);
            bottomLeftCanvas = [
              topLeftCanvas[0],
              bottomRightCanvas[1]
            ];
            topRightCanvas = [
              bottomRightCanvas[0],
              topLeftCanvas[1]
            ];
            bottomLeftWorld = canvasToWorld(bottomLeftCanvas);
            topRightWorld = canvasToWorld(topRightCanvas);
            points[0] = bottomLeftWorld;
            points[3] = topRightWorld;
            break;
        }
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const { viewPlaneNormal, viewUp } = viewport.getCamera();
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].areaUnit == null) {
          data.cachedStats[targetId] = {
            Modality: null,
            area: null,
            max: null,
            mean: null,
            stdDev: null,
            areaUnit: null
          };
          this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);
          if (viewport instanceof VolumeViewport_default) {
            const { referencedImageId } = annotation.metadata;
            for (const targetId2 in data.cachedStats) {
              if (targetId2.startsWith("imageId")) {
                const viewports = renderingEngine.getStackViewports();
                const invalidatedStack = viewports.find((vp) => {
                  const referencedImageURI = utilities_exports.imageIdToURI(referencedImageId);
                  const hasImageURI = vp.hasImageURI(referencedImageURI);
                  const currentImageURI = utilities_exports.imageIdToURI(vp.getCurrentImageId());
                  return hasImageURI && currentImageURI !== referencedImageURI;
                });
                if (invalidatedStack) {
                  delete data.cachedStats[targetId2];
                }
              }
            }
          }
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null && activeHandleIndex !== void 0) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {
            color
          });
        }
        const dataId = `${annotationUID}-rect`;
        const rectangleUID = "0";
        drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {
          color,
          lineDash,
          lineWidth
        }, dataId);
        renderStatus = true;
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!textLines || textLines.length === 0) {
          continue;
        }
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._getRectangleImageCoordinates = (points) => {
      const [point0, point1] = points;
      return {
        left: Math.min(point0[0], point1[0]),
        top: Math.min(point0[1], point1[1]),
        width: Math.abs(point0[0] - point1[0]),
        height: Math.abs(point0[1] - point1[1])
      };
    };
    this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {
      if (!this.configuration.calculateStats) {
        return;
      }
      const { data } = annotation;
      const { viewport } = enabledElement;
      const { element } = viewport;
      const worldPos1 = data.handles.points[0];
      const worldPos2 = data.handles.points[3];
      const { cachedStats } = data;
      const targetIds = Object.keys(cachedStats);
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { dimensions, imageData, metadata, voxelManager } = image;
        const pos1Index = transformWorldToIndex2(imageData, worldPos1);
        pos1Index[0] = Math.floor(pos1Index[0]);
        pos1Index[1] = Math.floor(pos1Index[1]);
        pos1Index[2] = Math.floor(pos1Index[2]);
        const pos2Index = transformWorldToIndex2(imageData, worldPos2);
        pos2Index[0] = Math.floor(pos2Index[0]);
        pos2Index[1] = Math.floor(pos2Index[1]);
        pos2Index[2] = Math.floor(pos2Index[2]);
        if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {
          this.isHandleOutsideImage = false;
          const iMin = Math.min(pos1Index[0], pos2Index[0]);
          const iMax = Math.max(pos1Index[0], pos2Index[0]);
          const jMin = Math.min(pos1Index[1], pos2Index[1]);
          const jMax = Math.max(pos1Index[1], pos2Index[1]);
          const kMin = Math.min(pos1Index[2], pos2Index[2]);
          const kMax = Math.max(pos1Index[2], pos2Index[2]);
          const boundsIJK = [
            [iMin, iMax],
            [jMin, jMax],
            [kMin, kMax]
          ];
          const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);
          const handles = [pos1Index, pos2Index];
          const { scale: scale2, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);
          const area = Math.abs(worldWidth * worldHeight) / (scale2 * scale2);
          const pixelUnitsOptions = {
            isPreScaled: isViewportPreScaled(viewport, targetId),
            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
          };
          const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);
          let pointsInShape;
          if (voxelManager) {
            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
              boundsIJK,
              imageData,
              returnPoints: this.configuration.storePointData
            });
          }
          const stats = this.configuration.statsCalculator.getStatistics();
          cachedStats[targetId] = {
            Modality: metadata.Modality,
            area,
            mean: stats.mean?.value,
            stdDev: stats.stdDev?.value,
            max: stats.max?.value,
            min: stats.min?.value,
            statsArray: stats.array,
            pointsInShape,
            areaUnit,
            modalityUnit
          };
        } else {
          this.isHandleOutsideImage = true;
          cachedStats[targetId] = {
            Modality: metadata.Modality
          };
        }
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._isInsideVolume = (index1, index2, dimensions) => {
      return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
};
_RectangleROITool.toolName = "RectangleROI";
_RectangleROITool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _RectangleROITool.hydrateBase(_RectangleROITool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points,
        activeHandleIndex: null
      },
      label: "",
      cachedStats: {}
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var RectangleROITool = _RectangleROITool;
function defaultGetTextLines2(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { area, mean, max, stdDev, areaUnit, modalityUnit, min } = cachedVolumeStats;
  if (mean === void 0 || mean === null) {
    return;
  }
  const textLines = [];
  if (utilities_exports.isNumber(area)) {
    textLines.push(`Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`);
  }
  if (utilities_exports.isNumber(mean)) {
    textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(max)) {
    textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(min)) {
    textLines.push(`Min: ${utilities_exports.roundNumber(min)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(stdDev)) {
    textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  }
  return textLines;
}
var RectangleROITool_default = RectangleROITool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js
var { transformWorldToIndex: transformWorldToIndex3 } = utilities_exports;
var RectangleROIStartEndThresholdTool = class extends RectangleROITool_default {
  constructor(toolProps = {}, defaultToolProps = {
    configuration: {
      storePointData: false,
      numSlicesToPropagate: 10,
      calculatePointsInsideVolume: true,
      getTextLines: defaultGetTextLines3,
      statsCalculator: BasicStatsCalculator,
      showTextBox: false,
      throttleTimeout: 100
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      let referencedImageId, imageVolume, volumeId;
      if (viewport instanceof StackViewport_default) {
        throw new Error("Stack Viewport Not implemented");
      } else {
        const targetId = this.getTargetId(viewport);
        volumeId = utilities_exports.getVolumeId(targetId);
        imageVolume = cache_default.getVolume(volumeId);
        referencedImageId = utilities_exports.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
      }
      const spacingInNormal = utilities_exports.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);
      const startCoord = this._getStartCoordinate(worldPos, viewPlaneNormal);
      const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          viewPlaneNormal: [...viewPlaneNormal],
          enabledElement,
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId,
          toolName: this.getToolName(),
          volumeId,
          spacingInNormal
        },
        data: {
          label: "",
          startCoordinate: startCoord,
          endCoordinate: endCoord,
          cachedStats: {
            pointsInVolume: [],
            projectionPoints: [],
            projectionPointsImageIds: [referencedImageId],
            statistics: []
          },
          handles: {
            textBox: {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            },
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            activeHandleIndex: null
          },
          labelmapUID: null
        }
      };
      this._computeProjectionPoints(annotation, imageVolume);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 3,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const { metadata } = annotation;
      const { enabledElement } = metadata;
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      const targetId = this.getTargetId(enabledElement.viewport);
      const imageVolume = cache_default.getVolume(targetId.split(/volumeId:|\?/)[1]);
      this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      } else {
        triggerAnnotationModified(annotation, element);
      }
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      let annotations = getAnnotations(this.getToolName(), viewport.element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data, metadata } = annotation;
        const { startCoordinate, endCoordinate } = data;
        const { points, activeHandleIndex } = data.handles;
        const { enabledElement: annotationEnabledElement } = metadata;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        const focalPoint = viewport.getCamera().focalPoint;
        const viewplaneNormal = viewport.getCamera().viewPlaneNormal;
        let startCoord = startCoordinate;
        let endCoord = endCoordinate;
        if (Array.isArray(startCoordinate)) {
          startCoord = this._getCoordinateForViewplaneNormal(startCoord, viewplaneNormal);
          const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal);
          data.handles.points.forEach((point) => {
            point[indexOfDirection] = startCoord;
          });
          data.startCoordinate = startCoord;
        }
        if (Array.isArray(endCoordinate)) {
          endCoord = this._getCoordinateForViewplaneNormal(endCoord, viewplaneNormal);
          data.endCoordinate = endCoord;
          data.endCoordinate = endCoord;
        }
        const roundedStartCoord = utilities_exports.roundToPrecision(startCoord);
        const roundedEndCoord = utilities_exports.roundToPrecision(endCoord);
        const coord = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);
        const roundedCoord = utilities_exports.roundToPrecision(coord);
        if (roundedCoord < Math.min(roundedStartCoord, roundedEndCoord) || roundedCoord > Math.max(roundedStartCoord, roundedEndCoord)) {
          continue;
        }
        const iteratorVolumeIDs = annotationEnabledElement.viewport?.volumeIds.values();
        for (const volumeId of iteratorVolumeIDs) {
          if (annotation.invalidated && annotation.metadata.volumeId === volumeId) {
            this._throttledCalculateCachedStats(annotation, annotationEnabledElement);
          }
        }
        let firstOrLastSlice = false;
        if (roundedCoord === roundedStartCoord || roundedCoord === roundedEndCoord) {
          firstOrLastSlice = true;
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null && firstOrLastSlice) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        let lineDashToUse = lineDash;
        if (!firstOrLastSlice) {
          lineDashToUse = 2;
        }
        const rectangleUID = "0";
        drawRect(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
          color,
          lineDash: lineDashToUse,
          lineWidth
        });
        renderStatus = true;
        if (this.configuration.showTextBox) {
          const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
          if (!options.visibility) {
            data.handles.textBox = {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            };
            continue;
          }
          const textLines = this.configuration.getTextLines(data, { metadata });
          if (!textLines || textLines.length === 0) {
            continue;
          }
          if (!data.handles.textBox.hasMoved) {
            const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
            data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
          }
          const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
          const textBoxUID = "1";
          const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
          const { x: left, y: top, width, height } = boundingBox;
          data.handles.textBox.worldBoundingBox = {
            topLeft: viewport.canvasToWorld([left, top]),
            topRight: viewport.canvasToWorld([left + width, top]),
            bottomLeft: viewport.canvasToWorld([left, top + height]),
            bottomRight: viewport.canvasToWorld([left + width, top + height])
          };
        }
      }
      return renderStatus;
    };
    if (this.configuration.calculatePointsInsideVolume) {
      this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });
    } else {
      this._throttledCalculateCachedStats = debounce_default(this._calculateCachedStatsTool, this.configuration.throttleTimeout);
    }
  }
  _computeProjectionPoints(annotation, imageVolume) {
    const { data, metadata } = annotation;
    const { viewPlaneNormal, spacingInNormal } = metadata;
    const { imageData } = imageVolume;
    const { startCoordinate, endCoordinate } = data;
    const { points } = data.handles;
    const startIJK = transformWorldToIndex3(imageData, points[0]);
    const endIJK = transformWorldToIndex3(imageData, points[0]);
    const startWorld = vec3_exports.create();
    imageData.indexToWorldVec3(startIJK, startWorld);
    const endWorld = vec3_exports.create();
    imageData.indexToWorldVec3(endIJK, endWorld);
    const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
    if (projectionAxisIndex == 2) {
      startWorld[2] = startCoordinate;
      endWorld[2] = endCoordinate;
    } else if (projectionAxisIndex == 0) {
      startWorld[0] = startCoordinate;
      endWorld[0] = endCoordinate;
    } else if (projectionAxisIndex == 1) {
      startWorld[1] = startCoordinate;
      endWorld[1] = endCoordinate;
    }
    const direction = vec3_exports.create();
    vec3_exports.subtract(direction, endWorld, startWorld);
    const distance = vec3_exports.length(direction);
    vec3_exports.normalize(direction, direction);
    const newProjectionPoints = [];
    for (let dist = 0; dist < distance; dist += spacingInNormal) {
      newProjectionPoints.push(points.map((point) => {
        const newPoint = vec3_exports.create();
        vec3_exports.scaleAndAdd(newPoint, point, direction, dist);
        return Array.from(newPoint);
      }));
    }
    data.cachedStats.projectionPoints = newProjectionPoints;
  }
  _computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement) {
    const { data, metadata } = annotation;
    const { viewPlaneNormal, viewUp } = metadata;
    const { viewport } = enabledElement;
    const projectionPoints = data.cachedStats.projectionPoints;
    const pointsInsideVolume = [[]];
    const image = this.getTargetImageData(targetId);
    const worldPos1 = data.handles.points[0];
    const worldPos2 = data.handles.points[3];
    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);
    const measureInfo = getCalibratedLengthUnitsAndScale(image, data.habdles);
    const area = Math.abs(worldWidth * worldHeight) / (measureInfo.scale * measureInfo.scale);
    const modalityUnitOptions = {
      isPreScaled: isViewportPreScaled(viewport, targetId),
      isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
    };
    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);
    for (let i = 0; i < projectionPoints.length; i++) {
      if (!imageVolume) {
        continue;
      }
      const projectionPoint = projectionPoints[i][0];
      const { dimensions, imageData, voxelManager } = imageVolume;
      const worldPos1Index = transformWorldToIndex3(imageData, worldPos1);
      const worldProjectionPointIndex = transformWorldToIndex3(imageData, projectionPoint);
      const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
      worldPos1Index[0] = Math.floor(worldPos1Index[0]);
      worldPos1Index[1] = Math.floor(worldPos1Index[1]);
      worldPos1Index[2] = Math.floor(worldPos1Index[2]);
      worldPos1Index[indexOfProjection] = worldProjectionPointIndex[indexOfProjection];
      const worldPos2Index = transformWorldToIndex3(imageData, worldPos2);
      worldPos2Index[0] = Math.floor(worldPos2Index[0]);
      worldPos2Index[1] = Math.floor(worldPos2Index[1]);
      worldPos2Index[2] = Math.floor(worldPos2Index[2]);
      worldPos2Index[indexOfProjection] = worldProjectionPointIndex[indexOfProjection];
      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
        this.isHandleOutsideImage = false;
        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
        const boundsIJK = [
          [iMin, iMax],
          [jMin, jMax],
          [kMin, kMax]
        ];
        const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
          boundsIJK,
          imageData,
          returnPoints: this.configuration.storePointData
        });
        pointsInsideVolume.push(pointsInShape);
      }
    }
    const stats = this.configuration.statsCalculator.getStatistics();
    data.cachedStats.pointsInVolume = pointsInsideVolume;
    data.cachedStats.statistics = {
      Modality: metadata.Modality,
      area,
      mean: stats.mean?.value,
      stdDev: stats.stdDev?.value,
      max: stats.max?.value,
      statsArray: stats.array,
      areaUnit: measureInfo.areaUnit,
      modalityUnit
    };
  }
  _calculateCachedStatsTool(annotation, enabledElement) {
    const data = annotation.data;
    const { viewport } = enabledElement;
    const { cachedStats } = data;
    const targetId = this.getTargetId(viewport);
    const imageVolume = cache_default.getVolume(targetId.split(/volumeId:|\?/)[1]);
    this._computeProjectionPoints(annotation, imageVolume);
    this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);
    annotation.invalidated = false;
    triggerAnnotationModified(annotation, viewport.element);
    return cachedStats;
  }
  _getStartCoordinate(worldPos, viewPlaneNormal) {
    const startPos = worldPos;
    const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);
    return startCoord;
  }
  _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {
    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;
    const endPos = vec3_exports.create();
    vec3_exports.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);
    const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);
    return endCoord;
  }
  _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {
    const viewplaneNormalAbs = [
      Math.abs(viewPlaneNormal[0]),
      Math.abs(viewPlaneNormal[1]),
      Math.abs(viewPlaneNormal[2])
    ];
    const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));
    return indexOfDirection;
  }
  _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {
    const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
    return pos[indexOfDirection];
  }
};
function defaultGetTextLines3(data, _context = {}) {
  const cachedVolumeStats = data.cachedStats.statistics;
  const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;
  if (mean === void 0) {
    return;
  }
  const textLines = [];
  textLines.push(`Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`);
  textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  return textLines;
}
RectangleROIStartEndThresholdTool.toolName = "RectangleROIStartEndThreshold";
var RectangleROIStartEndThresholdTool_default = RectangleROIStartEndThresholdTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js
var RectangleROIThresholdTool = class extends RectangleROITool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const targetId = this.getTargetId(viewport);
      let referencedImageId, volumeId;
      if (viewport instanceof StackViewport_default) {
        referencedImageId = targetId.split("imageId:")[1];
      } else {
        volumeId = utilities_exports.getVolumeId(targetId);
        const imageVolume = cache_default.getVolume(volumeId);
        referencedImageId = utilities_exports.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
      }
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          viewPlaneNormal: [...viewPlaneNormal],
          enabledElement,
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId,
          toolName: this.getToolName(),
          volumeId
        },
        data: {
          label: "",
          handles: {
            textBox: {
              hasMoved: false,
              worldPosition: null,
              worldBoundingBox: null
            },
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            activeHandleIndex: null
          },
          segmentationId: null
        }
      };
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 3,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        triggerAnnotationModified(annotation, element);
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        const rectangleUID = "0";
        drawRect(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
          color,
          lineDash,
          lineWidth
        });
        renderStatus = true;
      }
      return renderStatus;
    };
  }
};
RectangleROIThresholdTool.toolName = "RectangleROIThreshold";
var RectangleROIThresholdTool_default = RectangleROIThresholdTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js
function getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {
  const AllBoundsIJK = [];
  annotations.forEach((annotation) => {
    const { data } = annotation;
    const { points } = data.handles;
    const { imageData, dimensions } = referenceVolume;
    let pointsToUse = points;
    if (data.cachedStats?.projectionPoints) {
      const { projectionPoints } = data.cachedStats;
      pointsToUse = [].concat(...projectionPoints);
    }
    const rectangleCornersIJK = pointsToUse.map((world) => utilities_exports.transformWorldToIndex(imageData, world));
    let boundsIJK2 = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, dimensions);
    if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {
      boundsIJK2 = extend2DBoundingBoxInViewAxis_default(boundsIJK2, options.numSlicesToProject);
    }
    AllBoundsIJK.push(boundsIJK2);
  });
  if (AllBoundsIJK.length === 1) {
    return AllBoundsIJK[0];
  }
  const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {
    return {
      iMin: Math.min(accumulator.iMin, currentValue.iMin),
      jMin: Math.min(accumulator.jMin, currentValue.jMin),
      kMin: Math.min(accumulator.kMin, currentValue.kMin),
      iMax: Math.max(accumulator.iMax, currentValue.iMax),
      jMax: Math.max(accumulator.jMax, currentValue.jMax),
      kMax: Math.max(accumulator.kMax, currentValue.kMax)
    };
  }, {
    iMin: Infinity,
    jMin: Infinity,
    kMin: Infinity,
    iMax: -Infinity,
    jMax: -Infinity,
    kMax: -Infinity
  });
  return boundsIJK;
}
var getBoundsIJKFromRectangleAnnotations_default = getBoundsIJKFromRectangleAnnotations;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js
function rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {
  const annotations = annotationUIDs.map((annotationUID) => {
    return state5.getAnnotation(annotationUID);
  });
  _validateAnnotations(annotations);
  let boundsIJK;
  for (let i = 0; i < thresholdVolumeInformation.length; i++) {
    const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();
    if (volumeSize === segmentationVolume.voxelManager.getScalarDataLength() || i === 0) {
      boundsIJK = getBoundsIJKFromRectangleAnnotations_default(annotations, thresholdVolumeInformation[i].volume, options);
    }
  }
  const outputSegmentationVolume = thresholdVolumeByRange_default(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK, segmentationId: options.segmentationId });
  outputSegmentationVolume.modified();
  return outputSegmentationVolume;
}
function _validateAnnotations(annotations) {
  const validToolNames = [
    RectangleROIThresholdTool_default.toolName,
    RectangleROIStartEndThresholdTool_default.toolName
  ];
  for (const annotation of annotations) {
    const name = annotation.metadata.toolName;
    if (!validToolNames.includes(name)) {
      throw new Error("rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations");
    }
  }
}
var rectangleROIThresholdVolumeByRange_default = rectangleROIThresholdVolumeByRange;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js
function createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = "mergedLabelmap") {
  labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {
    if (!utilities_exports.isEqual(dimensions, labelmaps[0].dimensions) || !utilities_exports.isEqual(direction, labelmaps[0].direction) || !utilities_exports.isEqual(spacing, labelmaps[0].spacing) || !utilities_exports.isEqual(origin, labelmaps[0].origin)) {
      throw new Error("labelmaps must have the same size and shape");
    }
  });
  const labelmap = labelmaps[0];
  const arrayType = labelmap.voxelManager.getConstructor();
  const outputData = new arrayType(labelmap.voxelManager.getScalarDataLength());
  labelmaps.forEach((labelmap2) => {
    const voxelManager = labelmap2.voxelManager;
    const scalarDataLength = voxelManager.getScalarDataLength();
    for (let i = 0; i < scalarDataLength; i++) {
      if (voxelManager.getAtIndex(i) === segmentIndex) {
        outputData[i] = segmentIndex;
      }
    }
  });
  const options = {
    scalarData: outputData,
    metadata: labelmap.metadata,
    spacing: labelmap.spacing,
    origin: labelmap.origin,
    direction: labelmap.direction,
    dimensions: labelmap.dimensions
  };
  const cachedVolume = cache_default.getVolume(volumeId);
  let mergedVolume;
  if (cachedVolume) {
    mergedVolume = cachedVolume;
    mergedVolume.voxelManager.setCompleteScalarDataArray(outputData);
  } else {
    mergedVolume = volumeLoader_exports.createLocalVolume(volumeId, options);
  }
  return mergedVolume;
}
var createMergedLabelmapForIndex_default = createMergedLabelmapForIndex;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js
async function createLabelmapVolumeForViewport(input) {
  const { viewportId, renderingEngineId, options } = input;
  let { segmentationId } = input;
  const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
  if (!enabledElement) {
    throw new Error("element disabled");
  }
  const { viewport } = enabledElement;
  if (!(viewport instanceof VolumeViewport_default)) {
    throw new Error("Segmentation only supports VolumeViewport");
  }
  const { uid } = viewport.getDefaultActor();
  if (segmentationId === void 0) {
    segmentationId = `${uid}-based-segmentation-${options?.volumeId ?? utilities_exports.uuidv4().slice(0, 8)}`;
  }
  if (options) {
    const properties = structuredClone(options);
    await volumeLoader_exports.createLocalVolume(segmentationId, properties);
  } else {
    const volumeId = viewport.getVolumeId();
    volumeLoader_exports.createAndCacheDerivedLabelmapVolume(volumeId, {
      volumeId: segmentationId
    });
  }
  return segmentationId;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js
function floodFill(getter, seed, options = {}) {
  const onFlood = options.onFlood;
  const onBoundary = options.onBoundary;
  const equals = options.equals;
  const filter = options.filter;
  const diagonals = options.diagonals || false;
  const startNode = get2(seed);
  const permutations = prunedPermutations();
  const stack = [];
  const flooded = [];
  const visits = /* @__PURE__ */ new Set();
  const bounds = options.bounds;
  stack.push({ currentArgs: seed });
  while (stack.length > 0) {
    flood(stack.pop());
  }
  return {
    flooded
  };
  function flood(job) {
    const getArgs = job.currentArgs;
    const prevArgs = job.previousArgs;
    if (visited(getArgs)) {
      return;
    }
    markAsVisited(getArgs);
    if (member(getArgs)) {
      markAsFlooded(getArgs);
      pushAdjacent(getArgs);
    } else {
      markAsBoundary(prevArgs);
    }
  }
  function visited(key) {
    const [x, y, z = 0] = key;
    const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));
    return visits.has(iKey);
  }
  function markAsVisited(key) {
    const [x, y, z = 0] = key;
    const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));
    visits.add(iKey);
  }
  function member(getArgs) {
    const node = get2(getArgs);
    return equals ? equals(node, startNode) : node === startNode;
  }
  function markAsFlooded(getArgs) {
    flooded.push(getArgs);
    if (onFlood) {
      onFlood(...getArgs);
    }
  }
  function markAsBoundary(prevArgs) {
    const [x, y, z = 0] = prevArgs;
    const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));
    bounds?.set(iKey, prevArgs);
    if (onBoundary) {
      onBoundary(...prevArgs);
    }
  }
  function pushAdjacent(getArgs) {
    for (let i = 0; i < permutations.length; i += 1) {
      const perm = permutations[i];
      const nextArgs = getArgs.slice(0);
      for (let j = 0; j < getArgs.length; j += 1) {
        nextArgs[j] += perm[j];
      }
      if (filter?.(nextArgs) === false) {
        continue;
      }
      if (visited(nextArgs)) {
        continue;
      }
      stack.push({
        currentArgs: nextArgs,
        previousArgs: getArgs
      });
    }
  }
  function get2(getArgs) {
    return getter(...getArgs);
  }
  function prunedPermutations() {
    const permutations2 = permute(seed.length);
    return permutations2.filter(function(perm) {
      const count = countNonZeroes(perm);
      return count !== 0 && (count === 1 || diagonals);
    });
  }
  function permute(length) {
    const perms = [];
    const permutation = function(string) {
      return string.split("").map(function(c) {
        return parseInt(c, 10) - 1;
      });
    };
    for (let i = 0; i < Math.pow(3, length); i += 1) {
      const string = lpad(i.toString(3), "0", length);
      perms.push(permutation(string));
    }
    return perms;
  }
}
function countNonZeroes(array) {
  let count = 0;
  for (let i = 0; i < array.length; i += 1) {
    if (array[i] !== 0) {
      count += 1;
    }
  }
  return count;
}
function lpad(string, character, length) {
  const array = new Array(length + 1);
  const pad = array.join(character);
  return (pad + string).slice(-length);
}
var floodFill_default = floodFill;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/determineSegmentIndex.js
var determineSegmentIndex_default = {
  [StrategyCallbacks_default.OnInteractionStart]: (operationData) => {
    const { segmentIndex, previewSegmentIndex, segmentationVoxelManager, centerIJK, viewPlaneNormal, segmentationImageData, configuration: configuration3 } = operationData;
    if (!configuration3?.useCenterSegmentIndex) {
      operationData.centerSegmentIndexInfo.segmentIndex = null;
      operationData.centerSegmentIndexInfo.hasSegmentIndex = false;
      operationData.centerSegmentIndexInfo.hasPreviewIndex = false;
      return;
    }
    let hasSegmentIndex = false;
    let hasPreviewIndex = false;
    const nestedBounds = [
      ...segmentationVoxelManager.getBoundsIJK()
    ];
    if (Math.abs(viewPlaneNormal[0]) > 0.8) {
      nestedBounds[0] = [centerIJK[0], centerIJK[0]];
    } else if (Math.abs(viewPlaneNormal[1]) > 0.8) {
      nestedBounds[1] = [centerIJK[1], centerIJK[1]];
    } else if (Math.abs(viewPlaneNormal[2]) > 0.8) {
      nestedBounds[2] = [centerIJK[2], centerIJK[2]];
    }
    const callback = ({ value }) => {
      hasSegmentIndex ||= value === segmentIndex;
      hasPreviewIndex ||= value === previewSegmentIndex;
    };
    segmentationVoxelManager.forEach(callback, {
      imageData: segmentationImageData,
      isInObject: operationData.isInObject,
      boundsIJK: nestedBounds
    });
    if (!hasSegmentIndex && !hasPreviewIndex) {
      operationData.centerSegmentIndexInfo.segmentIndex = null;
      return;
    }
    const existingValue = segmentationVoxelManager.getAtIJKPoint(centerIJK);
    operationData.centerSegmentIndexInfo.segmentIndex = existingValue;
    operationData.centerSegmentIndexInfo.hasSegmentIndex = hasSegmentIndex;
    operationData.centerSegmentIndexInfo.hasPreviewIndex = hasPreviewIndex;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/dynamicThreshold.js
var dynamicThreshold_default = {
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    const { operationName, centerIJK, segmentationVoxelManager, imageVoxelManager, configuration: configuration3, segmentIndex, viewport } = operationData;
    if (!configuration3?.threshold?.isDynamic || !centerIJK || !segmentIndex) {
      return;
    }
    if (operationName === StrategyCallbacks_default.RejectPreview || operationName === StrategyCallbacks_default.OnInteractionEnd) {
      return;
    }
    const boundsIJK = segmentationVoxelManager.getBoundsIJK();
    const { range: oldThreshold, dynamicRadius = 0 } = configuration3.threshold;
    const useDelta = oldThreshold ? 0 : dynamicRadius;
    const { viewPlaneNormal } = viewport.getCamera();
    const nestedBounds = boundsIJK.map((ijk, idx) => {
      const [min, max] = ijk;
      return [
        Math.max(min, centerIJK[idx] - useDelta),
        Math.min(max, centerIJK[idx] + useDelta)
      ];
    });
    if (Math.abs(viewPlaneNormal[0]) > 0.8) {
      nestedBounds[0] = [centerIJK[0], centerIJK[0]];
    } else if (Math.abs(viewPlaneNormal[1]) > 0.8) {
      nestedBounds[1] = [centerIJK[1], centerIJK[1]];
    } else if (Math.abs(viewPlaneNormal[2]) > 0.8) {
      nestedBounds[2] = [centerIJK[2], centerIJK[2]];
    }
    const threshold = oldThreshold || [Infinity, -Infinity];
    const useDeltaSqr = useDelta * useDelta;
    const callback = ({ value, pointIJK }) => {
      const distance = vec3_exports.sqrDist(centerIJK, pointIJK);
      if (distance > useDeltaSqr) {
        return;
      }
      const gray = Array.isArray(value) ? vec3_exports.len(value) : value;
      threshold[0] = Math.min(gray, threshold[0]);
      threshold[1] = Math.max(gray, threshold[1]);
    };
    imageVoxelManager.forEach(callback, { boundsIJK: nestedBounds });
    configuration3.threshold.range = threshold;
  },
  [StrategyCallbacks_default.OnInteractionStart]: (operationData) => {
    const { configuration: configuration3 } = operationData;
    if (!configuration3?.threshold?.isDynamic) {
      return;
    }
    configuration3.threshold.range = null;
  },
  [StrategyCallbacks_default.ComputeInnerCircleRadius]: (operationData) => {
    const { configuration: configuration3, viewport } = operationData;
    const { dynamicRadius = 0, isDynamic } = configuration3.threshold;
    if (!isDynamic) {
      configuration3.threshold.dynamicRadiusInCanvas = 0;
      return;
    }
    if (dynamicRadius === 0) {
      return;
    }
    const imageData = viewport.getImageData();
    if (!imageData) {
      return;
    }
    const { spacing } = imageData;
    const centerCanvas = [
      viewport.element.clientWidth / 2,
      viewport.element.clientHeight / 2
    ];
    const radiusInWorld = dynamicRadius * spacing[0];
    const centerCursorInWorld = viewport.canvasToWorld(centerCanvas);
    const offSetCenterInWorld = centerCursorInWorld.map((coord) => coord + radiusInWorld);
    const offSetCenterCanvas = viewport.worldToCanvas(offSetCenterInWorld);
    const dynamicRadiusInCanvas = Math.abs(centerCanvas[0] - offSetCenterCanvas[0]);
    if (!configuration3.threshold.dynamicRadiusInCanvas) {
      configuration3.threshold.dynamicRadiusInCanvas = 0;
    }
    configuration3.threshold.dynamicRadiusInCanvas = 3 + dynamicRadiusInCanvas;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/erase.js
var erase_default = {
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    operationData.segmentIndex = 0;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/normalizeViewportPlane.js
var { isEqual: isEqual5 } = utilities_exports;
var acquisitionMapping = {
  toIJK: (ijkPrime) => ijkPrime,
  fromIJK: (ijk) => ijk,
  type: "acquistion"
};
var jkMapping = {
  toIJK: ([j, k, i]) => [i, j, k],
  fromIJK: ([i, j, k]) => [j, k, i],
  type: "jk"
};
var ikMapping = {
  toIJK: ([i, k, j]) => [i, j, k],
  fromIJK: ([i, j, k]) => [i, k, j],
  type: "ik"
};
function normalizeViewportPlane(viewport, boundsIJK) {
  if (!(viewport instanceof BaseVolumeViewport_default)) {
    return { ...acquisitionMapping, boundsIJKPrime: boundsIJK };
  }
  const { viewPlaneNormal } = viewport.getCamera();
  const mapping = isEqual5(Math.abs(viewPlaneNormal[0]), 1) && jkMapping || isEqual5(Math.abs(viewPlaneNormal[1]), 1) && ikMapping || isEqual5(Math.abs(viewPlaneNormal[2]), 1) && acquisitionMapping;
  if (!mapping) {
    return {
      toIJK: null,
      boundsIJKPrime: null,
      fromIJK: null,
      error: `Only mappings orthogonal to acquisition plane are permitted, but requested ${viewPlaneNormal}`
    };
  }
  return { ...mapping, boundsIJKPrime: mapping.fromIJK(boundsIJK) };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/islandRemoval.js
var { RLEVoxelMap, VoxelManager } = utilities_exports;
var MAX_IMAGE_SIZE = 65535;
var SegmentationEnum;
(function(SegmentationEnum2) {
  SegmentationEnum2[SegmentationEnum2["SEGMENT"] = -1] = "SEGMENT";
  SegmentationEnum2[SegmentationEnum2["ISLAND"] = -2] = "ISLAND";
  SegmentationEnum2[SegmentationEnum2["INTERIOR"] = -3] = "INTERIOR";
  SegmentationEnum2[SegmentationEnum2["EXTERIOR"] = -4] = "EXTERIOR";
  SegmentationEnum2[SegmentationEnum2["INTERIOR_SMALL"] = -5] = "INTERIOR_SMALL";
  SegmentationEnum2[SegmentationEnum2["INTERIOR_TEST"] = -6] = "INTERIOR_TEST";
})(SegmentationEnum || (SegmentationEnum = {}));
var IslandRemoval = class _IslandRemoval {
  constructor(options) {
    this.fillInternalEdge = false;
    this.maxInternalRemove = 128;
    this.maxInternalRemove = options?.maxInternalRemove ?? this.maxInternalRemove;
    this.fillInternalEdge = options?.fillInternalEdge ?? this.fillInternalEdge;
  }
  initialize(viewport, segmentationVoxels, options) {
    const hasSource = !!segmentationVoxels.sourceVoxelManager;
    const segmentationVoxelManager = hasSource ? segmentationVoxels.sourceVoxelManager : segmentationVoxels;
    const previewVoxelManager = hasSource ? segmentationVoxels : VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);
    const { segmentIndex = 1, previewSegmentIndex = 1 } = options;
    const clickedPoints = options.points || segmentationVoxelManager.getPoints();
    if (!clickedPoints?.length) {
      return;
    }
    const boundsIJK = segmentationVoxelManager.getBoundsIJK().map((bound, i) => [
      Math.min(bound[0], ...clickedPoints.map((point) => point[i])),
      Math.max(bound[1], ...clickedPoints.map((point) => point[i]))
    ]);
    if (boundsIJK.find((it) => it[0] < 0 || it[1] > MAX_IMAGE_SIZE)) {
      return;
    }
    const { toIJK, fromIJK, boundsIJKPrime, error } = normalizeViewportPlane(viewport, boundsIJK);
    if (error) {
      console.warn("Not performing island removal for planes not orthogonal to acquisition plane", error);
      return;
    }
    const [width, height, depth] = fromIJK(segmentationVoxelManager.dimensions);
    const segmentSet = new RLEVoxelMap(width, height, depth);
    const getter = (i, j, k) => {
      const index = segmentationVoxelManager.toIndex(toIJK([i, j, k]));
      const oldVal = segmentationVoxelManager.getAtIndex(index);
      if (oldVal === previewSegmentIndex || oldVal === segmentIndex) {
        return SegmentationEnum.SEGMENT;
      }
    };
    segmentSet.fillFrom(getter, boundsIJKPrime);
    segmentSet.normalizer = { toIJK, fromIJK, boundsIJKPrime };
    this.segmentSet = segmentSet;
    this.previewVoxelManager = previewVoxelManager;
    this.segmentIndex = segmentIndex;
    this.previewSegmentIndex = previewSegmentIndex ?? segmentIndex;
    this.selectedPoints = clickedPoints;
    return true;
  }
  floodFillSegmentIsland() {
    const { selectedPoints: clickedPoints, segmentSet } = this;
    let floodedCount = 0;
    const { fromIJK } = segmentSet.normalizer;
    clickedPoints.forEach((clickedPoint) => {
      const ijkPrime = fromIJK(clickedPoint);
      const index = segmentSet.toIndex(ijkPrime);
      const [iPrime, jPrime, kPrime] = ijkPrime;
      if (segmentSet.get(index) === SegmentationEnum.SEGMENT) {
        floodedCount += segmentSet.floodFill(iPrime, jPrime, kPrime, SegmentationEnum.ISLAND);
      }
    });
    return floodedCount;
  }
  removeExternalIslands() {
    const { previewVoxelManager, segmentSet } = this;
    const { toIJK } = segmentSet.normalizer;
    const callback = (index, rle) => {
      const [, jPrime, kPrime] = segmentSet.toIJK(index);
      if (rle.value !== SegmentationEnum.ISLAND) {
        for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {
          const clearPoint = toIJK([iPrime, jPrime, kPrime]);
          const v = previewVoxelManager.getAtIJKPoint(clearPoint);
          previewVoxelManager.setAtIJKPoint(clearPoint, v === void 0 ? 0 : null);
        }
      }
    };
    segmentSet.forEach(callback, { rowModified: true });
  }
  removeInternalIslands() {
    const { segmentSet, previewVoxelManager, previewSegmentIndex } = this;
    const { height, normalizer, width } = segmentSet;
    const { toIJK } = normalizer;
    segmentSet.forEachRow((baseIndex, row) => {
      let lastRle;
      for (const rle of [...row]) {
        if (rle.value !== SegmentationEnum.ISLAND) {
          continue;
        }
        if (!lastRle) {
          if (this.fillInternalEdge && rle.start > 0) {
            for (let iPrime = 0; iPrime < rle.start; iPrime++) {
              segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);
            }
          }
          lastRle = rle;
          continue;
        }
        for (let iPrime = lastRle.end; iPrime < rle.start; iPrime++) {
          segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);
        }
        lastRle = rle;
      }
      if (this.fillInternalEdge && lastRle?.end < width) {
        for (let iPrime = lastRle.end; iPrime < width; iPrime++) {
          segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);
        }
      }
    });
    segmentSet.forEach((baseIndex, rle) => {
      if (rle.value !== SegmentationEnum.INTERIOR) {
        return;
      }
      const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);
      const rowPrev = jPrime > 0 ? segmentSet.getRun(jPrime - 1, kPrime) : null;
      const rowNext = jPrime + 1 < height ? segmentSet.getRun(jPrime + 1, kPrime) : null;
      const isLast = jPrime === height - 1;
      const isFirst = jPrime === 0;
      const prevCovers = _IslandRemoval.covers(rle, rowPrev) || isFirst && this.fillInternalEdge;
      const nextCovers = _IslandRemoval.covers(rle, rowNext) || isLast && this.fillInternalEdge;
      if (rle.end - rle.start > 2 && (!prevCovers || !nextCovers)) {
        segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.EXTERIOR, { singlePlane: true });
      }
    });
    segmentSet.forEach((baseIndex, rle) => {
      if (rle.value !== SegmentationEnum.INTERIOR) {
        return;
      }
      const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);
      const size = segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.INTERIOR_TEST);
      const isBig = size > this.maxInternalRemove;
      const newType = isBig ? SegmentationEnum.EXTERIOR : SegmentationEnum.INTERIOR_SMALL;
      segmentSet.floodFill(rle.start, jPrime, kPrime, newType);
    });
    segmentSet.forEach((baseIndex, rle) => {
      if (rle.value !== SegmentationEnum.INTERIOR_SMALL) {
        return;
      }
      for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {
        const clearPoint = toIJK(segmentSet.toIJK(baseIndex + iPrime));
        previewVoxelManager.setAtIJKPoint(clearPoint, previewSegmentIndex);
      }
    });
    return previewVoxelManager.getArrayOfModifiedSlices();
  }
  static covers(rle, row) {
    if (!row) {
      return false;
    }
    let { start } = rle;
    const { end } = rle;
    for (const rowRle of row) {
      if (start >= rowRle.start && start < rowRle.end) {
        start = rowRle.end;
        if (start >= end) {
          return true;
        }
      }
    }
    return false;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/islandRemovalComposition.js
var islandRemovalComposition_default = {
  [StrategyCallbacks_default.OnInteractionEnd]: (operationData) => {
    const { previewSegmentIndex, segmentIndex, viewport, segmentationVoxelManager, activeStrategy, memo } = operationData;
    if (activeStrategy !== "THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL" || segmentIndex === null) {
      return;
    }
    const islandRemoval = new IslandRemoval();
    const voxelManager = memo?.voxelManager || segmentationVoxelManager;
    if (!islandRemoval.initialize(viewport, voxelManager, {
      previewSegmentIndex,
      segmentIndex
    })) {
      return;
    }
    islandRemoval.floodFillSegmentIsland();
    islandRemoval.removeExternalIslands();
    islandRemoval.removeInternalIslands();
    const arrayOfSlices = voxelManager.getArrayOfModifiedSlices();
    if (!arrayOfSlices) {
      return;
    }
    triggerSegmentationDataModified(operationData.segmentationId, arrayOfSlices, previewSegmentIndex);
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/preview.js
var preview_default = {
  [StrategyCallbacks_default.Preview]: function(operationData) {
    const { previewSegmentIndex, configuration: configuration3, enabledElement } = operationData;
    if (!previewSegmentIndex || !configuration3) {
      return;
    }
    this.onInteractionStart?.(enabledElement, operationData);
    const preview = this.fill(enabledElement, operationData);
    if (preview) {
      this.onInteractionEnd?.(enabledElement, operationData);
    }
    return preview;
  },
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    const { segmentIndex, previewColor, previewSegmentIndex } = operationData;
    operationData.modified = false;
    if (previewSegmentIndex == null || segmentIndex == null) {
      return;
    }
    const viewportIds = getViewportIdsWithSegmentation(operationData.segmentationId);
    viewportIds?.forEach((viewportId) => {
      setSegmentIndexColor(viewportId, operationData.segmentationId, previewSegmentIndex, previewColor);
    });
    operationData.modified = true;
  },
  [StrategyCallbacks_default.AcceptPreview]: (operationData) => {
    const { previewSegmentIndex, segmentationVoxelManager, memo, segmentIndex, centerSegmentIndexInfo } = operationData || {};
    const { changedIndices } = centerSegmentIndexInfo || {};
    const labelmapMemo = memo;
    const callback = ({ index }) => {
      const oldValue = segmentationVoxelManager.getAtIndex(index);
      if (changedIndices?.length > 0) {
        if (changedIndices.includes(index)) {
          labelmapMemo.voxelManager.setAtIndex(index, 0);
        }
      } else {
        if (oldValue === previewSegmentIndex) {
          labelmapMemo.voxelManager.setAtIndex(index, segmentIndex);
        }
      }
    };
    segmentationVoxelManager.forEach(callback);
    triggerSegmentationDataModified(operationData.segmentationId, segmentationVoxelManager.getArrayOfModifiedSlices(), segmentIndex);
    operationData.centerSegmentIndexInfo.changedIndices = [];
  },
  [StrategyCallbacks_default.RejectPreview]: (operationData) => {
    if (!operationData) {
      return;
    }
    utilities_exports.HistoryMemo.DefaultHistoryMemo.undoIf((memo) => {
      const labelmapMemo = memo;
      if (!labelmapMemo?.voxelManager) {
        return false;
      }
      const { segmentationVoxelManager } = labelmapMemo;
      let hasPreviewSegmentIndex = false;
      const callback = ({ value }) => {
        if (value === operationData.previewSegmentIndex) {
          hasPreviewSegmentIndex = true;
        }
      };
      segmentationVoxelManager.forEach(callback);
      return hasPreviewSegmentIndex;
    });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/regionFill.js
var regionFill_default = {
  [StrategyCallbacks_default.Fill]: (operationData) => {
    const { segmentsLocked, segmentationImageData, segmentationVoxelManager, brushStrategy, centerIJK } = operationData;
    const isWithinThreshold = brushStrategy.createIsInThreshold?.(operationData);
    const { setValue } = brushStrategy;
    const callback = isWithinThreshold ? (data) => {
      const { value, index } = data;
      if (segmentsLocked.includes(value) || !isWithinThreshold(index)) {
        return;
      }
      setValue(operationData, data);
    } : (data) => setValue(operationData, data);
    segmentationVoxelManager.forEach(callback, {
      imageData: segmentationImageData,
      isInObject: operationData.isInObject,
      boundsIJK: operationData.isInObjectBoundsIJK
    });
    segmentationVoxelManager.addPoint(centerIJK);
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/utils/handleUseSegmentCenterIndex.js
function handleUseSegmentCenterIndex({ operationData, existingValue, index }) {
  const { previewSegmentIndex, memo, centerSegmentIndexInfo, previewOnHover, segmentIndex } = operationData;
  const { hasPreviewIndex, hasSegmentIndex, segmentIndex: centerSegmentIndex } = centerSegmentIndexInfo;
  if (centerSegmentIndex === 0 && hasSegmentIndex && hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    if (previewOnHover) {
      return;
    }
    if (existingValue === previewSegmentIndex) {
      memo.voxelManager.setAtIndex(index, 0);
      return;
    }
    return;
  }
  if (centerSegmentIndex === 0 && hasSegmentIndex && !hasPreviewIndex) {
    if (existingValue === 0 || existingValue !== segmentIndex) {
      return;
    }
    memo.voxelManager.setAtIndex(index, previewSegmentIndex);
    centerSegmentIndexInfo.changedIndices.push(index);
    return;
  }
  if (centerSegmentIndex === 0 && !hasSegmentIndex && hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    if (previewOnHover) {
      return;
    }
    if (existingValue === previewSegmentIndex) {
      memo.voxelManager.setAtIndex(index, 0);
      return;
    }
    return;
  }
  if (centerSegmentIndex === 0 && !hasSegmentIndex && !hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    if (existingValue === previewSegmentIndex) {
      memo.voxelManager.setAtIndex(index, previewSegmentIndex);
      return;
    }
    return;
  }
  if (centerSegmentIndex === previewSegmentIndex && hasSegmentIndex && hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    memo.voxelManager.setAtIndex(index, previewSegmentIndex);
    return;
  }
  if (centerSegmentIndex === previewSegmentIndex && !hasSegmentIndex && hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    memo.voxelManager.setAtIndex(index, previewSegmentIndex);
    return;
  }
  if (centerSegmentIndex === segmentIndex && hasSegmentIndex && hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    memo.voxelManager.setAtIndex(index, previewSegmentIndex);
    return;
  }
  if (centerSegmentIndex === segmentIndex && hasSegmentIndex && !hasPreviewIndex) {
    if (existingValue === segmentIndex) {
      return;
    }
    memo.voxelManager.setAtIndex(index, previewSegmentIndex);
    return;
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/setValue.js
var setValue_default = {
  [StrategyCallbacks_default.INTERNAL_setValue]: (operationData, { value, index }) => {
    const { segmentsLocked, previewSegmentIndex, memo, segmentationVoxelManager, centerSegmentIndexInfo, segmentIndex } = operationData;
    const existingValue = segmentationVoxelManager.getAtIndex(index);
    if (segmentsLocked.includes(value)) {
      return;
    }
    if (!centerSegmentIndexInfo && existingValue === segmentIndex) {
      return;
    }
    if (centerSegmentIndexInfo?.segmentIndex !== 0 && existingValue === segmentIndex) {
      return;
    }
    if (centerSegmentIndexInfo?.segmentIndex === null) {
      memo.voxelManager.setAtIndex(index, previewSegmentIndex ?? segmentIndex);
      return;
    }
    if (!previewSegmentIndex) {
      let useSegmentIndex = segmentIndex;
      if (centerSegmentIndexInfo) {
        useSegmentIndex = centerSegmentIndexInfo.segmentIndex;
      }
      memo.voxelManager.setAtIndex(index, useSegmentIndex);
      return;
    }
    handleUseSegmentCenterIndex({
      operationData,
      existingValue,
      index
    });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/threshold.js
var threshold_default = {
  [StrategyCallbacks_default.CreateIsInThreshold]: (operationData) => {
    const { imageVoxelManager, segmentIndex, configuration: configuration3 } = operationData;
    if (!configuration3 || !segmentIndex) {
      return;
    }
    return (index) => {
      const voxelValue = imageVoxelManager.getAtIndex(index);
      const gray = Array.isArray(voxelValue) ? vec3_exports.length(voxelValue) : voxelValue;
      const { threshold } = configuration3 || {};
      if (!threshold?.range?.length) {
        return true;
      }
      return threshold.range[0] <= gray && gray <= threshold.range[1];
    };
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/VolumetricCalculator.js
var TEST_MAX_LOCATIONS = 10;
function createVolumetricState() {
  return {
    maxIJKs: []
  };
}
function volumetricStatsCallback(state8, data) {
  const { value } = data;
  const { maxIJKs } = state8;
  const length = maxIJKs.length;
  if (typeof value !== "number" || length >= TEST_MAX_LOCATIONS && value < maxIJKs[0].value) {
    return;
  }
  const dataCopy = {
    value: data.value,
    pointLPS: data.pointLPS ? [data.pointLPS[0], data.pointLPS[1], data.pointLPS[2]] : void 0,
    pointIJK: data.pointIJK ? [data.pointIJK[0], data.pointIJK[1], data.pointIJK[2]] : void 0
  };
  if (!length || value >= maxIJKs[length - 1].value) {
    maxIJKs.push(dataCopy);
  } else {
    for (let i = 0; i < length; i++) {
      if (value <= maxIJKs[i].value) {
        maxIJKs.splice(i, 0, dataCopy);
        break;
      }
    }
  }
  if (length >= TEST_MAX_LOCATIONS) {
    maxIJKs.splice(0, 1);
  }
}
function volumetricGetStatistics(state8, stats, options) {
  const { spacing, calibration } = options;
  const { volumeUnit } = getCalibratedLengthUnitsAndScale({
    calibration,
    hasPixelSpacing: true
  }, []);
  const volumeScale = spacing ? spacing[0] * spacing[1] * spacing[2] : 1;
  stats.volume = {
    value: Array.isArray(stats.count.value) ? stats.count.value.map((v) => v * volumeScale) : stats.count.value * volumeScale,
    unit: volumeUnit,
    name: "volume",
    label: "Volume"
  };
  stats.maxIJKs = state8.maxIJKs.filter((entry) => entry.pointIJK !== void 0);
  stats.array.push(stats.volume);
  state8.maxIJKs = [];
  return stats;
}
var _VolumetricCalculator = class _VolumetricCalculator extends BasicStatsCalculator {
  static statsInit(options) {
    super.statsInit(options);
    this.volumetricState = createVolumetricState();
  }
  static statsCallback(data) {
    super.statsCallback(data);
    volumetricStatsCallback(this.volumetricState, data);
  }
  static getStatistics(options) {
    const optionsWithUnit = {
      ...options,
      unit: options?.unit || "none",
      calibration: options?.calibration,
      hasPixelSpacing: options?.hasPixelSpacing
    };
    const stats = super.getStatistics(optionsWithUnit);
    return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);
  }
};
_VolumetricCalculator.volumetricState = createVolumetricState();
var VolumetricCalculator = _VolumetricCalculator;
var InstanceVolumetricCalculator = class extends InstanceBasicStatsCalculator {
  constructor(options) {
    super(options);
    this.volumetricState = createVolumetricState();
  }
  statsInit(options) {
    super.statsInit(options);
    this.volumetricState = createVolumetricState();
  }
  statsCallback(data) {
    super.statsCallback(data);
    volumetricStatsCallback(this.volumetricState, data);
  }
  getStatistics(options) {
    const optionsWithUnit = {
      ...options,
      unit: options?.unit || "none",
      calibration: options?.calibration,
      hasPixelSpacing: options?.hasPixelSpacing
    };
    const stats = super.getStatistics(optionsWithUnit);
    return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);
  }
};
var VolumetricCalculator_default = VolumetricCalculator;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getStatistics.js
var radiusForVol1 = Math.pow(3 * 1e3 / (4 * Math.PI), 1 / 3);
async function getStatistics({ segmentationId, segmentIndices, mode = "collective" }) {
  registerComputeWorker();
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 0);
  const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);
  if (!segData) {
    return;
  }
  const { operationData, segVolumeId, segImageIds, reconstructableVolume, indices } = segData;
  const { refImageId, modalityUnitOptions } = getImageReferenceInfo(segVolumeId, segImageIds);
  const unit = getPixelValueUnitsImageId(refImageId, modalityUnitOptions);
  const stats = reconstructableVolume ? await calculateVolumeStatistics({
    operationData,
    indices,
    unit,
    mode
  }) : await calculateStackStatistics({
    segImageIds,
    indices,
    unit,
    mode
  });
  return stats;
}
async function calculateVolumeStatistics({ operationData, indices, unit, mode }) {
  const strategyData = prepareVolumeStrategyDataForWorker(operationData);
  const { segmentationVoxelManager, imageVoxelManager, segmentationImageData, imageData } = strategyData;
  if (!segmentationVoxelManager || !segmentationImageData) {
    return;
  }
  const spacing = segmentationImageData.getSpacing();
  const { boundsIJK: boundsOrig } = segmentationVoxelManager;
  if (!boundsOrig) {
    return VolumetricCalculator_default.getStatistics({ spacing });
  }
  const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();
  const segmentationInfo = {
    scalarData: segmentationScalarData,
    dimensions: segmentationImageData.getDimensions(),
    spacing: segmentationImageData.getSpacing(),
    origin: segmentationImageData.getOrigin(),
    direction: segmentationImageData.getDirection()
  };
  const imageInfo = {
    scalarData: imageVoxelManager.getCompleteScalarDataArray(),
    dimensions: imageData.getDimensions(),
    spacing: imageData.getSpacing(),
    origin: imageData.getOrigin(),
    direction: imageData.getDirection()
  };
  if (!imageInfo.scalarData?.length) {
    return;
  }
  const stats = await getWebWorkerManager().executeTask("compute", "calculateSegmentsStatisticsVolume", {
    segmentationInfo,
    imageInfo,
    indices,
    unit,
    mode
  });
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 100);
  if (mode === "collective") {
    return processSegmentationStatistics({
      stats,
      unit,
      spacing,
      segmentationImageData,
      imageVoxelManager
    });
  } else {
    const finalStats = {};
    Object.entries(stats).forEach(([segmentIndex, stat]) => {
      finalStats[segmentIndex] = processSegmentationStatistics({
        stats: stat,
        unit,
        spacing,
        segmentationImageData,
        imageVoxelManager
      });
    });
    return finalStats;
  }
}
var updateStatsArray = (stats, newStat) => {
  if (!stats.array) {
    return;
  }
  const existingIndex = stats.array.findIndex((stat) => stat.name === newStat.name);
  if (existingIndex !== -1) {
    stats.array[existingIndex] = newStat;
  } else {
    stats.array.push(newStat);
  }
};
var processSegmentationStatistics = ({ stats, unit, spacing, segmentationImageData, imageVoxelManager }) => {
  stats.mean.unit = unit;
  stats.max.unit = unit;
  stats.min.unit = unit;
  if (unit !== "SUV") {
    return stats;
  }
  const radiusIJK = spacing.map((s) => Math.max(1, Math.round(1.1 * radiusForVol1 / s)));
  for (const testMax of stats.maxIJKs) {
    const testStats = getSphereStats(testMax, radiusIJK, segmentationImageData, imageVoxelManager, spacing);
    if (!testStats) {
      continue;
    }
    const { mean } = testStats;
    if (!stats.peakValue || stats.peakValue.value <= mean.value) {
      stats.peakValue = {
        name: "peakValue",
        label: "Peak Value",
        value: mean.value,
        unit
      };
      stats.peakPoint = {
        name: "peakLPS",
        label: "Peak SUV Point",
        value: testMax.pointLPS ? [...testMax.pointLPS] : null,
        unit: null
      };
      updateStatsArray(stats, stats.peakValue);
      updateStatsArray(stats, stats.peakPoint);
    }
  }
  if (stats.volume && stats.mean) {
    const mtv = stats.volume.value;
    const suvMean = stats.mean.value;
    stats.lesionGlycolysis = {
      name: "lesionGlycolysis",
      label: "Lesion Glycolysis",
      value: mtv * suvMean,
      unit: `${stats.volume.unit}·${unit}`
    };
    updateStatsArray(stats, stats.lesionGlycolysis);
  }
  return stats;
};
async function calculateStackStatistics({ segImageIds, indices, unit, mode }) {
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 0);
  const { segmentationInfo, imageInfo } = prepareStackDataForWorker(segImageIds);
  const stats = await getWebWorkerManager().executeTask("compute", "calculateSegmentsStatisticsStack", {
    segmentationInfo,
    imageInfo,
    indices,
    mode
  });
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 100);
  const spacing = segmentationInfo[0].spacing;
  const segmentationImageData = segmentationInfo[0];
  const imageVoxelManager = imageInfo[0].voxelManager;
  if (mode === "collective") {
    return processSegmentationStatistics({
      stats,
      unit,
      spacing,
      segmentationImageData,
      imageVoxelManager
    });
  } else {
    const finalStats = {};
    Object.entries(stats).forEach(([segmentIndex, stat]) => {
      finalStats[segmentIndex] = processSegmentationStatistics({
        stats: stat,
        unit,
        spacing,
        segmentationImageData,
        imageVoxelManager
      });
    });
    return finalStats;
  }
}
function getSphereStats(testMax, radiusIJK, segData, imageVoxels, spacing) {
  const { pointIJK: centerIJK, pointLPS: centerLPS } = testMax;
  if (!centerIJK) {
    return;
  }
  const boundsIJK = centerIJK.map((ijk, idx) => [
    ijk - radiusIJK[idx],
    ijk + radiusIJK[idx]
  ]);
  const testFunction = (_pointLPS, pointIJK) => {
    const i = (pointIJK[0] - centerIJK[0]) / radiusIJK[0];
    const j = (pointIJK[1] - centerIJK[1]) / radiusIJK[1];
    const k = (pointIJK[2] - centerIJK[2]) / radiusIJK[2];
    const radius = i * i + j * j + k * k;
    return radius <= 1;
  };
  const statsFunction = ({ pointIJK, pointLPS }) => {
    const value = imageVoxels.getAtIJKPoint(pointIJK);
    if (value === void 0) {
      return;
    }
    VolumetricCalculator_default.statsCallback({ value, pointLPS, pointIJK });
  };
  VolumetricCalculator_default.statsInit({ storePointData: false });
  utilities_exports.pointInShapeCallback(segData, {
    pointInShapeFn: testFunction,
    callback: statsFunction,
    boundsIJK
  });
  return VolumetricCalculator_default.getStatistics({ spacing });
}
var getStatistics_default = getStatistics;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/labelmapStatistics.js
var labelmapStatistics_default = {
  [StrategyCallbacks_default.GetStatistics]: function(enabledElement, operationData, options) {
    const { indices } = options;
    const { segmentationId, viewport } = operationData;
    getStatistics_default({
      segmentationId,
      segmentIndices: indices
    });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/index.js
var compositions_default = {
  determineSegmentIndex: determineSegmentIndex_default,
  dynamicThreshold: dynamicThreshold_default,
  erase: erase_default,
  islandRemoval: islandRemovalComposition_default,
  preview: preview_default,
  regionFill: regionFill_default,
  setValue: setValue_default,
  threshold: threshold_default,
  labelmapStatistics: labelmapStatistics_default,
  ensureSegmentationVolumeFor3DManipulation: ensureSegmentationVolume_default,
  ensureImageVolumeFor3DManipulation: ensureImageVolume_default
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/BrushStrategy.js
var _BrushStrategy = class _BrushStrategy {
  constructor(name, ...initializers) {
    this._initialize = [];
    this._fill = [];
    this._onInteractionStart = [];
    this.fill = (enabledElement, operationData) => {
      const initializedData = this.initialize(enabledElement, operationData, StrategyCallbacks_default.Fill);
      if (!initializedData) {
        return;
      }
      this._fill.forEach((func) => func(initializedData));
      const { segmentationVoxelManager, segmentIndex } = initializedData;
      triggerSegmentationDataModified(initializedData.segmentationId, segmentationVoxelManager.getArrayOfModifiedSlices(), segmentIndex);
      return initializedData;
    };
    this.onInteractionStart = (enabledElement, operationData) => {
      const initializedData = this.initialize(enabledElement, operationData);
      if (!initializedData) {
        return;
      }
      this._onInteractionStart.forEach((func) => func.call(this, initializedData));
    };
    this.addPreview = (enabledElement, operationData) => {
      const initializedData = this.initialize(enabledElement, operationData, StrategyCallbacks_default.AddPreview);
      if (!initializedData) {
        return;
      }
      return initializedData;
    };
    this.configurationName = name;
    this.compositions = initializers;
    initializers.forEach((initializer) => {
      const result = typeof initializer === "function" ? initializer() : initializer;
      if (!result) {
        return;
      }
      for (const key in result) {
        if (!_BrushStrategy.childFunctions[key]) {
          throw new Error(`Didn't find ${key} as a brush strategy`);
        }
        _BrushStrategy.childFunctions[key](this, result[key]);
      }
    });
    this.strategyFunction = (enabledElement, operationData) => {
      return this.fill(enabledElement, operationData);
    };
    for (const key of Object.keys(_BrushStrategy.childFunctions)) {
      this.strategyFunction[key] = this[key];
    }
  }
  initialize(enabledElement, operationData, operationName) {
    const { viewport } = enabledElement;
    const data = getStrategyData({ operationData, viewport, strategy: this });
    if (!data) {
      return null;
    }
    const { imageVoxelManager, segmentationVoxelManager, segmentationImageData } = data;
    const memo = operationData.createMemo(operationData.segmentationId, segmentationVoxelManager);
    const initializedData = {
      operationName,
      ...operationData,
      segmentIndex: operationData.segmentIndex,
      enabledElement,
      imageVoxelManager,
      segmentationVoxelManager,
      segmentationImageData,
      viewport,
      centerWorld: null,
      isInObject: null,
      isInObjectBoundsIJK: null,
      brushStrategy: this,
      memo
    };
    this._initialize.forEach((func) => func(initializedData));
    return initializedData;
  }
};
_BrushStrategy.COMPOSITIONS = compositions_default;
_BrushStrategy.childFunctions = {
  [StrategyCallbacks_default.OnInteractionStart]: addListMethod(StrategyCallbacks_default.OnInteractionStart, StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.OnInteractionEnd]: addListMethod(StrategyCallbacks_default.OnInteractionEnd, StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.Fill]: addListMethod(StrategyCallbacks_default.Fill),
  [StrategyCallbacks_default.Initialize]: addListMethod(StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.CreateIsInThreshold]: addSingletonMethod(StrategyCallbacks_default.CreateIsInThreshold),
  [StrategyCallbacks_default.Interpolate]: addListMethod(StrategyCallbacks_default.Interpolate, StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.AcceptPreview]: addListMethod(StrategyCallbacks_default.AcceptPreview, StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.RejectPreview]: addListMethod(StrategyCallbacks_default.RejectPreview, StrategyCallbacks_default.Initialize),
  [StrategyCallbacks_default.INTERNAL_setValue]: addSingletonMethod(StrategyCallbacks_default.INTERNAL_setValue),
  [StrategyCallbacks_default.Preview]: addSingletonMethod(StrategyCallbacks_default.Preview, false),
  [StrategyCallbacks_default.ComputeInnerCircleRadius]: addListMethod(StrategyCallbacks_default.ComputeInnerCircleRadius),
  [StrategyCallbacks_default.EnsureSegmentationVolumeFor3DManipulation]: addListMethod(StrategyCallbacks_default.EnsureSegmentationVolumeFor3DManipulation),
  [StrategyCallbacks_default.EnsureImageVolumeFor3DManipulation]: addListMethod(StrategyCallbacks_default.EnsureImageVolumeFor3DManipulation),
  [StrategyCallbacks_default.AddPreview]: addListMethod(StrategyCallbacks_default.AddPreview),
  [StrategyCallbacks_default.GetStatistics]: addSingletonMethod(StrategyCallbacks_default.GetStatistics),
  compositions: null
};
var BrushStrategy = _BrushStrategy;
function addListMethod(name, createInitialized) {
  const listName = `_${name}`;
  return (brushStrategy, func) => {
    brushStrategy[listName] ||= [];
    brushStrategy[listName].push(func);
    brushStrategy[name] ||= createInitialized ? (enabledElement, operationData, ...args) => {
      const initializedData = brushStrategy[createInitialized](enabledElement, operationData, name);
      let returnValue;
      brushStrategy[listName].forEach((func2) => {
        const value = func2.call(brushStrategy, initializedData, ...args);
        returnValue ||= value;
      });
      return returnValue;
    } : (operationData, ...args) => {
      brushStrategy[listName].forEach((func2) => func2.call(brushStrategy, operationData, ...args));
    };
  };
}
function addSingletonMethod(name, isInitialized = true) {
  return (brushStrategy, func) => {
    if (brushStrategy[name]) {
      throw new Error(`The singleton method ${name} already exists`);
    }
    brushStrategy[name] = isInitialized ? func : (enabledElement, operationData, ...args) => {
      operationData.enabledElement = enabledElement;
      return func.call(brushStrategy, operationData, ...args);
    };
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js
function pointInSphere(sphere, pointLPS) {
  const { center, radius } = sphere;
  const radius2 = sphere.radius2 || radius * radius;
  return (pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) + (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) + (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <= radius2;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js
var { transformWorldToIndex: transformWorldToIndex4, transformIndexToWorld, isEqual: isEqual6 } = utilities_exports;
function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {
  const [bottom, top, left, right] = canvasCoordinates;
  const topLeft = [left[0], top[1]];
  const bottomRight = [right[0], bottom[1]];
  const bottomLeft = [left[0], bottom[1]];
  const topRight = [right[0], top[1]];
  return [topLeft, bottomRight, bottomLeft, topRight];
}
function createCircleCornersForCenter(center, viewUp, viewRight, radius) {
  const centerVec = vec3_exports.fromValues(center[0], center[1], center[2]);
  const top = vec3_exports.create();
  vec3_exports.scaleAndAdd(top, centerVec, viewUp, radius);
  const bottom = vec3_exports.create();
  vec3_exports.scaleAndAdd(bottom, centerVec, viewUp, -radius);
  const right = vec3_exports.create();
  vec3_exports.scaleAndAdd(right, centerVec, viewRight, radius);
  const left = vec3_exports.create();
  vec3_exports.scaleAndAdd(left, centerVec, viewRight, -radius);
  return [
    bottom,
    top,
    left,
    right
  ];
}
function createStrokePredicate(centers, radius) {
  if (!centers.length || radius <= 0) {
    return null;
  }
  const radiusSquared = radius * radius;
  const centerVecs = centers.map((point) => [point[0], point[1], point[2]]);
  const segments = [];
  for (let i = 1; i < centerVecs.length; i++) {
    const start = centerVecs[i - 1];
    const end = centerVecs[i];
    const dx = end[0] - start[0];
    const dy = end[1] - start[1];
    const dz = end[2] - start[2];
    const lengthSquared = dx * dx + dy * dy + dz * dz;
    segments.push({ start, vector: [dx, dy, dz], lengthSquared });
  }
  return (worldPoint) => {
    if (!worldPoint) {
      return false;
    }
    for (const centerVec of centerVecs) {
      const dx = worldPoint[0] - centerVec[0];
      const dy = worldPoint[1] - centerVec[1];
      const dz = worldPoint[2] - centerVec[2];
      if (dx * dx + dy * dy + dz * dz <= radiusSquared) {
        return true;
      }
    }
    for (const { start, vector, lengthSquared } of segments) {
      if (lengthSquared === 0) {
        const dx2 = worldPoint[0] - start[0];
        const dy2 = worldPoint[1] - start[1];
        const dz2 = worldPoint[2] - start[2];
        if (dx2 * dx2 + dy2 * dy2 + dz2 * dz2 <= radiusSquared) {
          return true;
        }
        continue;
      }
      const dx = worldPoint[0] - start[0];
      const dy = worldPoint[1] - start[1];
      const dz = worldPoint[2] - start[2];
      const dot2 = dx * vector[0] + dy * vector[1] + dz * vector[2];
      const t = Math.max(0, Math.min(1, dot2 / lengthSquared));
      const projX = start[0] + vector[0] * t;
      const projY = start[1] + vector[1] * t;
      const projZ = start[2] + vector[2] * t;
      const distX = worldPoint[0] - projX;
      const distY = worldPoint[1] - projY;
      const distZ = worldPoint[2] - projZ;
      if (distX * distX + distY * distY + distZ * distZ <= radiusSquared) {
        return true;
      }
    }
    return false;
  };
}
var initializeCircle = {
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    const { points, viewport, segmentationImageData, viewUp, viewPlaneNormal } = operationData;
    if (!points) {
      return;
    }
    const center = vec3_exports.create();
    if (points.length >= 2) {
      vec3_exports.add(center, points[0], points[1]);
      vec3_exports.scale(center, center, 0.5);
    } else {
      vec3_exports.copy(center, points[0]);
    }
    operationData.centerWorld = center;
    operationData.centerIJK = transformWorldToIndex4(segmentationImageData, center);
    const brushRadius = points.length >= 2 ? vec3_exports.distance(points[0], points[1]) / 2 : 0;
    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
    const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);
    const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));
    const normalizedViewUp = vec3_exports.fromValues(viewUp[0], viewUp[1], viewUp[2]);
    vec3_exports.normalize(normalizedViewUp, normalizedViewUp);
    const normalizedPlaneNormal = vec3_exports.fromValues(viewPlaneNormal[0], viewPlaneNormal[1], viewPlaneNormal[2]);
    vec3_exports.normalize(normalizedPlaneNormal, normalizedPlaneNormal);
    const viewRight = vec3_exports.create();
    vec3_exports.cross(viewRight, normalizedViewUp, normalizedPlaneNormal);
    vec3_exports.normalize(viewRight, viewRight);
    const strokeCentersSource = operationData.strokePointsWorld && operationData.strokePointsWorld.length > 0 ? operationData.strokePointsWorld : [operationData.centerWorld];
    const strokeCenters = strokeCentersSource.map((point) => vec3_exports.clone(point));
    const strokeCornersWorld = strokeCenters.flatMap((centerPoint) => createCircleCornersForCenter(centerPoint, normalizedViewUp, viewRight, brushRadius));
    const circleCornersIJK = strokeCornersWorld.map((world) => transformWorldToIndex4(segmentationImageData, world));
    const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());
    operationData.strokePointsWorld = strokeCenters;
    operationData.isInObject = createPointInEllipse(cornersInWorld, {
      strokePointsWorld: strokeCenters,
      segmentationImageData,
      radius: brushRadius
    });
    operationData.isInObjectBoundsIJK = boundsIJK;
  }
};
function createPointInEllipse(cornersInWorld = [], options = {}) {
  if (!cornersInWorld || cornersInWorld.length !== 4) {
    throw new Error("createPointInEllipse: cornersInWorld must have 4 points");
  }
  const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;
  const center = vec3_exports.create();
  vec3_exports.add(center, topLeft, bottomRight);
  vec3_exports.scale(center, center, 0.5);
  const majorAxisVec = vec3_exports.create();
  vec3_exports.subtract(majorAxisVec, topRight, topLeft);
  const xRadius = vec3_exports.length(majorAxisVec) / 2;
  vec3_exports.normalize(majorAxisVec, majorAxisVec);
  const minorAxisVec = vec3_exports.create();
  vec3_exports.subtract(minorAxisVec, bottomLeft, topLeft);
  const yRadius = vec3_exports.length(minorAxisVec) / 2;
  vec3_exports.normalize(minorAxisVec, minorAxisVec);
  const normal = vec3_exports.create();
  vec3_exports.cross(normal, majorAxisVec, minorAxisVec);
  vec3_exports.normalize(normal, normal);
  const radiusForStroke = options.radius ?? Math.max(xRadius, yRadius);
  const strokePredicate = createStrokePredicate(options.strokePointsWorld || [], radiusForStroke);
  if (isEqual6(xRadius, yRadius)) {
    const radius = xRadius;
    const sphereObj = {
      center,
      radius,
      radius2: radius * radius
    };
    return (pointLPS, pointIJK) => {
      let worldPoint = pointLPS;
      if (!worldPoint && pointIJK && options.segmentationImageData) {
        worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);
      }
      if (!worldPoint) {
        return false;
      }
      if (strokePredicate?.(worldPoint)) {
        return true;
      }
      return pointInSphere(sphereObj, worldPoint);
    };
  }
  return (pointLPS, pointIJK) => {
    let worldPoint = pointLPS;
    if (!worldPoint && pointIJK && options.segmentationImageData) {
      worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);
    }
    if (!worldPoint) {
      return false;
    }
    if (strokePredicate?.(worldPoint)) {
      return true;
    }
    const pointVec = vec3_exports.create();
    vec3_exports.subtract(pointVec, worldPoint, center);
    const distToPlane = vec3_exports.dot(pointVec, normal);
    const proj = vec3_exports.create();
    vec3_exports.scaleAndAdd(proj, pointVec, normal, -distToPlane);
    const fromTopLeft = vec3_exports.create();
    const centerToTopLeft = vec3_exports.create();
    vec3_exports.subtract(centerToTopLeft, center, topLeft);
    vec3_exports.subtract(fromTopLeft, proj, centerToTopLeft);
    const x = vec3_exports.dot(fromTopLeft, majorAxisVec);
    const y = vec3_exports.dot(fromTopLeft, minorAxisVec);
    return x * x / (xRadius * xRadius) + y * y / (yRadius * yRadius) <= 1;
  };
}
var CIRCLE_STRATEGY = new BrushStrategy("Circle", compositions_default.regionFill, compositions_default.setValue, initializeCircle, compositions_default.determineSegmentIndex, compositions_default.preview, compositions_default.labelmapStatistics);
var CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy("CircleThreshold", compositions_default.regionFill, compositions_default.setValue, initializeCircle, compositions_default.determineSegmentIndex, compositions_default.dynamicThreshold, compositions_default.threshold, compositions_default.preview, compositions_default.islandRemoval, compositions_default.labelmapStatistics);
var fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;
var thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;
function fillOutsideCircle() {
  throw new Error("Not yet implemented");
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js
var { transformWorldToIndex: transformWorldToIndex5 } = utilities_exports;
var sphereComposition = {
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    const { points, viewport, segmentationImageData } = operationData;
    if (!points) {
      return;
    }
    const center = vec3_exports.create();
    if (points.length >= 2) {
      vec3_exports.add(center, points[0], points[1]);
      vec3_exports.scale(center, center, 0.5);
    } else {
      vec3_exports.copy(center, points[0]);
    }
    operationData.centerWorld = center;
    operationData.centerIJK = transformWorldToIndex5(segmentationImageData, center);
    const baseExtent = getSphereBoundsInfoFromViewport(points.slice(0, 2), segmentationImageData, viewport);
    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
    const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);
    const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));
    const strokeRadius = points.length >= 2 ? vec3_exports.distance(points[0], points[1]) / 2 : void 0;
    const strokeCenters = operationData.strokePointsWorld && operationData.strokePointsWorld.length > 0 ? operationData.strokePointsWorld : [operationData.centerWorld];
    const baseBounds = baseExtent.boundsIJK;
    const baseCenterIJK = operationData.centerIJK;
    const boundsForStroke = strokeCenters.reduce((acc, centerPoint) => {
      if (!centerPoint) {
        return acc;
      }
      const translatedCenterIJK = transformWorldToIndex5(segmentationImageData, centerPoint);
      const deltaIJK = [
        translatedCenterIJK[0] - baseCenterIJK[0],
        translatedCenterIJK[1] - baseCenterIJK[1],
        translatedCenterIJK[2] - baseCenterIJK[2]
      ];
      const translatedBounds = [
        [baseBounds[0][0] + deltaIJK[0], baseBounds[0][1] + deltaIJK[0]],
        [baseBounds[1][0] + deltaIJK[1], baseBounds[1][1] + deltaIJK[1]],
        [baseBounds[2][0] + deltaIJK[2], baseBounds[2][1] + deltaIJK[2]]
      ];
      if (!acc) {
        return translatedBounds;
      }
      return [
        [
          Math.min(acc[0][0], translatedBounds[0][0]),
          Math.max(acc[0][1], translatedBounds[0][1])
        ],
        [
          Math.min(acc[1][0], translatedBounds[1][0]),
          Math.max(acc[1][1], translatedBounds[1][1])
        ],
        [
          Math.min(acc[2][0], translatedBounds[2][0]),
          Math.max(acc[2][1], translatedBounds[2][1])
        ]
      ];
    }, null);
    const boundsToUse = boundsForStroke ?? baseExtent.boundsIJK;
    if (segmentationImageData) {
      const dimensions = segmentationImageData.getDimensions();
      operationData.isInObjectBoundsIJK = [
        [
          Math.max(0, Math.min(boundsToUse[0][0], dimensions[0] - 1)),
          Math.max(0, Math.min(boundsToUse[0][1], dimensions[0] - 1))
        ],
        [
          Math.max(0, Math.min(boundsToUse[1][0], dimensions[1] - 1)),
          Math.max(0, Math.min(boundsToUse[1][1], dimensions[1] - 1))
        ],
        [
          Math.max(0, Math.min(boundsToUse[2][0], dimensions[2] - 1)),
          Math.max(0, Math.min(boundsToUse[2][1], dimensions[2] - 1))
        ]
      ];
    } else {
      operationData.isInObjectBoundsIJK = boundsToUse;
    }
    operationData.isInObject = createPointInEllipse(cornersInWorld, {
      strokePointsWorld: operationData.strokePointsWorld,
      segmentationImageData,
      radius: strokeRadius
    });
  }
};
var SPHERE_STRATEGY = new BrushStrategy("Sphere", compositions_default.regionFill, compositions_default.setValue, sphereComposition, compositions_default.determineSegmentIndex, compositions_default.preview, compositions_default.labelmapStatistics, compositions_default.ensureSegmentationVolumeFor3DManipulation);
var fillInsideSphere = SPHERE_STRATEGY.strategyFunction;
var SPHERE_THRESHOLD_STRATEGY = new BrushStrategy("SphereThreshold", ...SPHERE_STRATEGY.compositions, compositions_default.dynamicThreshold, compositions_default.threshold, compositions_default.ensureSegmentationVolumeFor3DManipulation, compositions_default.ensureImageVolumeFor3DManipulation);
var SPHERE_THRESHOLD_STRATEGY_ISLAND = new BrushStrategy("SphereThreshold", ...SPHERE_STRATEGY.compositions, compositions_default.dynamicThreshold, compositions_default.threshold, compositions_default.islandRemoval, compositions_default.ensureSegmentationVolumeFor3DManipulation, compositions_default.ensureImageVolumeFor3DManipulation);
var thresholdInsideSphere = SPHERE_THRESHOLD_STRATEGY.strategyFunction;
var thresholdInsideSphereIsland = SPHERE_THRESHOLD_STRATEGY_ISLAND.strategyFunction;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseSphere.js
var ERASE_SPHERE_STRATEGY = new BrushStrategy("EraseSphere", compositions_default.erase, ...SPHERE_STRATEGY.compositions);
var eraseInsideSphere = ERASE_SPHERE_STRATEGY.strategyFunction;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseCircle.js
var ERASE_CIRCLE_STRATEGY = new BrushStrategy("EraseCircle", compositions_default.erase, ...CIRCLE_STRATEGY.compositions);
var eraseInsideCircle = ERASE_CIRCLE_STRATEGY.strategyFunction;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapMemo.js
var createLabelmapMemo_exports = {};
__export(createLabelmapMemo_exports, {
  createLabelmapMemo: () => createLabelmapMemo,
  createRleMemo: () => createRleMemo,
  restoreMemo: () => restoreMemo
});
var { VoxelManager: VoxelManager2, RLEVoxelMap: RLEVoxelMap2 } = utilities_exports;
function createLabelmapMemo(segmentationId, segmentationVoxelManager) {
  return createRleMemo(segmentationId, segmentationVoxelManager);
}
function restoreMemo(isUndo) {
  const { segmentationVoxelManager, undoVoxelManager, redoVoxelManager } = this;
  const useVoxelManager = isUndo === false ? redoVoxelManager : undoVoxelManager;
  useVoxelManager.forEach(({ value, pointIJK }) => {
    segmentationVoxelManager.setAtIJKPoint(pointIJK, value);
  });
  const slices = useVoxelManager.getArrayOfModifiedSlices();
  triggerSegmentationDataModified(this.segmentationId, slices);
}
function createRleMemo(segmentationId, segmentationVoxelManager) {
  const voxelManager = VoxelManager2.createRLEHistoryVoxelManager(segmentationVoxelManager);
  const state8 = {
    segmentationId,
    restoreMemo,
    commitMemo,
    segmentationVoxelManager,
    voxelManager,
    id: utilities_exports.uuidv4(),
    operationType: "labelmap"
  };
  return state8;
}
function commitMemo() {
  if (this.redoVoxelManager) {
    return true;
  }
  if (!this.voxelManager.modifiedSlices.size) {
    return false;
  }
  const { segmentationVoxelManager } = this;
  const undoVoxelManager = VoxelManager2.createRLEHistoryVoxelManager(segmentationVoxelManager);
  RLEVoxelMap2.copyMap(undoVoxelManager.map, this.voxelManager.map);
  for (const key of this.voxelManager.modifiedSlices.keys()) {
    undoVoxelManager.modifiedSlices.add(key);
  }
  this.undoVoxelManager = undoVoxelManager;
  const redoVoxelManager = VoxelManager2.createRLEVolumeVoxelManager({
    dimensions: this.segmentationVoxelManager.dimensions
  });
  this.redoVoxelManager = redoVoxelManager;
  undoVoxelManager.forEach(({ index, pointIJK, value }) => {
    const currentValue = segmentationVoxelManager.getAtIJKPoint(pointIJK);
    if (currentValue === value) {
      return;
    }
    redoVoxelManager.setAtIndex(index, currentValue);
  });
  return true;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/index.js
var strategies_exports = {};
__export(strategies_exports, {
  fillInsideCircle: () => fillInsideCircle,
  fillInsideRectangle: () => fillInsideRectangle,
  fillOutsideCircle: () => fillOutsideCircle,
  thresholdInsideRectangle: () => thresholdInsideRectangle
});

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js
var { transformWorldToIndex: transformWorldToIndex6 } = utilities_exports;
var initializeRectangle = {
  [StrategyCallbacks_default.Initialize]: (operationData) => {
    const { points, viewport, segmentationImageData } = operationData;
    if (!points) {
      return;
    }
    const center = vec3_exports.fromValues(0, 0, 0);
    points.forEach((point) => {
      vec3_exports.add(center, center, point);
    });
    vec3_exports.scale(center, center, 1 / points.length);
    operationData.centerWorld = center;
    operationData.centerIJK = transformWorldToIndex6(segmentationImageData, center);
    const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);
    operationData.isInObject = pointInShapeFn;
    operationData.isInObjectBoundsIJK = boundsIJK;
  }
};
function createPointInRectangle(viewport, points, segmentationImageData) {
  let rectangleCornersIJK = points.map((world) => {
    return transformWorldToIndex6(segmentationImageData, world);
  });
  rectangleCornersIJK = rectangleCornersIJK.map((point) => {
    return point.map((coord) => {
      return Math.round(coord);
    });
  });
  const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());
  const [p0, p1, p2, p3] = points;
  const axisU = vec3_exports.create();
  const axisV = vec3_exports.create();
  vec3_exports.subtract(axisU, p1, p0);
  vec3_exports.subtract(axisV, p3, p0);
  const uLen = vec3_exports.length(axisU);
  const vLen = vec3_exports.length(axisV);
  vec3_exports.normalize(axisU, axisU);
  vec3_exports.normalize(axisV, axisV);
  const normal = vec3_exports.create();
  vec3_exports.cross(normal, axisU, axisV);
  vec3_exports.normalize(normal, normal);
  const direction = segmentationImageData.getDirection();
  const spacing = segmentationImageData.getSpacing();
  const { viewPlaneNormal } = viewport.getCamera();
  const EPS2 = utilities_exports.getSpacingInNormalDirection({
    direction,
    spacing
  }, viewPlaneNormal);
  const pointInShapeFn = (pointLPS) => {
    const v = vec3_exports.create();
    vec3_exports.subtract(v, pointLPS, p0);
    const u = vec3_exports.dot(v, axisU);
    const vproj = vec3_exports.dot(v, axisV);
    const d = Math.abs(vec3_exports.dot(v, normal));
    return u >= -EPS2 && u <= uLen + EPS2 && vproj >= -EPS2 && vproj <= vLen + EPS2 && d <= EPS2;
  };
  return { boundsIJK, pointInShapeFn };
}
var RECTANGLE_STRATEGY = new BrushStrategy("Rectangle", compositions_default.regionFill, compositions_default.setValue, initializeRectangle, compositions_default.determineSegmentIndex, compositions_default.preview, compositions_default.labelmapStatistics);
var RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy("RectangleThreshold", compositions_default.regionFill, compositions_default.setValue, initializeRectangle, compositions_default.determineSegmentIndex, compositions_default.dynamicThreshold, compositions_default.threshold, compositions_default.preview, compositions_default.islandRemoval, compositions_default.labelmapStatistics);
var fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;
var thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js
var _LabelmapBaseTool = class _LabelmapBaseTool extends BaseTool_default {
  constructor(toolProps, defaultToolProps) {
    super(toolProps, defaultToolProps);
    this.memoMap = /* @__PURE__ */ new Map();
    this.acceptedMemoIds = /* @__PURE__ */ new Map();
    this.centerSegmentIndexInfo = {
      segmentIndex: null,
      hasSegmentIndex: false,
      hasPreviewIndex: false,
      changedIndices: []
    };
  }
  _historyRedoHandler(evt) {
    const { id, operationType } = evt.detail;
    if (operationType !== "labelmap") {
      return;
    }
    if (this.acceptedMemoIds.has(id)) {
      this._hoverData = null;
      const memoData = this.acceptedMemoIds.get(id);
      const element = memoData?.element;
      const operationData = this.getOperationData(element);
      operationData.segmentIndex = memoData?.segmentIndex;
      if (element) {
        this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks_default.AcceptPreview);
      }
    }
    this._previewData.isDrag = true;
  }
  get _previewData() {
    return _LabelmapBaseTool.previewData;
  }
  hasPreviewData() {
    return !!this._previewData.preview;
  }
  shouldResolvePreviewRequests() {
    return (this.mode === "Active" || this.mode === "Enabled") && this.hasPreviewData();
  }
  createMemo(segmentationId, segmentationVoxelManager) {
    const voxelManagerId = segmentationVoxelManager.id;
    if (this.memo && this.memo.segmentationVoxelManager === segmentationVoxelManager) {
      return this.memo;
    }
    let memo = this.memoMap.get(voxelManagerId);
    if (!memo) {
      memo = createLabelmapMemo(segmentationId, segmentationVoxelManager);
      this.memoMap.set(voxelManagerId, memo);
    } else {
      if (memo.redoVoxelManager) {
        memo = createLabelmapMemo(segmentationId, segmentationVoxelManager);
        this.memoMap.set(voxelManagerId, memo);
      }
    }
    this.memo = memo;
    return memo;
  }
  createEditData(element) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const activeSegmentation = getActiveSegmentation(viewport.id);
    if (!activeSegmentation) {
      const event = new CustomEvent(enums_exports.Events.ERROR_EVENT, {
        detail: {
          type: "Segmentation",
          message: "No active segmentation detected, create a segmentation representation before using the brush tool"
        },
        cancelable: true
      });
      eventTarget_default.dispatchEvent(event);
      return null;
    }
    const { segmentationId } = activeSegmentation;
    const segmentsLocked = getLockedSegmentIndices(segmentationId);
    const { representationData } = getSegmentation(segmentationId);
    const editData = this.getEditData({
      viewport,
      representationData,
      segmentsLocked,
      segmentationId
    });
    return editData;
  }
  getEditData({ viewport, representationData, segmentsLocked, segmentationId }) {
    if (viewport instanceof BaseVolumeViewport_default) {
      const { volumeId } = representationData[SegmentationRepresentations_default.Labelmap];
      const actors = viewport.getActors();
      const isStackViewport = viewport instanceof StackViewport_default;
      if (isStackViewport) {
        const event = new CustomEvent(enums_exports.Events.ERROR_EVENT, {
          detail: {
            type: "Segmentation",
            message: "Cannot perform brush operation on the selected viewport"
          },
          cancelable: true
        });
        eventTarget_default.dispatchEvent(event);
        return null;
      }
      const volumes = actors.map((actorEntry) => cache_default.getVolume(actorEntry.referencedId));
      const segmentationVolume = cache_default.getVolume(volumeId);
      const referencedVolumeIdToThreshold = volumes.find((volume) => utilities_exports.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;
      return {
        volumeId,
        referencedVolumeId: this.configuration.threshold?.volumeId ?? referencedVolumeIdToThreshold,
        segmentsLocked
      };
    } else {
      const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
      if (!segmentationImageId) {
        return;
      }
      return {
        imageId: segmentationImageId,
        segmentsLocked
      };
    }
  }
  createHoverData(element, centerCanvas) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    const { viewPlaneNormal, viewUp } = camera;
    const viewportIdsToRender = [viewport.id];
    const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};
    const brushCursor = {
      metadata: {
        viewPlaneNormal: [...viewPlaneNormal],
        viewUp: [...viewUp],
        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
        referencedImageId: "",
        toolName: this.getToolName(),
        segmentColor
      },
      data: {}
    };
    return {
      brushCursor,
      centerCanvas,
      segmentIndex,
      viewport,
      segmentationId,
      segmentColor,
      viewportIdsToRender
    };
  }
  getActiveSegmentationData(viewport) {
    const viewportId = viewport.id;
    const activeRepresentation = getActiveSegmentation(viewportId);
    if (!activeRepresentation) {
      return;
    }
    const { segmentationId } = activeRepresentation;
    const segmentIndex = getActiveSegmentIndex(segmentationId);
    if (!segmentIndex) {
      return;
    }
    const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);
    return {
      segmentIndex,
      segmentationId,
      segmentColor
    };
  }
  getOperationData(element) {
    const editData = this._editData || this.createEditData(element);
    const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);
    const { data, metadata = {} } = brushCursor || {};
    const { viewPlaneNormal, viewUp } = metadata;
    const configColor = this.configuration.preview?.previewColors?.[segmentIndex];
    const { viewport } = getEnabledElement(element);
    const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);
    if (!configColor && !segmentColor) {
      return;
    }
    let previewColor = null, previewSegmentIndex = null;
    if (this.configuration.preview?.enabled) {
      previewColor = configColor || lightenColor(...segmentColor);
      previewSegmentIndex = 255;
    }
    const operationData = {
      ...editData,
      points: data?.handles?.points,
      segmentIndex,
      viewPlaneNormal,
      previewOnHover: !this._previewData.isDrag,
      toolGroupId: this.toolGroupId,
      segmentationId,
      viewUp,
      centerSegmentIndexInfo: this.centerSegmentIndexInfo,
      activeStrategy: this.configuration.activeStrategy,
      configuration: this.configuration,
      previewColor,
      previewSegmentIndex,
      createMemo: this.createMemo.bind(this)
    };
    return operationData;
  }
  addPreview(element = this._previewData.element, options) {
    const { _previewData } = this;
    const acceptReject = options?.acceptReject;
    if (acceptReject === true) {
      this.acceptPreview(element);
    } else if (acceptReject === false) {
      this.rejectPreview(element);
    }
    const enabledElement = getEnabledElement(element);
    const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks_default.AddPreview);
    _previewData.isDrag = true;
    if (results?.modified) {
      _previewData.preview = results;
      _previewData.element = element;
    }
    return results;
  }
  rejectPreview(element = this._previewData.element) {
    if (!element) {
      return;
    }
    this.doneEditMemo();
    const enabledElement = getEnabledElement(element);
    this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks_default.RejectPreview);
    this._previewData.preview = null;
    this._previewData.isDrag = false;
  }
  acceptPreview(element = this._previewData.element) {
    if (!element) {
      return;
    }
    const operationData = this.getOperationData(element);
    if (this.memo && this.memo.id) {
      this.acceptedMemoIds.set(this.memo.id, {
        element,
        segmentIndex: operationData.segmentIndex
      });
    }
    const enabledElement = getEnabledElement(element);
    this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks_default.AcceptPreview);
    this.doneEditMemo();
    this._previewData.preview = null;
    this._previewData.isDrag = false;
  }
  static viewportContoursToLabelmap(viewport, options) {
    const removeContours = options?.removeContours ?? true;
    const annotations = getAllAnnotations();
    const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);
    if (!viewAnnotations?.length) {
      return;
    }
    const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);
    if (!contourAnnotations.length) {
      return;
    }
    const brushInstance = new _LabelmapBaseTool({}, {
      configuration: {
        strategies: {
          FILL_INSIDE_CIRCLE: fillInsideCircle
        },
        activeStrategy: "FILL_INSIDE_CIRCLE"
      }
    });
    const preview = brushInstance.addPreview(viewport.element);
    const { memo, segmentationId } = preview;
    const previewVoxels = memo?.voxelManager;
    const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;
    const { dimensions } = previewVoxels;
    const imageData = viewport.getDefaultActor().actor.getMapper().getInputData();
    for (const annotation of contourAnnotations) {
      const boundsIJK = [
        [Infinity, -Infinity],
        [Infinity, -Infinity],
        [Infinity, -Infinity]
      ];
      const { polyline } = annotation.data.contour;
      for (const point of polyline) {
        const indexPoint = imageData.worldToIndex(point);
        indexPoint.forEach((v, idx) => {
          boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);
          boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);
        });
      }
      boundsIJK.forEach((bound, idx) => {
        bound[0] = Math.round(Math.max(0, bound[0]));
        bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));
      });
      const activeIndex = getActiveSegmentIndex(segmentationId);
      const startPoint = annotation.data.handles?.[0] || polyline[0];
      const startIndex = imageData.worldToIndex(startPoint).map(Math.round);
      const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;
      let hasZeroIndex = false;
      let hasPositiveIndex = false;
      for (const polyPoint of polyline) {
        const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);
        const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);
        if (polyValue === startValue) {
          hasZeroIndex = true;
        } else if (polyValue >= 0) {
          hasPositiveIndex = true;
        }
      }
      const hasBoth = hasZeroIndex && hasPositiveIndex;
      const segmentIndex = hasBoth ? startValue : startValue === 0 ? activeIndex : 0;
      for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {
        for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {
          for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {
            const worldPoint = imageData.indexToWorld([i, j, k]);
            const isContained = isPointInsidePolyline3D(worldPoint, polyline);
            if (isContained) {
              previewVoxels.setAtIJK(i, j, k, segmentIndex);
            }
          }
        }
      }
      if (removeContours) {
        removeAnnotation(annotation.annotationUID);
      }
    }
    const slices = previewVoxels.getArrayOfModifiedSlices();
    triggerSegmentationDataModified(segmentationId, slices);
  }
};
_LabelmapBaseTool.previewData = {
  preview: null,
  element: null,
  timerStart: 0,
  timer: null,
  startPoint: [NaN, NaN],
  isDrag: false
};
var LabelmapBaseTool = _LabelmapBaseTool;
function lightenColor(r, g, b, a, factor = 0.4) {
  return [
    Math.round(r + (255 - r) * factor),
    Math.round(g + (255 - g) * factor),
    Math.round(b + (255 - b) * factor),
    a
  ];
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js
var BrushTool = class extends LabelmapBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      strategies: {
        FILL_INSIDE_CIRCLE: fillInsideCircle,
        ERASE_INSIDE_CIRCLE: eraseInsideCircle,
        FILL_INSIDE_SPHERE: fillInsideSphere,
        ERASE_INSIDE_SPHERE: eraseInsideSphere,
        THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,
        THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,
        THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland
      },
      defaultStrategy: "FILL_INSIDE_CIRCLE",
      activeStrategy: "FILL_INSIDE_CIRCLE",
      brushSize: 25,
      useCenterSegmentIndex: false,
      preview: {
        enabled: false,
        previewColors: {
          0: [255, 255, 255, 128]
        },
        previewTimeMs: 250,
        previewMoveDistance: 8,
        dragMoveDistance: 4,
        dragTimeMs: 500
      },
      actions: {
        [StrategyCallbacks_default.AcceptPreview]: {
          method: StrategyCallbacks_default.AcceptPreview,
          bindings: [
            {
              key: "Enter"
            }
          ]
        },
        [StrategyCallbacks_default.RejectPreview]: {
          method: StrategyCallbacks_default.RejectPreview,
          bindings: [
            {
              key: "Escape"
            }
          ]
        },
        [StrategyCallbacks_default.Interpolate]: {
          method: StrategyCallbacks_default.Interpolate,
          bindings: [
            {
              key: "i"
            }
          ],
          configuration: {
            useBallStructuringElement: true,
            noUseDistanceTransform: true,
            noUseExtrapolation: true
          }
        },
        interpolateExtrapolation: {
          method: StrategyCallbacks_default.Interpolate,
          bindings: [
            {
              key: "e"
            }
          ],
          configuration: {}
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this._lastDragInfo = null;
    this.onSetToolPassive = (evt) => {
      this.disableCursor();
    };
    this.onSetToolEnabled = () => {
      this.disableCursor();
    };
    this.onSetToolDisabled = (evt) => {
      this.disableCursor();
    };
    this.preMouseDownCallback = (evt) => {
      const eventData = evt.detail;
      const { element, currentPoints } = eventData;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this._editData = this.createEditData(element);
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      this._previewData.isDrag = false;
      this._previewData.timerStart = Date.now();
      const canvasPoint = vec2_exports.clone(currentPoints.canvas);
      const worldPoint = viewport.canvasToWorld([
        canvasPoint[0],
        canvasPoint[1]
      ]);
      this._lastDragInfo = {
        canvas: canvasPoint,
        world: vec3_exports.clone(worldPoint)
      };
      const hoverData = this._hoverData || this.createHoverData(element);
      triggerAnnotationRenderForViewportIds_default(hoverData.viewportIdsToRender);
      const operationData = this.getOperationData(element);
      this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks_default.OnInteractionStart);
      return true;
    };
    this.mouseMoveCallback = (evt) => {
      if (this.mode === ToolModes_default.Active) {
        this.updateCursor(evt);
        if (!this.configuration.preview.enabled) {
          return;
        }
        const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;
        const { currentPoints, element } = evt.detail;
        const { canvas } = currentPoints;
        const { startPoint, timer, timerStart, isDrag } = this._previewData;
        if (isDrag) {
          return;
        }
        const delta = vec2_exports.distance(canvas, startPoint);
        const time = Date.now() - timerStart;
        if (delta > previewMoveDistance || time > previewTimeMs && delta > dragMoveDistance) {
          if (timer) {
            window.clearTimeout(timer);
            this._previewData.timer = null;
          }
          if (!isDrag) {
            this.rejectPreview(element);
          }
        }
        if (!this._previewData.timer) {
          const timer2 = window.setTimeout(this.previewCallback, 250);
          Object.assign(this._previewData, {
            timerStart: Date.now(),
            timer: timer2,
            startPoint: canvas,
            element
          });
        }
      }
    };
    this.previewCallback = () => {
      if (this._previewData.isDrag) {
        this._previewData.timer = null;
        return;
      }
      this._previewData.timer = null;
      const operationData = this.getOperationData(this._previewData.element);
      const enabledElement = getEnabledElement(this._previewData.element);
      if (!enabledElement) {
        return;
      }
      const { viewport } = enabledElement;
      const activeStrategy = this.configuration.activeStrategy;
      const strategyData = getStrategyData({
        operationData,
        viewport,
        strategy: activeStrategy
      });
      if (!operationData) {
        return;
      }
      const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);
      this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {
        ...operationData,
        ...strategyData,
        memo
      }, StrategyCallbacks_default.Preview);
    };
    this._dragCallback = (evt) => {
      const eventData = evt.detail;
      const { element, currentPoints } = eventData;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.updateCursor(evt);
      const { viewportIdsToRender } = this._hoverData;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      const delta = vec2_exports.distance(currentPoints.canvas, this._previewData.startPoint);
      const { dragTimeMs, dragMoveDistance } = this.configuration.preview;
      if (!this._previewData.isDrag && Date.now() - this._previewData.timerStart < dragTimeMs && delta < dragMoveDistance) {
        return;
      }
      if (this._previewData.timer) {
        window.clearTimeout(this._previewData.timer);
        this._previewData.timer = null;
      }
      if (!this._lastDragInfo) {
        const startCanvas = this._previewData.startPoint;
        const startWorld = viewport.canvasToWorld([
          startCanvas[0],
          startCanvas[1]
        ]);
        this._lastDragInfo = {
          canvas: vec2_exports.clone(startCanvas),
          world: vec3_exports.clone(startWorld)
        };
      }
      const currentCanvas = currentPoints.canvas;
      const currentWorld = viewport.canvasToWorld([
        currentCanvas[0],
        currentCanvas[1]
      ]);
      this._hoverData = this.createHoverData(element, currentCanvas);
      this._calculateCursor(element, currentCanvas);
      const operationData = this.getOperationData(element);
      operationData.strokePointsWorld = [
        vec3_exports.clone(this._lastDragInfo.world),
        vec3_exports.clone(currentWorld)
      ];
      this._previewData.preview = this.applyActiveStrategy(enabledElement, operationData);
      const currentCanvasClone = vec2_exports.clone(currentCanvas);
      this._lastDragInfo = {
        canvas: currentCanvasClone,
        world: vec3_exports.clone(currentWorld)
      };
      this._previewData.element = element;
      this._previewData.timerStart = Date.now() + dragTimeMs;
      this._previewData.isDrag = true;
      this._previewData.startPoint = currentCanvasClone;
    };
    this._endCallback = (evt) => {
      const eventData = evt.detail;
      const { element } = eventData;
      const enabledElement = getEnabledElement(element);
      const operationData = this.getOperationData(element);
      if (!this._previewData.preview && !this._previewData.isDrag) {
        this.applyActiveStrategy(enabledElement, operationData);
      }
      this.doneEditMemo();
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.updateCursor(evt);
      this._editData = null;
      this._lastDragInfo = null;
      this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks_default.OnInteractionEnd);
      if (!this._previewData.isDrag) {
        this.acceptPreview(element);
      }
    };
    this._activateDraw = (element) => {
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
    };
  }
  disableCursor() {
    this._hoverData = void 0;
    this.rejectPreview();
  }
  updateCursor(evt) {
    const eventData = evt.detail;
    const { element } = eventData;
    const { currentPoints } = eventData;
    const centerCanvas = currentPoints.canvas;
    this._hoverData = this.createHoverData(element, centerCanvas);
    this._calculateCursor(element, centerCanvas);
    if (!this._hoverData) {
      return;
    }
    triggerAnnotationRenderForViewportIds_default(this._hoverData.viewportIdsToRender);
  }
  _calculateCursor(element, centerCanvas) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { canvasToWorld } = viewport;
    const camera = viewport.getCamera();
    const { brushSize } = this.configuration;
    const viewUp = vec3_exports.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);
    const viewPlaneNormal = vec3_exports.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);
    const viewRight = vec3_exports.create();
    vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
    const centerCursorInWorld = canvasToWorld([
      centerCanvas[0],
      centerCanvas[1]
    ]);
    const bottomCursorInWorld = vec3_exports.create();
    const topCursorInWorld = vec3_exports.create();
    const leftCursorInWorld = vec3_exports.create();
    const rightCursorInWorld = vec3_exports.create();
    for (let i = 0; i <= 2; i++) {
      bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;
      topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;
      leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;
      rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;
    }
    if (!this._hoverData) {
      return;
    }
    const { brushCursor } = this._hoverData;
    const { data } = brushCursor;
    if (data.handles === void 0) {
      data.handles = {};
    }
    data.handles.points = [
      bottomCursorInWorld,
      topCursorInWorld,
      leftCursorInWorld,
      rightCursorInWorld
    ];
    const activeStrategy = this.configuration.activeStrategy;
    const strategy = this.configuration.strategies[activeStrategy];
    if (typeof strategy?.computeInnerCircleRadius === "function") {
      strategy.computeInnerCircleRadius({
        configuration: this.configuration,
        viewport
      });
    }
    data.invalidated = false;
  }
  getStatistics(element, segmentIndices) {
    if (!element) {
      return;
    }
    const enabledElement = getEnabledElement(element);
    const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks_default.GetStatistics, segmentIndices);
    return stats;
  }
  rejectPreview(element = this._previewData.element) {
    if (!element) {
      return;
    }
    this.doneEditMemo();
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks_default.RejectPreview);
    this._previewData.preview = null;
    this._previewData.isDrag = false;
  }
  acceptPreview(element = this._previewData.element) {
    if (!element) {
      return;
    }
    super.acceptPreview(element);
  }
  interpolate(element, config2) {
    if (!element) {
      return;
    }
    const enabledElement = getEnabledElement(element);
    this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks_default.Interpolate, config2.configuration);
    this._previewData.isDrag = true;
  }
  invalidateBrushCursor() {
    if (this._hoverData === void 0) {
      return;
    }
    const { data } = this._hoverData.brushCursor;
    const { viewport } = this._hoverData;
    data.invalidated = true;
    const { segmentColor } = this.getActiveSegmentationData(viewport) || {};
    this._hoverData.brushCursor.metadata.segmentColor = segmentColor;
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    if (!this._hoverData) {
      return;
    }
    const { viewport } = enabledElement;
    const viewportIdsToRender = this._hoverData.viewportIdsToRender;
    if (!viewportIdsToRender.includes(viewport.id)) {
      return;
    }
    const brushCursor = this._hoverData.brushCursor;
    if (brushCursor.data.invalidated === true) {
      const { centerCanvas } = this._hoverData;
      const { element } = viewport;
      this._calculateCursor(element, centerCanvas);
    }
    const toolMetadata = brushCursor.metadata;
    if (!toolMetadata) {
      return;
    }
    const annotationUID = toolMetadata.brushCursorUID;
    const data = brushCursor.data;
    const { points } = data.handles;
    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
    const bottom = canvasCoordinates[0];
    const top = canvasCoordinates[1];
    const center = [
      Math.floor((bottom[0] + top[0]) / 2),
      Math.floor((bottom[1] + top[1]) / 2)
    ];
    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
    const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;
    if (!viewport.getRenderingEngine()) {
      console.warn("Rendering Engine has been destroyed");
      return;
    }
    const circleUID = "0";
    drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
      color,
      lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null
    });
    const { dynamicRadiusInCanvas } = this.configuration?.threshold || {
      dynamicRadiusInCanvas: 0
    };
    if (dynamicRadiusInCanvas) {
      const circleUID1 = "1";
      drawCircle_default(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {
        color
      });
    }
  }
};
BrushTool.toolName = "Brush";
var BrushTool_default = BrushTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js
function getBrushToolInstances(toolGroupId, toolName) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return [];
  }
  const toolInstances = toolGroup._toolInstances;
  if (!Object.keys(toolInstances).length) {
    return [];
  }
  if (toolName && toolInstances[toolName]) {
    return [toolInstances[toolName]];
  }
  const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool_default);
  return brushBasedToolInstances;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js
function setBrushSizeForToolGroup(toolGroupId, brushSize, toolName) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return;
  }
  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);
  brushBasedToolInstances.forEach((tool) => {
    tool.configuration.brushSize = brushSize;
    tool.invalidateBrushCursor();
  });
  const viewportsInfo = toolGroup.getViewportsInfo();
  const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);
  if (!viewportsInfoArray.length) {
    return;
  }
  const { renderingEngineId } = viewportsInfoArray[0];
  const viewportIds = toolGroup.getViewportIds();
  const renderingEngine = getRenderingEngine(renderingEngineId);
  triggerAnnotationRenderForViewportIds_default(viewportIds);
}
function getBrushSizeForToolGroup(toolGroupId, toolName) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return;
  }
  const toolInstances = toolGroup._toolInstances;
  if (!Object.keys(toolInstances).length) {
    return;
  }
  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);
  const brushToolInstance = brushBasedToolInstances[0];
  if (!brushToolInstance) {
    return;
  }
  return brushToolInstance.configuration.brushSize;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js
function setBrushThresholdForToolGroup(toolGroupId, threshold) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return;
  }
  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);
  brushBasedToolInstances.forEach((tool) => {
    const activeStrategy = tool.configuration.activeStrategy;
    if (!activeStrategy.toLowerCase().includes("threshold")) {
      return;
    }
    tool.configuration = {
      ...tool.configuration,
      threshold: {
        ...tool.configuration.threshold,
        ...threshold
      }
    };
  });
  const viewportsInfo = toolGroup.getViewportsInfo();
  if (!viewportsInfo.length) {
    return;
  }
  const viewportIds = toolGroup.getViewportIds();
  triggerAnnotationRenderForViewportIds_default(viewportIds);
}
function getBrushThresholdForToolGroup(toolGroupId) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return;
  }
  const toolInstances = toolGroup._toolInstances;
  if (!Object.keys(toolInstances).length) {
    return;
  }
  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);
  const brushToolInstance = brushBasedToolInstances[0];
  if (!brushToolInstance) {
    return;
  }
  return brushToolInstance.configuration.threshold.range;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js
var _SegmentStatsCalculator = class _SegmentStatsCalculator {
  static statsInit(options) {
    const { storePointData, indices, mode } = options;
    this.mode = mode;
    this.indices = indices;
    this.calculators.clear();
    if (this.mode === "individual") {
      indices.forEach((index) => {
        this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));
      });
    } else {
      this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));
    }
  }
  static statsCallback(data) {
    const { segmentIndex, ...statsData } = data;
    if (!segmentIndex) {
      throw new Error("Segment index is required for stats calculation");
    }
    const calculator = this.mode === "individual" ? this.calculators.get(segmentIndex) : this.calculators.get(this.indices);
    if (!calculator) {
      throw new Error(`No calculator found for segment ${segmentIndex}`);
    }
    calculator.statsCallback(statsData);
  }
  static getStatistics(options) {
    if (this.mode === "individual") {
      const result = {};
      this.calculators.forEach((calculator2, segmentIndex) => {
        result[segmentIndex] = calculator2.getStatistics(options);
      });
      return result;
    }
    const calculator = this.calculators.get(this.indices);
    return calculator.getStatistics(options);
  }
};
_SegmentStatsCalculator.calculators = /* @__PURE__ */ new Map();
_SegmentStatsCalculator.indices = [];
_SegmentStatsCalculator.mode = "collective";
var SegmentStatsCalculator = _SegmentStatsCalculator;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js
function thresholdSegmentationByRange(segmentationVolume, segmentationIndex, thresholdVolumeInformation, overlapType, segmentationId) {
  if (!segmentationId) {
    throw new Error("Segmentation ID is required to be passed inside thresholdSegmentationByRange");
  }
  const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);
  const { voxelManager } = volumeInfoList[baseVolumeIdx];
  const refVoxelManager = voxelManager;
  const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();
  const segVoxelManager = segmentationVolume.voxelManager;
  volumeInfoList.forEach((volumeInfo) => {
    const { volumeSize } = volumeInfo;
    if (volumeSize === scalarDataLength) {
      _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo);
    } else {
      _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType);
    }
  });
  triggerSegmentationDataModified(segmentationId);
  return segmentationVolume;
}
function _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType) {
  const { imageData, lower, upper, dimensions } = volumeInfo;
  let total, overlaps, range2;
  const segScalarDataLength = segVoxelManager.getScalarDataLength();
  for (let i = 0; i < segScalarDataLength; i++) {
    if (segScalarDataLength.getAtIndex(i) === segmentationIndex) {
      const overlapBounds = getVoxelOverlap(imageData, dimensions, volumeInfoList[baseVolumeIdx].spacing, volumeInfoList[baseVolumeIdx].imageData.getPoint(i));
      const callbackOverlap = ({ value }) => {
        total = total + 1;
        if (value >= range2.lower && value <= range2.upper) {
          overlaps = overlaps + 1;
        }
      };
      total = 0;
      overlaps = 0;
      range2 = { lower, upper };
      let overlapTest = false;
      segVoxelManager.forEach(callbackOverlap, {
        imageData,
        boundsIJK: overlapBounds
      });
      overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;
      segVoxelManager.setAtIndex(i, overlapTest ? segmentationIndex : 0);
    }
  }
  return { total, range: range2, overlaps };
}
function _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo) {
  const { lower, upper } = volumeInfo;
  const scalarDataLength = segVoxelManager.getScalarDataLength();
  for (let i = 0; i < scalarDataLength; i++) {
    if (segVoxelManager.getAtIndex[i] === segmentationIndex) {
      const value = refVoxelManager.getAtIndex(i);
      segVoxelManager.setAtIndex(i, value >= lower && value <= upper ? segmentationIndex : 0);
    }
  }
}
var thresholdSegmentationByRange_default = thresholdSegmentationByRange;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isLineInSegment.js
function isLineInSegment(point1, point2, isInSegment) {
  const ijk1 = isInSegment.toIJK(point1);
  const ijk2 = isInSegment.toIJK(point2);
  const testPoint = vec3_exports.create();
  const { testIJK } = isInSegment;
  const delta = vec3_exports.sub(vec3_exports.create(), ijk1, ijk2);
  const testSize = Math.round(Math.max(...delta.map(Math.abs)));
  if (testSize < 2) {
    return true;
  }
  const unitDelta = vec3_exports.scale(vec3_exports.create(), delta, 1 / testSize);
  for (let i = 1; i < testSize; i++) {
    vec3_exports.scaleAndAdd(testPoint, ijk2, unitDelta, i);
    if (!testIJK(testPoint)) {
      return false;
    }
  }
  return true;
}
function createIsInSegmentMetadata({ dimensions, imageData, voxelManager, segmentIndex, containedSegmentIndices }) {
  const width = dimensions[0];
  const pixelsPerSlice = width * dimensions[1];
  return {
    testCenter: (point1, point2) => {
      const point = vec3_exports.add(vec3_exports.create(), point1, point2).map((it) => it / 2);
      const ijk = imageData.worldToIndex(point).map(Math.round);
      const [i, j, k] = ijk;
      const index = i + j * width + k * pixelsPerSlice;
      const value = voxelManager.getAtIndex(index);
      return value === segmentIndex || containedSegmentIndices?.has(value);
    },
    toIJK: (point) => imageData.worldToIndex(point),
    testIJK: (ijk) => {
      const [i, j, k] = ijk;
      const index = Math.round(i) + Math.round(j) * width + Math.round(k) * pixelsPerSlice;
      const value = voxelManager.getAtIndex(index);
      return value === segmentIndex || containedSegmentIndices?.has(value);
    }
  };
}
function createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices) {
  const vol = cache_default.getVolume(segVolumeId);
  if (!vol) {
    console.warn(`No volume found for ${segVolumeId}`);
    return;
  }
  return createIsInSegmentMetadata({
    dimensions: vol.dimensions,
    imageData: vol.imageData,
    voxelManager: vol.voxelManager,
    segmentIndex,
    containedSegmentIndices
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/findLargestBidirectional.js
var EPSILON9 = 0.01;
function findLargestBidirectional(contours, segVolumeId, segment) {
  const { sliceContours } = contours;
  const { segmentIndex, containedSegmentIndices } = segment;
  let maxBidirectional;
  const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);
  for (const sliceContour of sliceContours) {
    const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);
    if (!bidirectional) {
      continue;
    }
    maxBidirectional = bidirectional;
  }
  if (maxBidirectional) {
    Object.assign(maxBidirectional, segment);
  }
  return maxBidirectional;
}
function createBidirectionalForSlice(sliceContour, isInSegment, currentMax = { maxMajor: 0, maxMinor: 0 }) {
  const { points } = sliceContour.polyData;
  const { maxMinor: currentMaxMinor, maxMajor: currentMaxMajor } = currentMax;
  let maxMajor = currentMaxMajor * currentMaxMajor;
  let maxMinor = currentMaxMinor * currentMaxMinor;
  let maxMajorPoints;
  for (let index1 = 0; index1 < points.length; index1++) {
    for (let index2 = index1 + 1; index2 < points.length; index2++) {
      const point1 = points[index1];
      const point2 = points[index2];
      const distance2 = vec3_exports.sqrDist(point1, point2);
      if (distance2 < maxMajor) {
        continue;
      }
      if (distance2 - EPSILON9 < maxMajor + EPSILON9 && maxMajorPoints) {
        continue;
      }
      if (!isInSegment.testCenter(point1, point2)) {
        continue;
      }
      if (!isLineInSegment(point1, point2, isInSegment)) {
        continue;
      }
      maxMajor = distance2 - EPSILON9;
      maxMajorPoints = [index1, index2];
      maxMinor = 0;
    }
  }
  if (!maxMajorPoints) {
    return;
  }
  maxMajor = Math.sqrt(maxMajor + EPSILON9);
  const handle0 = points[maxMajorPoints[0]];
  const handle1 = points[maxMajorPoints[1]];
  const unitMajor = vec3_exports.sub(vec3_exports.create(), handle0, handle1);
  vec3_exports.scale(unitMajor, unitMajor, 1 / maxMajor);
  let maxMinorPoints;
  for (let index1 = 0; index1 < points.length; index1++) {
    for (let index2 = index1 + 1; index2 < points.length; index2++) {
      const point1 = points[index1];
      const point2 = points[index2];
      const distance2 = vec3_exports.sqrDist(point1, point2);
      if (distance2 <= maxMinor) {
        continue;
      }
      const delta = vec3_exports.sub(vec3_exports.create(), point1, point2);
      const dot2 = Math.abs(vec3_exports.dot(delta, unitMajor)) / Math.sqrt(distance2);
      if (dot2 > EPSILON9) {
        continue;
      }
      if (!isInSegment.testCenter(point1, point2)) {
        continue;
      }
      if (!isLineInSegment(point1, point2, isInSegment)) {
        continue;
      }
      maxMinor = distance2;
      maxMinorPoints = [index1, index2];
    }
  }
  if (!maxMinorPoints) {
    return;
  }
  maxMinor = Math.sqrt(maxMinor);
  const handle2 = points[maxMinorPoints[0]];
  const handle3 = points[maxMinorPoints[1]];
  const bidirectional = {
    majorAxis: [handle0, handle1],
    minorAxis: [handle2, handle3],
    maxMajor,
    maxMinor,
    ...sliceContour
  };
  return bidirectional;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/contourAndFindLargestBidirectional.js
async function contourAndFindLargestBidirectional(segmentation) {
  const contours = await generateContourSetsFromLabelmap({
    segmentations: segmentation
  });
  if (!contours?.length || !contours[0].sliceContours.length) {
    return;
  }
  const { segments = [
    null,
    { label: "Unspecified", color: null, containedSegmentIndices: null }
  ] } = segmentation;
  const vol = getOrCreateSegmentationVolume_default(segmentation.segmentationId);
  if (!vol) {
    return;
  }
  const segmentIndex = segments.findIndex((it) => !!it);
  if (segmentIndex === -1) {
    return;
  }
  segments[segmentIndex].segmentIndex = segmentIndex;
  return findLargestBidirectional(contours[0], vol.volumeId, segments[segmentIndex]);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createBidirectionalToolData.js
function createBidirectionalToolData(bidirectionalData, viewport) {
  const { majorAxis, minorAxis, label = "", sliceIndex } = bidirectionalData;
  const [major0, major1] = majorAxis;
  const [minor0, minor1] = minorAxis;
  const points = [major0, major1, minor0, minor1];
  const bidirectionalToolData = {
    highlighted: true,
    invalidated: true,
    metadata: {
      toolName: "Bidirectional",
      ...viewport.getViewReference({ sliceIndex })
    },
    data: {
      handles: {
        points,
        textBox: {
          hasMoved: false,
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        },
        activeHandleIndex: null
      },
      label,
      cachedStats: {}
    },
    isLocked: false,
    isVisible: true
  };
  return bidirectionalToolData;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js
var { transformWorldToIndex: transformWorldToIndex7 } = utilities_exports;
var _BidirectionalTool = class _BidirectionalTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines4
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      let canvasPoint1 = viewport.worldToCanvas(points[0]);
      let canvasPoint2 = viewport.worldToCanvas(points[1]);
      let line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      let distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      canvasPoint1 = viewport.worldToCanvas(points[2]);
      canvasPoint2 = viewport.worldToCanvas(points[3]);
      line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      hideElementCursor(element);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const data = annotation.data;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        handleIndex = data.handles.points.findIndex((p) => p === handle);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      hideElementCursor(element);
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        movingTextBox
      };
      this._activateModify(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      this.doneEditMemo();
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const { renderingEngine } = getEnabledElement(element);
      if (this.editData.handleIndex !== void 0) {
        const { points } = data.handles;
        const firstLineSegmentLength = vec3_exports.distance(points[0], points[1]);
        const secondLineSegmentLength = vec3_exports.distance(points[2], points[3]);
        if (secondLineSegmentLength > firstLineSegmentLength) {
          const longAxis = [[...points[2]], [...points[3]]];
          const shortAxisPoint0 = [...points[0]];
          const shortAxisPoint1 = [...points[1]];
          const longAxisVector = vec2_exports.create();
          vec2_exports.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);
          const counterClockWisePerpendicularToLongAxis = vec2_exports.create();
          vec2_exports.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);
          const currentShortAxisVector = vec2_exports.create();
          vec2_exports.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);
          let shortAxis;
          if (vec2_exports.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {
            shortAxis = [shortAxisPoint0, shortAxisPoint1];
          } else {
            shortAxis = [shortAxisPoint1, shortAxisPoint0];
          }
          data.handles.points = [
            longAxis[0],
            longAxis[1],
            shortAxis[0],
            shortAxis[1]
          ];
        }
      }
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragDrawCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { worldToCanvas } = viewport;
      const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      const worldPos = currentPoints.world;
      data.handles.points[handleIndex] = [...worldPos];
      const canvasCoordPoints = data.handles.points.map(worldToCanvas);
      const canvasCoords = {
        longLineSegment: {
          start: {
            x: canvasCoordPoints[0][0],
            y: canvasCoordPoints[0][1]
          },
          end: {
            x: canvasCoordPoints[1][0],
            y: canvasCoordPoints[1][1]
          }
        },
        shortLineSegment: {
          start: {
            x: canvasCoordPoints[2][0],
            y: canvasCoordPoints[2][1]
          },
          end: {
            x: canvasCoordPoints[3][0],
            y: canvasCoordPoints[3][1]
          }
        }
      };
      const dist = vec2_exports.distance(canvasCoordPoints[0], canvasCoordPoints[1]);
      const shortAxisDistFromCenter = dist / 3;
      const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;
      const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;
      const length = Math.sqrt(dx * dx + dy * dy);
      const vectorX = dx / length;
      const vectorY = dy / length;
      const xMid = (canvasCoords.longLineSegment.start.x + canvasCoords.longLineSegment.end.x) / 2;
      const yMid = (canvasCoords.longLineSegment.start.y + canvasCoords.longLineSegment.end.y) / 2;
      const startX = xMid + shortAxisDistFromCenter * vectorY;
      const startY = yMid - shortAxisDistFromCenter * vectorX;
      const endX = xMid - shortAxisDistFromCenter * vectorY;
      const endY = yMid + shortAxisDistFromCenter * vectorX;
      data.handles.points[2] = viewport.canvasToWorld([startX, startY]);
      data.handles.points[3] = viewport.canvasToWorld([endX, endY]);
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      this.editData.hasMoved = true;
    };
    this._dragModifyCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        this._dragModifyHandle(evt);
        annotation.invalidated = true;
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this._dragModifyHandle = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { annotation, handleIndex: movingHandleIndex } = this.editData;
      const { data } = annotation;
      const worldPos = currentPoints.world;
      const canvasCoordHandlesCurrent = [
        viewport.worldToCanvas(data.handles.points[0]),
        viewport.worldToCanvas(data.handles.points[1]),
        viewport.worldToCanvas(data.handles.points[2]),
        viewport.worldToCanvas(data.handles.points[3])
      ];
      const firstLineSegment = {
        start: {
          x: canvasCoordHandlesCurrent[0][0],
          y: canvasCoordHandlesCurrent[0][1]
        },
        end: {
          x: canvasCoordHandlesCurrent[1][0],
          y: canvasCoordHandlesCurrent[1][1]
        }
      };
      const secondLineSegment = {
        start: {
          x: canvasCoordHandlesCurrent[2][0],
          y: canvasCoordHandlesCurrent[2][1]
        },
        end: {
          x: canvasCoordHandlesCurrent[3][0],
          y: canvasCoordHandlesCurrent[3][1]
        }
      };
      const proposedPoint = [...worldPos];
      const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);
      if (movingHandleIndex === 0 || movingHandleIndex === 1) {
        const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;
        const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];
        const fixedHandleToProposedCoordVec = vec2_exports.set(vec2_exports.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);
        const fixedHandleToOldCoordVec = vec2_exports.set(vec2_exports.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] - fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] - fixedHandleCanvasCoord[1]);
        vec2_exports.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);
        vec2_exports.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);
        const proposedFirstLineSegment = {
          start: {
            x: fixedHandleCanvasCoord[0],
            y: fixedHandleCanvasCoord[1]
          },
          end: {
            x: proposedCanvasCoord[0],
            y: proposedCanvasCoord[1]
          }
        };
        if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {
          return;
        }
        const centerOfRotation = fixedHandleCanvasCoord;
        const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);
        let firstPointX = canvasCoordHandlesCurrent[2][0];
        let firstPointY = canvasCoordHandlesCurrent[2][1];
        let secondPointX = canvasCoordHandlesCurrent[3][0];
        let secondPointY = canvasCoordHandlesCurrent[3][1];
        firstPointX -= centerOfRotation[0];
        firstPointY -= centerOfRotation[1];
        secondPointX -= centerOfRotation[0];
        secondPointY -= centerOfRotation[1];
        const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);
        const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);
        const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);
        const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);
        firstPointX = rotatedFirstPoint + centerOfRotation[0];
        firstPointY = rotatedFirstPointY + centerOfRotation[1];
        secondPointX = rotatedSecondPoint + centerOfRotation[0];
        secondPointY = rotatedSecondPointY + centerOfRotation[1];
        const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);
        const newSecondPoint = viewport.canvasToWorld([
          secondPointX,
          secondPointY
        ]);
        data.handles.points[movingHandleIndex] = proposedPoint;
        data.handles.points[2] = newFirstPoint;
        data.handles.points[3] = newSecondPoint;
      } else {
        const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;
        const canvasCoordsCurrent = {
          longLineSegment: {
            start: firstLineSegment.start,
            end: firstLineSegment.end
          },
          shortLineSegment: {
            start: secondLineSegment.start,
            end: secondLineSegment.end
          }
        };
        const longLineSegmentVec = vec2_exports.subtract(vec2_exports.create(), [
          canvasCoordsCurrent.longLineSegment.end.x,
          canvasCoordsCurrent.longLineSegment.end.y
        ], [
          canvasCoordsCurrent.longLineSegment.start.x,
          canvasCoordsCurrent.longLineSegment.start.y
        ]);
        const longLineSegmentVecNormalized = vec2_exports.normalize(vec2_exports.create(), longLineSegmentVec);
        const proposedToCurrentVec = vec2_exports.subtract(vec2_exports.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [
          canvasCoordHandlesCurrent[movingHandleIndex][0],
          canvasCoordHandlesCurrent[movingHandleIndex][1]
        ]);
        const movementLength = vec2_exports.length(proposedToCurrentVec);
        const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);
        const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;
        const newTranslatedPoint = vec2_exports.scaleAndAdd(vec2_exports.create(), [
          canvasCoordHandlesCurrent[translateHandleIndex][0],
          canvasCoordHandlesCurrent[translateHandleIndex][1]
        ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);
        if (this._movingLongAxisWouldPutItThroughShortAxis({
          start: {
            x: proposedCanvasCoord[0],
            y: proposedCanvasCoord[1]
          },
          end: {
            x: newTranslatedPoint[0],
            y: newTranslatedPoint[1]
          }
        }, {
          start: {
            x: canvasCoordsCurrent.longLineSegment.start.x,
            y: canvasCoordsCurrent.longLineSegment.start.y
          },
          end: {
            x: canvasCoordsCurrent.longLineSegment.end.x,
            y: canvasCoordsCurrent.longLineSegment.end.y
          }
        })) {
          return;
        }
        const intersectionPoint = intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);
        if (!intersectionPoint) {
          return;
        }
        data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);
        data.handles.points[movingHandleIndex] = proposedPoint;
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = true;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].unit == null) {
          data.cachedStats[targetId] = {
            length: null,
            width: null,
            unit: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {
            color
          });
        }
        const dataId1 = `${annotationUID}-line-1`;
        const dataId2 = `${annotationUID}-line-2`;
        const lineUID = "0";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          lineDash,
          lineWidth,
          shadow
        }, dataId1);
        const secondLineUID = "1";
        drawLine(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {
          color,
          lineDash,
          lineWidth,
          shadow
        }, dataId2);
        renderStatus = true;
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!textLines || textLines.length === 0) {
          continue;
        }
        let canvasTextBoxCoords;
        if (!data.handles.textBox.hasMoved) {
          canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {
      const vectorInSecondLineDirection = vec2_exports.create();
      vec2_exports.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);
      vec2_exports.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);
      const extendedSecondLineSegment = {
        start: {
          x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,
          y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10
        },
        end: {
          x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,
          y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10
        }
      };
      const proposedIntersectionPoint = intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);
      const wouldPutThroughShortAxis = !proposedIntersectionPoint;
      return wouldPutThroughShortAxis;
    };
    this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {
      const { data } = annotation;
      const { element } = enabledElement.viewport;
      const worldPos1 = data.handles.points[0];
      const worldPos2 = data.handles.points[1];
      const worldPos3 = data.handles.points[2];
      const worldPos4 = data.handles.points[3];
      const { cachedStats } = data;
      const targetIds = Object.keys(cachedStats);
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { imageData, dimensions } = image;
        const index1 = transformWorldToIndex7(imageData, worldPos1);
        const index2 = transformWorldToIndex7(imageData, worldPos2);
        const index3 = transformWorldToIndex7(imageData, worldPos3);
        const index4 = transformWorldToIndex7(imageData, worldPos4);
        const handles1 = [index1, index2];
        const handles2 = [index3, index4];
        const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);
        const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);
        const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;
        const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;
        const length = dist1 > dist2 ? dist1 : dist2;
        const width = dist1 > dist2 ? dist2 : dist1;
        const unit = dist1 > dist2 ? units1 : units2;
        const widthUnit = dist1 > dist2 ? units2 : units1;
        this._isInsideVolume(index1, index2, index3, index4, dimensions) ? this.isHandleOutsideImage = false : this.isHandleOutsideImage = true;
        cachedStats[targetId] = {
          length,
          width,
          unit,
          widthUnit
        };
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {
      return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions) && utilities_exports.indexWithinDimensions(index3, dimensions) && utilities_exports.indexWithinDimensions(index4, dimensions);
    };
    this._getSignedAngle = (vector1, vector2) => {
      return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  addNewAnnotation(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const worldPos = currentPoints.world;
    this.isDrawing = true;
    const annotation = this.createAnnotation(evt, [
      [...worldPos],
      [...worldPos],
      [...worldPos],
      [...worldPos]
    ]);
    addAnnotation(annotation, element);
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex: 1,
      movingTextBox: false,
      newAnnotation: true,
      hasMoved: false
    };
    this._activateDraw(element);
    hideElementCursor(element);
    evt.preventDefault();
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    return annotation;
  }
  _calculateLength(pos1, pos2) {
    const dx = pos1[0] - pos2[0];
    const dy = pos1[1] - pos2[1];
    const dz = pos1[2] - pos2[2];
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
  }
};
_BidirectionalTool.toolName = "Bidirectional";
_BidirectionalTool.hydrate = (viewportId, axis, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _BidirectionalTool.hydrateBase(_BidirectionalTool, enabledElement, axis[0], options);
  const [majorAxis, minorAxis] = axis;
  const [major0, major1] = majorAxis;
  const [minor0, minor1] = minorAxis;
  const points = [major0, major1, minor0, minor1];
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points,
        activeHandleIndex: null,
        textBox: {
          hasMoved: false,
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        }
      },
      cachedStats: {}
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
  return annotation;
};
var BidirectionalTool = _BidirectionalTool;
function defaultGetTextLines4(data, targetId) {
  const { cachedStats, label } = data;
  const { length, width, unit } = cachedStats[targetId];
  const textLines = [];
  if (label) {
    textLines.push(label);
  }
  if (length === void 0) {
    return textLines;
  }
  textLines.push(`L: ${utilities_exports.roundNumber(length)} ${unit || unit}`, `W: ${utilities_exports.roundNumber(width)} ${unit}`);
  return textLines;
}
var BidirectionalTool_default = BidirectionalTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/segmentContourAction.js
async function segmentContourAction(element, configuration3) {
  console.warn("Deprecation Alert: There is a new getSegmentLargestBidirectional function that handles volume, stack and individual segment cases properly. This function is deprecated and will be removed in a future version.");
  const { data: configurationData } = configuration3;
  const enabledElement = getEnabledElement(element);
  const segment = (configurationData.getSegment || defaultGetSegment)(enabledElement, configurationData);
  if (!segment) {
    return;
  }
  const FrameOfReferenceUID = enabledElement.viewport.getFrameOfReferenceUID();
  const segmentationsList = getSegmentations();
  const { segmentIndex, segmentationId } = segment;
  const bidirectionals = state5.getAnnotations(this.toolName || BidirectionalTool_default.toolName, FrameOfReferenceUID);
  let hasExistingActiveSegment = false;
  const existingLargestBidirectionals = bidirectionals.filter((existingBidirectionalItem) => {
    const segment2 = existingBidirectionalItem.data.segment;
    if (!segment2) {
      return false;
    }
    if (segment2.segmentationId === segmentationId && segment2.segmentIndex === segmentIndex) {
      hasExistingActiveSegment = true;
      existingBidirectionalItem.data.segment = segment2;
    }
    return true;
  });
  if (!hasExistingActiveSegment) {
    existingLargestBidirectionals.push({
      data: { segment }
    });
  }
  let newBidirectional;
  existingLargestBidirectionals.forEach(async (existingLargestBidirectional) => {
    const segments = [];
    const updateSegment = existingLargestBidirectional.data.segment;
    const { segmentIndex: segmentIndex2, segmentationId: segmentationId2 } = updateSegment;
    segments[segmentIndex2] = updateSegment;
    state5.removeAnnotation(existingLargestBidirectional.annotationUID);
    const bidirectionalData = await contourAndFindLargestBidirectional({
      ...segmentationsList.find((segmentation) => segmentation.segmentationId === segmentationId2),
      segments
    });
    if (!bidirectionalData) {
      return;
    }
    const bidirectionalToolData = createBidirectionalToolData(bidirectionalData, enabledElement.viewport);
    bidirectionalToolData.annotationUID = existingLargestBidirectional.annotationUID;
    bidirectionalToolData.data.segment = updateSegment;
    const annotationUID = state5.addAnnotation(bidirectionalToolData, FrameOfReferenceUID);
    if (updateSegment.segmentIndex === segment.segmentIndex && updateSegment.segmentationId === segment.segmentationId) {
      newBidirectional = bidirectionalData;
      const { style } = segment;
      if (style) {
        config_exports.style.setAnnotationStyles(annotationUID, style);
      }
    }
  });
  if (newBidirectional) {
    const { sliceIndex } = newBidirectional;
    const imageIds = enabledElement.viewport.getImageIds();
    utilities_exports.jumpToSlice(element, {
      imageIndex: imageIds.length - 1 - sliceIndex
    });
    enabledElement.viewport.render();
  } else {
    console.warn("No bidirectional found");
  }
  return newBidirectional;
}
function defaultGetSegment(enabledElement, configuration3) {
  const segmentationsList = getSegmentations();
  if (!segmentationsList.length) {
    return;
  }
  const segmentationId = configuration3.segmentationId || segmentationsList[0].segmentationId;
  const segmentIndex = configuration3.segmentIndex ?? getActiveSegmentIndex(segmentationId);
  if (!segmentIndex) {
    return;
  }
  const segmentData = configuration3.segmentData?.get(segmentIndex);
  return {
    label: `Segment ${segmentIndex}`,
    segmentIndex,
    segmentationId,
    ...segmentData
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js
function invalidateBrushCursor(toolGroupId) {
  const toolGroup = getToolGroup_default(toolGroupId);
  if (toolGroup === void 0) {
    return;
  }
  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);
  brushBasedToolInstances.forEach((tool) => {
    tool.invalidateBrushCursor();
  });
  const viewportsInfo = toolGroup.getViewportsInfo();
  const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);
  if (!viewportsInfoArray.length) {
    return;
  }
  const viewportIds = toolGroup.getViewportIds();
  triggerAnnotationRenderForViewportIds_default(viewportIds);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js
function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {
  const segmentation = getSegmentation(segmentationId);
  const representationData = segmentation.representationData;
  const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];
  if (!desiredRepresentation) {
    throw new Error(`Segmentation ${segmentationId} does not have any representations`);
  }
  switch (desiredRepresentation) {
    case SegmentationRepresentations_default.Labelmap:
      return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);
    case SegmentationRepresentations_default.Contour:
      return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);
    default:
      return;
  }
}
function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {
  const labelmapData = segmentation.representationData.Labelmap;
  if (viewport instanceof BaseVolumeViewport_default) {
    const { volumeId } = labelmapData;
    const segmentationVolume = cache_default.getVolume(volumeId);
    if (!segmentationVolume) {
      return;
    }
    const segmentIndex2 = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);
    return segmentIndex2;
  }
  const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);
  if (segmentationImageIds.length > 1) {
    console.warn("Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.");
    return;
  }
  const segmentationImageId = segmentationImageIds[0];
  const image = cache_default.getImage(segmentationImageId);
  if (!image) {
    return;
  }
  const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);
  const imageData = segmentationActorEntry?.actor.getMapper().getInputData();
  const indexIJK = utilities_exports.transformWorldToIndex(imageData, worldPoint);
  const dimensions = imageData.getDimensions();
  const voxelManager = imageData.voxelManager || utilities_exports.VoxelManager.createScalarVolumeVoxelManager({
    dimensions,
    scalarData: imageData.getPointData().getScalars().getData()
  });
  const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);
  return segmentIndex;
}
function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {
  const contourData = segmentation.representationData.Contour;
  const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());
  const { viewPlaneNormal } = viewport.getCamera();
  for (const segmentIndex of segmentIndices) {
    const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);
    if (!annotationsSet) {
      continue;
    }
    for (const annotationUID of annotationsSet) {
      const annotation = getAnnotation(annotationUID);
      if (!annotation) {
        continue;
      }
      const { polyline } = annotation.data.contour;
      if (!utilities_exports.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {
        continue;
      }
      if (isPointInsidePolyline3D(worldPoint, polyline)) {
        return Number(segmentIndex);
      }
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js
function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {
  const segmentation = getSegmentation(segmentationId);
  const labelmapData = segmentation.representationData.Labelmap;
  if (viewport instanceof BaseVolumeViewport_default) {
    const { volumeId } = labelmapData;
    const segmentationVolume = cache_default.getVolume(volumeId);
    if (!segmentationVolume) {
      return;
    }
    const voxelManager2 = segmentationVolume.voxelManager;
    const imageData2 = segmentationVolume.imageData;
    const indexIJK2 = utilities_exports.transformWorldToIndex(imageData2, worldPoint);
    const segmentIndex2 = voxelManager2.getAtIJK(indexIJK2[0], indexIJK2[1], indexIJK2[2]);
    const canvasPoint = viewport.worldToCanvas(worldPoint);
    const onEdge2 = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex2, viewport, imageData2, searchRadius);
    return onEdge2 ? segmentIndex2 : void 0;
  }
  const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
  const image = cache_default.getImage(segmentationImageId);
  if (!image) {
    return;
  }
  const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);
  const imageData = segmentationActorEntry?.actor.getMapper().getInputData();
  const indexIJK = utilities_exports.transformWorldToIndex(imageData, worldPoint);
  const dimensions = imageData.getDimensions();
  const voxelManager = imageData.voxelManager || utilities_exports.VoxelManager.createScalarVolumeVoxelManager({
    dimensions,
    scalarData: imageData.getPointData().getScalars().getData()
  });
  const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);
  const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);
  return onEdge ? segmentIndex : void 0;
}
function isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {
  const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);
  for (const deltaI of neighborRange) {
    for (const deltaJ of neighborRange) {
      for (const deltaK of neighborRange) {
        if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {
          continue;
        }
        const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);
        if (neighborIndex !== void 0 && segmentIndex !== neighborIndex) {
          return true;
        }
      }
    }
  }
  return false;
}
function isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {
  const getNeighborIndex = (deltaI, deltaJ, deltaK) => {
    const neighborIJK = [
      indexIJK[0] + deltaI,
      indexIJK[1] + deltaJ,
      indexIJK[2] + deltaK
    ];
    return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);
  };
  return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);
}
function isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {
  const getNeighborIndex = (deltaI, deltaJ) => {
    const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];
    const worldPoint = viewport.canvasToWorld(neighborCanvas);
    const voxelManager = imageData.get("voxelManager").voxelManager;
    const indexIJK = utilities_exports.transformWorldToIndex(imageData, worldPoint);
    return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);
  };
  return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js
function getHoveredContourSegmentationAnnotation(segmentationId) {
  const segmentation = getSegmentation(segmentationId);
  const { annotationUIDsMap } = segmentation.representationData.Contour;
  for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {
    const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);
    if (highlightedAnnotationUID) {
      return segmentIndex;
    }
  }
  return void 0;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/index.js
var growCut_exports = {};
__export(growCut_exports, {
  run: () => runGrowCut,
  runGrowCutForBoundingBox: () => runGrowCutForBoundingBox,
  runGrowCutForSphere: () => runGrowCutForSphere,
  runOneClickGrowCut: () => runOneClickGrowCut
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js
var shader = `
const MAX_STRENGTH = 65535f;

// Workgroup size - X*Y*Z must be multiple of 32 for better performance
override workGroupSizeX = 1u;
override workGroupSizeY = 1u;
override workGroupSizeZ = 1u;

// Compare the current voxel to neighbors using a 9x9x9 window
override windowSize = 9i;

struct Params {
  size: vec3u,
  iteration: u32,
}

// New structure to track bounds of modified voxels
struct Bounds {
  minX: atomic<i32>,
  minY: atomic<i32>,
  minZ: atomic<i32>,
  maxX: atomic<i32>,
  maxY: atomic<i32>,
  maxZ: atomic<i32>,
}

@group(0) @binding(0) var<uniform> params: Params;
@group(0) @binding(1) var<storage> volumePixelData: array<f32>;
@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;
@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;
@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;
@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;
@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;
@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;

fn getPixelIndex(ijkPos: vec3u) -> u32 {
  let numPixelsPerSlice = params.size.x * params.size.y;
  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;
}

fn updateBounds(position: vec3i) {
  // Atomically update min bounds (use min operation)
  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);
  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);
  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);

  // Atomically update max bounds (use max operation)
  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);
  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);
  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);
}

@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
fn main(
  @builtin(global_invocation_id) globalId: vec3u,
) {
  // Make sure it will not get out of bounds for volume with sizes that
  // are not multiple of workGroupSize
  if (
    globalId.x >= params.size.x ||
    globalId.y >= params.size.y ||
    globalId.z >= params.size.z
  ) {
    return;
  }

  // Initialize bounds for the first iteration
  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {
    // Initialize to opposite extremes to ensure any update will improve the bounds
    atomicStore(&modifiedBounds.minX, i32(params.size.x));
    atomicStore(&modifiedBounds.minY, i32(params.size.y));
    atomicStore(&modifiedBounds.minZ, i32(params.size.z));
    atomicStore(&modifiedBounds.maxX, -1);
    atomicStore(&modifiedBounds.maxY, -1);
    atomicStore(&modifiedBounds.maxZ, -1);
  }

  let currentCoord = vec3i(globalId);
  let currentPixelIndex = getPixelIndex(globalId);

  let numPixels = arrayLength(&volumePixelData);
  let currentPixelValue = volumePixelData[currentPixelIndex];

  if (params.iteration == 0) {
    // All non-zero initial labels are given maximum strength
    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);

    // Update bounds for non-zero initial labels
    if (labelmap[currentPixelIndex] != 0) {
      updateBounds(currentCoord);
    }
    return;
  }

  // It should at least copy the values from previous state
  var newLabel = prevLabelmap[currentPixelIndex];
  var newStrength = prevStrengthData[currentPixelIndex];

  let window = i32(ceil(f32(windowSize - 1) * .5));
  let minWindow = -1i * window;
  let maxWindow = 1i * window;

  for (var k = minWindow; k <= maxWindow; k++) {
    for (var j = minWindow; j <= maxWindow; j++) {
      for (var i = minWindow; i <= maxWindow; i++) {
        // Skip current voxel
        if (i == 0 && j == 0 && k == 0) {
          continue;
        }

        let neighborCoord = currentCoord + vec3i(i, j, k);

        //  Boundary conditions. Do not grow outside of the volume
        if (
          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||
          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||
          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)
        ) {
          continue;
        }

        let neighborIndex = getPixelIndex(vec3u(neighborCoord));
        let neighborPixelValue = volumePixelData[neighborIndex];
        let prevNeighborStrength = prevStrengthData[neighborIndex];
        let strengthCost = abs(neighborPixelValue - currentPixelValue);
        let takeoverStrength = prevNeighborStrength - strengthCost;

        if (takeoverStrength > newStrength) {
          newLabel = prevLabelmap[neighborIndex];
          newStrength = takeoverStrength;
        }
      }
    }
  }

  if (labelmap[currentPixelIndex] != newLabel) {
    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);

    // Update bounds for modified voxels
    updateBounds(currentCoord);
  }

  labelmap[currentPixelIndex] = newLabel;
  strengthData[currentPixelIndex] = newStrength;
}
`;
var growCutShader_default = shader;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js
var GB = 1024 * 1024 * 1024;
var WEBGPU_MEMORY_LIMIT = 1.99 * GB;
var DEFAULT_GROWCUT_OPTIONS = {
  windowSize: 3,
  maxProcessingTime: 3e4,
  inspection: {
    numCyclesInterval: 5,
    numCyclesBelowThreshold: 3,
    threshold: 1e-4
  }
};
async function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {
  const workGroupSize = [8, 8, 4];
  const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);
  const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);
  const volume = cache_default.getVolume(referenceVolumeId);
  const labelmap = cache_default.getVolume(labelmapVolumeId);
  const [columns, rows, numSlices] = volume.dimensions;
  if (labelmap.dimensions[0] !== columns || labelmap.dimensions[1] !== rows || labelmap.dimensions[2] !== numSlices) {
    throw new Error("Volume and labelmap must have the same size");
  }
  let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);
  numIterations = Math.min(numIterations, 500);
  const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();
  let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();
  if (!(volumePixelData instanceof Float32Array)) {
    volumePixelData = new Float32Array(volumePixelData);
  }
  const requiredLimits = {
    maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,
    maxBufferSize: WEBGPU_MEMORY_LIMIT
  };
  const adapter = await navigator.gpu?.requestAdapter();
  const device = await adapter.requestDevice({ requiredLimits });
  const BUFFER_SIZE = volumePixelData.byteLength;
  const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;
  const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;
  const shaderModule = device.createShaderModule({
    code: growCutShader_default
  });
  const numIterationIndex = 3;
  const paramsArrayValues = new Uint32Array([
    columns,
    rows,
    numSlices,
    0
  ]);
  const gpuParamsBuffer = device.createBuffer({
    size: paramsArrayValues.byteLength,
    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
  });
  const gpuVolumePixelDataBuffer = device.createBuffer({
    size: BUFFER_SIZE,
    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
  });
  device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);
  const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({
    size: BUFFER_SIZE,
    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
  }));
  device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));
  const gpuStrengthBuffers = [0, 1].map(() => {
    const strengthBuffer = device.createBuffer({
      size: BUFFER_SIZE,
      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
    });
    return strengthBuffer;
  });
  const gpuCounterBuffer = device.createBuffer({
    size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,
    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
  });
  const gpuBoundsBuffer = device.createBuffer({
    size: BOUNDS_BUFFER_SIZE,
    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
  });
  const initialBounds = new Int32Array([
    columns,
    rows,
    numSlices,
    -1,
    -1,
    -1
  ]);
  device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);
  const bindGroupLayout = device.createBindGroupLayout({
    entries: [
      {
        binding: 0,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "uniform"
        }
      },
      {
        binding: 1,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "read-only-storage"
        }
      },
      {
        binding: 2,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "storage"
        }
      },
      {
        binding: 3,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "storage"
        }
      },
      {
        binding: 4,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "read-only-storage"
        }
      },
      {
        binding: 5,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "read-only-storage"
        }
      },
      {
        binding: 6,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "storage"
        }
      },
      {
        binding: 7,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: "storage"
        }
      }
    ]
  });
  const bindGroups = [0, 1].map((i) => {
    const outputLabelmapBuffer = gpuLabelmapBuffers[i];
    const outputStrengthBuffer = gpuStrengthBuffers[i];
    const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];
    const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];
    return device.createBindGroup({
      layout: bindGroupLayout,
      entries: [
        {
          binding: 0,
          resource: {
            buffer: gpuParamsBuffer
          }
        },
        {
          binding: 1,
          resource: {
            buffer: gpuVolumePixelDataBuffer
          }
        },
        {
          binding: 2,
          resource: {
            buffer: outputLabelmapBuffer
          }
        },
        {
          binding: 3,
          resource: {
            buffer: outputStrengthBuffer
          }
        },
        {
          binding: 4,
          resource: {
            buffer: previouLabelmapBuffer
          }
        },
        {
          binding: 5,
          resource: {
            buffer: previousStrengthBuffer
          }
        },
        {
          binding: 6,
          resource: {
            buffer: gpuCounterBuffer
          }
        },
        {
          binding: 7,
          resource: {
            buffer: gpuBoundsBuffer
          }
        }
      ]
    });
  });
  const pipeline = device.createComputePipeline({
    layout: device.createPipelineLayout({
      bindGroupLayouts: [bindGroupLayout]
    }),
    compute: {
      module: shaderModule,
      entryPoint: "main",
      constants: {
        workGroupSizeX: workGroupSize[0],
        workGroupSizeY: workGroupSize[1],
        workGroupSizeZ: workGroupSize[2],
        windowSize
      }
    }
  });
  const numWorkGroups = [
    Math.ceil(columns / workGroupSize[0]),
    Math.ceil(rows / workGroupSize[1]),
    Math.ceil(numSlices / workGroupSize[2])
  ];
  const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({
    size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,
    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
  });
  const limitProcessingTime = maxProcessingTime ? performance.now() + maxProcessingTime : 0;
  let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;
  let belowThresholdCounter = 0;
  for (let i = 0; i < numIterations; i++) {
    paramsArrayValues[numIterationIndex] = i;
    device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);
    const commandEncoder2 = device.createCommandEncoder();
    const passEncoder = commandEncoder2.beginComputePass();
    passEncoder.setPipeline(pipeline);
    passEncoder.setBindGroup(0, bindGroups[i % 2]);
    passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);
    passEncoder.end();
    commandEncoder2.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);
    device.queue.submit([commandEncoder2.finish()]);
    const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);
    if (inspect) {
      await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);
      const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);
      const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));
      const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;
      gpuUpdatedVoxelsCounterStagingBuffer.unmap();
      if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {
        currentInspectionNumCyclesInterval = 1;
        belowThresholdCounter++;
        if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {
          break;
        }
      } else {
        currentInspectionNumCyclesInterval = inspection.numCyclesInterval;
      }
    }
    if (limitProcessingTime && performance.now() > limitProcessingTime) {
      console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);
      break;
    }
  }
  const commandEncoder = device.createCommandEncoder();
  const outputLabelmapBufferIndex = (numIterations + 1) % 2;
  const labelmapStagingBuffer = device.createBuffer({
    size: BUFFER_SIZE,
    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
  });
  const boundsStagingBuffer = device.createBuffer({
    size: BOUNDS_BUFFER_SIZE,
    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
  });
  commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);
  commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);
  device.queue.submit([commandEncoder.finish()]);
  await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);
  const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);
  const labelmapResult = new Uint32Array(labelmapResultBuffer);
  labelmapData.set(labelmapResult);
  labelmapStagingBuffer.unmap();
  await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);
  const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);
  const boundsResult = new Int32Array(boundsResultBuffer.slice(0));
  boundsStagingBuffer.unmap();
  const minX = boundsResult[0];
  const minY = boundsResult[1];
  const minZ = boundsResult[2];
  const maxX = boundsResult[3];
  const maxY = boundsResult[4];
  const maxZ = boundsResult[5];
  labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);
  labelmap.voxelManager.clearBounds();
  labelmap.voxelManager.setBounds([
    [minX, maxX],
    [minY, maxY],
    [minZ, maxZ]
  ]);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js
var { transformWorldToIndex: transformWorldToIndex8 } = utilities_exports;
var POSITIVE_SEED_VALUE = 254;
var NEGATIVE_SEED_VALUE = 255;
var POSITIVE_SEED_VARIANCE = 0.1;
var NEGATIVE_SEED_VARIANCE = 0.8;
function _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {
  const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;
  const topLeftIJK = transformWorldToIndex8(referencedVolume.imageData, topLeftWorld);
  const bottomRightIJK = transformWorldToIndex8(referencedVolume.imageData, bottomRightWorld);
  return {
    ...sphereBoundsInfo,
    topLeftIJK,
    bottomRightIJK
  };
}
function _getSphereBoundsInfo2(referencedVolume, sphereInfo) {
  const direction = referencedVolume.imageData.getDirection();
  const vecColumn = vec3_exports.fromValues(direction[3], direction[4], direction[5]);
  const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;
  const refVolImageData = referencedVolume.imageData;
  const topCirclePoint = vec3_exports.scaleAndAdd(vec3_exports.create(), sphereCenterPoint, vecColumn, -sphereRadius);
  const bottomCirclePoint = vec3_exports.scaleAndAdd(vec3_exports.create(), sphereCenterPoint, vecColumn, sphereRadius);
  const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);
  return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);
}
function _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {
  const refVolImageData = referencedVolume.imageData;
  const camera = viewport.getCamera();
  const { ijkVecRowDir, ijkVecColDir } = utilities_exports.getVolumeDirectionVectors(refVolImageData, camera);
  const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !utilities_exports.isEqual(Math.abs(vec[0]), 1) && !utilities_exports.isEqual(Math.abs(vec[1]), 1) && !utilities_exports.isEqual(Math.abs(vec[2]), 1));
  if (obliqueView) {
    console.warn("Oblique view is not supported!");
    return;
  }
  const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo2(referencedVolume, sphereInfo);
  const subVolumeBoundsIJK = {
    minX: sphereBoundsIJK[0][0],
    maxX: sphereBoundsIJK[0][1] + 1,
    minY: sphereBoundsIJK[1][0],
    maxY: sphereBoundsIJK[1][1] + 1,
    minZ: sphereBoundsIJK[2][0],
    maxZ: sphereBoundsIJK[2][1] + 1
  };
  return utilities_exports.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {
    targetBuffer: {
      type: "Float32Array"
    }
  });
}
function _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {
  const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();
  const worldStartPos = sphereInfo.center;
  const [width, height, numSlices] = referencedVolume.dimensions;
  const numPixelsPerSlice = width * height;
  const ijkStartPosition = transformWorldToIndex8(referencedVolume.imageData, worldStartPos);
  const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice + ijkStartPosition[1] * width + ijkStartPosition[0]];
  const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;
  const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;
  const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);
  const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;
  const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;
  const neighborsCoordDelta = [
    [-1, 0, 0],
    [1, 0, 0],
    [0, -1, 0],
    [0, 1, 0],
    [0, 0, -1],
    [0, 0, 1]
  ];
  const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice + ijkStartPosition[1] * width + ijkStartPosition[0];
  labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);
  const queue = [ijkStartPosition];
  while (queue.length) {
    const ijkVoxel = queue.shift();
    const [x, y, z] = ijkVoxel;
    for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {
      const neighborCoordDelta = neighborsCoordDelta[i];
      const nx = x + neighborCoordDelta[0];
      const ny = y + neighborCoordDelta[1];
      const nz = z + neighborCoordDelta[2];
      if (nx < 0 || nx >= width || ny < 0 || ny >= height || nz < 0 || nz >= numSlices) {
        continue;
      }
      const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;
      const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];
      const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);
      if (neighborLabelmapValue === positiveSeedValue || neighborPixelValue < minPositivePixelValue || neighborPixelValue > maxPositivePixelValue) {
        continue;
      }
      labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);
      queue.push([nx, ny, nz]);
    }
  }
}
function _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {
  const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();
  const [columns, rows, numSlices] = labelmap.dimensions;
  const numPixelsPerSlice = columns * rows;
  const { worldVecRowDir, worldVecSliceDir } = utilities_exports.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());
  const ijkSphereCenter = transformWorldToIndex8(subVolume.imageData, sphereInfo.center);
  const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows + ijkSphereCenter[1] * columns + ijkSphereCenter[0]];
  const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;
  const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;
  const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);
  const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;
  const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;
  const numCirclePoints = 360;
  const rotationAngle = 2 * Math.PI / numCirclePoints;
  const worldQuat = quat_exports.setAxisAngle(quat_exports.create(), worldVecSliceDir, rotationAngle);
  const vecRotation = vec3_exports.clone(worldVecRowDir);
  for (let i = 0; i < numCirclePoints; i++) {
    const worldCircleBorderPoint = vec3_exports.scaleAndAdd(vec3_exports.create(), sphereInfo.center, vecRotation, sphereInfo.radius);
    const ijkCircleBorderPoint = transformWorldToIndex8(labelmap.imageData, worldCircleBorderPoint);
    const [x, y, z] = ijkCircleBorderPoint;
    vec3_exports.transformQuat(vecRotation, vecRotation, worldQuat);
    if (x < 0 || x >= columns || y < 0 || y >= rows || z < 0 || z >= numSlices) {
      continue;
    }
    const offset = x + y * columns + z * numPixelsPerSlice;
    const pixelValue = subVolPixelData[offset];
    if (pixelValue < minNegativePixelValue || pixelValue > maxNegativePixelValue) {
      labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);
    }
  }
}
async function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {
  const labelmap = await volumeLoader_exports.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);
  _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);
  _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);
  return labelmap;
}
async function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {
  const referencedVolume = cache_default.getVolume(referencedVolumeId);
  const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);
  const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);
  await runGrowCut(subVolume.volumeId, labelmap.volumeId);
  return labelmap;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js
var POSITIVE_SEED_VALUE2 = 254;
var NEGATIVE_SEED_VALUE2 = 255;
var NEGATIVE_PIXEL_RANGE = [-Infinity, -995];
var POSITIVE_PIXEL_RANGE = [0, 1900];
function _setNegativeSeedValues2(subVolume, labelmap, options) {
  const { negativeSeedValue = NEGATIVE_SEED_VALUE2, negativePixelRange = NEGATIVE_PIXEL_RANGE } = options;
  const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();
  const [width, height, numSlices] = labelmap.dimensions;
  const middleSliceIndex = Math.floor(numSlices / 2);
  const visited = new Array(width * height).fill(false);
  const sliceOffset = middleSliceIndex * width * height;
  const bfs = (startX, startY) => {
    const queue = [[startX, startY]];
    while (queue.length) {
      const [x, y] = queue.shift();
      const slicePixelIndex = y * width + x;
      if (x < 0 || x >= width || y < 0 || y >= height || visited[slicePixelIndex]) {
        continue;
      }
      visited[slicePixelIndex] = true;
      const volumeVoxelIndex = sliceOffset + slicePixelIndex;
      const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];
      if (volumeVoxelValue < negativePixelRange[0] || volumeVoxelValue > negativePixelRange[1]) {
        continue;
      }
      labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);
      queue.push([x - 1, y]);
      queue.push([x + 1, y]);
      queue.push([x, y - 1]);
      queue.push([x, y + 1]);
    }
  };
  const scanLine = (startX, limitX, incX, y) => {
    for (let x = startX; x !== limitX; x += incX) {
      const slicePixelIndex = y * width + x;
      const volumeVoxelIndex = sliceOffset + slicePixelIndex;
      const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];
      if (volumeVoxelValue < negativePixelRange[0] || volumeVoxelValue > negativePixelRange[1]) {
        break;
      }
      if (!visited[slicePixelIndex]) {
        bfs(x, y);
      }
    }
  };
  for (let y = 0; y < height; y++) {
    scanLine(0, width - 1, 1, y);
    scanLine(width - 1, 0, -1, y);
  }
}
function _setPositiveSeedValues2(subVolume, labelmap, options) {
  const { positiveSeedValue = POSITIVE_SEED_VALUE2, positivePixelRange = POSITIVE_PIXEL_RANGE } = options;
  const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();
  const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();
  const [width, height, numSlices] = labelmap.dimensions;
  const middleSliceIndex = Math.floor(numSlices / 2);
  const startSliceIndex = Math.max(middleSliceIndex - 3, 0);
  const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);
  const pixelsPerSlice = width * height;
  for (let z = startSliceIndex; z < stopSliceIndex; z++) {
    const zOffset = z * pixelsPerSlice;
    for (let y = 0; y < height; y++) {
      const yOffset = y * width;
      for (let x = 0; x < width; x++) {
        const index = zOffset + yOffset + x;
        const pixelValue = subVolPixelData[index];
        const isPositiveValue = pixelValue >= positivePixelRange[0] && pixelValue <= positivePixelRange[1];
        if (isPositiveValue) {
          labelmap.voxelManager.setAtIndex(index, positiveSeedValue);
        }
      }
    }
  }
}
async function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {
  const labelmap = volumeLoader_exports.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);
  _setPositiveSeedValues2(subVolume, labelmap, options);
  _setNegativeSeedValues2(subVolume, labelmap, options);
  return labelmap;
}
async function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {
  const { boundingBox } = boundingBoxInfo;
  const { ijkTopLeft, ijkBottomRight } = boundingBox;
  const subVolumeBoundsIJK = {
    minX: ijkTopLeft[0],
    maxX: ijkBottomRight[0],
    minY: ijkTopLeft[1],
    maxY: ijkBottomRight[1],
    minZ: ijkTopLeft[2],
    maxZ: ijkBottomRight[2]
  };
  const subVolume = utilities_exports.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {
    targetBuffer: {
      type: "Float32Array"
    }
  });
  const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);
  await runGrowCut(subVolume.volumeId, labelmap.volumeId);
  return labelmap;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/constants.js
var POSITIVE_SEED_LABEL = 254;
var NEGATIVE_SEED_LABEL = 255;
var DEFAULT_NEIGHBORHOOD_RADIUS = 1;
var DEFAULT_POSITIVE_STD_DEV_MULTIPLIER = 1.8;
var DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER = 3.2;
var DEFAULT_NEGATIVE_SEED_MARGIN = 30;
var DEFAULT_NEGATIVE_SEEDS_COUNT = 70;
var MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER = 50;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js
var { transformWorldToIndex: transformWorldToIndex9 } = utilities_exports;
var MAX_POSITIVE_SEEDS = 1e5;
function calculateGrowCutSeeds(referencedVolume, worldPosition, options) {
  const { dimensions, imageData: refImageData } = referencedVolume;
  const [width, height, numSlices] = dimensions;
  const referenceVolumeVoxelManager = referencedVolume.voxelManager;
  const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();
  const numPixelsPerSlice = width * height;
  const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;
  const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;
  const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;
  const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;
  const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;
  const ijkStart = transformWorldToIndex9(refImageData, worldPosition).map(Math.round);
  const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);
  if (ijkStart[0] < 0 || ijkStart[0] >= width || ijkStart[1] < 0 || ijkStart[1] >= height || ijkStart[2] < 0 || ijkStart[2] >= numSlices) {
    console.warn("Click position is outside volume bounds.");
    return null;
  }
  const initialStats = utilities_exports.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);
  if (initialStats.count === 0) {
    initialStats.mean = scalarData[startIndex];
    initialStats.stdDev = 0;
  }
  const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;
  const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;
  const neighborsCoordDelta = [
    [-1, 0, 0],
    [1, 0, 0],
    [0, -1, 0],
    [0, 1, 0],
    [0, 0, -1],
    [0, 0, 1]
  ];
  let minX = Infinity, minY = Infinity, minZ = Infinity;
  let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;
  const positiveSeedIndices = /* @__PURE__ */ new Set();
  const queue = [];
  const startValue = scalarData[startIndex];
  if (startValue >= positiveIntensityMin && startValue <= positiveIntensityMax) {
    positiveSeedIndices.add(startIndex);
    queue.push(ijkStart);
    minX = maxX = ijkStart[0];
    minY = maxY = ijkStart[1];
    minZ = maxZ = ijkStart[2];
  } else {
    console.warn("Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.");
    return { positiveSeedIndices: /* @__PURE__ */ new Set(), negativeSeedIndices: /* @__PURE__ */ new Set() };
  }
  let currentQueueIndex = 0;
  while (currentQueueIndex < queue.length && positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {
    const [x, y, z] = queue[currentQueueIndex++];
    minX = Math.min(x, minX);
    minY = Math.min(y, minY);
    minZ = Math.min(z, minZ);
    maxX = Math.max(x, maxX);
    maxY = Math.max(y, maxY);
    maxZ = Math.max(z, maxZ);
    for (let i = 0; i < neighborsCoordDelta.length; i++) {
      const [dx, dy, dz] = neighborsCoordDelta[i];
      const nx = x + dx;
      const ny = y + dy;
      const nz = z + dz;
      if (nx < 0 || nx >= width || ny < 0 || ny >= height || nz < 0 || nz >= numSlices) {
        continue;
      }
      const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;
      if (positiveSeedIndices.has(neighborIndex)) {
        continue;
      }
      const neighborValue = scalarData[neighborIndex];
      if (neighborValue >= positiveIntensityMin && neighborValue <= positiveIntensityMax) {
        positiveSeedIndices.add(neighborIndex);
        if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {
          queue.push([nx, ny, nz]);
        }
      }
    }
  }
  if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {
    console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);
  }
  if (positiveSeedIndices.size === 0) {
    console.warn("No positive seeds found after BFS.");
    return { positiveSeedIndices: /* @__PURE__ */ new Set(), negativeSeedIndices: /* @__PURE__ */ new Set() };
  }
  let positiveSum = 0;
  let positiveSumSq = 0;
  positiveSeedIndices.forEach((index) => {
    const value = scalarData[index];
    positiveSum += value;
    positiveSumSq += value * value;
  });
  const positiveCount = positiveSeedIndices.size;
  const positiveMean = positiveSum / positiveCount;
  const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;
  const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));
  const negativeDiffThreshold = negativeK * positiveStdDev;
  const minXm = Math.max(0, minX - negativeSeedMargin);
  const minYm = Math.max(0, minY - negativeSeedMargin);
  const minZm = Math.max(0, minZ - negativeSeedMargin);
  const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);
  const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);
  const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);
  const negativeSeedIndices = /* @__PURE__ */ new Set();
  let attempts = 0;
  let patchesAdded = 0;
  const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;
  while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {
    attempts++;
    const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);
    const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);
    const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);
    const centerIndex = rz * numPixelsPerSlice + ry * width + rx;
    if (positiveSeedIndices.has(centerIndex) || negativeSeedIndices.has(centerIndex)) {
      continue;
    }
    const centerValue = scalarData[centerIndex];
    if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {
      let patchContributed = false;
      for (let dy = -1; dy <= 1; dy++) {
        const ny = ry + dy;
        if (ny < 0 || ny >= height) {
          continue;
        }
        for (let dx = -1; dx <= 1; dx++) {
          const nx = rx + dx;
          if (nx < 0 || nx >= width) {
            continue;
          }
          const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;
          if (positiveSeedIndices.has(neighborIndex) || negativeSeedIndices.has(neighborIndex)) {
            continue;
          }
          negativeSeedIndices.add(neighborIndex);
          patchContributed = true;
        }
      }
      if (patchContributed) {
        patchesAdded++;
      }
    }
  }
  if (negativeSeedIndices.size === 0) {
    console.warn("Could not find any negative seeds. GrowCut might fail or produce poor results.");
  }
  console.debug("positiveSeedIndices", positiveSeedIndices.size);
  console.debug("negativeSeedIndices", negativeSeedIndices.size);
  return { positiveSeedIndices, negativeSeedIndices };
}
async function runOneClickGrowCut({ referencedVolumeId, worldPosition, options }) {
  const referencedVolume = cache_default.getVolume(referencedVolumeId);
  const labelmap = volumeLoader_exports.createAndCacheDerivedLabelmapVolume(referencedVolumeId);
  labelmap.voxelManager.forEach(({ index, value }) => {
    if (value !== 0) {
      labelmap.voxelManager.setAtIndex(index, 0);
    }
  });
  const seeds = options.seeds ?? calculateGrowCutSeeds(referencedVolume, worldPosition, options);
  const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;
  const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;
  if (!seeds) {
    return null;
  }
  const { positiveSeedIndices, negativeSeedIndices } = seeds;
  if (positiveSeedIndices.size < 10 || positiveSeedIndices.size > MAX_POSITIVE_SEEDS || negativeSeedIndices.size < 10) {
    console.warn("Not enough seeds found. GrowCut might fail or produce poor results.");
    return labelmap;
  }
  positiveSeedIndices.forEach((index) => {
    labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);
  });
  negativeSeedIndices.forEach((index) => {
    labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);
  });
  await runGrowCut(referencedVolumeId, labelmap.volumeId, options);
  return labelmap;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js
var segmentIndex_exports = {};
__export(segmentIndex_exports, {
  getActiveSegmentIndex: () => getActiveSegmentIndex,
  setActiveSegmentIndex: () => setActiveSegmentIndex
});
function setActiveSegmentIndex(segmentationId, segmentIndex) {
  const segmentation = getSegmentation(segmentationId);
  if (typeof segmentIndex === "string") {
    console.warn("segmentIndex is a string, converting to number");
    segmentIndex = Number(segmentIndex);
  }
  Object.values(segmentation.segments).forEach((segment) => {
    segment.active = false;
  });
  if (!segmentation.segments[segmentIndex]) {
    segmentation.segments[segmentIndex] = {
      segmentIndex,
      label: "",
      locked: false,
      cachedStats: {},
      active: false
    };
  }
  if (segmentation.segments[segmentIndex].active !== true) {
    segmentation.segments[segmentIndex].active = true;
    triggerSegmentationModified(segmentationId);
  }
  const viewportIds = getViewportIdsWithSegmentation(segmentationId);
  viewportIds.forEach((viewportId) => {
    const representations = getSegmentationRepresentations(viewportId, {
      segmentationId
    });
    representations.forEach((representation) => {
      if (!representation.segments[segmentIndex]) {
        representation.segments[segmentIndex] = {
          visible: true
        };
      }
    });
  });
  viewportIds.forEach((viewportId) => {
    const toolGroup = getToolGroupForViewport_default(viewportId);
    invalidateBrushCursor(toolGroup.id);
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js
function internalAddSegmentationRepresentation(viewportId, representationInput) {
  const { segmentationId, config: config2 } = representationInput;
  const renderingConfig = {
    colorLUTIndex: getColorLUTIndex(config2),
    ...config2
  };
  defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);
  if (!getActiveSegmentIndex(segmentationId)) {
    let firstSegmentIndex = 1;
    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);
    if (segmentation) {
      const segmentKeys = Object.keys(segmentation.segments);
      if (segmentKeys.length > 0) {
        firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];
      }
    }
    setActiveSegmentIndex(segmentationId, firstSegmentIndex);
  }
  if (representationInput.type === SegmentationRepresentations_default.Contour) {
    triggerAnnotationRenderForViewportIds([viewportId]);
  }
  triggerSegmentationModified(segmentationId);
}
function getColorLUTIndex(config2) {
  const { colorLUTOrIndex } = config2 || {};
  if (colorLUTOrIndex === void 0) {
    const index2 = addColorLUT(JSON.parse(JSON.stringify(COLOR_LUT_default)));
    return index2;
  }
  if (typeof colorLUTOrIndex === "number") {
    return colorLUTOrIndex;
  }
  if (Array.isArray(colorLUTOrIndex) && colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {
    const index2 = addColorLUT(colorLUTOrIndex);
    return index2;
  }
  const index = addColorLUT(JSON.parse(JSON.stringify(COLOR_LUT_default)));
  return index;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js
function addSegmentationRepresentations(viewportId, segmentationInputArray) {
  segmentationInputArray.map((segmentationInput) => {
    return internalAddSegmentationRepresentation(viewportId, segmentationInput);
  });
}
function addContourRepresentationToViewport(viewportId, contourInputArray) {
  return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({
    ...input,
    type: SegmentationRepresentations_default.Contour
  })));
}
function addContourRepresentationToViewportMap(viewportInputMap) {
  const results = {};
  for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {
    results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);
  }
  return results;
}
function addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {
  return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({
    ...input,
    type: SegmentationRepresentations_default.Labelmap
  })));
}
function addLabelmapRepresentationToViewportMap(viewportInputMap) {
  const results = {};
  for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {
    results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({
      ...input,
      type: SegmentationRepresentations_default.Labelmap
    })));
  }
}
function addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {
  return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({
    ...input,
    type: SegmentationRepresentations_default.Surface
  })));
}
function addSurfaceRepresentationToViewportMap(viewportInputMap) {
  const results = {};
  for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {
    results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);
  }
  return results;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/updateStackSegmentationState.js
async function updateStackSegmentationState({ segmentationId, viewportId, imageIds, options }) {
  const segmentation = getSegmentation(segmentationId);
  if (options?.removeOriginal) {
    const data = segmentation.representationData.Labelmap;
    if (cache_default.getVolume(data.volumeId)) {
      cache_default.removeVolumeLoadObject(data.volumeId);
    }
    segmentation.representationData.Labelmap = {
      imageIds
    };
  } else {
    segmentation.representationData.Labelmap = {
      ...segmentation.representationData.Labelmap,
      imageIds
    };
  }
  await addSegmentationRepresentations(viewportId, [
    {
      segmentationId,
      type: SegmentationRepresentations_default.Labelmap
    }
  ]);
  eventTarget_default.addEventListenerOnce(Events_default.SEGMENTATION_RENDERED, () => triggerSegmentationDataModified(segmentationId));
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js
async function computeStackLabelmapFromVolume({ volumeId }) {
  const segmentationVolume = cache_default.getVolume(volumeId);
  return { imageIds: segmentationVolume.imageIds };
}
function convertVolumeToStackLabelmap({ segmentationId, options }) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return;
  }
  const { volumeId } = segmentation.representationData.Labelmap;
  const segmentationVolume = cache_default.getVolume(volumeId);
  return updateStackSegmentationState({
    segmentationId,
    viewportId: options.viewportId,
    imageIds: segmentationVolume.imageIds,
    options
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js
async function computeVolumeLabelmapFromStack(args) {
  return internalComputeVolumeLabelmapFromStack(args);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentLargestBidirectional.js
async function getSegmentLargestBidirectional({ segmentationId, segmentIndices, mode = "individual" }) {
  registerComputeWorker();
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_LARGEST_BIDIRECTIONAL, 0);
  const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);
  if (!segData) {
    return;
  }
  const { operationData, segImageIds, reconstructableVolume, indices } = segData;
  const bidirectionalData = reconstructableVolume ? await calculateVolumeBidirectional({
    operationData,
    indices,
    mode
  }) : await calculateStackBidirectional({
    segImageIds,
    indices,
    mode
  });
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_LARGEST_BIDIRECTIONAL, 100);
  return bidirectionalData;
}
async function calculateVolumeBidirectional({ operationData, indices, mode }) {
  const strategyData = prepareVolumeStrategyDataForWorker(operationData);
  const { segmentationVoxelManager, segmentationImageData } = strategyData;
  const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();
  const segmentationInfo = {
    scalarData: segmentationScalarData,
    dimensions: segmentationImageData.getDimensions(),
    spacing: segmentationImageData.getSpacing(),
    origin: segmentationImageData.getOrigin(),
    direction: segmentationImageData.getDirection()
  };
  const bidirectionalData = await getWebWorkerManager().executeTask("compute", "getSegmentLargestBidirectionalInternal", {
    segmentationInfo,
    indices,
    mode
  });
  return bidirectionalData;
}
async function calculateStackBidirectional({ segImageIds, indices, mode }) {
  const { segmentationInfo } = prepareStackDataForWorker(segImageIds);
  const bidirectionalData = await getWebWorkerManager().executeTask("compute", "getSegmentLargestBidirectionalInternal", {
    segmentationInfo,
    indices,
    mode,
    isStack: true
  });
  return bidirectionalData;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentation.js
function getReferenceVolumeForSegmentation(segmentationId) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return null;
  }
  let referenceImageIds;
  const labelmap = segmentation.representationData.Labelmap;
  if ("imageIds" in labelmap) {
    const { imageIds } = labelmap;
    const firstImage = cache_default.getImage(imageIds[0]);
    const volumeInfo = cache_default.getVolumeContainingImageId(firstImage.referencedImageId);
    if (volumeInfo?.volume) {
      return volumeInfo.volume;
    }
    referenceImageIds = imageIds.map((imageId) => cache_default.getImage(imageId).referencedImageId);
  } else if ("volumeId" in labelmap) {
    const { volumeId, referencedVolumeId } = labelmap;
    if (referencedVolumeId) {
      const refVolume = cache_default.getVolume(referencedVolumeId);
      if (refVolume) {
        return refVolume;
      }
    }
    const segVolume = cache_default.getVolume(volumeId);
    if (segVolume) {
      referenceImageIds = segVolume.imageIds.map((imageId) => cache_default.getImage(imageId).referencedImageId);
    }
  }
  return getOrCreateImageVolume_default(referenceImageIds);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/computeMetabolicStats.js
async function computeMetabolicStats({ segmentationIds, segmentIndex }) {
  registerComputeWorker();
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 0);
  const segmentation = getSegmentation(segmentationIds[0]);
  const { imageIds: segImageIds } = segmentation.representationData.Labelmap;
  const isValidVolume = utilities_exports.isValidVolume(segImageIds);
  if (!isValidVolume) {
    throw new Error("Invalid volume - TMTV cannot be calculated");
  }
  const stats = await calculateForVolume({
    segmentationIds,
    segmentIndex
  });
  return stats;
}
async function calculateForVolume({ segmentationIds, segmentIndex }) {
  const labelmapVolumes = segmentationIds.map((id) => {
    return getOrCreateSegmentationVolume_default(id);
  });
  const mergedLabelmap = createMergedLabelmapForIndex_default(labelmapVolumes, segmentIndex);
  if (!mergedLabelmap) {
    throw new Error("Invalid volume - TMTV cannot be calculated");
  }
  const { imageData, dimensions, direction, origin, voxelManager } = mergedLabelmap;
  const spacing = imageData.getSpacing();
  const segmentationScalarData = voxelManager.getCompleteScalarDataArray();
  const segmentationInfo = {
    scalarData: segmentationScalarData,
    dimensions,
    spacing,
    origin,
    direction
  };
  const referenceVolume = getReferenceVolumeForSegmentation(segmentationIds[0]);
  const imageInfo = {
    dimensions: referenceVolume.dimensions,
    spacing: referenceVolume.spacing,
    origin: referenceVolume.origin,
    direction: referenceVolume.direction,
    scalarData: referenceVolume.voxelManager.getCompleteScalarDataArray()
  };
  if (imageInfo.scalarData.length === 0 || segmentationInfo.scalarData.length === 0) {
    return {
      [segmentIndex]: {
        name: "TMTV",
        value: 0
      }
    };
  }
  const stats = await getWebWorkerManager().executeTask("compute", "computeMetabolicStats", {
    segmentationInfo,
    imageInfo
  });
  triggerWorkerProgress(WorkerTypes_default.COMPUTE_STATISTICS, 100);
  return stats;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/index.js
var orientation_exports = {};
__export(orientation_exports, {
  getOrientationStringLPS: () => getOrientationStringLPS,
  invertOrientationStringLPS: () => invertOrientationStringLPS
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js
function getOrientationStringLPS(vector) {
  let orientation2 = "";
  const orientationX = vector[0] < 0 ? "R" : "L";
  const orientationY = vector[1] < 0 ? "A" : "P";
  const orientationZ = vector[2] < 0 ? "F" : "H";
  const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];
  const MIN = 1e-4;
  for (let i = 0; i < 3; i++) {
    if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {
      orientation2 += orientationX;
      abs[0] = 0;
    } else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {
      orientation2 += orientationY;
      abs[1] = 0;
    } else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {
      orientation2 += orientationZ;
      abs[2] = 0;
    } else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {
      orientation2 += orientationX + orientationY;
      abs[0] = 0;
      abs[1] = 0;
    } else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {
      orientation2 += orientationX + orientationZ;
      abs[0] = 0;
      abs[2] = 0;
    } else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {
      orientation2 += orientationY + orientationZ;
      abs[1] = 0;
      abs[2] = 0;
    } else {
      break;
    }
  }
  return orientation2;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js
function invertOrientationStringLPS(orientationString) {
  let inverted = orientationString.replace("H", "f");
  inverted = inverted.replace("F", "h");
  inverted = inverted.replace("R", "l");
  inverted = inverted.replace("L", "r");
  inverted = inverted.replace("A", "p");
  inverted = inverted.replace("P", "a");
  inverted = inverted.toUpperCase();
  return inverted;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/index.js
var cine_exports = {};
__export(cine_exports, {
  Events: () => events_default,
  addToolState: () => addToolState,
  getToolState: () => getToolState,
  playClip: () => playClip,
  stopClip: () => stopClip
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js
var Events2;
(function(Events4) {
  Events4["CLIP_STOPPED"] = "CORNERSTONE_CINE_TOOL_STOPPED";
  Events4["CLIP_STARTED"] = "CORNERSTONE_CINE_TOOL_STARTED";
})(Events2 || (Events2 = {}));
var events_default = Events2;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js
var state6 = {};
function addToolState(element, data) {
  const enabledElement = getEnabledElement(element);
  const { viewportId } = enabledElement;
  state6[viewportId] = data;
}
function getToolState(element) {
  const enabledElement = getEnabledElement(element);
  const { viewportId } = enabledElement;
  return state6[viewportId];
}
function getToolStateByViewportId(viewportId) {
  return state6[viewportId];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js
var { ViewportStatus } = enums_exports;
var { triggerEvent: triggerEvent2 } = utilities_exports;
var debounced = true;
var dynamicVolumesPlayingMap = /* @__PURE__ */ new Map();
function playClip(element, playClipOptions) {
  let playClipTimeouts;
  let playClipIsTimeVarying;
  if (element === void 0) {
    throw new Error("playClip: element must not be undefined");
  }
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    throw new Error("playClip: element must be a valid Cornerstone enabled element");
  }
  if (!playClipOptions) {
    playClipOptions = {};
  }
  playClipOptions.dynamicCineEnabled = playClipOptions.dynamicCineEnabled ?? true;
  const { viewport } = enabledElement;
  const playClipContext = _createCinePlayContext(viewport, playClipOptions);
  let playClipData = getToolState(element);
  const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;
  if (isDynamicCinePlaying) {
    _stopDynamicVolumeCine(element);
  }
  if (!playClipData) {
    playClipData = {
      intervalId: void 0,
      framesPerSecond: 30,
      lastFrameTimeStamp: void 0,
      ignoreFrameTimeVector: false,
      usingFrameTimeVector: false,
      frameTimeVector: playClipOptions.frameTimeVector ?? void 0,
      speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,
      reverse: playClipOptions.reverse ?? false,
      loop: playClipOptions.loop ?? true,
      bounce: playClipOptions.bounce ?? false
    };
    addToolState(element, playClipData);
  } else {
    _stopClip(element, {
      stopDynamicCine: !isDynamicCinePlaying,
      viewportId: viewport.id
    });
  }
  playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;
  if (playClipOptions.framesPerSecond < 0 || playClipOptions.framesPerSecond > 0) {
    playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);
    playClipData.reverse = playClipData.framesPerSecond < 0;
    playClipData.ignoreFrameTimeVector = true;
  }
  if (playClipData.ignoreFrameTimeVector !== true && playClipData.frameTimeVector && playClipData.frameTimeVector.length === playClipContext.numScrollSteps && playClipContext.frameTimeVectorEnabled) {
    const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);
    playClipTimeouts = timeouts;
    playClipIsTimeVarying = isTimeVarying;
  }
  if (playClipOptions.bounce !== void 0) {
    playClipData.bounce = playClipOptions.bounce;
  }
  const playClipAction = () => {
    const { numScrollSteps, currentStepIndex } = playClipContext;
    let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);
    const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;
    if (outOfRange) {
      if (playClipData.bounce) {
        playClipData.reverse = !playClipData.reverse;
        newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);
        newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));
      } else if (!playClipData.loop) {
        _stopClip(element, {
          stopDynamicCine: !isDynamicCinePlaying,
          viewportId: viewport.id
        });
        triggerEvent2(element, events_default.CLIP_STOPPED, { element });
        return;
      } else {
        newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;
      }
    }
    const delta = newStepIndex - currentStepIndex;
    if (delta) {
      try {
        playClipContext.scroll(delta);
      } catch (e) {
        console.warn("Play clip not scrolling", e);
        _stopClipWithData(playClipData);
        triggerEvent2(element, events_default.CLIP_STOPPED, { element });
      }
    }
  };
  if (isDynamicCinePlaying) {
    const volume = _getVolumeFromViewport(viewport);
    if (volume) {
      dynamicVolumesPlayingMap.set(volume.volumeId, element);
    }
  }
  if (playClipContext.play) {
    playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);
  } else if (playClipTimeouts && playClipTimeouts.length > 0 && playClipIsTimeVarying) {
    playClipData.usingFrameTimeVector = true;
    playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {
      playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);
      playClipAction();
    }, 0);
  } else {
    playClipData.usingFrameTimeVector = false;
    playClipData.intervalId = window.setInterval(playClipAction, 1e3 / Math.abs(playClipData.framesPerSecond));
  }
  const eventDetail = {
    element
  };
  triggerEvent2(element, events_default.CLIP_STARTED, eventDetail);
}
function stopClip(element, options = {}) {
  _stopClip(element, {
    stopDynamicCine: true,
    ...options
  });
}
function _stopClip(element, options = { stopDynamicCine: true, viewportId: void 0 }) {
  const { stopDynamicCine, viewportId } = options;
  const enabledElement = getEnabledElement(element);
  let toolState;
  const viewport = enabledElement?.viewport;
  if (!enabledElement) {
    if (viewportId) {
      toolState = getToolStateByViewportId(viewportId);
    } else {
      return;
    }
  } else {
    const { viewport: viewport2 } = enabledElement;
    toolState = getToolState(viewport2.element);
  }
  if (toolState) {
    _stopClipWithData(toolState);
  }
  if (viewport instanceof VideoViewport_default) {
    viewport.pause();
  } else if (stopDynamicCine && viewport instanceof BaseVolumeViewport_default) {
    _stopDynamicVolumeCine(element);
  }
}
function _stopDynamicVolumeCine(element) {
  const { viewport } = getEnabledElement(element);
  if (viewport instanceof VolumeViewport_default) {
    const volume = _getVolumeFromViewport(viewport);
    if (volume?.isDynamicVolume()) {
      const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);
      dynamicVolumesPlayingMap.delete(volume.volumeId);
      if (dynamicCineElement && dynamicCineElement !== element) {
        stopClip(dynamicCineElement);
      }
    }
  }
}
function _getPlayClipTimeouts(vector, speed) {
  let i;
  let sample;
  let delay;
  let sum = 0;
  const limit = vector.length;
  const timeouts = [];
  let isTimeVarying = false;
  if (typeof speed !== "number" || speed <= 0) {
    speed = 1;
  }
  for (i = 1; i < limit; i++) {
    delay = Number(vector[i]) / speed | 0;
    timeouts.push(delay);
    if (i === 1) {
      sample = delay;
    } else if (delay !== sample) {
      isTimeVarying = true;
    }
    sum += delay;
  }
  if (timeouts.length > 0) {
    if (isTimeVarying) {
      delay = sum / timeouts.length | 0;
    } else {
      delay = timeouts[0];
    }
    timeouts.push(delay);
  }
  return { timeouts, isTimeVarying };
}
function _stopClipWithData(playClipData) {
  const id = playClipData.intervalId;
  if (typeof id !== "undefined") {
    playClipData.intervalId = void 0;
    if (playClipData.usingFrameTimeVector) {
      clearTimeout(id);
    } else {
      clearInterval(id);
    }
  }
}
function _getVolumeFromViewport(viewport) {
  if (!(viewport instanceof VolumeViewport_default)) {
    return void 0;
  }
  const volumeIds = viewport.getAllVolumeIds();
  if (!volumeIds?.length) {
    return void 0;
  }
  const dynamicVolumeId = volumeIds.find((volumeId2) => cache_default.getVolume(volumeId2)?.isDynamicVolume());
  const volumeId = dynamicVolumeId ?? volumeIds[0];
  return cache_default.getVolume(volumeId);
}
function _createStackViewportCinePlayContext(viewport, waitForRendered) {
  const imageIds = viewport.getImageIds();
  return {
    get numScrollSteps() {
      return imageIds.length;
    },
    get currentStepIndex() {
      return viewport.getTargetImageIdIndex();
    },
    get frameTimeVectorEnabled() {
      return true;
    },
    waitForRenderedCount: 0,
    scroll(delta) {
      if (this.waitForRenderedCount <= waitForRendered && viewport.viewportStatus !== ViewportStatus.RENDERED) {
        this.waitForRenderedCount++;
        return;
      }
      this.waitForRenderedCount = 0;
      utilities_exports.scroll(viewport, { delta, debounceLoading: debounced });
    }
  };
}
function _createVideoViewportCinePlayContext(viewport, waitForRendered) {
  return {
    get numScrollSteps() {
      return viewport.getNumberOfSlices();
    },
    get currentStepIndex() {
      return viewport.getSliceIndex();
    },
    get frameTimeVectorEnabled() {
      return true;
    },
    waitForRenderedCount: 0,
    scroll(delta) {
      if (this.waitForRenderedCount <= waitForRendered && viewport.viewportStatus !== ViewportStatus.RENDERED) {
        this.waitForRenderedCount++;
        return;
      }
      this.waitForRenderedCount = 0;
      utilities_exports.scroll(viewport, { delta, debounceLoading: debounced });
    },
    play(fps) {
      if (fps) {
        viewport.setPlaybackRate(fps / 24);
      }
      viewport.play();
      return viewport.getFrameRate();
    }
  };
}
function _createVolumeViewportCinePlayContext(viewport, volume) {
  const { volumeId } = volume;
  const cachedScrollInfo = {
    viewPlaneNormal: vec3_exports.create(),
    scrollInfo: null
  };
  const getScrollInfo = () => {
    const camera = viewport.getCamera();
    const updateCache = !cachedScrollInfo.scrollInfo || !vec3_exports.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);
    if (updateCache) {
      const scrollInfo = utilities_exports.getVolumeViewportScrollInfo(viewport, volumeId);
      cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;
      cachedScrollInfo.scrollInfo = scrollInfo;
    }
    return cachedScrollInfo.scrollInfo;
  };
  return {
    get numScrollSteps() {
      return getScrollInfo().numScrollSteps;
    },
    get currentStepIndex() {
      return getScrollInfo().currentStepIndex;
    },
    get frameTimeVectorEnabled() {
      const camera = viewport.getCamera();
      const volumeViewPlaneNormal = volume.direction.slice(6, 9).map((x) => -x);
      const dot2 = vec3_exports.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);
      return common_exports.equals(dot2, 1);
    },
    scroll(delta) {
      getScrollInfo().currentStepIndex += delta;
      utilities_exports.scroll(viewport, { delta });
    }
  };
}
function _createDynamicVolumeViewportCinePlayContext(volume) {
  return {
    get numScrollSteps() {
      return volume.numDimensionGroups;
    },
    get currentStepIndex() {
      return volume.dimensionGroupNumber - 1;
    },
    get frameTimeVectorEnabled() {
      return false;
    },
    scroll(delta) {
      volume.scroll(delta);
    }
  };
}
function _createCinePlayContext(viewport, playClipOptions) {
  if (viewport instanceof StackViewport_default) {
    return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);
  }
  if (viewport instanceof VolumeViewport_default) {
    const volume = _getVolumeFromViewport(viewport);
    if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {
      return _createDynamicVolumeViewportCinePlayContext(volume);
    }
    return _createVolumeViewportCinePlayContext(viewport, volume);
  }
  if (viewport instanceof VideoViewport_default) {
    return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);
  }
  throw new Error("Unknown viewport type");
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js
var planarFreehandROITool_exports = {};
__export(planarFreehandROITool_exports, {
  default: () => planarFreehandROITool_default,
  smoothAnnotation: () => smoothAnnotation
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/smoothAnnotation.js
function shouldPreventInterpolation(annotation, options) {
  const knotsRatioPercentage = options?.knotsRatioPercentage || 30;
  if (!annotation?.data?.contour?.polyline?.length || knotsRatioPercentage <= 0) {
    return true;
  }
  return false;
}
function rotateMatrix(normal, focal) {
  const mat = mat4_exports.create();
  const eye = vec3_exports.add(vec3_exports.create(), focal, normal);
  const up = Math.abs(normal[0]) > 0.1 ? vec3_exports.fromValues(-normal[1], normal[0], 0) : vec3_exports.fromValues(0, -normal[2], normal[1]);
  mat4_exports.lookAt(mat, focal, eye, up);
  return mat;
}
function rotate(list, count = Math.floor(Math.random() * (list.length - 1))) {
  if (count === 0) {
    return 0;
  }
  const srcList = [...list];
  const { length } = list;
  for (let i = 0; i < length; i++) {
    list[i] = srcList[(i + count + length) % length];
  }
  return count;
}
function smoothAnnotation(annotation, options) {
  if (shouldPreventInterpolation(annotation, options)) {
    return false;
  }
  const { viewPlaneNormal } = annotation.metadata;
  const { closed: closed2, polyline } = annotation.data.contour;
  const rotateMat = rotateMatrix(viewPlaneNormal, annotation.data.contour.polyline[0]);
  const canvasPoints = annotation.data.contour.polyline.map((p) => {
    const planeP = vec3_exports.transformMat4(vec3_exports.create(), p, rotateMat);
    return [planeP[0], planeP[1]];
  });
  let rotation = closed2 ? rotate(canvasPoints) : 0;
  let interpolatedCanvasPoints = interpolateSegmentPoints(canvasPoints, 0, canvasPoints.length - 1, options?.knotsRatioPercentage || 30);
  if (interpolatedCanvasPoints === canvasPoints) {
    return false;
  }
  rotate(interpolatedCanvasPoints, -rotation);
  for (let i = 1; i < options?.loop; i++) {
    rotation = closed2 ? rotate(interpolatedCanvasPoints) : 0;
    interpolatedCanvasPoints = interpolateSegmentPoints(interpolatedCanvasPoints, 0, interpolatedCanvasPoints.length - 1, options?.knotsRatioPercentage || 30);
    rotate(interpolatedCanvasPoints, -rotation);
  }
  const unRotate = mat4_exports.invert(mat4_exports.create(), rotateMat);
  annotation.data.contour.polyline = interpolatedCanvasPoints.map((p) => vec3_exports.transformMat4([0, 0, 0], [...p, 0], unRotate));
  return true;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js
var planarFreehandROITool_default = {
  smoothAnnotation
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/index.js
var rectangleROITool_exports = {};
__export(rectangleROITool_exports, {
  getBoundsIJKFromRectangleAnnotations: () => getBoundsIJKFromRectangleAnnotations_default,
  isAxisAlignedRectangle: () => isAxisAlignedRectangle
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js
var { isEqual: isEqual7 } = utilities_exports;
var iAxis = vec3_exports.fromValues(1, 0, 0);
var jAxis = vec3_exports.fromValues(0, 1, 0);
var kAxis = vec3_exports.fromValues(0, 0, 1);
var axisList = [iAxis, jAxis, kAxis];
function isAxisAlignedRectangle(rectangleCornersIJK) {
  const rectangleVec1 = vec3_exports.subtract(vec3_exports.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);
  const rectangleVec2 = vec3_exports.subtract(vec3_exports.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);
  const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);
  const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);
  const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual7(angle, 0) || isEqual7(angle, 90) || isEqual7(angle, 180) || isEqual7(angle, 270));
  return isAligned;
}
function calculateAnglesWithAxes(vec, axes) {
  return axes.map((axis) => vec3_exports.angle(vec, axis) * 180 / Math.PI);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/state.js
var state7 = {};
function addToolState2(element, data) {
  const enabledElement = getEnabledElement(element);
  const { viewportId } = enabledElement;
  state7[viewportId] = data;
}
function getToolState2(element) {
  const enabledElement = getEnabledElement(element);
  const { viewportId } = enabledElement;
  return state7[viewportId];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetchUtils.js
var requestType = enums_exports.RequestType.Prefetch;
var priority = 0;
function range(lowEnd, highEnd) {
  lowEnd = Math.round(lowEnd) || 0;
  highEnd = Math.round(highEnd) || 0;
  const arr = [];
  let c = highEnd - lowEnd + 1;
  if (c <= 0) {
    return arr;
  }
  while (c--) {
    arr[c] = highEnd--;
  }
  return arr;
}
function nearestIndex(arr, x) {
  let low = 0;
  let high = arr.length - 1;
  arr.forEach((v, idx) => {
    if (v < x) {
      low = Math.max(idx, low);
    } else if (v > x) {
      high = Math.min(idx, high);
    }
  });
  return { low, high };
}
function getStackData(element) {
  const enabledElement = getEnabledElement(element);
  if (!enabledElement) {
    return null;
  }
  const { viewport } = enabledElement;
  if (!(viewport instanceof StackViewport_default)) {
    return null;
  }
  return {
    currentImageIdIndex: viewport.getCurrentImageIdIndex(),
    imageIds: viewport.getImageIds()
  };
}
function getPromiseRemovedHandler(element) {
  return function(e) {
    const eventData = e.detail;
    let stackData;
    try {
      stackData = getStackData(element);
    } catch (error) {
      return;
    }
    if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {
      return;
    }
    const stack = stackData;
    const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);
    if (imageIdIndex < 0) {
      return;
    }
    const stackPrefetchData = getToolState2(element);
    if (!stackPrefetchData || !stackPrefetchData.indicesToRequest || !stackPrefetchData.indicesToRequest.length) {
      return;
    }
    stackPrefetchData.indicesToRequest.push(imageIdIndex);
  };
}
var clearFromImageIds = (stack) => {
  const imageIdSet = new Set(stack.imageIds);
  return (requestDetails) => requestDetails.type !== requestType || !imageIdSet.has(requestDetails.additionalDetails.imageId);
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js
var { imageRetrieveMetadataProvider } = utilities_exports;
var configuration = {
  maxImagesToPrefetch: Infinity,
  preserveExistingPool: true
};
var resetPrefetchTimeout;
var resetPrefetchDelay = 10;
function prefetch(element) {
  const stackPrefetchData = getToolState2(element);
  if (!stackPrefetchData) {
    return;
  }
  const stackPrefetch2 = stackPrefetchData || {};
  const stack = getStackData(element);
  if (!stack?.imageIds?.length) {
    console.warn("CornerstoneTools.stackPrefetch: No images in stack.");
    return;
  }
  const { currentImageIdIndex } = stack;
  stackPrefetch2.enabled = stackPrefetch2.enabled && (stackPrefetch2.indicesToRequest?.length ?? 0) > 0;
  if (stackPrefetch2.enabled === false) {
    return;
  }
  function removeFromList(imageIdIndex) {
    const index = stackPrefetch2.indicesToRequest.indexOf(imageIdIndex);
    if (index > -1) {
      stackPrefetch2.indicesToRequest.splice(index, 1);
    }
  }
  stackPrefetchData.indicesToRequest.sort((a, b) => a - b);
  const indicesToRequestCopy = stackPrefetch2.indicesToRequest.slice();
  indicesToRequestCopy.forEach(function(imageIdIndex) {
    const imageId2 = stack.imageIds[imageIdIndex];
    if (!imageId2) {
      return;
    }
    const distance = Math.abs(currentImageIdIndex - imageIdIndex);
    const imageCached = distance < 6 ? cache_default.getImageLoadObject(imageId2) : cache_default.isLoaded(imageId2);
    if (imageCached) {
      removeFromList(imageIdIndex);
    }
  });
  if (!stackPrefetch2.indicesToRequest.length) {
    return;
  }
  if (!configuration.preserveExistingPool) {
    imageLoadPoolManager_default.clearRequestStack(requestType);
  }
  const nearest = nearestIndex(stackPrefetch2.indicesToRequest, stack.currentImageIdIndex);
  let imageId;
  let nextImageIdIndex;
  const preventCache = false;
  function doneCallback(imageId2) {
    console.log("prefetch done: %s", imageId2);
    const imageIdIndex = stack.imageIds.indexOf(imageId2);
    removeFromList(imageIdIndex);
    if (stackPrefetch2.indicesToRequest.length === 0) {
      const eventDetail = {
        element,
        lastPrefetchedImageId: imageId2
      };
      triggerEvent(eventTarget_default, Events_default.STACK_PREFETCH_COMPLETE, eventDetail);
    }
  }
  let lowerIndex = nearest.low;
  let higherIndex = nearest.high;
  const imageIdsToPrefetch = [];
  while (lowerIndex >= 0 || higherIndex < stackPrefetch2.indicesToRequest.length) {
    const currentIndex = stack.currentImageIdIndex;
    const shouldSkipLower = currentIndex - stackPrefetch2.indicesToRequest[lowerIndex] > configuration.maxImagesToPrefetch;
    const shouldSkipHigher = stackPrefetch2.indicesToRequest[higherIndex] - currentIndex > configuration.maxImagesToPrefetch;
    const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;
    const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch2.indicesToRequest.length;
    if (!shouldLoadHigher && !shouldLoadLower) {
      break;
    }
    if (shouldLoadLower) {
      nextImageIdIndex = stackPrefetch2.indicesToRequest[lowerIndex--];
      imageId = stack.imageIds[nextImageIdIndex];
      imageIdsToPrefetch.push(imageId);
    }
    if (shouldLoadHigher) {
      nextImageIdIndex = stackPrefetch2.indicesToRequest[higherIndex++];
      imageId = stack.imageIds[nextImageIdIndex];
      imageIdsToPrefetch.push(imageId);
    }
  }
  const requestFn = (imageId2, options) => {
    const { retrieveOptions = {} } = metaData_exports.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId2, "stack") || {};
    options.retrieveOptions = {
      ...options.retrieveOptions,
      ...retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}
    };
    return imageLoader_exports.loadAndCacheImage(imageId2, options).then(() => doneCallback(imageId2));
  };
  imageIdsToPrefetch.forEach((imageId2) => {
    const options = {
      requestType
    };
    imageLoadPoolManager_default.addRequest(requestFn.bind(null, imageId2, options), requestType, {
      imageId: imageId2
    }, priority);
  });
}
function onImageUpdated(e) {
  clearTimeout(resetPrefetchTimeout);
  resetPrefetchTimeout = setTimeout(function() {
    const element = e.target;
    try {
      prefetch(element);
    } catch (error) {
      return;
    }
  }, resetPrefetchDelay);
}
function enable15(element) {
  const stack = getStackData(element);
  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {
    console.warn("CornerstoneTools.stackPrefetch: No images in stack.");
    return;
  }
  const stackPrefetchData = {
    indicesToRequest: range(0, stack.imageIds.length - 1),
    enabled: true,
    direction: 1
  };
  const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);
  stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);
  addToolState2(element, stackPrefetchData);
  prefetch(element);
  element.removeEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated);
  element.addEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated);
  const promiseRemovedHandler = getPromiseRemovedHandler(element);
  eventTarget_default.removeEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
  eventTarget_default.addEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
}
function disable15(element) {
  clearTimeout(resetPrefetchTimeout);
  element.removeEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated);
  const promiseRemovedHandler = getPromiseRemovedHandler(element);
  eventTarget_default.removeEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
  const stackPrefetchData = getToolState2(element);
  if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {
    stackPrefetchData.enabled = false;
    imageLoadPoolManager_default.clearRequestStack(requestType);
  }
}
function getConfiguration2() {
  return configuration;
}
function setConfiguration(config2) {
  configuration = config2;
}
var stackPrefetch = { enable: enable15, disable: disable15, getConfiguration: getConfiguration2, setConfiguration };
var stackPrefetch_default = stackPrefetch;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js
var { imageRetrieveMetadataProvider: imageRetrieveMetadataProvider2 } = utilities_exports;
var configuration2 = {
  maxImagesToPrefetch: Infinity,
  minBefore: 2,
  maxAfter: 2,
  directionExtraImages: 10,
  preserveExistingPool: false
};
var resetPrefetchTimeout2;
var resetPrefetchDelay2 = 5;
var priorities = {};
var enable16 = (element, priority2 = 0) => {
  const stack = getStackData(element);
  if (!stack) {
    return;
  }
  if (!stack.imageIds?.length) {
    console.warn("CornerstoneTools.stackPrefetch: No images in stack.");
    return;
  }
  updateToolState(element);
  priorities[element] = priority2;
  prefetch2(element, priority2);
  element.removeEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated2);
  element.addEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated2);
  const promiseRemovedHandler = getPromiseRemovedHandler(element);
  eventTarget_default.removeEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
  eventTarget_default.addEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
};
function prefetch2(element, priority2 = 0) {
  const stack = getStackData(element);
  if (!stack) {
    return;
  }
  if (!stack?.imageIds?.length) {
    console.warn("CornerstoneTools.stackPrefetch: No images in stack.");
    return;
  }
  const stackPrefetchData = getToolState2(element);
  if (!stackPrefetchData) {
    return;
  }
  const stackPrefetch2 = stackPrefetchData || {};
  stackPrefetch2.enabled = stackPrefetch2.enabled && (stackPrefetch2.indicesToRequest?.length ?? 0) > 0;
  if (stackPrefetch2.enabled === false) {
    return;
  }
  function removeFromList(imageIdIndex) {
    const index = stackPrefetch2.indicesToRequest.indexOf(imageIdIndex);
    if (index > -1) {
      stackPrefetch2.indicesToRequest.splice(index, 1);
    }
  }
  const indicesToRequestCopy = stackPrefetch2.indicesToRequest.slice();
  const { currentImageIdIndex } = stack;
  indicesToRequestCopy.forEach((imageIdIndex) => {
    const imageId = stack.imageIds[imageIdIndex];
    if (!imageId) {
      return;
    }
    const distance = Math.abs(currentImageIdIndex - imageIdIndex);
    const imageCached = distance < 6 ? cache_default.getImageLoadObject(imageId) : cache_default.isLoaded(imageId);
    if (imageCached) {
      removeFromList(imageIdIndex);
    }
  });
  if (!stackPrefetch2.indicesToRequest.length) {
    return;
  }
  if (!configuration2.preserveExistingPool) {
    imageLoadPoolManager_default.filterRequests(clearFromImageIds(stack));
  }
  function doneCallback(imageId) {
    const imageIdIndex = stack.imageIds.indexOf(imageId);
    removeFromList(imageIdIndex);
    const image = cache_default.getCachedImageBasedOnImageURI(imageId);
    const { stats } = stackPrefetch2;
    const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;
    if (decodeTimeInMS) {
      stats.imageIds.set(imageId, decodeTimeInMS);
      stats.decodeTimeInMS += decodeTimeInMS;
      const loadTimeInMS = image?.image?.loadTimeInMS || 0;
      stats.loadTimeInMS += loadTimeInMS;
    }
    if (!stackPrefetch2.indicesToRequest.length) {
      if (image?.sizeInBytes) {
        const { sizeInBytes } = image;
        const usage = cache_default.getMaxCacheSize() / 4 / sizeInBytes;
        if (!stackPrefetch2.cacheFill) {
          stats.initialTime = Date.now() - stats.start;
          stats.initialSize = stats.imageIds.size;
          updateToolState(element, usage);
          prefetch2(element, priority2);
        } else if (stats.imageIds.size) {
          stats.fillTime = Date.now() - stats.start;
          const { size } = stats.imageIds;
          stats.fillSize = size;
        }
      }
    }
    if (stackPrefetch2.indicesToRequest.length === 0) {
      const eventDetail = {
        element,
        lastPrefetchedImageId: imageId
      };
      triggerEvent(eventTarget_default, Events_default.STACK_PREFETCH_COMPLETE, eventDetail);
    }
  }
  const requestFn = (imageId, options) => {
    const { retrieveOptions = {} } = metaData_exports.get(imageRetrieveMetadataProvider2.IMAGE_RETRIEVE_CONFIGURATION, imageId, "stack") || {};
    options.retrieveOptions = {
      ...options.retrieveOptions,
      ...retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}
    };
    return imageLoader_exports.loadAndCacheImage(imageId, options).then(() => doneCallback(imageId));
  };
  stackPrefetch2.indicesToRequest.forEach((imageIdIndex) => {
    const imageId = stack.imageIds[imageIdIndex];
    const options = {
      requestType
    };
    imageLoadPoolManager_default.addRequest(requestFn.bind(null, imageId, options), requestType, {
      imageId
    }, priority2);
  });
}
function onImageUpdated2(e) {
  clearTimeout(resetPrefetchTimeout2);
  resetPrefetchTimeout2 = setTimeout(function() {
    const element = e.target;
    try {
      updateToolState(element);
      prefetch2(element, priorities[element]);
    } catch (error) {
      return;
    }
  }, resetPrefetchDelay2);
}
var signum = (x) => x < 0 ? -1 : 1;
var updateToolState = (element, usage) => {
  const stack = getStackData(element);
  if (!stack) {
    return;
  }
  if (!stack.imageIds?.length) {
    console.warn("CornerstoneTools.stackPrefetch: No images in stack.");
    return;
  }
  const { currentImageIdIndex } = stack;
  let { maxAfter = 2, minBefore = 2 } = configuration2;
  const { directionExtraImages = 10 } = configuration2;
  const stackPrefetchData = getToolState2(element) || {
    indicesToRequest: [],
    currentImageIdIndex,
    stackCount: 0,
    enabled: true,
    direction: 1,
    stats: {
      start: Date.now(),
      imageIds: /* @__PURE__ */ new Map(),
      decodeTimeInMS: 0,
      loadTimeInMS: 0,
      totalBytes: 0
    }
  };
  const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;
  stackPrefetchData.direction = signum(delta);
  stackPrefetchData.currentImageIdIndex = currentImageIdIndex;
  stackPrefetchData.enabled = true;
  if (stackPrefetchData.stackCount < 100) {
    stackPrefetchData.stackCount += directionExtraImages;
  }
  if (Math.abs(delta) > maxAfter || !delta) {
    stackPrefetchData.stackCount = 0;
    if (usage) {
      const positionFraction = currentImageIdIndex / stack.imageIds.length;
      minBefore = Math.ceil(usage * positionFraction);
      maxAfter = Math.ceil(usage * (1 - positionFraction));
      stackPrefetchData.cacheFill = true;
    } else {
      stackPrefetchData.cacheFill = false;
    }
  } else if (delta < 0) {
    minBefore += stackPrefetchData.stackCount;
    maxAfter = 0;
  } else {
    maxAfter += stackPrefetchData.stackCount;
    minBefore = 0;
  }
  const minIndex = Math.max(0, currentImageIdIndex - minBefore);
  const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);
  const indicesToRequest = [];
  for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {
    indicesToRequest.push(i);
  }
  for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {
    indicesToRequest.push(i);
  }
  stackPrefetchData.indicesToRequest = indicesToRequest;
  addToolState2(element, stackPrefetchData);
};
function disable16(element) {
  clearTimeout(resetPrefetchTimeout2);
  element.removeEventListener(enums_exports.Events.STACK_NEW_IMAGE, onImageUpdated2);
  const promiseRemovedHandler = getPromiseRemovedHandler(element);
  eventTarget_default.removeEventListener(enums_exports.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
  const stackPrefetchData = getToolState2(element);
  if (stackPrefetchData) {
    stackPrefetchData.enabled = false;
  }
}
function getConfiguration3() {
  return configuration2;
}
function setConfiguration2(config2) {
  configuration2 = config2;
}
var stackContextPrefetch = {
  enable: enable16,
  disable: disable16,
  getConfiguration: getConfiguration3,
  setConfiguration: setConfiguration2
};
var stackContextPrefetch_default = stackContextPrefetch;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/index.js
var viewport_exports = {};
__export(viewport_exports, {
  isViewportPreScaled: () => isViewportPreScaled
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/index.js
var dynamicVolume_exports = {};
__export(dynamicVolume_exports, {
  generateImageFromTimeData: () => generateImageFromTimeData,
  getDataInTime: () => getDataInTime_default,
  updateVolumeFromTimeData: () => updateVolumeFromTimeData
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js
function getDataInTime(dynamicVolume, options) {
  let dataInTime;
  const dimensionGroups = options.dimensionGroupNumbers || options.frameNumbers || Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);
  if (options.frameNumbers) {
    console.warn("Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.");
  }
  if (!options.maskVolumeId && !options.worldCoordinate) {
    throw new Error("You should provide either maskVolumeId or imageCoordinate");
  }
  if (options.maskVolumeId && options.worldCoordinate) {
    throw new Error("You can only use one of maskVolumeId or imageCoordinate");
  }
  if (options.maskVolumeId) {
    const segmentationVolume = cache_default.getVolume(options.maskVolumeId);
    if (!segmentationVolume) {
      throw new Error("Segmentation volume not found");
    }
    const [dataInTime2, ijkCoords] = _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume);
    return [dataInTime2, ijkCoords];
  }
  if (options.worldCoordinate) {
    const dataInTime2 = _getDimensionGroupDataCoordinate(dimensionGroups, options.worldCoordinate, dynamicVolume);
    return dataInTime2;
  }
  return dataInTime;
}
function _getDimensionGroupDataCoordinate(dimensionGroups, coordinate, volume) {
  const { dimensions, imageData } = volume;
  const index = imageData.worldToIndex(coordinate);
  index[0] = Math.floor(index[0]);
  index[1] = Math.floor(index[1]);
  index[2] = Math.floor(index[2]);
  if (!utilities_exports.indexWithinDimensions(index, dimensions)) {
    throw new Error("outside bounds");
  }
  const yMultiple = dimensions[0];
  const zMultiple = dimensions[0] * dimensions[1];
  const value = [];
  dimensionGroups.forEach((dimensionGroupNumber) => {
    const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];
    value.push(volume.voxelManager.getAtIndexAndDimensionGroup(scalarIndex, dimensionGroupNumber));
  });
  return value;
}
function _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume) {
  const { imageData: maskImageData } = segmentationVolume;
  const segVoxelManager = segmentationVolume.voxelManager;
  const scalarDataLength = segVoxelManager.getScalarDataLength();
  const nonZeroVoxelIndices = [];
  nonZeroVoxelIndices.length = scalarDataLength;
  let actualLen = 0;
  for (let i = 0, len = scalarDataLength; i < len; i++) {
    if (segVoxelManager.getAtIndex(i) !== 0) {
      nonZeroVoxelIndices[actualLen++] = i;
    }
  }
  nonZeroVoxelIndices.length = actualLen;
  const nonZeroVoxelValuesInTime = [];
  const isSameVolume = dynamicVolume.voxelManager.getScalarDataLength() === scalarDataLength && JSON.stringify(dynamicVolume.spacing) === JSON.stringify(segmentationVolume.spacing);
  const ijkCoords = [];
  if (isSameVolume) {
    for (let i = 0; i < nonZeroVoxelIndices.length; i++) {
      const valuesInTime = [];
      const index = nonZeroVoxelIndices[i];
      for (let j = 0; j < dimensionGroups.length; j++) {
        valuesInTime.push(dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[j]));
      }
      nonZeroVoxelValuesInTime.push(valuesInTime);
      ijkCoords.push(segVoxelManager.toIJK(index));
    }
    return [nonZeroVoxelValuesInTime, ijkCoords];
  }
  const callback = ({ pointLPS: segPointLPS, value: segValue, pointIJK: segPointIJK }) => {
    if (segValue === 0) {
      return;
    }
    const overlapIJKMinMax = getVoxelOverlap(dynamicVolume.imageData, dynamicVolume.dimensions, dynamicVolume.spacing, segPointLPS);
    let count = 0;
    const perDimensionGroupSum = /* @__PURE__ */ new Map();
    dimensionGroups.forEach((dimensionGroupNumber) => perDimensionGroupSum.set(dimensionGroupNumber, 0));
    const averageCallback = ({ index }) => {
      for (let i = 0; i < dimensionGroups.length; i++) {
        const value = dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[i]);
        const dimensionGroupNumber = dimensionGroups[i];
        perDimensionGroupSum.set(dimensionGroupNumber, perDimensionGroupSum.get(dimensionGroupNumber) + value);
      }
      count++;
    };
    dynamicVolume.voxelManager.forEach(averageCallback, {
      imageData: dynamicVolume.imageData,
      boundsIJK: overlapIJKMinMax
    });
    const averageValues = [];
    perDimensionGroupSum.forEach((sum) => {
      averageValues.push(sum / count);
    });
    ijkCoords.push(segPointIJK);
    nonZeroVoxelValuesInTime.push(averageValues);
  };
  segmentationVolume.voxelManager.forEach(callback, {
    imageData: maskImageData
  });
  return [nonZeroVoxelValuesInTime, ijkCoords];
}
var getDataInTime_default = getDataInTime;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js
function sumOverDimensionGroups(voxelManager, dimensionGroups) {
  const arrayLength = voxelManager.getScalarDataLength();
  const resultArray = new Float32Array(arrayLength);
  for (const dimensionGroupNumber of dimensionGroups) {
    const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);
    for (let i = 0; i < arrayLength; i++) {
      resultArray[i] += scalarData[i];
    }
  }
  return resultArray;
}
function averageOverDimensionGroups(voxelManager, dimensionGroups) {
  const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);
  const numDimensionGroups = dimensionGroups.length;
  for (let i = 0; i < sumArray.length; i++) {
    sumArray[i] /= numDimensionGroups;
  }
  return sumArray;
}
var operationFunctions = {
  [enums_exports.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {
    const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);
    for (let i = 0; i < resultArray.length; i++) {
      callback(i, resultArray[i]);
    }
  },
  [enums_exports.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {
    const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);
    for (let i = 0; i < resultArray.length; i++) {
      callback(i, resultArray[i]);
    }
  },
  [enums_exports.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {
    if (dimensionGroups.length !== 2) {
      throw new Error("Please provide only 2 dimension groups for subtraction.");
    }
    const arrayLength = voxelManager.getScalarDataLength();
    const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);
    const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);
    for (let i = 0; i < arrayLength; i++) {
      const difference = scalarData1[i] - scalarData2[i];
      callback(i, difference);
    }
  }
};
function generateImageFromTimeData(dynamicVolume, operation, options) {
  const { dimensionGroupNumbers, frameNumbers } = options;
  if (frameNumbers) {
    console.warn("Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.");
  }
  const dimensionGroups = dimensionGroupNumbers || frameNumbers || Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);
  if (dimensionGroups.length <= 1) {
    throw new Error("Please provide two or more dimension groups");
  }
  const voxelManager = dynamicVolume.voxelManager;
  const arrayLength = voxelManager.getScalarDataLength();
  const operationFunction = operationFunctions[operation];
  if (!operationFunction) {
    throw new Error(`Unsupported operation: ${operation}`);
  }
  const resultArray = new Float32Array(arrayLength);
  operationFunction(voxelManager, dimensionGroups, (index, value) => {
    resultArray[index] = value;
  });
  return resultArray;
}
function updateVolumeFromTimeData(dynamicVolume, operation, options) {
  const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;
  if (!targetVolume) {
    throw new Error("A target volume must be provided");
  }
  if (frameNumbers) {
    console.warn("Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.");
  }
  const dimensionGroups = dimensionGroupNumbers || frameNumbers || Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);
  if (dimensionGroups.length <= 1) {
    throw new Error("Please provide two or more dimension groups");
  }
  const voxelManager = dynamicVolume.voxelManager;
  const targetVoxelManager = targetVolume.voxelManager;
  const operationFunction = operationFunctions[operation];
  if (!operationFunction) {
    throw new Error(`Unsupported operation: ${operation}`);
  }
  operationFunction(voxelManager, dimensionGroups, (index, value) => {
    targetVoxelManager.setAtIndex(index, value);
  });
  targetVoxelManager.resetModifiedSlices();
  for (let k = 0; k < targetVolume.dimensions[2]; k++) {
    targetVoxelManager.modifiedSlices.add(k);
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js
var utils_exports = {};
__export(utils_exports, {
  getPoint: () => getPoint,
  getPolyDataPointIndexes: () => getPolyDataPointIndexes,
  getPolyDataPoints: () => getPolyDataPoints
});
function getPoint(points, idx) {
  const idx3 = idx * 3;
  if (idx3 < points.length) {
    return vec3_exports.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);
  }
}
function getPolyDataPointIndexes(polyData) {
  const linesData = polyData.getLines().getData();
  let idx = 0;
  const lineSegments = /* @__PURE__ */ new Map();
  while (idx < linesData.length) {
    const segmentSize = linesData[idx++];
    const segment = [];
    for (let i = 0; i < segmentSize; i++) {
      segment.push(linesData[idx + i]);
    }
    lineSegments.set(segment[0], segment);
    idx += segmentSize;
  }
  const contours = [];
  const findStartingPoint = (map) => {
    for (const [key, value] of map.entries()) {
      if (value !== void 0) {
        return key;
      }
    }
    return -1;
  };
  let startPoint = findStartingPoint(lineSegments);
  while (startPoint !== -1) {
    const contour = [startPoint];
    while (lineSegments.has(startPoint)) {
      const nextPoint = lineSegments.get(startPoint)[1];
      if (lineSegments.has(nextPoint)) {
        contour.push(nextPoint);
      }
      lineSegments.delete(startPoint);
      startPoint = nextPoint;
    }
    contours.push(contour);
    startPoint = findStartingPoint(lineSegments);
  }
  return contours.length ? contours : void 0;
}
function getPolyDataPoints(polyData) {
  const contoursIndexes = getPolyDataPointIndexes(polyData);
  if (!contoursIndexes) {
    return;
  }
  const rawPointsData = polyData.getPoints().getData();
  return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/index.js
var voi_exports = {};
__export(voi_exports, {
  colorbar: () => colorbar_exports,
  windowLevel: () => windowlevel_exports
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/index.js
var colorbar_exports = {};
__export(colorbar_exports, {
  Colorbar: () => Colorbar,
  Enums: () => enums_exports3,
  ViewportColorbar: () => ViewportColorbar
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/index.js
var enums_exports3 = {};
__export(enums_exports3, {
  ColorbarRangeTextPosition: () => ColorbarRangeTextPosition
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js
var ColorbarRangeTextPosition;
(function(ColorbarRangeTextPosition2) {
  ColorbarRangeTextPosition2["Top"] = "top";
  ColorbarRangeTextPosition2["Left"] = "left";
  ColorbarRangeTextPosition2["Bottom"] = "bottom";
  ColorbarRangeTextPosition2["Right"] = "right";
})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/common/isRangeValid.js
var isRangeValid = (range2) => {
  return range2 && range2.upper > range2.lower;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/common/isColorbarSizeValid.js
var isColorbarSizeValid = (size) => {
  return !!size && size.width > 0 && size.height > 0;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/common/areColorbarRangesEqual.js
var areColorbarRangesEqual = (a, b) => {
  return !!a && !!b && a.lower === b.lower && a.upper === b.upper;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/common/areColorbarSizesEqual.js
var areColorbarSizesEqual = (a, b) => {
  return !!a && !!b && a.width === b.width && a.height === b.height;
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec3/interpolateVec3.js
var interpolateVec3 = (a, b, t) => {
  return [
    a[0] * (1 - t) + b[0] * t,
    a[1] * (1 - t) + b[1] * t,
    a[2] * (1 - t) + b[2] * t
  ];
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ColorbarCanvas.js
var { clamp } = utilities_exports;
var ColorbarCanvas = class _ColorbarCanvas {
  constructor(props) {
    _ColorbarCanvas.validateProps(props);
    const { colormap, size = { width: 20, height: 100 }, imageRange = { lower: 0, upper: 1 }, voiRange = { lower: 0, upper: 1 }, container, showFullPixelValueRange = false } = props;
    this._colormap = colormap;
    this._imageRange = imageRange;
    this._voiRange = voiRange;
    this._showFullImageRange = showFullPixelValueRange;
    this._canvas = this._createRootElement(size);
    if (container) {
      this.appendTo(container);
    }
  }
  get colormap() {
    return this._colormap;
  }
  set colormap(colormap) {
    this._colormap = colormap;
    this.render();
  }
  get size() {
    const { width, height } = this._canvas;
    return { width, height };
  }
  set size(size) {
    const { _canvas: canvas } = this;
    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {
      return;
    }
    this._setCanvasSize(canvas, size);
    this.render();
  }
  get imageRange() {
    return { ...this._imageRange };
  }
  set imageRange(imageRange) {
    if (!isRangeValid(imageRange) || areColorbarRangesEqual(imageRange, this._imageRange)) {
      return;
    }
    this._imageRange = imageRange;
    this.render();
  }
  get voiRange() {
    return { ...this._voiRange };
  }
  set voiRange(voiRange) {
    if (!isRangeValid(voiRange) || areColorbarRangesEqual(voiRange, this._voiRange)) {
      return;
    }
    this._voiRange = voiRange;
    this.render();
  }
  get showFullImageRange() {
    return this._showFullImageRange;
  }
  set showFullImageRange(showFullImageRange) {
    if (showFullImageRange === this._showFullImageRange) {
      return;
    }
    this._showFullImageRange = showFullImageRange;
    this.render();
  }
  appendTo(container) {
    container.appendChild(this._canvas);
    this.render();
  }
  dispose() {
    const { _canvas: canvas } = this;
    const { parentElement } = canvas;
    parentElement?.removeChild(canvas);
  }
  static validateProps(props) {
    const { size, imageRange, voiRange } = props;
    if (size && !isColorbarSizeValid(size)) {
      throw new Error('Invalid "size"');
    }
    if (imageRange && !isRangeValid(imageRange)) {
      throw new Error('Invalid "imageRange"');
    }
    if (voiRange && !isRangeValid(voiRange)) {
      throw new Error('Invalid "voiRange"');
    }
  }
  _setCanvasSize(canvas, size) {
    const { width, height } = size;
    canvas.width = width;
    canvas.height = height;
    Object.assign(canvas.style, {
      width: `${width}px`,
      height: `${height}px`
    });
  }
  _createRootElement(size) {
    const canvas = document.createElement("canvas");
    Object.assign(canvas.style, {
      position: "absolute",
      top: "0",
      left: "0",
      pointerEvents: "none",
      boxSizing: "border-box"
    });
    this._setCanvasSize(canvas, size);
    return canvas;
  }
  render() {
    if (!this._canvas.isConnected) {
      return;
    }
    const { _colormap: colormap } = this;
    const { RGBPoints: rgbPoints } = colormap;
    const colorsCount = rgbPoints.length / 4;
    const getColorPoint = (index) => {
      const offset = 4 * index;
      if (index < 0 || index >= colorsCount) {
        return;
      }
      return {
        index,
        position: rgbPoints[offset],
        color: [
          rgbPoints[offset + 1],
          rgbPoints[offset + 2],
          rgbPoints[offset + 3]
        ]
      };
    };
    const { width, height } = this._canvas;
    const canvasContext = this._canvas.getContext("2d");
    if (!canvasContext) {
      return;
    }
    const isHorizontal = width > height;
    const maxValue = isHorizontal ? width : height;
    const { _voiRange: voiRange } = this;
    const range2 = this._showFullImageRange ? this._imageRange : { ...voiRange };
    let previousColorPoint = void 0;
    let currentColorPoint = getColorPoint(0);
    const incRawPixelValue = (range2.upper - range2.lower) / (maxValue - 1);
    let rawPixelValue = range2.lower;
    for (let i = 0; i < maxValue; i++) {
      const tVoiRange = (rawPixelValue - voiRange.lower) / Math.abs(voiRange.upper - voiRange.lower);
      if (currentColorPoint) {
        for (let i2 = currentColorPoint.index; i2 < colorsCount; i2++) {
          if (tVoiRange <= currentColorPoint.position) {
            break;
          }
          previousColorPoint = currentColorPoint;
          currentColorPoint = getColorPoint(i2 + 1);
        }
      }
      let normColor;
      if (!previousColorPoint) {
        normColor = [...currentColorPoint.color];
      } else if (!currentColorPoint) {
        normColor = [...previousColorPoint.color];
      } else {
        const tColorRange = (tVoiRange - previousColorPoint.position) / (currentColorPoint.position - previousColorPoint.position);
        normColor = interpolateVec3(previousColorPoint.color, currentColorPoint.color, tColorRange);
      }
      const color = normColor.map((color2) => clamp(Math.round(color2 * 255), 0, 255));
      canvasContext.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;
      if (isHorizontal) {
        canvasContext.fillRect(i, 0, 1, height);
      } else {
        canvasContext.fillRect(0, height - i - 1, width, 1);
      }
      rawPixelValue += incRawPixelValue;
    }
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ColorbarTicks.js
var DEFAULTS = {
  FONT: "10px Arial",
  COLOR: "white",
  TICK_SIZE: 5,
  TICK_WIDTH: 1,
  TICK_LABEL_MARGIN: 3,
  MAX_NUM_TICKS: 8,
  TICKS_STEPS: [1, 2.5, 5, 10]
};
var ColorbarTicks = class _ColorbarTicks {
  constructor(props) {
    _ColorbarTicks.validateProps(props);
    const { top = 0, left = 0, size = { width: 20, height: 100 }, imageRange = { lower: 0, upper: 1 }, voiRange = { lower: 0, upper: 1 }, ticks: ticksProps, container, showFullPixelValueRange = false } = props;
    const { style: ticksStyle, position: rangeTextPosition } = ticksProps ?? {};
    this._imageRange = imageRange;
    this._voiRange = voiRange;
    this._font = ticksStyle?.font ?? DEFAULTS.FONT;
    this._color = ticksStyle?.color ?? DEFAULTS.COLOR;
    this._tickSize = ticksStyle?.tickSize ?? DEFAULTS.TICK_SIZE;
    this._tickWidth = ticksStyle?.tickWidth ?? DEFAULTS.TICK_WIDTH;
    this._labelMargin = ticksStyle?.labelMargin ?? DEFAULTS.TICK_LABEL_MARGIN;
    this._maxNumTicks = ticksStyle?.maxNumTicks ?? DEFAULTS.MAX_NUM_TICKS;
    this._rangeTextPosition = rangeTextPosition ?? ColorbarRangeTextPosition.Right;
    this._showFullPixelValueRange = showFullPixelValueRange;
    this._canvas = this._createCanvasElement(size, top, left);
    if (container) {
      this.appendTo(container);
    }
  }
  get size() {
    const { width, height } = this._canvas;
    return { width, height };
  }
  set size(size) {
    const { _canvas: canvas } = this;
    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {
      return;
    }
    this._setCanvasSize(canvas, size);
    this.render();
  }
  get top() {
    return Number.parseInt(this._canvas.style.top);
  }
  set top(top) {
    const { _canvas: canvas } = this;
    const currentTop = this.top;
    if (top === currentTop) {
      return;
    }
    canvas.style.top = `${top}px`;
    this.render();
  }
  get left() {
    return Number.parseInt(this._canvas.style.left);
  }
  set left(left) {
    const { _canvas: canvas } = this;
    const currentLeft = this.left;
    if (left === currentLeft) {
      return;
    }
    canvas.style.left = `${left}px`;
    this.render();
  }
  get imageRange() {
    return { ...this._imageRange };
  }
  set imageRange(imageRange) {
    if (!isRangeValid(imageRange) || areColorbarRangesEqual(imageRange, this._imageRange)) {
      return;
    }
    this._imageRange = imageRange;
    this.render();
  }
  get voiRange() {
    return { ...this._voiRange };
  }
  set voiRange(voiRange) {
    if (!isRangeValid(voiRange) || areColorbarRangesEqual(voiRange, this._voiRange)) {
      return;
    }
    this._voiRange = voiRange;
    this.render();
  }
  get tickSize() {
    return this._tickSize;
  }
  set tickSize(tickSize) {
    if (tickSize === this._tickSize) {
      return;
    }
    this._tickSize = tickSize;
    this.render();
  }
  get tickWidth() {
    return this._tickWidth;
  }
  set tickWidth(tickWidth) {
    if (tickWidth === this._tickWidth) {
      return;
    }
    this._tickWidth = tickWidth;
    this.render();
  }
  get color() {
    return this._color;
  }
  set color(color) {
    if (color === this._color) {
      return;
    }
    this._color = color;
    this.render();
  }
  get showFullPixelValueRange() {
    return this._showFullPixelValueRange;
  }
  set showFullPixelValueRange(showFullRange) {
    if (showFullRange === this._showFullPixelValueRange) {
      return;
    }
    this._showFullPixelValueRange = showFullRange;
    this.render();
  }
  get visible() {
    return this._canvas.style.display === "block";
  }
  set visible(visible) {
    if (visible === this.visible) {
      return;
    }
    this._canvas.style.display = visible ? "block" : "none";
    if (visible) {
      this.render();
    }
  }
  appendTo(container) {
    container.appendChild(this._canvas);
    this.render();
  }
  static validateProps(props) {
    const { size, imageRange, voiRange } = props;
    if (size && !isColorbarSizeValid(size)) {
      throw new Error('Invalid "size"');
    }
    if (imageRange && !isRangeValid(imageRange)) {
      throw new Error('Invalid "imageRange"');
    }
    if (voiRange && !isRangeValid(voiRange)) {
      throw new Error('Invalid "voiRange"');
    }
  }
  _setCanvasSize(canvas, size) {
    const { width, height } = size;
    canvas.width = width;
    canvas.height = height;
    Object.assign(canvas.style, {
      width: `${width}px`,
      height: `${height}px`
    });
  }
  _createCanvasElement(size, top, left) {
    const canvas = document.createElement("canvas");
    Object.assign(canvas.style, {
      display: "none",
      position: "absolute",
      boxSizing: "border-box",
      top: `${top}px`,
      left: `${left}px`
    });
    this._setCanvasSize(canvas, size);
    return canvas;
  }
  _getTicks(range2) {
    const { lower, upper } = range2;
    const rangeValue = upper - lower;
    const roughStep = rangeValue / (this._maxNumTicks - 1);
    const stepPower = Math.pow(10, -Math.floor(Math.log10(Math.abs(roughStep))));
    const roughtStepNormalized = roughStep * stepPower;
    const normalizedStep = DEFAULTS.TICKS_STEPS.find((n) => n >= roughtStepNormalized);
    const step = normalizedStep / stepPower;
    const scaleMax = Math.ceil(upper / step) * step;
    const scaleMin = Math.floor(lower / step) * step;
    const ticksCount = Math.round((scaleMax - scaleMin) / step) + 1;
    const ticks = [];
    for (let i = 0; i < ticksCount; i++) {
      ticks.push(scaleMin + i * step);
    }
    return { scaleMin, scaleMax, step, ticks };
  }
  _getLeftTickInfo({ position, labelMeasure }) {
    const { width } = this._canvas;
    const labelX = width - this.tickSize - labelMeasure.width - this._labelMargin;
    const labelPoint = [labelX, position];
    const tickPoints = {
      start: [width - this._tickSize, position],
      end: [width, position]
    };
    return { labelPoint, tickPoints };
  }
  _getRightTickInfo({ position }) {
    const labelPoint = [this._tickSize + this._labelMargin, position];
    const tickPoints = {
      start: [0, position],
      end: [this._tickSize, position]
    };
    return { labelPoint, tickPoints };
  }
  _getTopTickInfo({ position, labelMeasure }) {
    const { height } = this._canvas;
    const labelY = height - this.tickSize - this._labelMargin;
    const labelPoint = [position, labelY];
    const tickPoints = {
      start: [position, height - this._tickSize],
      end: [position, height]
    };
    return { labelPoint, tickPoints };
  }
  _getBottomTickInfo({ position, labelMeasure }) {
    const labelPoint = [position, this._tickSize + this._labelMargin];
    const tickPoints = {
      start: [position, 0],
      end: [position, this._tickSize]
    };
    return { labelPoint, tickPoints };
  }
  render() {
    const { _canvas: canvas } = this;
    if (!canvas.isConnected || !this.visible) {
      return;
    }
    const { width, height } = canvas;
    const isHorizontal = width >= height;
    const maxCanvasPixelValue = isHorizontal ? width : height;
    const canvasContext = canvas.getContext("2d");
    const { _voiRange: voiRange } = this;
    const range2 = this._showFullPixelValueRange ? this._imageRange : { ...voiRange };
    const rangeWidth = range2.upper - range2.lower;
    const { ticks } = this._getTicks(range2);
    canvasContext.clearRect(0, 0, width, height);
    canvasContext.font = this._font;
    canvasContext.textBaseline = isHorizontal ? "top" : "middle";
    canvasContext.textAlign = isHorizontal ? "center" : "left";
    canvasContext.fillStyle = this._color;
    canvasContext.strokeStyle = this._color;
    canvasContext.lineWidth = this.tickWidth;
    ticks.forEach((tick) => {
      let position = Math.round(maxCanvasPixelValue * ((tick - range2.lower) / rangeWidth));
      if (!isHorizontal) {
        position = height - position;
      }
      if (position < 0 || position > maxCanvasPixelValue) {
        return;
      }
      const label = tick.toString();
      const labelMeasure = canvasContext.measureText(label);
      let tickInfo;
      if (isHorizontal) {
        if (this._rangeTextPosition === ColorbarRangeTextPosition.Top) {
          tickInfo = this._getTopTickInfo({ position, labelMeasure });
        } else {
          tickInfo = this._getBottomTickInfo({ position, labelMeasure });
        }
      } else {
        if (this._rangeTextPosition === ColorbarRangeTextPosition.Left) {
          tickInfo = this._getLeftTickInfo({ position, labelMeasure });
        } else {
          tickInfo = this._getRightTickInfo({ position });
        }
      }
      const { labelPoint, tickPoints } = tickInfo;
      const { start: tickStart, end: tickEnd } = tickPoints;
      canvasContext.beginPath();
      canvasContext.moveTo(tickStart[0], tickStart[1]);
      canvasContext.lineTo(tickEnd[0], tickEnd[1]);
      canvasContext.fillText(label, labelPoint[0], labelPoint[1]);
      canvasContext.stroke();
      return position;
    });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/common/isRangeTextPositionValid.js
function isRangeTextPositionValid(colorbarWidth, colorbarHeight, rangeTextPosition) {
  const isHorizontal = colorbarWidth >= colorbarHeight;
  const validRangeTextPositions = isHorizontal ? [ColorbarRangeTextPosition.Top, ColorbarRangeTextPosition.Bottom] : [ColorbarRangeTextPosition.Left, ColorbarRangeTextPosition.Right];
  return validRangeTextPositions.includes(rangeTextPosition);
}

// node_modules/@cornerstonejs/tools/dist/esm/widgets/Widget.js
var Widget = class {
  constructor({ id, container }) {
    this._containerResizeCallback = (entries) => {
      let width;
      let height;
      const { contentRect, contentBoxSize } = entries[0];
      if (contentRect) {
        width = contentRect.width;
        height = contentRect.height;
      } else if (contentBoxSize?.length) {
        width = contentBoxSize[0].inlineSize;
        height = contentBoxSize[0].blockSize;
      }
      this._containerSize = { width, height };
      this.onContainerResize();
    };
    this._id = id;
    this._containerSize = { width: 0, height: 0 };
    this._rootElement = this.createRootElement(id);
    this._containerResizeObserver = new ResizeObserver(this._containerResizeCallback);
    if (container) {
      this.appendTo(container);
    }
  }
  get id() {
    return this._id;
  }
  get rootElement() {
    return this._rootElement;
  }
  appendTo(container) {
    const { _rootElement: rootElement, _containerResizeObserver: resizeObserver } = this;
    const { parentElement: currentContainer } = rootElement;
    if (!container || container === currentContainer) {
      return;
    }
    if (currentContainer) {
      resizeObserver.unobserve(currentContainer);
    }
    container.appendChild(rootElement);
    resizeObserver.observe(container);
  }
  destroy() {
    const { _rootElement: rootElement, _containerResizeObserver: resizeObserver } = this;
    const { parentElement } = rootElement;
    parentElement?.removeChild(rootElement);
    resizeObserver.disconnect();
  }
  get containerSize() {
    return { ...this._containerSize };
  }
  createRootElement(id) {
    const rootElement = document.createElement("div");
    rootElement.id = id;
    rootElement.classList.add("widget");
    Object.assign(rootElement.style, {
      width: "100%",
      height: "100%"
    });
    return rootElement;
  }
  onContainerResize() {
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js
var DEFAULTS2 = {
  MULTIPLIER: 1,
  RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,
  TICKS_BAR_SIZE: 50
};
var Colorbar = class _Colorbar extends Widget {
  constructor(props) {
    super(props);
    this._isMouseOver = false;
    this._isInteracting = false;
    this._mouseOverCallback = (evt) => {
      this._isMouseOver = true;
      this.showTicks();
      evt.stopPropagation();
    };
    this._mouseOutCallback = (evt) => {
      this._isMouseOver = false;
      this.hideTicks();
      evt.stopPropagation();
    };
    this._mouseDownCallback = (evt) => {
      this._isInteracting = true;
      this.showTicks();
      this._addVOIEventListeners(evt);
      evt.stopPropagation();
    };
    this._mouseDragCallback = (evt, initialState) => {
      const multipliers = this.getVOIMultipliers();
      const currentPoints = this._getPointsFromMouseEvent(evt);
      const { points: startPoints, voiRange: startVOIRange } = initialState;
      const canvasDelta = vec2_exports.sub(vec2_exports.create(), currentPoints.local, startPoints.local);
      const wwDelta = canvasDelta[0] * multipliers[0];
      const wcDelta = canvasDelta[1] * multipliers[1];
      if (!wwDelta && !wcDelta) {
        return;
      }
      const { lower: voiLower, upper: voiUpper } = startVOIRange;
      let { windowWidth, windowCenter } = utilities_exports.windowLevel.toWindowLevel(voiLower, voiUpper);
      windowWidth = Math.max(windowWidth + wwDelta, 1);
      windowCenter += wcDelta;
      const newVoiRange = utilities_exports.windowLevel.toLowHighRange(windowWidth, windowCenter);
      this.voiRange = newVoiRange;
      evt.stopPropagation();
      evt.preventDefault();
    };
    this._mouseUpCallback = (evt) => {
      this._isInteracting = false;
      this.hideTicks();
      this._removeVOIEventListeners();
      evt.stopPropagation();
    };
    this._eventListenersManager = new utilities_exports.eventListener.MultiTargetEventListenerManager();
    this._colormaps = _Colorbar.getColormapsMap(props);
    this._activeColormapName = _Colorbar.getInitialColormapName(props);
    this._canvas = this._createCanvas(props);
    this._ticksBar = this._createTicksBar(props);
    this._rangeTextPosition = props.ticks?.position ?? DEFAULTS2.RANGE_TEXT_POSITION;
    this._canvas.appendTo(this.rootElement);
    this._ticksBar.appendTo(this.rootElement);
    this._addRootElementEventListeners();
  }
  get activeColormapName() {
    return this._activeColormapName;
  }
  set activeColormapName(colormapName) {
    if (colormapName === this._activeColormapName) {
      return;
    }
    const colormap = this._colormaps.get(colormapName);
    if (!colormap) {
      console.warn(`Invalid colormap name (${colormapName})`);
      return;
    }
    this._activeColormapName = colormapName;
    this._canvas.colormap = colormap;
  }
  get imageRange() {
    return this._canvas.imageRange;
  }
  set imageRange(imageRange) {
    this._canvas.imageRange = imageRange;
    this._ticksBar.imageRange = imageRange;
  }
  get voiRange() {
    return this._canvas.voiRange;
  }
  set voiRange(voiRange) {
    const { voiRange: currentVoiRange } = this._canvas;
    if (!isRangeValid(voiRange) || areColorbarRangesEqual(voiRange, currentVoiRange)) {
      return;
    }
    this._canvas.voiRange = voiRange;
    this._ticksBar.voiRange = voiRange;
    this.onVoiChange(voiRange);
  }
  get showFullImageRange() {
    return this._canvas.showFullImageRange;
  }
  set showFullImageRange(value) {
    this._canvas.showFullImageRange = value;
    this._ticksBar.showFullPixelValueRange = value;
  }
  destroy() {
    super.destroy();
    this._eventListenersManager.reset();
  }
  createRootElement() {
    const rootElement = document.createElement("div");
    Object.assign(rootElement.style, {
      position: "relative",
      fontSize: "0",
      width: "100%",
      height: "100%"
    });
    return rootElement;
  }
  onContainerResize() {
    super.onContainerResize();
    this.updateTicksBar();
    this._canvas.size = this.containerSize;
  }
  getVOIMultipliers() {
    return [DEFAULTS2.MULTIPLIER, DEFAULTS2.MULTIPLIER];
  }
  onVoiChange(voiRange) {
  }
  showTicks() {
    this.updateTicksBar();
    this._ticksBar.visible = true;
  }
  hideTicks() {
    if (this._isInteracting || this._isMouseOver) {
      return;
    }
    this._ticksBar.visible = false;
  }
  static getColormapsMap(props) {
    const { colormaps } = props;
    return colormaps.reduce((items, item) => items.set(item.Name, item), /* @__PURE__ */ new Map());
  }
  static getInitialColormapName(props) {
    const { activeColormapName, colormaps } = props;
    const colormapExists = !!activeColormapName && colormaps.some((cm) => cm.Name === activeColormapName);
    return colormapExists ? activeColormapName : colormaps[0].Name;
  }
  _createCanvas(props) {
    const { imageRange, voiRange, showFullPixelValueRange } = props;
    const colormap = this._colormaps.get(this._activeColormapName);
    return new ColorbarCanvas({
      colormap,
      imageRange,
      voiRange,
      showFullPixelValueRange
    });
  }
  _createTicksBar(props) {
    const ticksProps = props.ticks;
    return new ColorbarTicks({
      imageRange: props.imageRange,
      voiRange: props.voiRange,
      ticks: ticksProps,
      showFullPixelValueRange: props.showFullPixelValueRange
    });
  }
  _getPointsFromMouseEvent(evt) {
    const { rootElement: element } = this;
    const clientPoint = [evt.clientX, evt.clientY];
    const pagePoint = [evt.pageX, evt.pageY];
    const rect = element.getBoundingClientRect();
    const localPoints = [
      pagePoint[0] - rect.left - window.pageXOffset,
      pagePoint[1] - rect.top - window.pageYOffset
    ];
    return { client: clientPoint, page: pagePoint, local: localPoints };
  }
  updateTicksBar() {
    const { width: containerWidth, height: containerHeight } = this.containerSize;
    if (containerWidth === 0 && containerHeight === 0) {
      return;
    }
    const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;
    const isHorizontal = containerWidth >= containerHeight;
    const width = isHorizontal ? containerWidth : DEFAULTS2.TICKS_BAR_SIZE;
    const height = isHorizontal ? DEFAULTS2.TICKS_BAR_SIZE : containerHeight;
    if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {
      throw new Error("Invalid rangeTextPosition value for the current colobar orientation");
    }
    let ticksBarTop;
    let ticksBarLeft;
    ticksBar.size = { width, height };
    if (isHorizontal) {
      ticksBarLeft = 0;
      ticksBarTop = rangeTextPosition === ColorbarRangeTextPosition.Top ? -height : containerHeight;
    } else {
      ticksBarTop = 0;
      ticksBarLeft = rangeTextPosition === ColorbarRangeTextPosition.Left ? -width : containerWidth;
    }
    ticksBar.top = ticksBarTop;
    ticksBar.left = ticksBarLeft;
  }
  _addRootElementEventListeners() {
    const { _eventListenersManager: manager } = this;
    const { rootElement: element } = this;
    manager.addEventListener(element, "mouseover", this._mouseOverCallback);
    manager.addEventListener(element, "mouseout", this._mouseOutCallback);
    manager.addEventListener(element, "mousedown", this._mouseDownCallback);
  }
  _addVOIEventListeners(evt) {
    const { _eventListenersManager: manager } = this;
    const points = this._getPointsFromMouseEvent(evt);
    const voiRange = { ...this._canvas.voiRange };
    const initialDragState = { points, voiRange };
    this._removeVOIEventListeners();
    manager.addEventListener(document, "voi.mouseup", this._mouseUpCallback);
    manager.addEventListener(document, "voi.mousemove", (evt2) => this._mouseDragCallback(evt2, initialDragState));
  }
  _removeVOIEventListeners() {
    const { _eventListenersManager: manager } = this;
    manager.removeEventListener(document, "voi.mouseup");
    manager.removeEventListener(document, "voi.mousemove");
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/getVOIMultipliers.js
var DEFAULT_MULTIPLIER = 4;
function getVOIMultipliers(viewport, volumeId, options) {
  const modality = utilities_exports.getViewportModality(viewport, volumeId);
  if (modality === "PT") {
    const { clientWidth, clientHeight } = viewport.element;
    const ptMultiplier = 5 / Math.max(clientWidth, clientHeight);
    const isPreScaled = isViewportPreScaled(viewport, volumeId);
    const { fixedPTWindowWidth = true } = options ?? {};
    const xMultiplier = fixedPTWindowWidth ? 0 : ptMultiplier;
    return isPreScaled ? [xMultiplier, ptMultiplier] : [xMultiplier, DEFAULT_MULTIPLIER];
  }
  return [DEFAULT_MULTIPLIER, DEFAULT_MULTIPLIER];
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js
var { Events: Events3 } = enums_exports;
var defaultImageRange = { lower: -1e3, upper: 1e3 };
var ViewportColorbar = class _ViewportColorbar extends Colorbar {
  constructor(props) {
    const { element, volumeId } = props;
    const imageRange = _ViewportColorbar._getImageRange(element, volumeId);
    const voiRange = _ViewportColorbar._getVOIRange(element, volumeId);
    super({ ...props, imageRange, voiRange });
    this.autoHideTicks = () => {
      if (this._hideTicksTimeoutId) {
        return;
      }
      const timeLeft = this._hideTicksTime - Date.now();
      if (timeLeft <= 0) {
        this.hideTicks();
      } else {
        this._hideTicksTimeoutId = window.setTimeout(() => {
          this._hideTicksTimeoutId = 0;
          this.autoHideTicks();
        }, timeLeft);
      }
    };
    this._stackNewImageCallback = () => {
      this.imageRange = _ViewportColorbar._getImageRange(this._element);
    };
    this._imageVolumeModifiedCallback = (evt) => {
      const { volumeId: volumeId2 } = evt.detail;
      if (volumeId2 !== this._volumeId) {
        return;
      }
      const { _element: element2 } = this;
      this.imageRange = _ViewportColorbar._getImageRange(element2, volumeId2);
    };
    this._viewportVOIModifiedCallback = (evt) => {
      const { viewportId, volumeId: volumeId2, range: voiRange2, colormap } = evt.detail;
      const { viewport } = this.enabledElement;
      if (viewportId !== viewport.id || volumeId2 !== this._volumeId) {
        return;
      }
      this.voiRange = voiRange2;
      if (colormap) {
        this.activeColormapName = colormap.name;
      }
      this.showAndAutoHideTicks();
    };
    this._viewportColormapModifiedCallback = (evt) => {
      const { viewportId, colormap, volumeId: volumeId2 } = evt.detail;
      const { viewport } = this.enabledElement;
      if (viewportId !== viewport.id || volumeId2 !== this._volumeId) {
        return;
      }
      this.activeColormapName = colormap.name;
    };
    this._element = element;
    this._volumeId = volumeId;
    this._addCornerstoneEventListener();
  }
  get element() {
    return this._element;
  }
  get enabledElement() {
    return getEnabledElement(this._element);
  }
  getVOIMultipliers() {
    const { viewport } = this.enabledElement;
    return getVOIMultipliers(viewport, this._volumeId);
  }
  onVoiChange(voiRange) {
    super.onVoiChange(voiRange);
    const { viewport } = this.enabledElement;
    if (viewport instanceof StackViewport_default) {
      viewport.setProperties({
        voiRange
      });
      viewport.render();
    } else if (viewport instanceof VolumeViewport_default) {
      const { _volumeId: volumeId } = this;
      const viewportsContainingVolumeUID = utilities_exports.getViewportsWithVolumeId(volumeId);
      viewport.setProperties({ voiRange }, volumeId);
      viewportsContainingVolumeUID.forEach((vp) => vp.render());
    }
  }
  static _getImageRange(element, volumeId) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const actor = viewport.getImageActor(volumeId);
    if (!actor) {
      return defaultImageRange;
    }
    const imageData = actor.getMapper().getInputData();
    const scalarData = imageData.getPointData().getScalars();
    let imageRange;
    if (!scalarData) {
      if (!volumeId) {
        throw new Error("volumeId is required when scalarData is not available");
      }
      const volume = cache_default.getVolume(volumeId);
      const [minValue, maxValue] = volume.voxelManager.getRange();
      imageRange = [minValue, maxValue];
    } else {
      imageRange = scalarData.getRange();
    }
    return imageRange[0] === 0 && imageRange[1] === 0 ? defaultImageRange : { lower: imageRange[0], upper: imageRange[1] };
  }
  static _getVOIRange(element, volumeId) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const actor = viewport.getImageActor(volumeId);
    if (!actor) {
      return defaultImageRange;
    }
    const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();
    return voiRange[0] === 0 && voiRange[1] === 0 ? defaultImageRange : { lower: voiRange[0], upper: voiRange[1] };
  }
  showAndAutoHideTicks(interval = 1e3) {
    this._hideTicksTime = Date.now() + interval;
    this.showTicks();
    this.autoHideTicks();
  }
  _addCornerstoneEventListener() {
    const { _element: element } = this;
    eventTarget_default.addEventListener(Events3.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);
    element.addEventListener(Events3.STACK_NEW_IMAGE, this._stackNewImageCallback);
    element.addEventListener(Events3.VOI_MODIFIED, this._viewportVOIModifiedCallback);
    element.addEventListener(Events3.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);
  }
  destroy() {
    super.destroy();
    const { _element: element } = this;
    eventTarget_default.removeEventListener(Events3.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);
    element.removeEventListener(Events3.STACK_NEW_IMAGE, this._stackNewImageCallback);
    element.removeEventListener(Events3.VOI_MODIFIED, this._viewportVOIModifiedCallback);
    element.removeEventListener(Events3.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/index.js
var windowlevel_exports = {};
__export(windowlevel_exports, {
  calculateMinMaxMean: () => calculateMinMaxMean,
  extractWindowLevelRegionToolData: () => extractWindowLevelRegionToolData,
  getLuminanceFromRegion: () => getLuminanceFromRegion
});

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js
function getLuminanceFromRegion(imageData, x, y, width, height) {
  const luminance = [];
  let index = 0;
  const pixelData = imageData.scalarData;
  let spIndex, row, column;
  if (imageData.color) {
    for (row = 0; row < height; row++) {
      for (column = 0; column < width; column++) {
        spIndex = ((row + y) * imageData.columns + (column + x)) * 4;
        const red = pixelData[spIndex];
        const green = pixelData[spIndex + 1];
        const blue = pixelData[spIndex + 2];
        luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;
      }
    }
  } else {
    for (row = 0; row < height; row++) {
      for (column = 0; column < width; column++) {
        spIndex = (row + y) * imageData.columns + (column + x);
        luminance[index++] = pixelData[spIndex];
      }
    }
  }
  return luminance;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js
function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {
  const numPixels = pixelLuminance.length;
  let min = globalMax;
  let max = globalMin;
  let sum = 0;
  if (numPixels < 2) {
    return {
      min,
      max,
      mean: (globalMin + globalMax) / 2
    };
  }
  for (let index = 0; index < numPixels; index++) {
    const spv = pixelLuminance[index];
    min = Math.min(min, spv);
    max = Math.max(max, spv);
    sum += spv;
  }
  return {
    min,
    max,
    mean: sum / numPixels
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js
function extractWindowLevelRegionToolData(viewport) {
  if (viewport instanceof VolumeViewport_default) {
    return extractImageDataVolume(viewport);
  }
  if (viewport instanceof StackViewport_default) {
    return extractImageDataStack(viewport);
  }
  throw new Error("Viewport not supported");
}
function extractImageDataVolume(viewport) {
  const { scalarData, width, height } = utilities_exports.getCurrentVolumeViewportSlice(viewport);
  const { min: minPixelValue, max: maxPixelValue } = utilities_exports.getMinMax(scalarData);
  return {
    scalarData,
    minPixelValue,
    maxPixelValue,
    width,
    height,
    rows: width,
    columns: height
  };
}
function extractImageDataStack(viewport) {
  const imageData = viewport.getImageData();
  const { scalarData } = imageData;
  const { min: minPixelValue, max: maxPixelValue } = utilities_exports.getMinMax(scalarData);
  const width = imageData.dimensions[0];
  const height = imageData.dimensions[1];
  const { rows, columns, color } = viewport.getCornerstoneImage();
  return {
    scalarData,
    width,
    height,
    minPixelValue,
    maxPixelValue,
    rows,
    columns,
    color
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js
var { transformWorldToIndex: transformWorldToIndex10 } = utilities_exports;
function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {
  const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);
  const sphereObj = {
    center: centerWorld,
    radius: radiusWorld
  };
  const dimensions = imageData.getDimensions();
  const voxelManager = utilities_exports.VoxelManager.createScalarVolumeVoxelManager({
    dimensions,
    scalarData: imageData.getPointData().getScalars().getData()
  });
  voxelManager.forEach(callback, {
    boundsIJK,
    isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),
    imageData
  });
}
function _getBounds(circlePoints, imageData, viewport) {
  const [bottom, top] = circlePoints;
  const centerWorld = vec3_exports.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);
  const radiusWorld = vec3_exports.distance(bottom, top) / 2;
  let boundsIJK;
  if (!viewport) {
    const centerIJK = transformWorldToIndex10(imageData, centerWorld);
    const spacings = imageData.getSpacing();
    const minSpacing = Math.min(...spacings);
    const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);
    boundsIJK = [
      [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],
      [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],
      [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK]
    ];
    return {
      boundsIJK,
      centerWorld,
      radiusWorld
    };
  }
  boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);
  return {
    boundsIJK,
    centerWorld,
    radiusWorld
  };
}
function _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {
  const [bottom, top] = circlePoints;
  const dimensions = imageData.getDimensions();
  const camera = viewport.getCamera();
  const viewUp = vec3_exports.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);
  const viewPlaneNormal = vec3_exports.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);
  const viewRight = vec3_exports.create();
  vec3_exports.cross(viewRight, viewUp, viewPlaneNormal);
  const topLeftWorld = vec3_exports.create();
  const bottomRightWorld = vec3_exports.create();
  vec3_exports.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);
  vec3_exports.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);
  vec3_exports.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);
  vec3_exports.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);
  const sphereCornersIJK = [
    transformWorldToIndex10(imageData, topLeftWorld),
    transformWorldToIndex10(imageData, bottomRightWorld)
  ];
  const boundsIJK = getBoundingBoxAroundShapeIJK(sphereCornersIJK, dimensions);
  return boundsIJK;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/geometricSurfaceUtils.js
var geometricSurfaceUtils_exports = {};
__export(geometricSurfaceUtils_exports, {
  checkStandardBasis: () => checkStandardBasis,
  inverse3x3Matrix: () => inverse3x3Matrix,
  rotatePoints: () => rotatePoints
});
function validate3x3Matrix(matrix) {
  if (!Array.isArray(matrix) || matrix.length !== 9) {
    throw new Error("Matrix must be an array of 9 numbers");
  }
  if (!matrix.every((n) => typeof n === "number" && !isNaN(n))) {
    throw new Error("Matrix must contain only valid numbers");
  }
}
function inverse3x3Matrix(matrix) {
  validate3x3Matrix(matrix);
  const mat = [
    [matrix[0], matrix[1], matrix[2]],
    [matrix[3], matrix[4], matrix[5]],
    [matrix[6], matrix[7], matrix[8]]
  ];
  const determinant = mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0]);
  if (Math.abs(determinant) < 1e-10) {
    throw new Error("Matrix is not invertible (determinant is zero)");
  }
  const adjugate = [
    [
      mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1],
      -(mat[0][1] * mat[2][2] - mat[0][2] * mat[2][1]),
      mat[0][1] * mat[1][2] - mat[0][2] * mat[1][1]
    ],
    [
      -(mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]),
      mat[0][0] * mat[2][2] - mat[0][2] * mat[2][0],
      -(mat[0][0] * mat[1][2] - mat[0][2] * mat[1][0])
    ],
    [
      mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0],
      -(mat[0][0] * mat[2][1] - mat[0][1] * mat[2][0]),
      mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]
    ]
  ];
  const inverse = [];
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      inverse.push(adjugate[i][j] / determinant);
    }
  }
  return inverse;
}
function normalizeVector(v) {
  const magnitude = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  return v.map((component) => component / magnitude);
}
function checkStandardBasis(directions) {
  validate3x3Matrix(directions);
  const xVector = directions.slice(0, 3);
  const yVector = directions.slice(3, 6);
  const zVector = directions.slice(6, 9);
  const normalizedX = normalizeVector(xVector);
  const normalizedY = normalizeVector(yVector);
  const normalizedZ = normalizeVector(zVector);
  const standardBasis = {
    x: [1, 0, 0],
    y: [0, 1, 0],
    z: [0, 0, 1]
  };
  const epsilon2 = 1e-10;
  const isStandard = normalizedX.every((val, i) => Math.abs(val - standardBasis.x[i]) < epsilon2) && normalizedY.every((val, i) => Math.abs(val - standardBasis.y[i]) < epsilon2) && normalizedZ.every((val, i) => Math.abs(val - standardBasis.z[i]) < epsilon2);
  const rotationMatrix = isStandard ? [...standardBasis.x, ...standardBasis.y, ...standardBasis.z] : inverse3x3Matrix([...normalizedX, ...normalizedY, ...normalizedZ]);
  return {
    isStandard,
    rotationMatrix
  };
}
function rotatePoint(point, origin, rotationMatrix) {
  const x = point[0] - origin[0];
  const y = point[1] - origin[1];
  const z = point[2] - origin[2];
  return [
    rotationMatrix[0] * x + rotationMatrix[1] * y + rotationMatrix[2] * z + origin[0],
    rotationMatrix[3] * x + rotationMatrix[4] * y + rotationMatrix[5] * z + origin[1],
    rotationMatrix[6] * x + rotationMatrix[7] * y + rotationMatrix[8] * z + origin[2]
  ];
}
function rotatePoints(rotationMatrix, origin, points) {
  const rotatedPoints = [];
  for (let i = 0; i < points.length; i += 3) {
    const point = points.slice(i, i + 3);
    const rotated = rotatePoint(point, origin, rotationMatrix);
    rotatedPoints.push(...rotated);
  }
  return rotatedPoints;
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js
function setAnnotationLabel(annotation, element, updatedLabel) {
  annotation.data.label = updatedLabel;
  triggerAnnotationModified(annotation, element, ChangeTypes_default.LabelChange);
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/moveAnnotationToViewPlane.js
function moveAnnotationToViewPlane(annotation, viewport) {
  const { data } = annotation;
  const { points } = data.handles;
  const { focalPoint, viewPlaneNormal } = viewport.getCamera();
  const projectedDistance = dot(sub(create(), points[0], focalPoint), viewPlaneNormal);
  points.forEach((point) => {
    add(point, point, scale(create(), [-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]], projectedDistance));
  });
  if (viewport instanceof StackViewport_default) {
    annotation.metadata.referencedImageId = viewport.getCurrentImageId();
  }
  return annotation;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js
var fanExtraction_exports = {};
__export(fanExtraction_exports, {
  calculateFanGeometry: () => calculateFanGeometry,
  default: () => saveBinaryData,
  downloadFanJpeg: () => downloadFanJpeg,
  exportContourJpeg: () => exportContourJpeg,
  getPixelData: () => getPixelData
});

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js
function segmentLargestUSOutlineFromBuffer(buffer, width, height) {
  const totalPixels = width * height;
  const channelCount = buffer.length / totalPixels;
  if (![1, 3, 4].includes(channelCount)) {
    throw new Error("Buffer must be 1, 3, or 4 channels per pixel");
  }
  const mask = Array.from({ length: height }, () => new Array(width).fill(false));
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const pixelIndex = y * width + x;
      const base = pixelIndex * channelCount;
      let isForeground = false;
      for (let c = 0; c < Math.min(3, channelCount); c++) {
        if (buffer[base + c] > 0) {
          isForeground = true;
          break;
        }
      }
      mask[y][x] = isForeground;
    }
  }
  const labels = Array.from({ length: height }, () => new Array(width).fill(0));
  let currentLabel = 0;
  const regionSizes = {};
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      if (mask[y][x] && labels[y][x] === 0) {
        currentLabel++;
        const getter = (px, py) => {
          if (px < 0 || px >= width || py < 0 || py >= height) {
            return false;
          }
          return mask[py][px] && labels[py][px] === 0;
        };
        let pixelCount = 0;
        const options = {
          onFlood: (px, py) => {
            labels[py][px] = currentLabel;
            pixelCount++;
          },
          diagonals: false
        };
        floodFill_default(getter, [x, y], options);
        regionSizes[currentLabel] = pixelCount;
      }
    }
  }
  if (currentLabel === 0) {
    return [];
  }
  const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);
  function isBorder(x, y) {
    if (labels[y][x] !== +largestLabel) {
      return false;
    }
    for (const [dx, dy] of [
      [1, 0],
      [-1, 0],
      [0, 1],
      [0, -1]
    ]) {
      const nx = x + dx, ny = y + dy;
      if (nx < 0 || nx >= width || ny < 0 || ny >= height || labels[ny][nx] !== +largestLabel) {
        return true;
      }
    }
    return false;
  }
  let start = null;
  outer: for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      if (isBorder(x, y)) {
        start = [x, y];
        break outer;
      }
    }
  }
  if (!start) {
    return [];
  }
  const dirs = [
    [1, 0],
    [1, 1],
    [0, 1],
    [-1, 1],
    [-1, 0],
    [-1, -1],
    [0, -1],
    [1, -1]
  ];
  const contour = [];
  let current = start;
  let prev = [start[0] - 1, start[1]];
  do {
    contour.push([current[0], current[1]]);
    const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];
    let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);
    if (startDir < 0) {
      startDir = 0;
    }
    let nextPt = null;
    for (let k = 1; k <= 8; k++) {
      const [dx, dy] = dirs[(startDir + k) % 8];
      const nx = current[0] + dx, ny = current[1] + dy;
      if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {
        nextPt = [nx, ny];
        const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];
        prev = [current[0] + bdx, current[1] + bdy];
        break;
      }
    }
    if (!nextPt) {
      break;
    }
    current = nextPt;
  } while (current[0] !== start[0] || current[1] !== start[1]);
  return contour;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js
function generateConvexHullFromContour(contour) {
  const simplified = polyline_exports.decimate(contour, 2);
  const hull = polyline_exports.convexHull(simplified);
  return { simplified, hull };
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js
function pickPoints(hull, slack = 7) {
  if (!hull.length) {
    throw new Error("Convex hull is empty");
  }
  const n = hull.length;
  const next = (i) => (i + 1) % n;
  const walk = (from, to) => {
    const idx = [];
    for (let i = from; ; i = next(i)) {
      idx.push(i);
      if (i === to) {
        break;
      }
    }
    return idx;
  };
  let i2 = 0, i3 = 0;
  for (let i = 1; i < n; i++) {
    if (hull[i][0] < hull[i2][0]) {
      i2 = i;
    }
    if (hull[i][0] > hull[i3][0]) {
      i3 = i;
    }
  }
  const P2 = hull[i2];
  const P3 = hull[i3];
  const pathA = walk(i2, i3);
  const pathB = walk(i3, i2);
  const globalYmin = Math.min(...hull.map((p) => p[1]));
  const upperPath = pathA.some((i) => hull[i][1] === globalYmin) ? pathA : pathB;
  const topY = Math.min(...upperPath.map((i) => hull[i][1]));
  let arcPts = upperPath.map((i) => hull[i]).filter((p) => Math.abs(p[1] - topY) <= slack);
  if (arcPts.length < 2) {
    arcPts = upperPath.map((i) => hull[i]).sort((a, b) => a[1] - b[1]).slice(0, 2);
  }
  const P1 = arcPts.reduce((best, p) => p[0] < best[0] ? p : best, arcPts[0]);
  const P4 = arcPts.reduce((best, p) => p[0] > best[0] ? p : best, arcPts[0]);
  return { P1, P2, P3, P4 };
}
function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {
  const { maxDist = 15, slack = 2 } = opts;
  const directions = {
    P1: { dx: -1, dy: -1 },
    P2: { dx: -1, dy: 1 },
    P3: { dx: 1, dy: 1 },
    P4: { dx: 1, dy: -1 }
  };
  function snapQuadrant(pt, { dx, dy }, threshold = 5) {
    const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;
    const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;
    const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;
    const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;
    let best = pt;
    for (const [cx, cy] of contour) {
      if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {
        continue;
      }
      const xi = Math.round(cx);
      const yi = Math.round(cy);
      if (xi < 0 || xi >= width || yi < 0 || yi >= height) {
        continue;
      }
      const xAlign = (xi - best[0]) * dx;
      const yAlign = (yi - best[0]) * dy;
      const v = edgeBuf[yi * width + xi];
      if (v > threshold && (xAlign > 0 || yAlign > 0)) {
        best = [cx, cy];
      }
    }
    return best;
  }
  return {
    P1: snapQuadrant(rough.P1, directions.P1),
    P2: snapQuadrant(rough.P2, directions.P2),
    P3: snapQuadrant(rough.P3, directions.P3),
    P4: snapQuadrant(rough.P4, directions.P4)
  };
}
function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {
  const rough = pickPoints(hull);
  const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {
    maxDist: 20,
    step: 0.5
  });
  return refined;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js
function angleRad(center, p) {
  return Math.atan2(p[1] - center[1], p[0] - center[0]);
}
function deriveFanGeometry(params) {
  const { P1, P2, P3, P4 } = params;
  const centerResult = intersectLine(P1, P2, P4, P3, true);
  if (!centerResult) {
    throw new Error("Fan edges appear parallel — no apex found");
  }
  const center = centerResult;
  let startAngle = angleRad(center, P1) * (180 / Math.PI);
  let endAngle = angleRad(center, P4) * (180 / Math.PI);
  if (endAngle <= startAngle) {
    const tempAngle = startAngle;
    startAngle = endAngle;
    endAngle = tempAngle;
  }
  const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);
  const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);
  const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);
  const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);
  const innerRadius = Math.min(d1, d4);
  const outerRadius = Math.max(d2, d3);
  return {
    center,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius
  };
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js
function exportContourJpeg(pixelData, width, height, contour, opts = {}) {
  const { strokeStyle = "#f00", lineWidth = 2, quality = 0.92 } = opts;
  const canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  const ctx = canvas.getContext("2d");
  const totalPixels = width * height;
  const channels = pixelData.length / totalPixels;
  const imgData = ctx.createImageData(width, height);
  const out = imgData.data;
  for (let i = 0; i < totalPixels; i++) {
    const baseIn = i * channels;
    const baseOut = i * 4;
    if (channels === 1) {
      const v = pixelData[baseIn];
      out[baseOut] = v;
      out[baseOut + 1] = v;
      out[baseOut + 2] = v;
      out[baseOut + 3] = 255;
    } else {
      out[baseOut] = pixelData[baseIn];
      out[baseOut + 1] = pixelData[baseIn + 1];
      out[baseOut + 2] = pixelData[baseIn + 2];
      out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;
    }
  }
  ctx.putImageData(imgData, 0, 0);
  if (contour.length > 0) {
    ctx.strokeStyle = strokeStyle;
    ctx.lineWidth = lineWidth;
    ctx.beginPath();
    ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);
    for (let i = 1; i < contour.length; i++) {
      ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);
    }
    ctx.closePath();
    ctx.stroke();
  }
  return canvas.toDataURL("image/jpeg", quality);
}
function getPixelData(imageId) {
  const image = cache_default.getImage(imageId);
  if (!image) {
    return;
  }
  const width = image.width;
  const height = image.height;
  const pixelData = image.getPixelData();
  return {
    pixelData,
    width,
    height
  };
}
function saveBinaryData(url, filename) {
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.style.display = "none";
  a.click();
  a.remove();
}
function exportFanJpeg(pixelData, width, height, fan, opts = {}) {
  const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius } = fan;
  const { strokeStyle = "#0ff", lineWidth = 2, quality = 0.92 } = opts;
  const startAngle = startAngleInDegrees * Math.PI / 180;
  const endAngle = endAngleInDegrees * Math.PI / 180;
  const canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  const ctx = canvas.getContext("2d");
  const total = width * height;
  const channels = pixelData.length / total;
  const imgData = ctx.createImageData(width, height);
  const out = imgData.data;
  for (let i = 0; i < total; i++) {
    const baseOut = i * 4;
    if (channels === 1) {
      const v = pixelData[i];
      out[baseOut] = v;
      out[baseOut + 1] = v;
      out[baseOut + 2] = v;
      out[baseOut + 3] = 255;
    } else {
      const baseIn = i * channels;
      out[baseOut] = pixelData[baseIn];
      out[baseOut + 1] = pixelData[baseIn + 1];
      out[baseOut + 2] = pixelData[baseIn + 2];
      out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;
    }
  }
  ctx.putImageData(imgData, 0, 0);
  ctx.beginPath();
  for (let a = startAngle; a <= endAngle; a += 0.01) {
    const x = center[0] + innerRadius * Math.cos(a);
    const y = center[1] + innerRadius * Math.sin(a);
    if (a === startAngle) {
      ctx.moveTo(x, y);
    } else {
      ctx.lineTo(x, y);
    }
  }
  for (let a = endAngle; a >= startAngle; a -= 0.01) {
    const x = center[0] + outerRadius * Math.cos(a);
    const y = center[1] + outerRadius * Math.sin(a);
    ctx.lineTo(x, y);
  }
  ctx.closePath();
  ctx.strokeStyle = strokeStyle;
  ctx.lineWidth = lineWidth;
  ctx.stroke();
  return canvas.toDataURL("image/jpeg", quality);
}
function downloadFanJpeg(imageId, contourType = 5) {
  const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);
  const { pixelData, width, height } = getPixelData(imageId) || {};
  if (!pixelData) {
    return;
  }
  let jpegDataUrl;
  if (contourType === 1) {
    jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);
  } else if (contourType === 2) {
    jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);
  } else if (contourType === 3) {
    jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);
  } else if (contourType === 4) {
    jpegDataUrl = exportContourJpeg(pixelData, width, height, [
      refined.P1,
      refined.P2,
      refined.P3,
      refined.P4
    ]);
  } else {
    jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {
      strokeStyle: "#f00",
      lineWidth: 3,
      quality: 0.95
    });
  }
  saveBinaryData(jpegDataUrl, "contour.jpg");
}
function calculateFanGeometry(imageId) {
  const { pixelData, width, height } = getPixelData(imageId) || {};
  if (!pixelData) {
    return;
  }
  const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);
  const { simplified, hull } = generateConvexHullFromContour(contour);
  const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);
  const fanGeometry = deriveFanGeometry({
    P1: refined.P1,
    P2: refined.P2,
    P3: refined.P3,
    P4: refined.P4
  });
  return { contour, simplified, hull, refined, fanGeometry };
}

// node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js
var roundNumber = utilities_exports.roundNumber;

// node_modules/@cornerstonejs/tools/dist/esm/index.js
var Types = __toESM(require_types());

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js
var segmentation_exports2 = {};
__export(segmentation_exports2, {
  activeSegmentation: () => activeSegmentation_exports,
  addContourRepresentationToViewport: () => addContourRepresentationToViewport,
  addContourRepresentationToViewportMap: () => addContourRepresentationToViewportMap,
  addLabelmapRepresentationToViewport: () => addLabelmapRepresentationToViewport,
  addLabelmapRepresentationToViewportMap: () => addLabelmapRepresentationToViewportMap,
  addRepresentationData: () => internalAddRepresentationData_default,
  addSegmentationRepresentations: () => addSegmentationRepresentations,
  addSegmentations: () => addSegmentations,
  addSurfaceRepresentationToViewport: () => addSurfaceRepresentationToViewport,
  addSurfaceRepresentationToViewportMap: () => addSurfaceRepresentationToViewportMap,
  config: () => config_exports2,
  defaultSegmentationStateManager: () => defaultSegmentationStateManager,
  getActiveSegmentation: () => getActiveSegmentation,
  getCurrentLabelmapImageIdsForViewport: () => getCurrentLabelmapImageIdsForViewport,
  getLabelmapImageIds: () => getLabelmapImageIds,
  getLabelmapImageIdsForImageId: () => getLabelmapImageIdsForImageId,
  helpers: () => helpers,
  removeAllSegmentationRepresentations: () => removeAllSegmentationRepresentations,
  removeAllSegmentations: () => removeAllSegmentations,
  removeContourRepresentation: () => removeContourRepresentation,
  removeLabelmapRepresentation: () => removeLabelmapRepresentation,
  removeSegment: () => removeSegment,
  removeSegmentation: () => removeSegmentation,
  removeSegmentationRepresentation: () => removeSegmentationRepresentation,
  removeSegmentationRepresentations: () => removeSegmentationRepresentations,
  removeSurfaceRepresentation: () => removeSurfaceRepresentation,
  segmentIndex: () => segmentIndex_exports,
  segmentLocking: () => segmentLocking_exports,
  segmentationStyle: () => segmentationStyle,
  state: () => segmentationState_exports,
  strategies: () => strategies_exports,
  triggerSegmentationEvents: () => triggerSegmentationEvents_exports,
  updateSegmentations: () => updateSegmentations,
  utilities: () => utilities_exports3
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateSegmentations.js
function updateSegmentations(segmentationUpdateArray, suppressEvents) {
  const segmentationStateManager = defaultSegmentationStateManager;
  segmentationUpdateArray.forEach((segmentationUpdate) => {
    segmentationStateManager.updateSegmentation(segmentationUpdate.segmentationId, segmentationUpdate.payload);
    if (!suppressEvents) {
      triggerSegmentationModified(segmentationUpdate.segmentationId);
    }
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/index.js
var config_exports2 = {};
__export(config_exports2, {
  color: () => segmentationColor_exports,
  style: () => styleHelpers_exports,
  visibility: () => segmentationVisibility_exports
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js
var segmentationVisibility_exports = {};
__export(segmentationVisibility_exports, {
  getHiddenSegmentIndices: () => getHiddenSegmentIndices,
  getSegmentIndexVisibility: () => getSegmentIndexVisibility,
  getSegmentationRepresentationVisibility: () => getSegmentationRepresentationVisibility2,
  setSegmentIndexVisibility: () => setSegmentIndexVisibility,
  setSegmentationRepresentationVisibility: () => setSegmentationRepresentationVisibility2
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setSegmentationRepresentationVisibility.js
function setSegmentationRepresentationVisibility(viewportId, specifier, visible) {
  const segmentationStateManager = defaultSegmentationStateManager;
  segmentationStateManager.setSegmentationRepresentationVisibility(viewportId, specifier, visible);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js
function setSegmentationRepresentationVisibility2(viewportId, specifier, visibility) {
  const representations = getSegmentationRepresentations(viewportId, specifier);
  if (!representations) {
    return;
  }
  representations.forEach((representation) => {
    setSegmentationRepresentationVisibility(viewportId, {
      segmentationId: representation.segmentationId,
      type: representation.type
    }, visibility);
  });
}
function getSegmentationRepresentationVisibility2(viewportId, specifier) {
  return getSegmentationRepresentationVisibility(viewportId, specifier);
}
function setSegmentIndexVisibility(viewportId, specifier, segmentIndex, visibility) {
  const representations = getSegmentationRepresentations(viewportId, specifier);
  if (!representations) {
    return;
  }
  representations.forEach((representation) => {
    if (!representation.segments || !representation.segments[segmentIndex]) {
      return;
    }
    representation.segments[segmentIndex].visible = visibility;
  });
  triggerSegmentationRenderBySegmentationId(specifier.segmentationId);
  triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId);
}
function getSegmentIndexVisibility(viewportId, specifier, segmentIndex) {
  const hiddenSegments = getHiddenSegmentIndices(viewportId, specifier);
  return !hiddenSegments.has(segmentIndex);
}
function getHiddenSegmentIndices(viewportId, specifier) {
  const representation = getSegmentationRepresentation(viewportId, specifier);
  if (!representation) {
    return /* @__PURE__ */ new Set();
  }
  const segmentsHidden = Object.entries(representation.segments).reduce((acc, [segmentIndex, segment]) => {
    if (!segment.visible) {
      acc.add(Number(segmentIndex));
    }
    return acc;
  }, /* @__PURE__ */ new Set());
  return segmentsHidden;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/styleHelpers.js
var styleHelpers_exports = {};
__export(styleHelpers_exports, {
  getRenderInactiveSegmentations: () => getRenderInactiveSegmentations,
  getStyle: () => getStyle,
  hasCustomStyle: () => hasCustomStyle,
  resetToGlobalStyle: () => resetToGlobalStyle,
  setRenderInactiveSegmentations: () => setRenderInactiveSegmentations,
  setStyle: () => setStyle
});
function getStyle(specifier) {
  return segmentationStyle.getStyle(specifier);
}
function setStyle(specifier, style) {
  segmentationStyle.setStyle(specifier, style);
  if (!specifier.viewportId && !specifier.segmentationId) {
    const segmentations = getSegmentations();
    segmentations.forEach((segmentation) => {
      triggerSegmentationRender(segmentation.segmentationId);
    });
  }
  triggerSegmentationRepresentationModified(specifier.viewportId, specifier.segmentationId, specifier.type);
}
function setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {
  segmentationStyle.setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations);
  triggerSegmentationRender(viewportId);
  const segmentations = getViewportSegmentations(viewportId);
  segmentations.forEach((segmentation) => {
    triggerSegmentationRepresentationModified(viewportId, segmentation.segmentationId);
  });
}
function getRenderInactiveSegmentations(viewportId) {
  return segmentationStyle.getRenderInactiveSegmentations(viewportId);
}
function resetToGlobalStyle() {
  segmentationStyle.resetToGlobalStyle();
  triggerSegmentationRender();
}
function hasCustomStyle(specifier) {
  return segmentationStyle.hasCustomStyle(specifier);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/index.js
var utilities_exports3 = {};
__export(utilities_exports3, {
  convertContourHoles: () => convertContourHoles,
  decimateContours: () => decimateContours,
  extractSegmentPolylines: () => extractSegmentPolylines,
  getAnnotationMapFromSegmentation: () => getAnnotationMapFromSegmentation,
  getAnnotationsUIDMapFromSegmentation: () => getAnnotationsUIDMapFromSegmentation,
  getViewportAssociatedToSegmentation: () => getViewportAssociatedToSegmentation,
  getViewportWithMatchingViewPlaneNormal: () => getViewportWithMatchingViewPlaneNormal,
  removeCompleteContourAnnotation: () => removeCompleteContourAnnotation,
  removeContourHoles: () => removeContourHoles,
  removeContourIslands: () => removeContourIslands,
  smoothContours: () => smoothContours
});

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationMapFromSegmentation.js
function getAnnotationMapFromSegmentation(contourRepresentationData, options = {}) {
  const annotationMap = contourRepresentationData.annotationUIDsMap;
  const segmentIndices = options.segmentIndices?.length ? options.segmentIndices : Array.from(annotationMap.keys());
  const annotationUIDsInSegmentMap = /* @__PURE__ */ new Map();
  segmentIndices.forEach((index) => {
    const annotationUIDsInSegment = annotationMap.get(index);
    let uids = Array.from(annotationUIDsInSegment);
    uids = uids.filter((uid) => !getAnnotation(uid).parentAnnotationUID);
    const annotations = uids.map((uid) => {
      const annotation = getAnnotation(uid);
      const hasChildAnnotations = annotation.childAnnotationUIDs?.length;
      const childPolylinesInformation = hasChildAnnotations && annotation.childAnnotationUIDs.map((childUID) => {
        const childAnnotation = getAnnotation(childUID);
        return {
          polyline: childAnnotation.data.contour.polyline,
          isClosed: childAnnotation.data.contour.closed
        };
      });
      const holesClosed = hasChildAnnotations && childPolylinesInformation.map((childInfo) => childInfo.isClosed);
      const childPolylines = hasChildAnnotations && childPolylinesInformation.map((childInfo) => childInfo.polyline);
      return {
        polyline: annotation.data.contour.polyline,
        isClosed: annotation.data.contour.closed,
        annotationUID: annotation.annotationUID,
        referencedImageId: annotation.metadata.referencedImageId,
        holesPolyline: childPolylines,
        holesUIDs: annotation.childAnnotationUIDs,
        holesClosed
      };
    });
    annotationUIDsInSegmentMap.set(index, annotations);
  });
  return { segmentIndices, annotationUIDsInSegmentMap };
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getPolylineMap.js
function closePolyline(polyline, closed2) {
  if (!polyline || polyline.length === 0) {
    return [];
  }
  if (!closed2) {
    return [...polyline];
  }
  const firstPoint = polyline[0];
  const lastPoint = polyline[polyline.length - 1];
  const isAlreadyClosed = firstPoint[0] === lastPoint[0] && firstPoint[1] === lastPoint[1] && firstPoint[2] === lastPoint[2];
  if (isAlreadyClosed) {
    return [...polyline];
  }
  return [...polyline, firstPoint];
}
function getPolylinesMap(contourRepresentationData, segmentIndex) {
  const { annotationUIDsInSegmentMap } = getAnnotationMapFromSegmentation(contourRepresentationData);
  if (!annotationUIDsInSegmentMap.has(segmentIndex)) {
    console.warn(`No contour information found for segmentIndex ${segmentIndex}`);
    return;
  }
  const polylines = /* @__PURE__ */ new Map();
  const annotationsInfo = annotationUIDsInSegmentMap.get(segmentIndex);
  for (const annotationInfo of annotationsInfo) {
    polylines.set(annotationInfo.annotationUID, closePolyline(annotationInfo.polyline, annotationInfo.isClosed));
    for (let i = 0; i < annotationInfo.holesUIDs?.length; i++) {
      polylines.set(annotationInfo.holesUIDs[i], closePolyline(annotationInfo.holesPolyline[i], annotationInfo.holesClosed[i]));
    }
  }
  return polylines;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/extractSegmentPolylines.js
function extractSegmentPolylines(segmentationId, segmentIndex) {
  const viewports = getViewportsAssociatedToSegmentation(segmentationId);
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    return;
  }
  if (!segmentation.representationData.Contour) {
    return;
  }
  const contourRepresentationData = segmentation.representationData.Contour;
  const { annotationUIDsMap } = contourRepresentationData;
  if (!annotationUIDsMap) {
    return;
  }
  if (!annotationUIDsMap.get(segmentIndex)) {
    return;
  }
  const polyLinesMap = getPolylinesMap(contourRepresentationData, segmentIndex);
  if (!polyLinesMap) {
    return;
  }
  const keys = Array.from(polyLinesMap?.keys());
  const polylinesCanvasMap = /* @__PURE__ */ new Map();
  for (const key of keys) {
    const annotation = getAnnotation(key);
    const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);
    polylinesCanvasMap.set(key, convertContourPolylineToCanvasSpace(polyLinesMap.get(key), viewport));
  }
  return polylinesCanvasMap;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/decimateContours.js
function decimateContours(segmentationId, segmentIndex, options = { epsilon: 0.1 }) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn(`Invalid segmentation given ${segmentationId}`);
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.warn(`No contour representation found for segmentation ${segmentationId}`);
    return;
  }
  const viewports = getViewportsAssociatedToSegmentation(segmentationId);
  if (!viewports) {
    console.warn("No viewport associated to the segmentation found");
    return;
  }
  const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);
  if (!polylinesCanvasMap) {
    console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);
    return;
  }
  const keys = Array.from(polylinesCanvasMap?.keys());
  for (const annotationUID of keys) {
    const annotation = getAnnotation(annotationUID);
    if (!annotation) {
      continue;
    }
    const polylineCanvas = polylinesCanvasMap.get(annotationUID);
    const decimatedPolyline2D = decimate(polylineCanvas, options.epsilon);
    const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);
    if (viewport) {
      annotation.data.contour.polyline = decimatedPolyline2D.map((point2D) => viewport.canvasToWorld(point2D));
      invalidateAnnotation(annotation);
    }
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeCompleteContourAnnotation.js
function removeCompleteContourAnnotation(annotation) {
  if (!annotation) {
    return;
  }
  if (annotation.parentAnnotationUID) {
    clearParentAnnotation(annotation);
  }
  removeAnnotation(annotation.annotationUID);
  removeContourSegmentationAnnotation(annotation);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourHoles.js
function removeContourHoles(segmentationId, segmentIndex) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn(`Invalid segmentation given ${segmentationId}`);
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.warn(`No contour representation found for segmentation ${segmentationId}`);
    return;
  }
  const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);
  if (!polylinesCanvasMap) {
    console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);
    return;
  }
  const keys = Array.from(polylinesCanvasMap?.keys());
  const polylines = keys.map((key) => polylinesCanvasMap.get(key));
  const holeDetectionResults = findContourHoles(polylines);
  if (holeDetectionResults?.length > 0) {
    holeDetectionResults.forEach((hole) => {
      hole.holeIndexes.forEach((index) => {
        const annotation = getAnnotation(keys[index]);
        removeCompleteContourAnnotation(annotation);
      });
    });
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourIslands.js
function removeContourIslands(segmentationId, segmentIndex, options = { threshold: 3 }) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn(`Invalid segmentation given ${segmentationId}`);
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.warn(`No contour representation found for segmentation ${segmentationId}`);
    return;
  }
  const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);
  if (!polylinesCanvasMap) {
    console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);
    return;
  }
  const keys = Array.from(polylinesCanvasMap?.keys());
  const polylines = keys.map((key) => polylinesCanvasMap.get(key));
  const islands = findIslands(polylines, options.threshold);
  if (islands?.length > 0) {
    islands.forEach((index) => {
      const annotation = getAnnotation(keys[index]);
      removeCompleteContourAnnotation(annotation);
    });
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/smoothContours.js
function smoothContours(segmentationId, segmentIndex, options = { knotsRatioPercentage: 30 }) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn(`Invalid segmentation given ${segmentationId}`);
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.warn(`No contour representation found for segmentation ${segmentationId}`);
    return;
  }
  const contourRepresentationData = segmentation.representationData.Contour;
  const { annotationUIDsMap } = contourRepresentationData;
  if (!annotationUIDsMap) {
    console.warn(`No contours found for segmentation ${segmentationId}`);
    return;
  }
  if (!annotationUIDsMap.has(segmentIndex)) {
    console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);
    return;
  }
  const annotationList = annotationUIDsMap.get(segmentIndex);
  annotationList.forEach((annotationUID) => {
    const annotation = getAnnotation(annotationUID);
    if (!annotation) {
      return;
    }
    const polyline = annotation.data.contour.polyline;
    if (!polyline || polyline.length < 3) {
      return;
    }
    const smoothedPolyline = interpolateSegmentPoints(polyline, 0, polyline.length - 1, options.knotsRatioPercentage);
    annotation.data.contour.polyline = smoothedPolyline;
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/convertContourHoles.js
function convertContourHoles(segmentationId, segmentIndex, targetSegmentationId, targetSegmentationIndex) {
  const segmentation = getSegmentation(segmentationId);
  if (!segmentation) {
    console.warn(`Invalid segmentation given ${segmentationId}`);
    return;
  }
  if (!segmentation.representationData.Contour) {
    console.warn(`No contour representation found for segmentation ${segmentationId}`);
    return;
  }
  const { annotationUIDsMap } = segmentation?.representationData.Contour || {};
  if (!annotationUIDsMap) {
    console.warn(`No annotation map found for segmentation ${segmentationId}`);
    return;
  }
  const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);
  if (!annotationsUIDsSet) {
    console.warn(`Segmentation index ${segmentIndex} has no annotations in segmentation ${segmentationId}`);
    return;
  }
  let targetUIDsSet;
  if (targetSegmentationId && typeof targetSegmentationIndex === "number") {
    const targetSegmentation = getSegmentation(targetSegmentationId);
    if (!targetSegmentation) {
      console.warn(`Target segmentation ${targetSegmentationId} does not exist.`);
      return;
    }
    if (!targetSegmentation.representationData.Contour) {
      console.warn(`No contour representation found for target segmentation ${targetSegmentationId}`);
      return;
    }
    targetUIDsSet = targetSegmentation.representationData.Contour.annotationUIDsMap.get(targetSegmentationIndex);
    if (!targetUIDsSet) {
      targetUIDsSet = /* @__PURE__ */ new Set();
      targetSegmentation.representationData.Contour.annotationUIDsMap.set(targetSegmentationIndex, targetUIDsSet);
    }
  }
  const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);
  if (!polylinesCanvasMap) {
    console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);
    return;
  }
  const keys = Array.from(polylinesCanvasMap?.keys());
  const polylines = keys.map((key) => polylinesCanvasMap.get(key));
  const holeDetectionResults = findContourHoles(polylines);
  if (holeDetectionResults?.length > 0) {
    holeDetectionResults.forEach((hole) => {
      hole.holeIndexes.forEach((index) => {
        const annotation = getAnnotation(keys[index]);
        clearParentAnnotation(annotation);
        if (targetSegmentationId && typeof targetSegmentationIndex === "number") {
          targetUIDsSet.add(annotation.annotationUID);
        } else {
          annotationsUIDsSet.add(annotation.annotationUID);
        }
      });
    });
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/convertStackToVolumeLabelmap.js
async function convertStackToVolumeLabelmap(args) {
  const result = internalConvertStackToVolumeLabelmap(args);
  triggerSegmentationModified(args.segmentationId);
  return result;
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/clearSegmentValue.js
function clearSegmentValue(segmentationId, segmentIndex) {
  const segmentation = getSegmentation(segmentationId);
  if (segmentation.representationData.Labelmap) {
    const { representationData } = segmentation;
    const labelmapData = representationData.Labelmap;
    if ("imageIds" in labelmapData || "volumeId" in labelmapData) {
      const items = "imageIds" in labelmapData ? labelmapData.imageIds.map((imageId) => cache_default.getImage(imageId)) : [cache_default.getVolume(labelmapData.volumeId)];
      items.forEach((item) => {
        if (!item) {
          return;
        }
        const { voxelManager } = item;
        voxelManager.forEach(({ value, index }) => {
          if (value === segmentIndex) {
            voxelManager.setAtIndex(index, 0);
          }
        });
      });
    }
    triggerSegmentationDataModified(segmentationId);
  } else {
    throw new Error("Invalid segmentation type, only labelmap is supported right now");
  }
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/removeSegmentAnnotations.js
function removeContourSegmentAnnotations(segmentationId, segmentIndex) {
  const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);
  if (!annotationUIDsMap) {
    return;
  }
  const annotationUIDs = annotationUIDsMap.get(segmentIndex);
  if (!annotationUIDs) {
    return;
  }
  annotationUIDs.forEach((annotationUID) => {
    const annotation = getAnnotation(annotationUID);
    if (isContourSegmentationAnnotation(annotation)) {
      removeCompleteContourAnnotation(annotation);
    }
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegment.js
function removeSegment(segmentationId, segmentIndex, options = {
  setNextSegmentAsActive: true
}) {
  const segmentation = getSegmentation(segmentationId);
  if (segmentation?.representationData.Contour) {
    removeContourSegmentAnnotations(segmentationId, segmentIndex);
  } else if (segmentation?.representationData.Labelmap) {
    clearSegmentValue(segmentationId, segmentIndex);
  } else {
    throw new Error("Invalid segmentation type");
  }
  const isThisSegmentActive = getActiveSegmentIndex(segmentationId) === segmentIndex;
  const { segments } = segmentation;
  delete segments[segmentIndex];
  const updatedSegments = {
    ...segments
  };
  updateSegmentations([
    {
      segmentationId,
      payload: {
        segments: updatedSegments
      }
    }
  ]);
  if (isThisSegmentActive && options.setNextSegmentAsActive) {
    const segmentIndices = Object.keys(segments).map(Number).sort((a, b) => a - b);
    const currentIndex = segmentIndices.indexOf(segmentIndex);
    const nextSegmentIndex = segmentIndices[currentIndex + 1];
    const previousSegmentIndex = segmentIndices[currentIndex - 1];
    if (nextSegmentIndex !== void 0) {
      setActiveSegmentIndex(segmentationId, nextSegmentIndex);
    } else if (previousSegmentIndex !== void 0) {
      setActiveSegmentIndex(segmentationId, previousSegmentIndex);
    }
  }
  const viewportIds = getViewportIdsWithSegmentation(segmentationId);
  viewportIds.forEach((viewportId) => {
    const representations = getSegmentationRepresentations(viewportId, {
      segmentationId
    });
    representations.forEach((representation) => {
      delete representation.segments[segmentIndex];
    });
  });
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getLabelmapImageIds.js
function getLabelmapImageIds(segmentationId) {
  const segmentationStateManager = defaultSegmentationStateManager;
  const segmentation = getSegmentation(segmentationId);
  return segmentationStateManager.getLabelmapImageIds(segmentation.representationData);
}

// node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js
var helpers = {
  clearSegmentValue,
  convertStackToVolumeLabelmap,
  computeVolumeLabelmapFromStack,
  convertVolumeToStackLabelmap
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/index.js
var splines_exports = {};
__export(splines_exports, {
  BSpline: () => BSpline,
  CardinalSpline: () => CardinalSpline,
  CatmullRomSpline: () => CatmullRomSpline,
  CubicSpline: () => CubicSpline,
  LinearSpline: () => LinearSpline,
  QuadraticBezier: () => QuadraticBezier,
  QuadraticSpline: () => QuadraticSpline,
  Spline: () => Spline
});

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js
var Spline = class {
  constructor(props) {
    this._controlPoints = [];
    this._invalidated = false;
    this._length = 0;
    this._controlPoints = [];
    this._resolution = props?.resolution ?? 20;
    this._fixedResolution = props?.fixedResolution ?? false;
    this._closed = props?.closed ?? false;
    this._invalidated = true;
  }
  get controlPoints() {
    return this._controlPoints;
  }
  get numControlPoints() {
    return this._controlPoints.length;
  }
  get resolution() {
    return this._resolution;
  }
  set resolution(resolution) {
    if (this._fixedResolution || this._resolution === resolution) {
      return;
    }
    this._resolution = resolution;
    this.invalidated = true;
  }
  get fixedResolution() {
    return this._fixedResolution;
  }
  get closed() {
    return this._closed;
  }
  set closed(closed2) {
    if (this._closed === closed2) {
      return;
    }
    this._closed = closed2;
    this.invalidated = true;
  }
  get aabb() {
    this._update();
    return this._aabb;
  }
  get length() {
    this._update();
    return this._length;
  }
  get invalidated() {
    return this._invalidated;
  }
  set invalidated(invalidated) {
    this._invalidated = invalidated;
  }
  hasTangentPoints() {
    return false;
  }
  addControlPoint(point) {
    this._controlPoints.push([point[0], point[1]]);
    this.invalidated = true;
  }
  addControlPoints(points) {
    points.forEach((point) => this.addControlPoint(point));
  }
  addControlPointAtU(u) {
    const lineSegment = this._getLineSegmentAt(u);
    const { start: startPoint, end: endPoint } = lineSegment.points;
    const curveSegmentIndex = Math.floor(u);
    const curveSegment = this._curveSegments[curveSegmentIndex];
    const t = u - Math.floor(curveSegmentIndex);
    const controlPointPos = [
      startPoint[0] + t * (endPoint[0] - startPoint[0]),
      startPoint[1] + t * (endPoint[1] - startPoint[1])
    ];
    const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;
    this._controlPoints.splice(insertIndex, 0, controlPointPos);
    this.invalidated = true;
    return {
      index: insertIndex,
      point: controlPointPos
    };
  }
  deleteControlPointByIndex(index) {
    const minControlPoints = this._closed ? 3 : 1;
    const canDelete = index >= 0 && index < this._controlPoints.length && this._controlPoints.length > minControlPoints;
    if (!canDelete) {
      return false;
    }
    this._controlPoints.splice(index, 1);
    this.invalidated = true;
    return true;
  }
  clearControlPoints() {
    this._controlPoints = [];
    this.invalidated = true;
  }
  setControlPoints(points) {
    this.clearControlPoints();
    this.addControlPoints(points);
  }
  updateControlPoint(index, newControlPoint) {
    if (index < 0 || index >= this._controlPoints.length) {
      throw new Error("Index out of bounds");
    }
    this._controlPoints[index] = [...newControlPoint];
    this.invalidated = true;
  }
  getControlPoints() {
    return this._controlPoints.map((controlPoint) => [
      controlPoint[0],
      controlPoint[1]
    ]);
  }
  getClosestControlPoint(point) {
    const controlPoints = this._controlPoints;
    let minSquaredDist = Infinity;
    let closestPointIndex = -1;
    for (let i = 0, len = controlPoints.length; i < len; i++) {
      const controlPoint = controlPoints[i];
      const dx = point[0] - controlPoint[0];
      const dy = point[1] - controlPoint[1];
      const squaredDist = dx * dx + dy * dy;
      if (squaredDist < minSquaredDist) {
        minSquaredDist = squaredDist;
        closestPointIndex = i;
      }
    }
    return {
      index: closestPointIndex,
      point: closestPointIndex === -1 ? void 0 : [...controlPoints[closestPointIndex]],
      distance: Math.sqrt(minSquaredDist)
    };
  }
  getClosestControlPointWithinDistance(point, maxDist) {
    const closestControlPoint = this.getClosestControlPoint(point);
    return closestControlPoint.distance <= maxDist ? closestControlPoint : void 0;
  }
  getClosestPoint(point) {
    this._update();
    const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);
    if (!curveSegmentsDistInfo.length) {
      return;
    }
    curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);
    let closestPoint;
    let closestPointCurveSegmentIndex = -1;
    let minDistSquared = Infinity;
    let minDistCurveSegment;
    let minDistLineSegment;
    for (let i = 0; i < curveSegmentsDistInfo.length; i++) {
      const curveSegmentDistInfo = curveSegmentsDistInfo[i];
      if (curveSegmentDistInfo.distanceSquared > minDistSquared) {
        continue;
      }
      const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;
      const { lineSegments } = curveSegment;
      for (let j = 0; j < lineSegments.length; j++) {
        const lineSegment = lineSegments[j];
        const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = line_exports.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);
        if (lineSegDistSquared < minDistSquared) {
          minDistLineSegment = lineSegment;
          closestPointCurveSegmentIndex = curveSegmentIndex;
          minDistCurveSegment = curveSegmentDistInfo.curveSegment;
          closestPoint = lineSegPoint;
          minDistSquared = lineSegDistSquared;
        }
      }
    }
    const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength + point_exports.distanceToPoint(minDistLineSegment.points.start, closestPoint);
    const t = curveSegmentLengthToPoint / minDistCurveSegment.length;
    const u = closestPointCurveSegmentIndex + t;
    return {
      point: closestPoint,
      uValue: u,
      distance: Math.sqrt(minDistSquared)
    };
  }
  getClosestPointOnControlPointLines(point) {
    const linePoints = [...this._controlPoints];
    if (this._closed) {
      linePoints.push(this._controlPoints[0]);
    }
    if (!linePoints.length) {
      return;
    }
    let closestPoint;
    let minDistSquared = Infinity;
    let startPoint = linePoints[0];
    for (let i = 1, len = linePoints.length; i < len; i++) {
      const endPoint = linePoints[i];
      const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = line_exports.distanceToPointSquaredInfo(startPoint, endPoint, point);
      if (lineSegDistSquared < minDistSquared) {
        closestPoint = lineSegPoint;
        minDistSquared = lineSegDistSquared;
      }
      startPoint = endPoint;
    }
    return {
      point: closestPoint,
      distance: Math.sqrt(minDistSquared)
    };
  }
  getPolylinePoints() {
    this._update();
    return this._convertCurveSegmentsToPolyline(this._curveSegments);
  }
  getPreviewPolylinePoints(controlPointPreview, closeDistance) {
    if (this._closed) {
      return [];
    }
    this._update();
    const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);
    const closeSpline = closestControlPoint?.index === 0;
    const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);
    return previewCurveSegments?.length ? this._convertCurveSegmentsToPolyline(previewCurveSegments) : [];
  }
  isPointNearCurve(point, maxDist) {
    this._update();
    const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);
    const maxDistSquared = maxDist * maxDist;
    for (let i = 0; i < curveSegments.length; i++) {
      const { lineSegments } = curveSegments[i];
      for (let j = 0; j < lineSegments.length; j++) {
        const lineSegment = lineSegments[j];
        const lineDistSquared = line_exports.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);
        if (lineDistSquared <= maxDistSquared) {
          return true;
        }
      }
    }
    return false;
  }
  containsPoint(point) {
    this._update();
    const controlPoints = this._controlPoints;
    if (controlPoints.length < 3) {
      return false;
    }
    const curveSegments = [...this._curveSegments];
    const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();
    if (closingCurveSegment) {
      curveSegments.push(closingCurveSegment);
    }
    let numIntersections = 0;
    for (let i = 0; i < curveSegments.length; i++) {
      const curveSegment = curveSegments[i];
      const { aabb: curveSegAABB } = curveSegment;
      const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX && point[1] >= curveSegAABB.minY && point[1] < curveSegAABB.maxY;
      if (!mayIntersectCurveSegment) {
        continue;
      }
      const { lineSegments } = curveSegment;
      for (let i2 = 0; i2 < lineSegments.length; i2++) {
        const lineSegment = lineSegments[i2];
        const { aabb: lineSegmentAABB } = lineSegment;
        const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX && point[1] >= lineSegmentAABB.minY && point[1] < lineSegmentAABB.maxY;
        if (mayIntersectLineSegment) {
          const { start: p1, end: p2 } = lineSegment.points;
          const isVerticalLine = p1[0] === p2[0];
          const xIntersection = (point[1] - p1[1]) * (p2[0] - p1[0]) / (p2[1] - p1[1]) + p1[0];
          numIntersections += isVerticalLine || point[0] <= xIntersection ? 1 : 0;
        }
      }
    }
    return numIntersections % 2 === 1;
  }
  _update() {
    if (!this._invalidated) {
      return;
    }
    const curveSegments = this.getSplineCurves();
    let length = 0;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0, len = curveSegments.length; i < len; i++) {
      const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];
      minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;
      minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;
      maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;
      maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;
      length += curveSegLength;
    }
    this._curveSegments = curveSegments;
    this._aabb = { minX, minY, maxX, maxY };
    this._length = length;
    this._invalidated = false;
  }
  _convertCurveSegmentsToPolyline(curveSegments) {
    this._update();
    const polylinePoints = [];
    curveSegments.forEach(({ lineSegments }, curveSegIndex) => {
      lineSegments.forEach((lineSegment, lineSegIndex) => {
        if (curveSegIndex === 0 && lineSegIndex === 0) {
          polylinePoints.push([...lineSegment.points.start]);
        }
        polylinePoints.push([...lineSegment.points.end]);
      });
    });
    return polylinePoints;
  }
  _getCurveSegmmentsDistanceSquaredInfo(point) {
    this._update();
    const curveSegmentsDistanceSquared = [];
    const { _curveSegments: curveSegments } = this;
    for (let i = 0; i < curveSegments.length; i++) {
      const curveSegment = curveSegments[i];
      const distanceSquared = aabb_exports.distanceToPointSquared(curveSegment.aabb, point);
      curveSegmentsDistanceSquared.push({
        curveSegmentIndex: i,
        curveSegment,
        distanceSquared
      });
    }
    return curveSegmentsDistanceSquared;
  }
  _getCurveSegmmentsWithinDistance(point, maxDist) {
    this._update();
    const maxDistSquared = maxDist * maxDist;
    if (aabb_exports.distanceToPointSquared(this.aabb, point) > maxDistSquared) {
      return [];
    }
    const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);
    const curveSegmentsWithinRange = [];
    for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {
      const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];
      if (curveSegmentDistSquared <= maxDistSquared) {
        curveSegmentsWithinRange.push(curveSegment);
      }
    }
    return curveSegmentsWithinRange;
  }
  _getLineSegmentAt(u) {
    this._update();
    const curveSegmentIndex = Math.floor(u);
    const t = u - curveSegmentIndex;
    const curveSegment = this._curveSegments[curveSegmentIndex];
    const { lineSegments } = curveSegment;
    const pointLength = curveSegment.length * t;
    for (let i = 0; i < lineSegments.length; i++) {
      const lineSegment = lineSegments[i];
      const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;
      if (pointLength >= lineSegment.previousLineSegmentsLength && pointLength <= lengthEnd) {
        return lineSegment;
      }
    }
  }
  _getClosingCurveSegmentWithStraightLineSegment() {
    if (this.closed) {
      return;
    }
    const controlPoints = this._controlPoints;
    const startControlPoint = controlPoints[0];
    const endControlPoint = controlPoints[controlPoints.length - 1];
    const closingLineSegment = {
      points: {
        start: [...startControlPoint],
        end: [...endControlPoint]
      },
      aabb: {
        minX: Math.min(startControlPoint[0], endControlPoint[0]),
        minY: Math.min(startControlPoint[1], endControlPoint[1]),
        maxX: Math.max(startControlPoint[0], endControlPoint[0]),
        maxY: Math.max(startControlPoint[1], endControlPoint[1])
      }
    };
    return {
      aabb: {
        minX: closingLineSegment.aabb.minX,
        minY: closingLineSegment.aabb.minY,
        maxX: closingLineSegment.aabb.maxX,
        maxY: closingLineSegment.aabb.maxY
      },
      lineSegments: [closingLineSegment]
    };
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js
var MAX_U_ERROR = 1e-8;
var CubicSpline = class extends Spline {
  getPreviewCurveSegments(controlPointPreview, closeSpline) {
    const previewNumCurveSegments = this._getNumCurveSegments() + 1;
    const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);
    const endCurveSegIndex = closeSpline ? previewNumCurveSegments : previewNumCurveSegments - 1;
    const transformMatrix = this.getTransformMatrix();
    const controlPoints = [...this.controlPoints];
    const curveSegments = [];
    if (!closeSpline) {
      controlPoints.push(controlPointPreview);
    }
    for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {
      const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);
      curveSegments.push(curveSegment);
    }
    return curveSegments;
  }
  getSplineCurves() {
    const numCurveSegments = this._getNumCurveSegments();
    const curveSegments = new Array(numCurveSegments);
    if (numCurveSegments <= 0) {
      return [];
    }
    const transformMatrix = this.getTransformMatrix();
    let previousCurveSegmentsLength = 0;
    for (let i = 0; i < numCurveSegments; i++) {
      const curveSegment = this._getCurveSegment(i, transformMatrix);
      curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;
      curveSegments[i] = curveSegment;
      previousCurveSegmentsLength += curveSegment.length;
    }
    return curveSegments;
  }
  _getNumCurveSegments(controlPoints = this.controlPoints, closed2 = this.closed) {
    return closed2 ? controlPoints.length : Math.max(0, controlPoints.length - 1);
  }
  _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed2 = this.closed) {
    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed2);
    const uInt = Math.floor(u);
    let curveSegmentIndex = uInt % numCurveSegments;
    const t = u - uInt;
    const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;
    if (curveSegmentIndexOutOfBounds) {
      if (this.closed) {
        curveSegmentIndex = (numCurveSegments + curveSegmentIndex) % numCurveSegments;
      } else {
        return;
      }
    }
    const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed2);
    const tt = t * t;
    const ttt = tt * t;
    const tValues = vec4_exports.fromValues(1, t, tt, ttt);
    const qValues = vec4_exports.transformMat4(vec4_exports.create(), tValues, transformMatrix);
    return [
      vec4_exports.dot(qValues, vec4_exports.fromValues(p0[0], p1[0], p2[0], p3[0])),
      vec4_exports.dot(qValues, vec4_exports.fromValues(p0[1], p1[1], p2[1], p3[1]))
    ];
  }
  _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed2 = this.closed) {
    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed2);
    const p1Index = curveSegmentIndex;
    const p0Index = p1Index - 1;
    const p2Index = closed2 ? (p1Index + 1) % numCurveSegments : p1Index + 1;
    const p3Index = p2Index + 1;
    const p1 = controlPoints[p1Index];
    const p2 = controlPoints[p2Index];
    let p0;
    let p3;
    if (p0Index >= 0) {
      p0 = controlPoints[p0Index];
    } else {
      p0 = closed2 ? controlPoints[controlPoints.length - 1] : point_exports.mirror(p2, p1);
    }
    if (p3Index < controlPoints.length) {
      p3 = controlPoints[p3Index];
    } else {
      p3 = closed2 ? controlPoints[0] : point_exports.mirror(p1, p2);
    }
    return { p0, p1, p2, p3 };
  }
  _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed2 = this.closed) {
    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed2);
    const numLineSegments = this.resolution + 1;
    const inc = 1 / numLineSegments;
    const minU = curveSegmentIndex;
    let maxU = minU + 1;
    if (!closed2 && curveSegmentIndex === numCurveSegments - 1) {
      maxU -= MAX_U_ERROR;
    }
    const lineSegments = [];
    let startPoint;
    let endPoint;
    let previousLineSegmentsLength = 0;
    for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {
      u = u > maxU ? maxU : u;
      const point = this._getPoint(u, transformMatrix, controlPoints, closed2);
      if (!i) {
        startPoint = point;
        continue;
      }
      endPoint = point;
      const dx = endPoint[0] - startPoint[0];
      const dy = endPoint[1] - startPoint[1];
      const length = Math.sqrt(dx ** 2 + dy ** 2);
      const aabb = {
        minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],
        maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],
        minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],
        maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1]
      };
      lineSegments.push({
        points: {
          start: startPoint,
          end: endPoint
        },
        aabb,
        length,
        previousLineSegmentsLength
      });
      startPoint = endPoint;
      previousLineSegmentsLength += length;
    }
    return lineSegments;
  }
  _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed2 = this.closed) {
    const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed2);
    const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed2);
    let curveSegmentLength = 0;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {
      minX = Math.min(minX, lineSegAABB.minX);
      minY = Math.min(minY, lineSegAABB.minY);
      maxX = Math.max(maxX, lineSegAABB.maxX);
      maxY = Math.max(maxY, lineSegAABB.maxY);
      curveSegmentLength += lineSegLength;
    });
    return {
      controlPoints: { p0, p1, p2, p3 },
      aabb: { minX, minY, maxX, maxY },
      length: curveSegmentLength,
      previousCurveSegmentsLength: 0,
      lineSegments
    };
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js
var TRANSFORM_MATRIX = mat4_exports.multiplyScalar(mat4_exports.create(), mat4_exports.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);
var BSpline = class extends CubicSpline {
  getTransformMatrix() {
    return TRANSFORM_MATRIX;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js
var CardinalSpline = class extends CubicSpline {
  constructor(props) {
    super(props);
    this._scale = props?.scale ?? 0.5;
    this._fixedScale = props?.fixedScale ?? false;
  }
  get scale() {
    return this._scale;
  }
  set scale(scale2) {
    if (this._fixedScale || this._scale === scale2) {
      return;
    }
    this._scale = scale2;
    this.invalidated = true;
  }
  get fixedScale() {
    return this._fixedScale;
  }
  getTransformMatrix() {
    const { scale: s } = this;
    const s2 = 2 * s;
    return [
      0,
      1,
      0,
      0,
      -s,
      0,
      s,
      0,
      s2,
      s - 3,
      3 - s2,
      -s,
      -s,
      2 - s,
      s - 2,
      s
    ];
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js
var CatmullRomSpline = class extends CardinalSpline {
  constructor() {
    super({ scale: 0.5, fixedScale: true });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js
var LinearSpline = class extends CardinalSpline {
  constructor() {
    super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticSpline.js
var QuadraticSpline = class extends Spline {
  getSplineCurves() {
    return [];
  }
  getLineSegments() {
    return [];
  }
  getPreviewCurveSegments(controlPointPreview, closeSpline) {
    return [];
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticBezier.js
var TRANSFORM_MATRIX2 = [
  1,
  0,
  0,
  -2,
  2,
  0,
  1,
  -2,
  1
];
var QuadraticBezier = class extends QuadraticSpline {
  hasTangentPoints() {
    return true;
  }
  getTransformMatrix() {
    return TRANSFORM_MATRIX2;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js
var PanTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      limitToViewport: false
    }
  }) {
    super(toolProps, defaultToolProps);
  }
  touchDragCallback(evt) {
    this._dragCallback(evt);
  }
  mouseDragCallback(evt) {
    this._dragCallback(evt);
  }
  _checkImageInViewport(viewport, deltaPointsCanvas) {
    const { canvas } = viewport;
    const ratio = window.devicePixelRatio;
    const viewportLeft = 0;
    const viewportRight = canvas.width / ratio;
    const viewportTop = 0;
    const viewportBottom = canvas.height / ratio;
    const defaultActor = viewport.getDefaultActor();
    const renderer = viewport.getRenderer();
    let bounds;
    if (defaultActor && utilities_exports.isImageActor(defaultActor)) {
      const imageData = defaultActor.actor.getMapper().getInputData();
      bounds = imageData.getBounds();
    } else {
      bounds = renderer.computeVisiblePropBounds();
    }
    const [imageLeft, imageTop] = viewport.worldToCanvas([
      bounds[0],
      bounds[2],
      bounds[4]
    ]);
    const [imageRight, imageBottom] = viewport.worldToCanvas([
      bounds[1],
      bounds[3],
      bounds[5]
    ]);
    const zoom = viewport.getZoom();
    if (zoom <= 1) {
      if (imageLeft + deltaPointsCanvas[0] < viewportLeft && deltaPointsCanvas[0] < 0 || imageRight + deltaPointsCanvas[0] > viewportRight && deltaPointsCanvas[0] > 0 || imageTop + deltaPointsCanvas[1] < viewportTop && deltaPointsCanvas[1] < 0 || imageBottom + deltaPointsCanvas[1] > viewportBottom && deltaPointsCanvas[1] > 0) {
        return false;
      }
    } else {
      if (imageLeft + deltaPointsCanvas[0] > viewportLeft && deltaPointsCanvas[0] > 0 || imageRight + deltaPointsCanvas[0] < viewportRight && deltaPointsCanvas[0] < 0 || imageTop + deltaPointsCanvas[1] > viewportTop && deltaPointsCanvas[1] > 0 || imageBottom + deltaPointsCanvas[1] < viewportBottom && deltaPointsCanvas[1] < 0) {
        return false;
      }
    }
    return true;
  }
  _dragCallback(evt) {
    const { element, deltaPoints } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const deltaPointsWorld = deltaPoints.world;
    const deltaPointsCanvas = deltaPoints.canvas;
    if (deltaPointsWorld[0] === 0 && deltaPointsWorld[1] === 0 && deltaPointsWorld[2] === 0) {
      return;
    }
    const viewport = enabledElement.viewport;
    const camera = viewport.getCamera();
    const { focalPoint, position } = camera;
    if (this.configuration.limitToViewport && !this._checkImageInViewport(viewport, deltaPointsCanvas)) {
      return;
    }
    const updatedPosition = [
      position[0] - deltaPointsWorld[0],
      position[1] - deltaPointsWorld[1],
      position[2] - deltaPointsWorld[2]
    ];
    const updatedFocalPoint = [
      focalPoint[0] - deltaPointsWorld[0],
      focalPoint[1] - deltaPointsWorld[1],
      focalPoint[2] - deltaPointsWorld[2]
    ];
    viewport.setCamera({
      focalPoint: updatedFocalPoint,
      position: updatedPosition
    });
    viewport.render();
  }
};
PanTool.toolName = "Pan";
var PanTool_default = PanTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js
var TrackballRotateTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      rotateIncrementDegrees: 2,
      rotateSampleDistanceFactor: 2
    }
  }) {
    super(toolProps, defaultToolProps);
    this._resizeObservers = /* @__PURE__ */ new Map();
    this._hasResolutionChanged = false;
    this.preMouseDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const actorEntry = viewport.getDefaultActor();
      const actor = actorEntry.actor;
      const mapper = actor.getMapper();
      const hasSampleDistance = "getSampleDistance" in mapper || "getCurrentSampleDistance" in mapper;
      if (!hasSampleDistance) {
        return true;
      }
      const originalSampleDistance = mapper.getSampleDistance();
      if (!this._hasResolutionChanged) {
        const { rotateSampleDistanceFactor } = this.configuration;
        mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);
        this._hasResolutionChanged = true;
        if (this.cleanUp !== null) {
          document.removeEventListener("mouseup", this.cleanUp);
        }
        this.cleanUp = () => {
          mapper.setSampleDistance(originalSampleDistance);
          viewport.render();
          this._hasResolutionChanged = false;
        };
        document.addEventListener("mouseup", this.cleanUp, { once: true });
      }
      return true;
    };
    this._getViewportsInfo = () => {
      const viewports = getToolGroup_default(this.toolGroupId).viewportsInfo;
      return viewports;
    };
    this.onSetToolActive = () => {
      const subscribeToElementResize = () => {
        const viewportsInfo = this._getViewportsInfo();
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
          if (!this._resizeObservers.has(viewportId)) {
            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };
            if (!viewport) {
              return;
            }
            const { element } = viewport;
            const resizeObserver = new ResizeObserver(() => {
              const element2 = getEnabledElementByIds(viewportId, renderingEngineId);
              if (!element2) {
                return;
              }
              const { viewport: viewport2 } = element2;
              const viewPresentation = viewport2.getViewPresentation();
              viewport2.resetCamera();
              viewport2.setViewPresentation(viewPresentation);
              viewport2.render();
            });
            resizeObserver.observe(element);
            this._resizeObservers.set(viewportId, resizeObserver);
          }
        });
      };
      subscribeToElementResize();
      this._viewportAddedListener = (evt) => {
        if (evt.detail.toolGroupId === this.toolGroupId) {
          subscribeToElementResize();
        }
      };
      eventTarget_default.addEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);
    };
    this.onSetToolDisabled = () => {
      this._resizeObservers.forEach((resizeObserver, viewportId) => {
        resizeObserver.disconnect();
        this._resizeObservers.delete(viewportId);
      });
      if (this._viewportAddedListener) {
        eventTarget_default.removeEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);
        this._viewportAddedListener = null;
      }
    };
    this.rotateCamera = (viewport, centerWorld, axis, angle) => {
      const vtkCamera = viewport.getVtkActiveCamera();
      const viewUp = vtkCamera.getViewUp();
      const focalPoint = vtkCamera.getFocalPoint();
      const position = vtkCamera.getPosition();
      const newPosition = [0, 0, 0];
      const newFocalPoint = [0, 0, 0];
      const newViewUp = [0, 0, 0];
      const transform = mat4_exports.identity(new Float32Array(16));
      mat4_exports.translate(transform, transform, centerWorld);
      mat4_exports.rotate(transform, transform, angle, axis);
      mat4_exports.translate(transform, transform, [
        -centerWorld[0],
        -centerWorld[1],
        -centerWorld[2]
      ]);
      vec3_exports.transformMat4(newPosition, position, transform);
      vec3_exports.transformMat4(newFocalPoint, focalPoint, transform);
      mat4_exports.identity(transform);
      mat4_exports.rotate(transform, transform, angle, axis);
      vec3_exports.transformMat4(newViewUp, viewUp, transform);
      viewport.setCamera({
        position: newPosition,
        viewUp: newViewUp,
        focalPoint: newFocalPoint
      });
    };
    this.touchDragCallback = this._dragCallback.bind(this);
    this.mouseDragCallback = this._dragCallback.bind(this);
  }
  _dragCallback(evt) {
    const { element, currentPoints, lastPoints } = evt.detail;
    const currentPointsCanvas = currentPoints.canvas;
    const lastPointsCanvas = lastPoints.canvas;
    const { rotateIncrementDegrees } = this.configuration;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    const width = element.clientWidth;
    const height = element.clientHeight;
    const normalizedPosition = [
      currentPointsCanvas[0] / width,
      currentPointsCanvas[1] / height
    ];
    const normalizedPreviousPosition = [
      lastPointsCanvas[0] / width,
      lastPointsCanvas[1] / height
    ];
    const center = [width * 0.5, height * 0.5];
    const centerWorld = viewport.canvasToWorld(center);
    const normalizedCenter = [0.5, 0.5];
    const radsq = (1 + Math.abs(normalizedCenter[0])) ** 2;
    const op = [normalizedPreviousPosition[0], 0, 0];
    const oe = [normalizedPosition[0], 0, 0];
    const opsq = op[0] ** 2;
    const oesq = oe[0] ** 2;
    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);
    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);
    const nop = [op[0], 0, lop];
    vtkMath.normalize(nop);
    const noe = [oe[0], 0, loe];
    vtkMath.normalize(noe);
    const dot2 = vtkMath.dot(nop, noe);
    if (Math.abs(dot2) > 1e-4) {
      const angleX = -2 * Math.acos(vtkMath.clampValue(dot2, -1, 1)) * Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) * rotateIncrementDegrees;
      const upVec = camera.viewUp;
      const atV = camera.viewPlaneNormal;
      const rightV = [0, 0, 0];
      const forwardV = [0, 0, 0];
      vtkMath.cross(upVec, atV, rightV);
      vtkMath.normalize(rightV);
      vtkMath.cross(atV, rightV, forwardV);
      vtkMath.normalize(forwardV);
      vtkMath.normalize(upVec);
      this.rotateCamera(viewport, centerWorld, forwardV, angleX);
      const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) * rotateIncrementDegrees;
      this.rotateCamera(viewport, centerWorld, rightV, angleY);
      viewport.render();
    }
  }
};
TrackballRotateTool.toolName = "TrackballRotate";
var TrackballRotateTool_default = TrackballRotateTool;

// node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js
function vtkSphereSource(publicAPI, model) {
  model.classHierarchy.push("vtkSphereSource");
  publicAPI.requestData = (inData, outData) => {
    if (model.deleted) {
      return;
    }
    let dataset = outData[0];
    const pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;
    dataset = vtkPolyData$1.newInstance();
    let numPoles = 0;
    let {
      thetaResolution
    } = model;
    let startTheta = model.startTheta < model.endTheta ? model.startTheta : model.endTheta;
    startTheta *= Math.PI / 180;
    let endTheta = model.endTheta > model.startTheta ? model.endTheta : model.startTheta;
    endTheta *= Math.PI / 180;
    let startPhi = model.startPhi < model.endPhi ? model.startPhi : model.endPhi;
    startPhi *= Math.PI / 180;
    let endPhi = model.endPhi > model.startPhi ? model.endPhi : model.startPhi;
    endPhi *= Math.PI / 180;
    if (Math.abs(startTheta - endTheta) < 2 * Math.PI) {
      ++thetaResolution;
    }
    const deltaTheta = (endTheta - startTheta) / model.thetaResolution;
    const jStart = model.startPhi <= 0 ? 1 : 0;
    const jEnd = model.phiResolution + (model.endPhi >= 180 ? -1 : 0);
    const numPts = model.phiResolution * thetaResolution + 2;
    const numPolys = model.phiResolution * 2 * model.thetaResolution;
    let pointIdx = 0;
    let points = macro.newTypedArray(pointDataType, numPts * 3);
    let normals = new Float32Array(numPts * 3);
    let cellLocation = 0;
    let polys = new Uint32Array(numPolys * 5);
    if (model.startPhi <= 0) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] + model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = 1;
      pointIdx++;
      numPoles++;
    }
    if (model.endPhi >= 180) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] - model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = -1;
      pointIdx++;
      numPoles++;
    }
    const phiResolution = model.phiResolution - numPoles;
    const deltaPhi = (endPhi - startPhi) / (model.phiResolution - 1);
    for (let i = 0; i < thetaResolution; i++) {
      const theta = startTheta + i * deltaTheta;
      for (let j = jStart; j < jEnd; j++) {
        const phi = startPhi + j * deltaPhi;
        const radius = model.radius * Math.sin(phi);
        normals[pointIdx * 3 + 0] = radius * Math.cos(theta);
        normals[pointIdx * 3 + 1] = radius * Math.sin(theta);
        normals[pointIdx * 3 + 2] = model.radius * Math.cos(phi);
        points[pointIdx * 3 + 0] = normals[pointIdx * 3 + 0] + model.center[0];
        points[pointIdx * 3 + 1] = normals[pointIdx * 3 + 1] + model.center[1];
        points[pointIdx * 3 + 2] = normals[pointIdx * 3 + 2] + model.center[2];
        let norm = Math.sqrt(normals[pointIdx * 3 + 0] * normals[pointIdx * 3 + 0] + normals[pointIdx * 3 + 1] * normals[pointIdx * 3 + 1] + normals[pointIdx * 3 + 2] * normals[pointIdx * 3 + 2]);
        norm = norm === 0 ? 1 : norm;
        normals[pointIdx * 3 + 0] /= norm;
        normals[pointIdx * 3 + 1] /= norm;
        normals[pointIdx * 3 + 2] /= norm;
        pointIdx++;
      }
    }
    const base = phiResolution * thetaResolution;
    if (Math.abs(startTheta - endTheta) < 2 * Math.PI) {
      --thetaResolution;
    }
    if (model.startPhi <= 0) {
      for (let i = 0; i < thetaResolution; i++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * i + numPoles;
        polys[cellLocation++] = phiResolution * (i + 1) % base + numPoles;
        polys[cellLocation++] = 0;
      }
    }
    if (model.endPhi >= 180) {
      const numOffset = phiResolution - 1 + numPoles;
      for (let i = 0; i < thetaResolution; i++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * i + numOffset;
        polys[cellLocation++] = numPoles - 1;
        polys[cellLocation++] = phiResolution * (i + 1) % base + numOffset;
      }
    }
    for (let i = 0; i < thetaResolution; i++) {
      for (let j = 0; j < phiResolution - 1; j++) {
        const a = phiResolution * i + j + numPoles;
        const b = a + 1;
        const c = (phiResolution * (i + 1) + j) % base + numPoles + 1;
        if (!model.latLongTessellation) {
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        } else {
          polys[cellLocation++] = 4;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        }
      }
    }
    points = points.subarray(0, pointIdx * 3);
    dataset.getPoints().setData(points, 3);
    normals = normals.subarray(0, pointIdx * 3);
    const normalArray = vtkDataArray$1.newInstance({
      name: "Normals",
      values: normals,
      numberOfComponents: 3
    });
    dataset.getPointData().setNormals(normalArray);
    polys = polys.subarray(0, cellLocation);
    dataset.getPolys().setData(polys, 1);
    outData[0] = dataset;
  };
}
var DEFAULT_VALUES = {
  radius: 0.5,
  latLongTessellation: false,
  thetaResolution: 8,
  startTheta: 0,
  endTheta: 360,
  phiResolution: 8,
  startPhi: 0,
  endPhi: 180,
  center: [0, 0, 0],
  pointType: "Float64Array"
};
function extend2(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["radius", "latLongTessellation", "thetaResolution", "startTheta", "endTheta", "phiResolution", "startPhi", "endPhi"]);
  macro.setGetArray(publicAPI, model, ["center"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkSphereSource(publicAPI, model);
}
var newInstance = macro.newInstance(extend2, "vtkSphereSource");
var vtkSphereSource$1 = {
  newInstance,
  extend: extend2
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingTool.js
var PLANEINDEX = {
  XMIN: 0,
  XMAX: 1,
  YMIN: 2,
  YMAX: 3,
  ZMIN: 4,
  ZMAX: 5
};
var SPHEREINDEX = {
  XMIN: 0,
  XMAX: 1,
  YMIN: 2,
  YMAX: 3,
  ZMIN: 4,
  ZMAX: 5,
  XMIN_YMIN_ZMIN: 6,
  XMIN_YMIN_ZMAX: 7,
  XMIN_YMAX_ZMIN: 8,
  XMIN_YMAX_ZMAX: 9,
  XMAX_YMIN_ZMIN: 10,
  XMAX_YMIN_ZMAX: 11,
  XMAX_YMAX_ZMIN: 12,
  XMAX_YMAX_ZMAX: 13
};
var VolumeCroppingTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    configuration: {
      showCornerSpheres: true,
      showHandles: true,
      showClippingPlanes: true,
      mobile: {
        enabled: false,
        opacity: 0.8
      },
      initialCropFactor: 0.08,
      sphereColors: {
        SAGITTAL: [1, 1, 0],
        CORONAL: [0, 1, 0],
        AXIAL: [1, 0, 0],
        CORNERS: [0, 0, 1]
      },
      sphereRadius: 8,
      grabSpherePixelDistance: 20,
      rotateIncrementDegrees: 2,
      rotateSampleDistanceFactor: 2
    }
  }) {
    super(toolProps, defaultToolProps);
    this._resizeObservers = /* @__PURE__ */ new Map();
    this._hasResolutionChanged = false;
    this.originalClippingPlanes = [];
    this.draggingSphereIndex = null;
    this.toolCenter = [0, 0, 0];
    this.cornerDragOffset = null;
    this.faceDragOffset = null;
    this.sphereStates = [];
    this.edgeLines = {};
    this.onSetToolConfiguration = () => {
      console.debug("Setting tool settoolconfiguration : volumeCropping");
    };
    this.onSetToolEnabled = () => {
      console.debug("Setting tool enabled: volumeCropping");
    };
    this.onCameraModified = (evt) => {
      const { element } = evt.currentTarget ? { element: evt.currentTarget } : evt.detail;
      const enabledElement = getEnabledElement(element);
      this._updateClippingPlanes(enabledElement.viewport);
      enabledElement.viewport.render();
    };
    this.preMouseDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const actorEntry = viewport.getDefaultActor();
      const actor = actorEntry.actor;
      const mapper = actor.getMapper();
      const mouseCanvas = [
        evt.detail.currentPoints.canvas[0],
        evt.detail.currentPoints.canvas[1]
      ];
      this.draggingSphereIndex = null;
      this.cornerDragOffset = null;
      this.faceDragOffset = null;
      for (let i = 0; i < this.sphereStates.length; ++i) {
        const sphereCanvas = viewport.worldToCanvas(this.sphereStates[i].point);
        const dist = Math.sqrt(Math.pow(mouseCanvas[0] - sphereCanvas[0], 2) + Math.pow(mouseCanvas[1] - sphereCanvas[1], 2));
        if (dist < this.configuration.grabSpherePixelDistance) {
          this.draggingSphereIndex = i;
          element.style.cursor = "grabbing";
          const sphereState = this.sphereStates[i];
          const mouseWorld = viewport.canvasToWorld(mouseCanvas);
          if (sphereState.isCorner) {
            this.cornerDragOffset = [
              sphereState.point[0] - mouseWorld[0],
              sphereState.point[1] - mouseWorld[1],
              sphereState.point[2] - mouseWorld[2]
            ];
            this.faceDragOffset = null;
          } else {
            const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];
            this.faceDragOffset = sphereState.point[axisIdx] - mouseWorld[axisIdx];
            this.cornerDragOffset = null;
          }
          return true;
        }
      }
      const hasSampleDistance = "getSampleDistance" in mapper || "getCurrentSampleDistance" in mapper;
      if (!hasSampleDistance) {
        return true;
      }
      const originalSampleDistance = mapper.getSampleDistance();
      if (!this._hasResolutionChanged) {
        const { rotateSampleDistanceFactor } = this.configuration;
        mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);
        this._hasResolutionChanged = true;
        if (this.cleanUp !== null) {
          document.removeEventListener("mouseup", this.cleanUp);
        }
        this.cleanUp = () => {
          mapper.setSampleDistance(originalSampleDistance);
          evt.target.style.cursor = "";
          if (this.draggingSphereIndex !== null) {
            const sphereState = this.sphereStates[this.draggingSphereIndex];
            const [viewport3D] = this._getViewportsInfo();
            const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);
            const viewport2 = renderingEngine.getViewport(viewport3D.viewportId);
            if (sphereState.isCorner) {
              this._updateCornerSpheres();
              this._updateFaceSpheresFromCorners();
              this._updateClippingPlanesFromFaceSpheres(viewport2);
            }
          }
          this.draggingSphereIndex = null;
          this.cornerDragOffset = null;
          this.faceDragOffset = null;
          viewport.render();
          this._hasResolutionChanged = false;
        };
        document.addEventListener("mouseup", this.cleanUp, { once: true });
      }
      return true;
    };
    this._onMouseMoveSphere = (evt) => {
      if (this.draggingSphereIndex === null) {
        return false;
      }
      const sphereState = this.sphereStates[this.draggingSphereIndex];
      if (!sphereState) {
        return false;
      }
      const { viewport, world } = this._getViewportAndWorldCoords(evt);
      if (!viewport || !world) {
        return false;
      }
      if (sphereState.isCorner) {
        const newCorner = this._calculateNewCornerPosition(world);
        this._updateSpherePosition(sphereState, newCorner);
        const axisFlags = this._parseCornerKey(sphereState.uid);
        this._updateRelatedCorners(sphereState, newCorner, axisFlags);
        this._updateFaceSpheresFromCorners();
        this._updateCornerSpheres();
      } else {
        const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];
        let newValue = world[axisIdx];
        if (this.faceDragOffset !== null) {
          newValue += this.faceDragOffset;
        }
        sphereState.point[axisIdx] = newValue;
        sphereState.sphereSource.setCenter(...sphereState.point);
        sphereState.sphereSource.modified();
        this._updateCornerSpheresFromFaces();
        this._updateFaceSpheresFromCorners();
        this._updateCornerSpheres();
      }
      this._updateClippingPlanesFromFaceSpheres(viewport);
      viewport.render();
      this._triggerToolChangedEvent(sphereState);
      return true;
    };
    this._onControlToolChange = (evt) => {
      const viewport = this._getViewport();
      if (!evt.detail.toolCenter) {
        triggerEvent(eventTarget_default, Events_default.VOLUMECROPPING_TOOL_CHANGED, {
          originalClippingPlanes: this.originalClippingPlanes,
          viewportId: viewport.id,
          renderingEngineId: viewport.renderingEngineId,
          seriesInstanceUID: this.seriesInstanceUID
        });
      } else {
        if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {
          return;
        }
        const isMin = evt.detail.handleType === "min";
        const toolCenter = isMin ? evt.detail.toolCenterMin : evt.detail.toolCenterMax;
        const normals = isMin ? [
          [1, 0, 0],
          [0, 1, 0],
          [0, 0, 1]
        ] : [
          [-1, 0, 0],
          [0, -1, 0],
          [0, 0, -1]
        ];
        const planeIndices = isMin ? [PLANEINDEX.XMIN, PLANEINDEX.YMIN, PLANEINDEX.ZMIN] : [PLANEINDEX.XMAX, PLANEINDEX.YMAX, PLANEINDEX.ZMAX];
        const sphereIndices = isMin ? [SPHEREINDEX.XMIN, SPHEREINDEX.YMIN, SPHEREINDEX.ZMIN] : [SPHEREINDEX.XMAX, SPHEREINDEX.YMAX, SPHEREINDEX.ZMAX];
        const axes = ["x", "y", "z"];
        const orientationAxes = [
          enums_exports.OrientationAxis.SAGITTAL,
          enums_exports.OrientationAxis.CORONAL,
          enums_exports.OrientationAxis.AXIAL
        ];
        for (let i = 0; i < 3; ++i) {
          const origin = [0, 0, 0];
          origin[i] = toolCenter[i];
          const plane = vtkPlane$1.newInstance({
            origin,
            normal: normals[i]
          });
          this.originalClippingPlanes[planeIndices[i]].origin = plane.getOrigin();
          this.sphereStates[sphereIndices[i]].point[i] = plane.getOrigin()[i];
          this.sphereStates[sphereIndices[i]].sphereSource.setCenter(...this.sphereStates[sphereIndices[i]].point);
          this.sphereStates[sphereIndices[i]].sphereSource.modified();
          const otherSphere = this.sphereStates.find((s, idx) => s.axis === axes[i] && idx !== sphereIndices[i]);
          const newCenter = (otherSphere.point[i] + plane.getOrigin()[i]) / 2;
          this.sphereStates.forEach((state8) => {
            if (!state8.isCorner && state8.axis !== axes[i] && !evt.detail.viewportOrientation.includes(orientationAxes[i])) {
              state8.point[i] = newCenter;
              state8.sphereSource.setCenter(state8.point);
              state8.sphereActor.getProperty().setColor(state8.color);
              state8.sphereSource.modified();
            }
          });
          const volumeActor = viewport.getDefaultActor()?.actor;
          if (volumeActor) {
            const mapper = volumeActor.getMapper();
            const clippingPlanes = mapper.getClippingPlanes();
            if (clippingPlanes) {
              clippingPlanes[planeIndices[i]].setOrigin(plane.getOrigin());
            }
          }
        }
        this._updateCornerSpheres();
        viewport.render();
      }
    };
    this._getViewportsInfo = () => {
      const viewports = getToolGroup_default(this.toolGroupId).viewportsInfo;
      return viewports;
    };
    this._initialize3DViewports = (viewportsInfo) => {
      if (!viewportsInfo || !viewportsInfo.length || !viewportsInfo[0]) {
        console.warn("VolumeCroppingTool: No viewportsInfo available for initialization of volumecroppingtool.");
        return;
      }
      const viewport = this._getViewport();
      const volumeActors = viewport.getActors();
      if (!volumeActors || volumeActors.length === 0) {
        console.warn("VolumeCroppingTool: No volume actors found in the viewport.");
        return;
      }
      const imageData = volumeActors[0].actor.getMapper().getInputData();
      if (!imageData) {
        console.warn("VolumeCroppingTool: No image data found for volume actor.");
        return;
      }
      this.seriesInstanceUID = imageData.seriesInstanceUID || "unknown";
      const worldBounds = imageData.getBounds();
      const cropFactor = this.configuration.initialCropFactor || 0.1;
      const xRange = worldBounds[1] - worldBounds[0];
      const yRange = worldBounds[3] - worldBounds[2];
      const zRange = worldBounds[5] - worldBounds[4];
      const xMin = worldBounds[0] + cropFactor * xRange;
      const xMax = worldBounds[1] - cropFactor * xRange;
      const yMin = worldBounds[2] + cropFactor * yRange;
      const yMax = worldBounds[3] - cropFactor * yRange;
      const zMin = worldBounds[4] + cropFactor * zRange;
      const zMax = worldBounds[5] - cropFactor * zRange;
      const planes = [];
      const planeXmin = vtkPlane$1.newInstance({
        origin: [xMin, 0, 0],
        normal: [1, 0, 0]
      });
      const planeXmax = vtkPlane$1.newInstance({
        origin: [xMax, 0, 0],
        normal: [-1, 0, 0]
      });
      const planeYmin = vtkPlane$1.newInstance({
        origin: [0, yMin, 0],
        normal: [0, 1, 0]
      });
      const planeYmax = vtkPlane$1.newInstance({
        origin: [0, yMax, 0],
        normal: [0, -1, 0]
      });
      const planeZmin = vtkPlane$1.newInstance({
        origin: [0, 0, zMin],
        normal: [0, 0, 1]
      });
      const planeZmax = vtkPlane$1.newInstance({
        origin: [0, 0, zMax],
        normal: [0, 0, -1]
      });
      const mapper = viewport.getDefaultActor().actor.getMapper();
      planes.push(planeXmin);
      planes.push(planeXmax);
      planes.push(planeYmin);
      planes.push(planeYmax);
      planes.push(planeZmin);
      planes.push(planeZmax);
      const originalPlanes = planes.map((plane) => ({
        origin: [...plane.getOrigin()],
        normal: [...plane.getNormal()]
      }));
      this.originalClippingPlanes = originalPlanes;
      const sphereXminPoint = [xMin, (yMax + yMin) / 2, (zMax + zMin) / 2];
      const sphereXmaxPoint = [xMax, (yMax + yMin) / 2, (zMax + zMin) / 2];
      const sphereYminPoint = [(xMax + xMin) / 2, yMin, (zMax + zMin) / 2];
      const sphereYmaxPoint = [(xMax + xMin) / 2, yMax, (zMax + zMin) / 2];
      const sphereZminPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMin];
      const sphereZmaxPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMax];
      const adaptiveRadius = this._calculateAdaptiveSphereRadius(Math.sqrt(xRange * xRange + yRange * yRange + zRange * zRange));
      this._addSphere(viewport, sphereXminPoint, "x", "min", null, adaptiveRadius);
      this._addSphere(viewport, sphereXmaxPoint, "x", "max", null, adaptiveRadius);
      this._addSphere(viewport, sphereYminPoint, "y", "min", null, adaptiveRadius);
      this._addSphere(viewport, sphereYmaxPoint, "y", "max", null, adaptiveRadius);
      this._addSphere(viewport, sphereZminPoint, "z", "min", null, adaptiveRadius);
      this._addSphere(viewport, sphereZmaxPoint, "z", "max", null, adaptiveRadius);
      const corners = [
        [xMin, yMin, zMin],
        [xMin, yMin, zMax],
        [xMin, yMax, zMin],
        [xMin, yMax, zMax],
        [xMax, yMin, zMin],
        [xMax, yMin, zMax],
        [xMax, yMax, zMin],
        [xMax, yMax, zMax]
      ];
      const cornerKeys = [
        "XMIN_YMIN_ZMIN",
        "XMIN_YMIN_ZMAX",
        "XMIN_YMAX_ZMIN",
        "XMIN_YMAX_ZMAX",
        "XMAX_YMIN_ZMIN",
        "XMAX_YMIN_ZMAX",
        "XMAX_YMAX_ZMIN",
        "XMAX_YMAX_ZMAX"
      ];
      for (let i = 0; i < corners.length; i++) {
        this._addSphere(viewport, corners[i], "corner", null, cornerKeys[i], adaptiveRadius);
      }
      const edgeCornerPairs = [
        ["XMIN_YMIN_ZMIN", "XMAX_YMIN_ZMIN"],
        ["XMIN_YMIN_ZMAX", "XMAX_YMIN_ZMAX"],
        ["XMIN_YMAX_ZMIN", "XMAX_YMAX_ZMIN"],
        ["XMIN_YMAX_ZMAX", "XMAX_YMAX_ZMAX"],
        ["XMIN_YMIN_ZMIN", "XMIN_YMAX_ZMIN"],
        ["XMIN_YMIN_ZMAX", "XMIN_YMAX_ZMAX"],
        ["XMAX_YMIN_ZMIN", "XMAX_YMAX_ZMIN"],
        ["XMAX_YMIN_ZMAX", "XMAX_YMAX_ZMAX"],
        ["XMIN_YMIN_ZMIN", "XMIN_YMIN_ZMAX"],
        ["XMIN_YMAX_ZMIN", "XMIN_YMAX_ZMAX"],
        ["XMAX_YMIN_ZMIN", "XMAX_YMIN_ZMAX"],
        ["XMAX_YMAX_ZMIN", "XMAX_YMAX_ZMAX"]
      ];
      edgeCornerPairs.forEach(([key1, key2], i) => {
        const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);
        const state22 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);
        if (state1 && state22) {
          const uid = `edge_${key1}_${key2}`;
          const { actor, source } = this._addLine3DBetweenPoints(viewport, state1.point, state22.point, [0.7, 0.7, 0.7], uid);
          this.edgeLines[uid] = { actor, source, key1, key2 };
        }
      });
      mapper.addClippingPlane(planeXmin);
      mapper.addClippingPlane(planeXmax);
      mapper.addClippingPlane(planeYmin);
      mapper.addClippingPlane(planeYmax);
      mapper.addClippingPlane(planeZmin);
      mapper.addClippingPlane(planeZmax);
      eventTarget_default.addEventListener(Events_default.VOLUMECROPPINGCONTROL_TOOL_CHANGED, (evt) => {
        this._onControlToolChange(evt);
      });
      viewport.render();
    };
    this._getViewportAndWorldCoords = (evt) => {
      const viewport = this._getViewport();
      const x = evt.detail.currentPoints.canvas[0];
      const y = evt.detail.currentPoints.canvas[1];
      const world = viewport.canvasToWorld([x, y]);
      return { viewport, world };
    };
    this._getViewport = () => {
      const [viewport3D] = this._getViewportsInfo();
      const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);
      return renderingEngine.getViewport(viewport3D.viewportId);
    };
    this._handleCornerSphereMovement = (sphereState, world, viewport) => {
      const newCorner = this._calculateNewCornerPosition(world);
      this._updateSpherePosition(sphereState, newCorner);
      const axisFlags = this._parseCornerKey(sphereState.uid);
      this._updateRelatedCorners(sphereState, newCorner, axisFlags);
      this._updateAfterCornerMovement(viewport);
    };
    this._handleFaceSphereMovement = (sphereState, world, viewport) => {
      const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];
      let newValue = world[axisIdx];
      if (this.faceDragOffset !== null) {
        newValue += this.faceDragOffset;
      }
      sphereState.point[axisIdx] = newValue;
      sphereState.sphereSource.setCenter(...sphereState.point);
      sphereState.sphereSource.modified();
      this._updateAfterFaceMovement(viewport);
    };
    this._calculateNewCornerPosition = (world) => {
      let newCorner = [world[0], world[1], world[2]];
      if (this.cornerDragOffset) {
        newCorner = [
          world[0] + this.cornerDragOffset[0],
          world[1] + this.cornerDragOffset[1],
          world[2] + this.cornerDragOffset[2]
        ];
      }
      return newCorner;
    };
    this._parseCornerKey = (uid) => {
      const cornerKey = uid.replace("corner_", "");
      return {
        isXMin: cornerKey.includes("XMIN"),
        isXMax: cornerKey.includes("XMAX"),
        isYMin: cornerKey.includes("YMIN"),
        isYMax: cornerKey.includes("YMAX"),
        isZMin: cornerKey.includes("ZMIN"),
        isZMax: cornerKey.includes("ZMAX")
      };
    };
    this._updateSpherePosition = (sphereState, newPosition) => {
      sphereState.point = newPosition;
      sphereState.sphereSource.setCenter(...newPosition);
      sphereState.sphereSource.modified();
    };
    this._updateRelatedCorners = (draggedSphere, newCorner, axisFlags) => {
      this.sphereStates.forEach((state8) => {
        if (!state8.isCorner || state8 === draggedSphere) {
          return;
        }
        const key = state8.uid.replace("corner_", "");
        const shouldUpdate = this._shouldUpdateCorner(key, axisFlags);
        if (shouldUpdate) {
          this._updateCornerCoordinates(state8, newCorner, key, axisFlags);
        }
      });
    };
    this._shouldUpdateCorner = (cornerKey, axisFlags) => {
      return axisFlags.isXMin && cornerKey.includes("XMIN") || axisFlags.isXMax && cornerKey.includes("XMAX") || axisFlags.isYMin && cornerKey.includes("YMIN") || axisFlags.isYMax && cornerKey.includes("YMAX") || axisFlags.isZMin && cornerKey.includes("ZMIN") || axisFlags.isZMax && cornerKey.includes("ZMAX");
    };
    this._updateCornerCoordinates = (state8, newCorner, cornerKey, axisFlags) => {
      if (axisFlags.isXMin && cornerKey.includes("XMIN") || axisFlags.isXMax && cornerKey.includes("XMAX")) {
        state8.point[0] = newCorner[0];
      }
      if (axisFlags.isYMin && cornerKey.includes("YMIN") || axisFlags.isYMax && cornerKey.includes("YMAX")) {
        state8.point[1] = newCorner[1];
      }
      if (axisFlags.isZMin && cornerKey.includes("ZMIN") || axisFlags.isZMax && cornerKey.includes("ZMAX")) {
        state8.point[2] = newCorner[2];
      }
      state8.sphereSource.setCenter(...state8.point);
      state8.sphereSource.modified();
    };
    this._updateAfterCornerMovement = (viewport) => {
      this._updateFaceSpheresFromCorners();
      this._updateCornerSpheres();
      this._updateClippingPlanesFromFaceSpheres(viewport);
    };
    this._updateAfterFaceMovement = (viewport) => {
      this._updateCornerSpheresFromFaces();
      this._updateClippingPlanesFromFaceSpheres(viewport);
    };
    this._triggerToolChangedEvent = (sphereState) => {
      triggerEvent(eventTarget_default, Events_default.VOLUMECROPPING_TOOL_CHANGED, {
        toolCenter: sphereState.point,
        axis: sphereState.isCorner ? "corner" : sphereState.axis,
        draggingSphereIndex: this.draggingSphereIndex,
        seriesInstanceUID: this.seriesInstanceUID
      });
    };
    this._onNewVolume = () => {
      const viewportsInfo = this._getViewportsInfo();
      this.originalClippingPlanes = [];
      this.sphereStates = [];
      this.edgeLines = {};
      this._initialize3DViewports(viewportsInfo);
    };
    this._rotateCamera = (viewport, centerWorld, axis, angle) => {
      const vtkCamera = viewport.getVtkActiveCamera();
      const viewUp = vtkCamera.getViewUp();
      const focalPoint = vtkCamera.getFocalPoint();
      const position = vtkCamera.getPosition();
      const newPosition = [0, 0, 0];
      const newFocalPoint = [0, 0, 0];
      const newViewUp = [0, 0, 0];
      const transform = mat4_exports.identity(new Float32Array(16));
      mat4_exports.translate(transform, transform, centerWorld);
      mat4_exports.rotate(transform, transform, angle, axis);
      mat4_exports.translate(transform, transform, [
        -centerWorld[0],
        -centerWorld[1],
        -centerWorld[2]
      ]);
      vec3_exports.transformMat4(newPosition, position, transform);
      vec3_exports.transformMat4(newFocalPoint, focalPoint, transform);
      mat4_exports.identity(transform);
      mat4_exports.rotate(transform, transform, angle, axis);
      vec3_exports.transformMat4(newViewUp, viewUp, transform);
      viewport.setCamera({
        position: newPosition,
        viewUp: newViewUp,
        focalPoint: newFocalPoint
      });
    };
    this.touchDragCallback = this._dragCallback.bind(this);
    this.mouseDragCallback = this._dragCallback.bind(this);
  }
  onSetToolActive() {
    if (this.sphereStates && this.sphereStates.length > 0) {
      if (this.configuration.showHandles) {
        this.setHandlesVisible(false);
        this.setClippingPlanesVisible(false);
      } else {
        this.setHandlesVisible(true);
        this.setClippingPlanesVisible(true);
      }
    } else {
      const viewportsInfo = this._getViewportsInfo();
      const subscribeToElementResize = () => {
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
          if (!this._resizeObservers.has(viewportId)) {
            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };
            if (!viewport) {
              return;
            }
            const { element } = viewport;
            const resizeObserver = new ResizeObserver(() => {
              const element2 = getEnabledElementByIds(viewportId, renderingEngineId);
              if (!element2) {
                return;
              }
              const { viewport: viewport2 } = element2;
              const viewPresentation = viewport2.getViewPresentation();
              viewport2.resetCamera();
              viewport2.setViewPresentation(viewPresentation);
              viewport2.render();
            });
            resizeObserver.observe(element);
            this._resizeObservers.set(viewportId, resizeObserver);
          }
        });
      };
      subscribeToElementResize();
      this._viewportAddedListener = (evt) => {
        if (evt.detail.toolGroupId === this.toolGroupId) {
          subscribeToElementResize();
        }
      };
      eventTarget_default.addEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);
      this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
      this._subscribeToViewportNewVolumeSet(viewportsInfo);
      this._initialize3DViewports(viewportsInfo);
      if (this.sphereStates && this.sphereStates.length > 0) {
        this.setHandlesVisible(true);
      } else {
        this.originalClippingPlanes = [];
        this._initialize3DViewports(viewportsInfo);
      }
    }
  }
  onSetToolDisabled() {
    this._resizeObservers.forEach((resizeObserver, viewportId) => {
      resizeObserver.disconnect();
      this._resizeObservers.delete(viewportId);
    });
    if (this._viewportAddedListener) {
      eventTarget_default.removeEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);
      this._viewportAddedListener = null;
    }
    const viewportsInfo = this._getViewportsInfo();
    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
  }
  setHandlesVisible(visible) {
    this.configuration.showHandles = visible;
    if (visible) {
      this.sphereStates[SPHEREINDEX.XMIN].point[0] = this.originalClippingPlanes[PLANEINDEX.XMIN].origin[0];
      this.sphereStates[SPHEREINDEX.XMAX].point[0] = this.originalClippingPlanes[PLANEINDEX.XMAX].origin[0];
      this.sphereStates[SPHEREINDEX.YMIN].point[1] = this.originalClippingPlanes[PLANEINDEX.YMIN].origin[1];
      this.sphereStates[SPHEREINDEX.YMAX].point[1] = this.originalClippingPlanes[PLANEINDEX.YMAX].origin[1];
      this.sphereStates[SPHEREINDEX.ZMIN].point[2] = this.originalClippingPlanes[PLANEINDEX.ZMIN].origin[2];
      this.sphereStates[SPHEREINDEX.ZMAX].point[2] = this.originalClippingPlanes[PLANEINDEX.ZMAX].origin[2];
      [
        SPHEREINDEX.XMIN,
        SPHEREINDEX.XMAX,
        SPHEREINDEX.YMIN,
        SPHEREINDEX.YMAX,
        SPHEREINDEX.ZMIN,
        SPHEREINDEX.ZMAX
      ].forEach((idx) => {
        const s = this.sphereStates[idx];
        s.sphereSource.setCenter(...s.point);
        s.sphereSource.modified();
      });
      this._updateCornerSpheres();
    }
    this._updateHandlesVisibility();
    const viewportsInfo = this._getViewportsInfo();
    const [viewport3D] = viewportsInfo;
    const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);
    const viewport = renderingEngine.getViewport(viewport3D.viewportId);
    viewport.render();
  }
  getHandlesVisible() {
    return this.configuration.showHandles;
  }
  getClippingPlanesVisible() {
    return this.configuration.showClippingPlanes;
  }
  setClippingPlanesVisible(visible) {
    this.configuration.showClippingPlanes = visible;
    const viewport = this._getViewport();
    this._updateClippingPlanes(viewport);
    viewport.render();
  }
  _dragCallback(evt) {
    const { element, currentPoints, lastPoints } = evt.detail;
    if (this.draggingSphereIndex !== null) {
      this._onMouseMoveSphere(evt);
    } else {
      const currentPointsCanvas = currentPoints.canvas;
      const lastPointsCanvas = lastPoints.canvas;
      const { rotateIncrementDegrees } = this.configuration;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const camera = viewport.getCamera();
      const width = element.clientWidth;
      const height = element.clientHeight;
      const normalizedPosition = [
        currentPointsCanvas[0] / width,
        currentPointsCanvas[1] / height
      ];
      const normalizedPreviousPosition = [
        lastPointsCanvas[0] / width,
        lastPointsCanvas[1] / height
      ];
      const center = [width * 0.5, height * 0.5];
      const centerWorld = viewport.canvasToWorld(center);
      const normalizedCenter = [0.5, 0.5];
      const radsq = (1 + Math.abs(normalizedCenter[0])) ** 2;
      const op = [normalizedPreviousPosition[0], 0, 0];
      const oe = [normalizedPosition[0], 0, 0];
      const opsq = op[0] ** 2;
      const oesq = oe[0] ** 2;
      const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);
      const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);
      const nop = [op[0], 0, lop];
      vtkMath.normalize(nop);
      const noe = [oe[0], 0, loe];
      vtkMath.normalize(noe);
      const dot2 = vtkMath.dot(nop, noe);
      if (Math.abs(dot2) > 1e-4) {
        const angleX = -2 * Math.acos(vtkMath.clampValue(dot2, -1, 1)) * Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) * rotateIncrementDegrees;
        const upVec = camera.viewUp;
        const atV = camera.viewPlaneNormal;
        const rightV = [0, 0, 0];
        const forwardV = [0, 0, 0];
        vtkMath.cross(upVec, atV, rightV);
        vtkMath.normalize(rightV);
        vtkMath.cross(atV, rightV, forwardV);
        vtkMath.normalize(forwardV);
        vtkMath.normalize(upVec);
        this._rotateCamera(viewport, centerWorld, forwardV, angleX);
        const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) * rotateIncrementDegrees;
        this._rotateCamera(viewport, centerWorld, rightV, angleY);
      }
      viewport.render();
    }
  }
  _updateClippingPlanes(viewport) {
    const actorEntry = viewport.getDefaultActor();
    if (!actorEntry || !actorEntry.actor) {
      if (!viewport._missingActorWarned) {
        console.warn("VolumeCroppingTool._updateClippingPlanes: No default actor found in viewport.");
        viewport._missingActorWarned = true;
      }
      return;
    }
    const actor = actorEntry.actor;
    const mapper = actor.getMapper();
    const matrix = actor.getMatrix();
    if (!this.configuration.showClippingPlanes) {
      mapper.removeAllClippingPlanes();
      return;
    }
    const rot = mat3_exports.create();
    mat3_exports.fromMat4(rot, matrix);
    const normalMatrix = mat3_exports.create();
    mat3_exports.invert(normalMatrix, rot);
    mat3_exports.transpose(normalMatrix, normalMatrix);
    const originalPlanes = this.originalClippingPlanes;
    if (!originalPlanes || !originalPlanes.length) {
      return;
    }
    mapper.removeAllClippingPlanes();
    const transformedOrigins = [];
    const transformedNormals = [];
    for (let i = 0; i < originalPlanes.length; ++i) {
      const plane = originalPlanes[i];
      const oVec = vec3_exports.create();
      vec3_exports.transformMat4(oVec, new Float32Array(plane.origin), matrix);
      const o = [oVec[0], oVec[1], oVec[2]];
      const nVec = vec3_exports.create();
      vec3_exports.transformMat3(nVec, new Float32Array(plane.normal), normalMatrix);
      vec3_exports.normalize(nVec, nVec);
      const n = [nVec[0], nVec[1], nVec[2]];
      transformedOrigins.push(o);
      transformedNormals.push(n);
    }
    for (let i = 0; i < transformedOrigins.length; ++i) {
      const planeInstance = vtkPlane$1.newInstance({
        origin: transformedOrigins[i],
        normal: transformedNormals[i]
      });
      mapper.addClippingPlane(planeInstance);
    }
  }
  _updateHandlesVisibility() {
    this.sphereStates.forEach((state8) => {
      if (state8.sphereActor) {
        state8.sphereActor.setVisibility(this.configuration.showHandles);
      }
    });
    Object.values(this.edgeLines).forEach(({ actor }) => {
      if (actor) {
        actor.setVisibility(this.configuration.showHandles);
      }
    });
  }
  _addLine3DBetweenPoints(viewport, point1, point2, color = [0.7, 0.7, 0.7], uid = "") {
    if (point1[0] === point2[0] && point1[1] === point2[1] && point1[2] === point2[2]) {
      return { actor: null, source: null };
    }
    const points = vtkPoints$1.newInstance();
    points.setNumberOfPoints(2);
    points.setPoint(0, point1[0], point1[1], point1[2]);
    points.setPoint(1, point2[0], point2[1], point2[2]);
    const lines = vtkCellArray$1.newInstance({ values: [2, 0, 1] });
    const polyData = vtkPolyData$1.newInstance();
    polyData.setPoints(points);
    polyData.setLines(lines);
    const mapper = vtkMapper$1.newInstance();
    mapper.setInputData(polyData);
    const actor = vtkActor$1.newInstance();
    actor.setMapper(mapper);
    actor.getProperty().setColor(...color);
    actor.getProperty().setLineWidth(0.5);
    actor.getProperty().setOpacity(1);
    actor.getProperty().setInterpolationToFlat();
    actor.getProperty().setAmbient(1);
    actor.getProperty().setDiffuse(0);
    actor.getProperty().setSpecular(0);
    actor.setVisibility(this.configuration.showHandles);
    viewport.addActor({ actor, uid });
    return { actor, source: polyData };
  }
  _addSphere(viewport, point, axis, position, cornerKey = null, adaptiveRadius) {
    const uid = cornerKey ? `corner_${cornerKey}` : `${axis}_${position}`;
    const sphereState = this.sphereStates.find((s) => s.uid === uid);
    if (sphereState) {
      return;
    }
    const sphereSource = vtkSphereSource$1.newInstance();
    sphereSource.setCenter(point);
    sphereSource.setRadius(adaptiveRadius);
    const sphereMapper = vtkMapper$1.newInstance();
    sphereMapper.setInputConnection(sphereSource.getOutputPort());
    const sphereActor = vtkActor$1.newInstance();
    sphereActor.setMapper(sphereMapper);
    let color = [0, 1, 0];
    const sphereColors = this.configuration.sphereColors || {};
    if (cornerKey) {
      color = sphereColors.CORNERS || [0, 0, 1];
    } else if (axis === "z") {
      color = sphereColors.AXIAL || [1, 0, 0];
    } else if (axis === "x") {
      color = sphereColors.SAGITTAL || [1, 1, 0];
    } else if (axis === "y") {
      color = sphereColors.CORONAL || [0, 1, 0];
    }
    const idx = this.sphereStates.findIndex((s) => s.uid === uid);
    if (idx === -1) {
      this.sphereStates.push({
        point: point.slice(),
        axis,
        uid,
        sphereSource,
        sphereActor,
        isCorner: !!cornerKey,
        color
      });
    } else {
      this.sphereStates[idx].point = point.slice();
      this.sphereStates[idx].sphereSource = sphereSource;
    }
    const existingActors = viewport.getActors();
    const existing = existingActors.find((a) => a.uid === uid);
    if (existing) {
      return;
    }
    sphereActor.getProperty().setColor(color);
    sphereActor.setVisibility(this.configuration.showHandles);
    viewport.addActor({ actor: sphereActor, uid });
  }
  _calculateAdaptiveSphereRadius(diagonal) {
    const baseRadius = this.configuration.sphereRadius !== void 0 ? this.configuration.sphereRadius : 8;
    const scaleFactor = this.configuration.sphereRadiusScale || 0.01;
    const adaptiveRadius = diagonal * scaleFactor;
    const minRadius = this.configuration.minSphereRadius || 2;
    const maxRadius = this.configuration.maxSphereRadius || 50;
    return Math.max(minRadius, Math.min(maxRadius, adaptiveRadius));
  }
  _updateClippingPlanesFromFaceSpheres(viewport) {
    const mapper = viewport.getDefaultActor().actor.getMapper();
    this.originalClippingPlanes[0].origin = [
      ...this.sphereStates[SPHEREINDEX.XMIN].point
    ];
    this.originalClippingPlanes[1].origin = [
      ...this.sphereStates[SPHEREINDEX.XMAX].point
    ];
    this.originalClippingPlanes[2].origin = [
      ...this.sphereStates[SPHEREINDEX.YMIN].point
    ];
    this.originalClippingPlanes[3].origin = [
      ...this.sphereStates[SPHEREINDEX.YMAX].point
    ];
    this.originalClippingPlanes[4].origin = [
      ...this.sphereStates[SPHEREINDEX.ZMIN].point
    ];
    this.originalClippingPlanes[5].origin = [
      ...this.sphereStates[SPHEREINDEX.ZMAX].point
    ];
    mapper.removeAllClippingPlanes();
    for (let i = 0; i < 6; ++i) {
      const origin = this.originalClippingPlanes[i].origin;
      const normal = this.originalClippingPlanes[i].normal;
      const plane = vtkPlane$1.newInstance({
        origin,
        normal
      });
      mapper.addClippingPlane(plane);
    }
  }
  _updateCornerSpheresFromFaces() {
    const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];
    const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];
    const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];
    const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];
    const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];
    const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];
    const corners = [
      { key: "XMIN_YMIN_ZMIN", pos: [xMin, yMin, zMin] },
      { key: "XMIN_YMIN_ZMAX", pos: [xMin, yMin, zMax] },
      { key: "XMIN_YMAX_ZMIN", pos: [xMin, yMax, zMin] },
      { key: "XMIN_YMAX_ZMAX", pos: [xMin, yMax, zMax] },
      { key: "XMAX_YMIN_ZMIN", pos: [xMax, yMin, zMin] },
      { key: "XMAX_YMIN_ZMAX", pos: [xMax, yMin, zMax] },
      { key: "XMAX_YMAX_ZMIN", pos: [xMax, yMax, zMin] },
      { key: "XMAX_YMAX_ZMAX", pos: [xMax, yMax, zMax] }
    ];
    for (const corner of corners) {
      const state8 = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);
      if (state8) {
        state8.point[0] = corner.pos[0];
        state8.point[1] = corner.pos[1];
        state8.point[2] = corner.pos[2];
        state8.sphereSource.setCenter(...state8.point);
        state8.sphereSource.modified();
      }
    }
  }
  _updateFaceSpheresFromCorners() {
    const corners = [
      this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMIN].point,
      this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMAX].point,
      this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMIN].point,
      this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMAX].point,
      this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMIN].point,
      this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMAX].point,
      this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMIN].point,
      this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMAX].point
    ];
    const xs = corners.map((p) => p[0]);
    const ys = corners.map((p) => p[1]);
    const zs = corners.map((p) => p[2]);
    const xMin = Math.min(...xs), xMax = Math.max(...xs);
    const yMin = Math.min(...ys), yMax = Math.max(...ys);
    const zMin = Math.min(...zs), zMax = Math.max(...zs);
    this.sphereStates[SPHEREINDEX.XMIN].point = [
      xMin,
      (yMin + yMax) / 2,
      (zMin + zMax) / 2
    ];
    this.sphereStates[SPHEREINDEX.XMAX].point = [
      xMax,
      (yMin + yMax) / 2,
      (zMin + zMax) / 2
    ];
    this.sphereStates[SPHEREINDEX.YMIN].point = [
      (xMin + xMax) / 2,
      yMin,
      (zMin + zMax) / 2
    ];
    this.sphereStates[SPHEREINDEX.YMAX].point = [
      (xMin + xMax) / 2,
      yMax,
      (zMin + zMax) / 2
    ];
    this.sphereStates[SPHEREINDEX.ZMIN].point = [
      (xMin + xMax) / 2,
      (yMin + yMax) / 2,
      zMin
    ];
    this.sphereStates[SPHEREINDEX.ZMAX].point = [
      (xMin + xMax) / 2,
      (yMin + yMax) / 2,
      zMax
    ];
    [
      SPHEREINDEX.XMIN,
      SPHEREINDEX.XMAX,
      SPHEREINDEX.YMIN,
      SPHEREINDEX.YMAX,
      SPHEREINDEX.ZMIN,
      SPHEREINDEX.ZMAX
    ].forEach((idx) => {
      const s = this.sphereStates[idx];
      s.sphereSource.setCenter(...s.point);
      s.sphereSource.modified();
    });
  }
  _updateCornerSpheres() {
    const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];
    const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];
    const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];
    const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];
    const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];
    const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];
    const corners = [
      { key: "XMIN_YMIN_ZMIN", pos: [xMin, yMin, zMin] },
      { key: "XMIN_YMIN_ZMAX", pos: [xMin, yMin, zMax] },
      { key: "XMIN_YMAX_ZMIN", pos: [xMin, yMax, zMin] },
      { key: "XMIN_YMAX_ZMAX", pos: [xMin, yMax, zMax] },
      { key: "XMAX_YMIN_ZMIN", pos: [xMax, yMin, zMin] },
      { key: "XMAX_YMIN_ZMAX", pos: [xMax, yMin, zMax] },
      { key: "XMAX_YMAX_ZMIN", pos: [xMax, yMax, zMin] },
      { key: "XMAX_YMAX_ZMAX", pos: [xMax, yMax, zMax] }
    ];
    for (const corner of corners) {
      const state8 = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);
      if (state8) {
        state8.point[0] = corner.pos[0];
        state8.point[1] = corner.pos[1];
        state8.point[2] = corner.pos[2];
        state8.sphereSource.setCenter(...state8.point);
        state8.sphereSource.modified();
      }
    }
    Object.values(this.edgeLines).forEach(({ source, key1, key2 }) => {
      const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);
      const state22 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);
      if (state1 && state22) {
        const points = source.getPoints();
        points.setPoint(0, state1.point[0], state1.point[1], state1.point[2]);
        points.setPoint(1, state22.point[0], state22.point[1], state22.point[2]);
        points.modified();
        source.modified();
      }
    });
  }
  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {
    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.removeEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
  _subscribeToViewportNewVolumeSet(viewports) {
    viewports.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.addEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
};
VolumeCroppingTool.toolName = "VolumeCropping";
var VolumeCroppingTool_default = VolumeCroppingTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingControlTool.js
var { RENDERING_DEFAULTS } = constants_exports;
function defaultReferenceLineColor() {
  return "rgb(0, 200, 0)";
}
function defaultReferenceLineControllable() {
  return true;
}
var OPERATION = {
  DRAG: 1,
  ROTATE: 2,
  SLAB: 3
};
var VolumeCroppingControlTool = class extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse"],
    configuration: {
      viewportIndicators: false,
      viewportIndicatorsConfig: {
        radius: 5,
        x: null,
        y: null
      },
      extendReferenceLines: true,
      initialCropFactor: 0.2,
      mobile: {
        enabled: false,
        opacity: 0.8
      },
      lineColors: {
        AXIAL: [1, 0, 0],
        CORONAL: [0, 1, 0],
        SAGITTAL: [1, 1, 0],
        UNKNOWN: [0, 0, 1]
      },
      lineWidth: 1.5,
      lineWidthActive: 2.5
    }
  }) {
    super(toolProps, defaultToolProps);
    this._virtualAnnotations = [];
    this.sphereStates = [];
    this.draggingSphereIndex = null;
    this.toolCenter = [0, 0, 0];
    this.toolCenterMin = [0, 0, 0];
    this.toolCenterMax = [0, 0, 0];
    this.initializeViewport = ({ renderingEngineId, viewportId }) => {
      if (!renderingEngineId || !viewportId) {
        console.warn("VolumeCroppingControlTool: Missing renderingEngineId or viewportId");
        return;
      }
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      if (!enabledElement) {
        return;
      }
      const { viewport } = enabledElement;
      this._updateToolCentersFromViewport(viewport);
      const { element } = viewport;
      const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();
      let annotations = this._getAnnotations(enabledElement);
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (annotations?.length) {
        removeAnnotation(annotations[0].annotationUID);
      }
      const orientation2 = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);
      const annotation = {
        highlighted: false,
        metadata: {
          cameraPosition: [...position],
          cameraFocalPoint: [...focalPoint],
          toolName: this.getToolName()
        },
        data: {
          handles: {
            toolCenter: this.toolCenter,
            toolCenterMin: this.toolCenterMin,
            toolCenterMax: this.toolCenterMax
          },
          activeOperation: null,
          activeViewportIds: [],
          viewportId,
          referenceLines: [],
          orientation: orientation2
        }
      };
      addAnnotation(annotation, element);
      return {
        normal: viewPlaneNormal,
        point: viewport.canvasToWorld([100, 100])
      };
    };
    this._getViewportsInfo = () => {
      const viewports = getToolGroup_default(this.toolGroupId).viewportsInfo;
      return viewports;
    };
    this.resetCroppingSpheres = () => {
      const viewportsInfo2 = this._getViewportsInfo();
      for (const viewportInfo of viewportsInfo2) {
        const { viewportId, renderingEngineId } = viewportInfo;
        const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
        const viewport = enabledElement.viewport;
        const resetPan = true;
        const resetZoom = true;
        const resetToCenter = true;
        const resetRotation = true;
        const suppressEvents = true;
        viewport.resetCamera({
          resetPan,
          resetZoom,
          resetToCenter,
          resetRotation,
          suppressEvents
        });
        viewport.resetSlabThickness();
        const { element } = viewport;
        let annotations = this._getAnnotations(enabledElement);
        annotations = this.filterInteractableAnnotationsForElement(element, annotations);
        if (annotations.length) {
          removeAnnotation(annotations[0].annotationUID);
        }
        viewport.render();
      }
      this._computeToolCenter(viewportsInfo2);
    };
    this.computeToolCenter = () => {
      const viewportsInfo2 = this._getViewportsInfo();
    };
    this._computeToolCenter = (viewportsInfo2) => {
      if (!viewportsInfo2 || !viewportsInfo2[0]) {
        console.warn("  _computeToolCenter : No valid viewportsInfo for computeToolCenter.");
        return;
      }
      const orientationIds = ["AXIAL", "CORONAL", "SAGITTAL"];
      const presentOrientations = viewportsInfo2.map((vp) => {
        if (vp.renderingEngineId) {
          const renderingEngine = getRenderingEngine(vp.renderingEngineId);
          const viewport = renderingEngine.getViewport(vp.viewportId);
          if (viewport && viewport.getCamera) {
            const orientation2 = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);
            if (orientation2) {
              return orientation2;
            }
          }
        }
        return null;
      }).filter(Boolean);
      const missingOrientation = orientationIds.find((id) => !presentOrientations.includes(id));
      const presentNormals = [];
      const presentCenters = [];
      const presentViewportInfos = viewportsInfo2.filter((vp) => {
        let orientation2 = null;
        if (vp.renderingEngineId) {
          const renderingEngine = getRenderingEngine(vp.renderingEngineId);
          const viewport = renderingEngine.getViewport(vp.viewportId);
          if (viewport && viewport.getCamera) {
            orientation2 = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);
          }
        }
        return orientation2 && orientationIds.includes(orientation2);
      });
      presentViewportInfos.forEach((vpInfo) => {
        const { normal, point } = this.initializeViewport(vpInfo);
        presentNormals.push(normal);
        presentCenters.push(point);
      });
      if (presentViewportInfos.length === 2 && missingOrientation) {
        const virtualNormal = [0, 0, 0];
        vec3_exports.cross(virtualNormal, presentNormals[0], presentNormals[1]);
        vec3_exports.normalize(virtualNormal, virtualNormal);
        const virtualCenter = [
          (presentCenters[0][0] + presentCenters[1][0]) / 2,
          (presentCenters[0][1] + presentCenters[1][1]) / 2,
          (presentCenters[0][2] + presentCenters[1][2]) / 2
        ];
        const orientation2 = null;
        const virtualAnnotation = {
          highlighted: false,
          metadata: {
            cameraPosition: [...virtualCenter],
            cameraFocalPoint: [...virtualCenter],
            toolName: this.getToolName()
          },
          data: {
            handles: {
              activeOperation: null,
              toolCenter: this.toolCenter,
              toolCenterMin: this.toolCenterMin,
              toolCenterMax: this.toolCenterMax
            },
            activeViewportIds: [],
            viewportId: missingOrientation,
            referenceLines: [],
            orientation: orientation2
          },
          isVirtual: true,
          virtualNormal
        };
        this._virtualAnnotations = [virtualAnnotation];
      } else if (presentViewportInfos.length === 1) {
        let presentOrientation = null;
        const vpInfo = presentViewportInfos[0];
        if (vpInfo.renderingEngineId) {
          const renderingEngine = getRenderingEngine(vpInfo.renderingEngineId);
          const viewport = renderingEngine.getViewport(vpInfo.viewportId);
          if (viewport && viewport.getCamera) {
            presentOrientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);
          }
        }
        const presentCenter = presentCenters[0];
        const canonicalNormals = {
          AXIAL: [0, 0, 1],
          CORONAL: [0, 1, 0],
          SAGITTAL: [1, 0, 0]
        };
        const missingIds = orientationIds.filter((id) => id !== presentOrientation);
        const virtualAnnotations = missingIds.map((orientation2) => {
          const normal = canonicalNormals[orientation2];
          const virtualAnnotation = {
            highlighted: false,
            metadata: {
              cameraPosition: [...presentCenter],
              cameraFocalPoint: [...presentCenter],
              toolName: this.getToolName()
            },
            data: {
              handles: {
                activeOperation: null,
                toolCenter: this.toolCenter,
                toolCenterMin: this.toolCenterMin,
                toolCenterMax: this.toolCenterMax
              },
              activeViewportIds: [],
              viewportId: orientation2,
              referenceLines: [],
              orientation: orientation2
            },
            isVirtual: true,
            virtualNormal: normal
          };
          return virtualAnnotation;
        });
        this._virtualAnnotations = virtualAnnotations;
      }
      if (viewportsInfo2 && viewportsInfo2.length) {
        triggerAnnotationRenderForViewportIds_default(viewportsInfo2.map(({ viewportId }) => viewportId));
      }
    };
    this.cancel = () => {
      console.log("Not implemented yet");
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      if (this._pointNearTool(element, annotation, canvasCoords, 6)) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation, interactionType) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      this._activateModify(element);
      hideElementCursor(element);
      evt.preventDefault();
    };
    this.onResetCamera = (evt) => {
      this.resetCroppingSpheres();
    };
    this.mouseMoveCallback = (evt, filteredToolAnnotations) => {
      if (!filteredToolAnnotations) {
        return;
      }
      const { element, currentPoints } = evt.detail;
      const canvasCoords = currentPoints.canvas;
      let imageNeedsUpdate = false;
      for (let i = 0; i < filteredToolAnnotations.length; i++) {
        const annotation = filteredToolAnnotations[i];
        if (isAnnotationLocked(annotation.annotationUID)) {
          continue;
        }
        const { data, highlighted } = annotation;
        if (!data.handles) {
          continue;
        }
        const previousActiveOperation = data.handles.activeOperation;
        const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0 ? [...data.activeViewportIds] : [];
        data.activeViewportIds = [];
        let near = false;
        near = this._pointNearTool(element, annotation, canvasCoords, 6);
        const nearToolAndNotMarkedActive = near && !highlighted;
        const notNearToolAndMarkedActive = !near && highlighted;
        if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {
          annotation.highlighted = !highlighted;
          imageNeedsUpdate = true;
        }
      }
      return imageNeedsUpdate;
    };
    this.filterInteractableAnnotationsForElement = (element, annotations) => {
      if (!annotations || !annotations.length) {
        return [];
      }
      const enabledElement = getEnabledElement(element);
      let orientation2 = null;
      if (enabledElement.viewport && enabledElement.viewport.getCamera) {
        orientation2 = this._getOrientationFromNormal(enabledElement.viewport.getCamera().viewPlaneNormal);
      }
      const filtered = annotations.filter((annotation) => {
        if (annotation.isVirtual) {
          return true;
        }
        if (annotation.data.orientation && orientation2 && annotation.data.orientation === orientation2) {
          return true;
        }
        return false;
      });
      return filtered;
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      function lineIntersection2D(p1, p2, q1, q2) {
        const s1_x = p2[0] - p1[0];
        const s1_y = p2[1] - p1[1];
        const s2_x = q2[0] - q1[0];
        const s2_y = q2[1] - q1[1];
        const denom = -s2_x * s1_y + s1_x * s2_y;
        if (Math.abs(denom) < 1e-8) {
          return null;
        }
        const s = (-s1_y * (p1[0] - q1[0]) + s1_x * (p1[1] - q1[1])) / denom;
        const t = (s2_x * (p1[1] - q1[1]) - s2_y * (p1[0] - q1[0])) / denom;
        if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
          return [p1[0] + t * s1_x, p1[1] + t * s1_y];
        }
        return null;
      }
      const viewportsInfo2 = this._getViewportsInfo();
      if (!viewportsInfo2 || viewportsInfo2.length === 0) {
        return false;
      }
      let renderStatus = false;
      const { viewport, renderingEngine } = enabledElement;
      const { element } = viewport;
      let annotations = this._getAnnotations(enabledElement);
      if (this._virtualAnnotations && this._virtualAnnotations.length) {
        annotations = annotations.concat(this._virtualAnnotations);
      }
      const camera = viewport.getCamera();
      const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const viewportAnnotation = filteredToolAnnotations[0];
      if (!viewportAnnotation || !viewportAnnotation.data) {
        return renderStatus;
      }
      const annotationUID = viewportAnnotation.annotationUID;
      const { clientWidth, clientHeight } = viewport.canvas;
      const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
      const data = viewportAnnotation.data;
      const otherViewportAnnotations = annotations;
      const volumeCroppingCenterCanvasMin = viewport.worldToCanvas(this.toolCenterMin);
      const volumeCroppingCenterCanvasMax = viewport.worldToCanvas(this.toolCenterMax);
      const referenceLines = [];
      const canvasBox = [0, 0, clientWidth, clientHeight];
      otherViewportAnnotations.forEach((annotation) => {
        const data2 = annotation.data;
        const isVirtual = "isVirtual" in annotation && annotation.isVirtual === true;
        data2.handles.toolCenter = this.toolCenter;
        let otherViewport, otherCamera, clientWidth2, clientHeight2, otherCanvasDiagonalLength, otherCanvasCenter, otherViewportCenterWorld;
        if (isVirtual) {
          const realViewports = viewportsInfo2.filter((vp) => vp.viewportId !== data2.viewportId);
          if (realViewports.length === 2) {
            const vp1 = renderingEngine.getViewport(realViewports[0].viewportId);
            const vp2 = renderingEngine.getViewport(realViewports[1].viewportId);
            const normal1 = vp1.getCamera().viewPlaneNormal;
            const normal2 = vp2.getCamera().viewPlaneNormal;
            const virtualNormal = vec3_exports.create();
            vec3_exports.cross(virtualNormal, normal1, normal2);
            vec3_exports.normalize(virtualNormal, virtualNormal);
            otherCamera = {
              viewPlaneNormal: virtualNormal,
              position: data2.handles.toolCenter,
              focalPoint: data2.handles.toolCenter,
              viewUp: [0, 1, 0]
            };
            clientWidth2 = viewport.canvas.clientWidth;
            clientHeight2 = viewport.canvas.clientHeight;
            otherCanvasDiagonalLength = Math.sqrt(clientWidth2 * clientWidth2 + clientHeight2 * clientHeight2);
            otherCanvasCenter = [clientWidth2 * 0.5, clientHeight2 * 0.5];
            otherViewportCenterWorld = data2.handles.toolCenter;
            otherViewport = {
              id: data2.viewportId,
              canvas: viewport.canvas,
              canvasToWorld: () => data2.handles.toolCenter
            };
          } else {
            const virtualNormal = annotation.virtualNormal ?? [0, 0, 1];
            otherCamera = {
              viewPlaneNormal: virtualNormal,
              position: data2.handles.toolCenter,
              focalPoint: data2.handles.toolCenter,
              viewUp: [0, 1, 0]
            };
            clientWidth2 = viewport.canvas.clientWidth;
            clientHeight2 = viewport.canvas.clientHeight;
            otherCanvasDiagonalLength = Math.sqrt(clientWidth2 * clientWidth2 + clientHeight2 * clientHeight2);
            otherCanvasCenter = [clientWidth2 * 0.5, clientHeight2 * 0.5];
            otherViewportCenterWorld = data2.handles.toolCenter;
            otherViewport = {
              id: data2.viewportId,
              canvas: viewport.canvas,
              canvasToWorld: () => data2.handles.toolCenter
            };
          }
        } else {
          otherViewport = renderingEngine.getViewport(data2.viewportId);
          otherCamera = otherViewport.getCamera();
          clientWidth2 = otherViewport.canvas.clientWidth;
          clientHeight2 = otherViewport.canvas.clientHeight;
          otherCanvasDiagonalLength = Math.sqrt(clientWidth2 * clientWidth2 + clientHeight2 * clientHeight2);
          otherCanvasCenter = [clientWidth2 * 0.5, clientHeight2 * 0.5];
          otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);
        }
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        const direction = [0, 0, 0];
        vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);
        vtkMath.normalize(direction);
        vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);
        const pointWorld0 = [0, 0, 0];
        vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);
        const pointWorld1 = [0, 0, 0];
        vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);
        const pointCanvas0 = viewport.worldToCanvas(pointWorld0);
        const otherViewportCenterCanvas = viewport.worldToCanvas([
          otherViewportCenterWorld[0] ?? 0,
          otherViewportCenterWorld[1] ?? 0,
          otherViewportCenterWorld[2] ?? 0
        ]);
        const canvasUnitVectorFromCenter = vec2_exports.create();
        vec2_exports.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);
        vec2_exports.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);
        const canvasVectorFromCenterLong = vec2_exports.create();
        vec2_exports.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);
        const refLinesCenterMin = otherViewportControllable ? vec2_exports.clone(volumeCroppingCenterCanvasMin) : vec2_exports.clone(otherViewportCenterCanvas);
        const refLinePointMinOne = vec2_exports.create();
        const refLinePointMinTwo = vec2_exports.create();
        vec2_exports.add(refLinePointMinOne, refLinesCenterMin, canvasVectorFromCenterLong);
        vec2_exports.subtract(refLinePointMinTwo, refLinesCenterMin, canvasVectorFromCenterLong);
        clip(refLinePointMinOne, refLinePointMinTwo, canvasBox);
        referenceLines.push([
          otherViewport,
          refLinePointMinOne,
          refLinePointMinTwo,
          "min"
        ]);
        const refLinesCenterMax = otherViewportControllable ? vec2_exports.clone(volumeCroppingCenterCanvasMax) : vec2_exports.clone(otherViewportCenterCanvas);
        const refLinePointMaxOne = vec2_exports.create();
        const refLinePointMaxTwo = vec2_exports.create();
        vec2_exports.add(refLinePointMaxOne, refLinesCenterMax, canvasVectorFromCenterLong);
        vec2_exports.subtract(refLinePointMaxTwo, refLinesCenterMax, canvasVectorFromCenterLong);
        clip(refLinePointMaxOne, refLinePointMaxTwo, canvasBox);
        referenceLines.push([
          otherViewport,
          refLinePointMaxOne,
          refLinePointMaxTwo,
          "max"
        ]);
      });
      data.referenceLines = referenceLines;
      const viewportColor = this._getReferenceLineColor(viewport.id);
      const color = viewportColor !== void 0 ? viewportColor : "rgb(200, 200, 200)";
      referenceLines.forEach((line, lineIndex) => {
        const intersections = [];
        for (let j = 0; j < referenceLines.length; ++j) {
          if (j === lineIndex) {
            continue;
          }
          const otherLine = referenceLines[j];
          const intersection = lineIntersection2D(line[1], line[2], otherLine[1], otherLine[2]);
          if (intersection) {
            intersections.push({
              with: otherLine[3],
              point: intersection
            });
          }
        }
        const otherViewport = line[0];
        let orientation2 = null;
        if (otherViewport && otherViewport.id) {
          const annotationForViewport = annotations.find((a) => a.data.viewportId === otherViewport.id);
          if (annotationForViewport && annotationForViewport.data.orientation) {
            orientation2 = String(annotationForViewport.data.orientation).toUpperCase();
          } else {
            const idUpper = otherViewport.id.toUpperCase();
            if (idUpper.includes("AXIAL")) {
              orientation2 = "AXIAL";
            } else if (idUpper.includes("CORONAL")) {
              orientation2 = "CORONAL";
            } else if (idUpper.includes("SAGITTAL")) {
              orientation2 = "SAGITTAL";
            }
          }
        }
        const lineColors = this.configuration.lineColors || {};
        const colorArr = lineColors[orientation2] || lineColors.unknown || [1, 0, 0];
        const color2 = Array.isArray(colorArr) ? `rgb(${colorArr.map((v) => Math.round(v * 255)).join(",")})` : colorArr;
        const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
        const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);
        let lineWidth = this.configuration.lineWidth ?? 1.5;
        const lineActive = data.handles.activeOperation !== null && data.handles.activeOperation === OPERATION.DRAG && selectedViewportId;
        if (lineActive) {
          lineWidth = this.configuration.activeLineWidth ?? 2.5;
        }
        const lineUID = `${lineIndex}`;
        if (viewportControllable) {
          if (intersections.length === 2) {
            drawLine(svgDrawingHelper, annotationUID, lineUID, intersections[0].point, intersections[1].point, {
              color: color2,
              lineWidth
            });
          }
          if (this.configuration.extendReferenceLines && intersections.length === 2) {
            if (this.configuration.extendReferenceLines && intersections.length === 2) {
              const sortedIntersections = intersections.map((intersection) => ({
                ...intersection,
                distance: vec2_exports.distance(line[1], intersection.point)
              })).sort((a, b) => a.distance - b.distance);
              drawLine(svgDrawingHelper, annotationUID, lineUID + "_dashed_before", line[1], sortedIntersections[0].point, { color: color2, lineWidth, lineDash: [4, 4] });
              drawLine(svgDrawingHelper, annotationUID, lineUID + "_dashed_after", sortedIntersections[1].point, line[2], { color: color2, lineWidth, lineDash: [4, 4] });
            }
          }
        }
      });
      renderStatus = true;
      if (this.configuration.viewportIndicators) {
        const { viewportIndicatorsConfig } = this.configuration;
        const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;
        const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;
        const referenceColorCoordinates = [
          clientWidth * xOffset,
          clientHeight * yOffset
        ];
        const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;
        const circleUID = "0";
        drawCircle_default(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });
      }
      return renderStatus;
    };
    this._getAnnotations = (enabledElement) => {
      const { viewport } = enabledElement;
      const annotations = getAnnotations(this.getToolName(), viewport.element) || [];
      const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);
      const toolGroupAnnotations = annotations.filter((annotation) => {
        const { data } = annotation;
        return viewportIds.includes(data.viewportId);
      });
      return toolGroupAnnotations;
    };
    this._onSphereMoved = (evt) => {
      if (evt.detail.originalClippingPlanes) {
        this._syncWithVolumeCroppingTool(evt.detail.originalClippingPlanes);
      } else {
        if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {
          return;
        }
        const { draggingSphereIndex, toolCenter } = evt.detail;
        const newMin = [...this.toolCenterMin];
        const newMax = [...this.toolCenterMax];
        if (draggingSphereIndex >= 0 && draggingSphereIndex <= 5) {
          const axis = Math.floor(draggingSphereIndex / 2);
          const isMin = draggingSphereIndex % 2 === 0;
          (isMin ? newMin : newMax)[axis] = toolCenter[axis];
          this.setToolCenter(newMin, "min");
          this.setToolCenter(newMax, "max");
          return;
        }
        if (draggingSphereIndex >= 6 && draggingSphereIndex <= 13) {
          const idx = draggingSphereIndex;
          if (idx < 10) {
            newMin[0] = toolCenter[0];
          } else {
            newMax[0] = toolCenter[0];
          }
          if ([6, 7, 10, 11].includes(idx)) {
            newMin[1] = toolCenter[1];
          } else {
            newMax[1] = toolCenter[1];
          }
          if (idx % 2 === 0) {
            newMin[2] = toolCenter[2];
          } else {
            newMax[2] = toolCenter[2];
          }
          this.setToolCenter(newMin, "min");
          this.setToolCenter(newMax, "max");
        }
      }
    };
    this._onNewVolume = () => {
      const viewportsInfo2 = this._getViewportsInfo();
      if (viewportsInfo2 && viewportsInfo2.length > 0) {
        const { viewportId, renderingEngineId } = viewportsInfo2[0];
        const renderingEngine = getRenderingEngine(renderingEngineId);
        const viewport = renderingEngine.getViewport(viewportId);
        const volumeActors = viewport.getActors();
        if (volumeActors.length > 0) {
          const imageData = volumeActors[0].actor.getMapper().getInputData();
          if (imageData) {
            this.seriesInstanceUID = imageData.seriesInstanceUID;
            this._updateToolCentersFromViewport(viewport);
            const annotations = getAnnotations(this.getToolName(), viewportId) || [];
            annotations.forEach((annotation) => {
              if (annotation.data && annotation.data.handles) {
                annotation.data.handles.toolCenter = [...this.toolCenter];
              }
            });
          }
        }
      }
      this._computeToolCenter(viewportsInfo2);
      triggerEvent(eventTarget_default, Events_default.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {
        toolGroupId: this.toolGroupId,
        viewportsInfo: viewportsInfo2,
        seriesInstanceUID: this.seriesInstanceUID
      });
    };
    this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {
      const { viewportId, renderingEngine, viewport } = enabledElement;
      const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);
      if (!otherViewportAnnotations || !otherViewportAnnotations.length) {
        return [];
      }
      const camera = viewport.getCamera();
      const { viewPlaneNormal, position } = camera;
      const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {
        const { viewportId: viewportId2 } = annotation.data;
        const targetViewport = renderingEngine.getViewport(viewportId2);
        const cameraOfTarget = targetViewport.getCamera();
        return !(utilities_exports.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 0.01) && utilities_exports.isEqual(cameraOfTarget.position, position, 1));
      });
      return viewportsWithDifferentCameras;
    };
    this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {
      const { renderingEngine } = enabledElement;
      const { data } = referenceAnnotation;
      const viewport = renderingEngine.getViewport(data.viewportId);
      const linkedViewportAnnotations = annotations.filter((annotation) => {
        const { data: data2 } = annotation;
        const otherViewport = renderingEngine.getViewport(data2.viewportId);
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        return otherViewportControllable === true;
      });
      if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {
        return [];
      }
      const camera = viewport.getCamera();
      const viewPlaneNormal = camera.viewPlaneNormal;
      vtkMath.normalize(viewPlaneNormal);
      const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {
        const { viewportId } = annotation.data;
        const otherViewport = renderingEngine.getViewport(viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
        vtkMath.normalize(otherViewPlaneNormal);
        return utilities_exports.isEqual(viewPlaneNormal, otherViewPlaneNormal, 0.01) && utilities_exports.isEqual(camera.viewUp, otherCamera.viewUp, 0.01);
      });
      return otherViewportsAnnotationsWithSameCameraDirection;
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = !this.configuration.mobile?.enabled;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      this.editData.annotation.data.handles.activeOperation = null;
      this.editData.annotation.data.activeViewportIds = [];
      this._deactivateModify(element);
      resetElementCursor(element);
      this.editData = null;
      const requireSameOrientation = false;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragCallback = (evt) => {
      const eventDetail = evt.detail;
      const delta = eventDetail.deltaPoints.world;
      if (Math.abs(delta[0]) < 1e-3 && Math.abs(delta[1]) < 1e-3 && Math.abs(delta[2]) < 1e-3) {
        return;
      }
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      if (viewport.type === enums_exports.ViewportType.VOLUME_3D) {
        return;
      }
      const annotations = this._getAnnotations(enabledElement);
      const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const viewportAnnotation = filteredToolAnnotations[0];
      if (!viewportAnnotation) {
        return;
      }
      const { handles } = viewportAnnotation.data;
      if (handles.activeOperation === OPERATION.DRAG) {
        if (handles.activeType === "min") {
          this.toolCenterMin[0] += delta[0];
          this.toolCenterMin[1] += delta[1];
          this.toolCenterMin[2] += delta[2];
        } else if (handles.activeType === "max") {
          this.toolCenterMax[0] += delta[0];
          this.toolCenterMax[1] += delta[1];
          this.toolCenterMax[2] += delta[2];
        } else {
          this.toolCenter[0] += delta[0];
          this.toolCenter[1] += delta[1];
          this.toolCenter[2] += delta[2];
        }
        const viewportsInfo2 = this._getViewportsInfo();
        triggerAnnotationRenderForViewportIds_default(viewportsInfo2.map(({ viewportId }) => viewportId));
        triggerEvent(eventTarget_default, Events_default.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {
          toolGroupId: this.toolGroupId,
          toolCenter: this.toolCenter,
          toolCenterMin: this.toolCenterMin,
          toolCenterMax: this.toolCenterMax,
          handleType: handles.activeType,
          viewportOrientation: [],
          seriesInstanceUID: this.seriesInstanceUID
        });
      }
    };
    this._getReferenceLineColor = toolProps.configuration?.getReferenceLineColor || defaultReferenceLineColor;
    this._getReferenceLineControllable = toolProps.configuration?.getReferenceLineControllable || defaultReferenceLineControllable;
    const viewportsInfo = getToolGroup_default(this.toolGroupId)?.viewportsInfo;
    eventTarget_default.addEventListener(Events_default.VOLUMECROPPING_TOOL_CHANGED, this._onSphereMoved);
    if (viewportsInfo && viewportsInfo.length > 0) {
      const { viewportId, renderingEngineId } = viewportsInfo[0];
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      const renderingEngine = getRenderingEngine(renderingEngineId);
      const viewport = renderingEngine.getViewport(viewportId);
      const volumeActors = viewport.getActors();
      if (!volumeActors || !volumeActors.length) {
        console.warn(`VolumeCroppingControlTool: No volume actors found in viewport ${viewportId}.`);
        return;
      }
      const imageData = volumeActors[0].actor.getMapper().getInputData();
      if (imageData) {
        const dimensions = imageData.getDimensions();
        const spacing = imageData.getSpacing();
        const origin = imageData.getOrigin();
        this.seriesInstanceUID = imageData.seriesInstanceUID || "unknown";
        const cropFactor = this.configuration.initialCropFactor ?? 0.2;
        this.toolCenter = [
          origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],
          origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],
          origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2]
        ];
        const maxCropFactor = 1 - cropFactor;
        this.toolCenterMin = [
          origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],
          origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],
          origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2]
        ];
        this.toolCenterMax = [
          origin[0] + maxCropFactor * (dimensions[0] - 1) * spacing[0],
          origin[1] + maxCropFactor * (dimensions[1] - 1) * spacing[1],
          origin[2] + maxCropFactor * (dimensions[2] - 1) * spacing[2]
        ];
      }
    }
  }
  _updateToolCentersFromViewport(viewport) {
    const volumeActors = viewport.getActors();
    if (!volumeActors || !volumeActors.length) {
      return;
    }
    const imageData = volumeActors[0].actor.getMapper().getInputData();
    if (!imageData) {
      return;
    }
    this.seriesInstanceUID = imageData.seriesInstanceUID || "unknown";
    const dimensions = imageData.getDimensions();
    const spacing = imageData.getSpacing();
    const origin = imageData.getOrigin();
    const cropFactor = this.configuration.initialCropFactor ?? 0.2;
    const cropStart = cropFactor / 2;
    const cropEnd = 1 - cropFactor / 2;
    this.toolCenter = [
      origin[0] + (cropStart + cropEnd) / 2 * (dimensions[0] - 1) * spacing[0],
      origin[1] + (cropStart + cropEnd) / 2 * (dimensions[1] - 1) * spacing[1],
      origin[2] + (cropStart + cropEnd) / 2 * (dimensions[2] - 1) * spacing[2]
    ];
    this.toolCenterMin = [
      origin[0] + cropStart * (dimensions[0] - 1) * spacing[0],
      origin[1] + cropStart * (dimensions[1] - 1) * spacing[1],
      origin[2] + cropStart * (dimensions[2] - 1) * spacing[2]
    ];
    this.toolCenterMax = [
      origin[0] + cropEnd * (dimensions[0] - 1) * spacing[0],
      origin[1] + cropEnd * (dimensions[1] - 1) * spacing[1],
      origin[2] + cropEnd * (dimensions[2] - 1) * spacing[2]
    ];
  }
  onSetToolInactive() {
    console.debug(`VolumeCroppingControlTool: onSetToolInactive called for tool ${this.getToolName()}`);
  }
  onSetToolActive() {
    const viewportsInfo = this._getViewportsInfo();
    let anyAnnotationExists = false;
    for (const vpInfo of viewportsInfo) {
      const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);
      const annotations = this._getAnnotations(enabledElement);
      if (annotations && annotations.length > 0) {
        anyAnnotationExists = true;
        break;
      }
    }
    if (!anyAnnotationExists) {
      this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
      this._subscribeToViewportNewVolumeSet(viewportsInfo);
      this._computeToolCenter(viewportsInfo);
      triggerEvent(eventTarget_default, Events_default.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {
        toolGroupId: this.toolGroupId,
        viewportsInfo,
        seriesInstanceUID: this.seriesInstanceUID
      });
    } else {
      for (const vpInfo of viewportsInfo) {
        const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);
        if (!enabledElement) {
          continue;
        }
        const annotations = this._getAnnotations(enabledElement);
        if (annotations && annotations.length > 0) {
          annotations.forEach((annotation) => {
            removeAnnotation(annotation.annotationUID);
          });
        }
        enabledElement.viewport.render();
      }
    }
  }
  onSetToolEnabled() {
    console.debug(`VolumeCroppingControlTool: onSetToolEnabled called for tool ${this.getToolName()}`);
    const viewportsInfo = this._getViewportsInfo();
  }
  onSetToolDisabled() {
    console.debug(`VolumeCroppingControlTool: onSetToolDisabled called for tool ${this.getToolName()}`);
    const viewportsInfo = this._getViewportsInfo();
    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      if (!enabledElement) {
        return;
      }
      const annotations = this._getAnnotations(enabledElement);
      if (annotations?.length) {
        annotations.forEach((annotation) => {
          removeAnnotation(annotation.annotationUID);
        });
      }
    });
  }
  _getOrientationFromNormal(normal) {
    if (!normal) {
      return null;
    }
    const canonical = {
      AXIAL: [0, 0, 1],
      CORONAL: [0, 1, 0],
      SAGITTAL: [1, 0, 0]
    };
    const tol = 0.01;
    for (const [key, value] of Object.entries(canonical)) {
      if (Math.abs(normal[0] - value[0]) < tol && Math.abs(normal[1] - value[1]) < tol && Math.abs(normal[2] - value[2]) < tol) {
        return key;
      }
      if (Math.abs(normal[0] + value[0]) < tol && Math.abs(normal[1] + value[1]) < tol && Math.abs(normal[2] + value[2]) < tol) {
        return key;
      }
    }
    return null;
  }
  _syncWithVolumeCroppingTool(originalClippingPlanes) {
    const planes = originalClippingPlanes;
    if (planes.length >= 6) {
      this.toolCenterMin = [
        planes[0].origin[0],
        planes[2].origin[1],
        planes[4].origin[2]
      ];
      this.toolCenterMax = [
        planes[1].origin[0],
        planes[3].origin[1],
        planes[5].origin[2]
      ];
      this.toolCenter = [
        (this.toolCenterMin[0] + this.toolCenterMax[0]) / 2,
        (this.toolCenterMin[1] + this.toolCenterMax[1]) / 2,
        (this.toolCenterMin[2] + this.toolCenterMax[2]) / 2
      ];
      const viewportsInfo = this._getViewportsInfo();
      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
        const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
        if (enabledElement) {
          const annotations = this._getAnnotations(enabledElement);
          annotations.forEach((annotation) => {
            if (annotation.data && annotation.data.handles && annotation.data.orientation) {
              const orientation2 = annotation.data.orientation;
              if (orientation2 === "AXIAL") {
                annotation.data.handles.toolCenterMin = [
                  planes[0].origin[0],
                  planes[2].origin[1],
                  annotation.data.handles.toolCenterMin[2]
                ];
                annotation.data.handles.toolCenterMax = [
                  planes[1].origin[0],
                  planes[3].origin[1],
                  annotation.data.handles.toolCenterMax[2]
                ];
              } else if (orientation2 === "CORONAL") {
                annotation.data.handles.toolCenterMin = [
                  planes[0].origin[0],
                  annotation.data.handles.toolCenterMin[1],
                  planes[4].origin[2]
                ];
                annotation.data.handles.toolCenterMax = [
                  planes[1].origin[0],
                  annotation.data.handles.toolCenterMax[1],
                  planes[5].origin[2]
                ];
              } else if (orientation2 === "SAGITTAL") {
                annotation.data.handles.toolCenterMin = [
                  annotation.data.handles.toolCenterMin[0],
                  planes[2].origin[1],
                  planes[4].origin[2]
                ];
                annotation.data.handles.toolCenterMax = [
                  annotation.data.handles.toolCenterMax[0],
                  planes[3].origin[1],
                  planes[5].origin[2]
                ];
              }
              annotation.data.handles.toolCenter = [
                (annotation.data.handles.toolCenterMin[0] + annotation.data.handles.toolCenterMax[0]) / 2,
                (annotation.data.handles.toolCenterMin[1] + annotation.data.handles.toolCenterMax[1]) / 2,
                (annotation.data.handles.toolCenterMin[2] + annotation.data.handles.toolCenterMax[2]) / 2
              ];
            }
          });
        }
      });
      if (this._virtualAnnotations && this._virtualAnnotations.length > 0) {
        this._virtualAnnotations.forEach((annotation) => {
          if (annotation.data && annotation.data.handles && annotation.data.orientation) {
            const orientation2 = annotation.data.orientation.toUpperCase();
            if (orientation2 === "AXIAL") {
              annotation.data.handles.toolCenterMin = [
                planes[0].origin[0],
                planes[2].origin[1],
                annotation.data.handles.toolCenterMin[2]
              ];
              annotation.data.handles.toolCenterMax = [
                planes[1].origin[0],
                planes[3].origin[1],
                annotation.data.handles.toolCenterMax[2]
              ];
            } else if (orientation2 === "CORONAL") {
              annotation.data.handles.toolCenterMin = [
                planes[0].origin[0],
                annotation.data.handles.toolCenterMin[1],
                planes[4].origin[2]
              ];
              annotation.data.handles.toolCenterMax = [
                planes[1].origin[0],
                annotation.data.handles.toolCenterMax[1],
                planes[5].origin[2]
              ];
            } else if (orientation2 === "SAGITTAL") {
              annotation.data.handles.toolCenterMin = [
                annotation.data.handles.toolCenterMin[0],
                planes[2].origin[1],
                planes[4].origin[2]
              ];
              annotation.data.handles.toolCenterMax = [
                annotation.data.handles.toolCenterMax[0],
                planes[3].origin[1],
                planes[5].origin[2]
              ];
            }
            annotation.data.handles.toolCenter = [
              (annotation.data.handles.toolCenterMin[0] + annotation.data.handles.toolCenterMax[0]) / 2,
              (annotation.data.handles.toolCenterMin[1] + annotation.data.handles.toolCenterMax[1]) / 2,
              (annotation.data.handles.toolCenterMin[2] + annotation.data.handles.toolCenterMax[2]) / 2
            ];
          }
        });
      }
      triggerAnnotationRenderForViewportIds_default(viewportsInfo.map(({ viewportId }) => viewportId));
    }
  }
  setToolCenter(toolCenter, handleType) {
    if (handleType === "min") {
      this.toolCenterMin = [...toolCenter];
    } else if (handleType === "max") {
      this.toolCenterMax = [...toolCenter];
    }
    const viewportsInfo = this._getViewportsInfo();
    triggerAnnotationRenderForViewportIds_default(viewportsInfo.map(({ viewportId }) => viewportId));
  }
  addNewAnnotation(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const annotations = this._getAnnotations(enabledElement);
    const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);
    if (!filteredAnnotations || filteredAnnotations.length === 0 || !filteredAnnotations[0]) {
      return null;
    }
    const { data } = filteredAnnotations[0];
    const viewportIdArray = [];
    const referenceLines = data.referenceLines || [];
    for (let i = 0; i < referenceLines.length; ++i) {
      const otherViewport = referenceLines[i][0];
      const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
      if (!viewportControllable) {
        continue;
      }
      viewportIdArray.push(otherViewport.id);
      i++;
    }
    data.activeViewportIds = [...viewportIdArray];
    data.handles.activeOperation = OPERATION.DRAG;
    evt.preventDefault();
    hideElementCursor(element);
    this._activateModify(element);
    return filteredAnnotations[0];
  }
  handleSelectedCallback(evt, annotation, handle, interactionType) {
    this.toolSelectedCallback(evt, annotation, interactionType);
  }
  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {
    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.removeEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
  _subscribeToViewportNewVolumeSet(viewports) {
    viewports.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.addEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
  _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {
    viewportsAnnotationsToUpdate.forEach((annotation) => {
      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);
    });
  }
  _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {
    const { data } = annotation;
    const viewport = renderingEngine.getViewport(data.viewportId);
    const camera = viewport.getCamera();
    const normal = camera.viewPlaneNormal;
    const dotProd = vtkMath.dot(delta, normal);
    const projectedDelta = [...normal];
    vtkMath.multiplyScalar(projectedDelta, dotProd);
    if (Math.abs(projectedDelta[0]) > 1e-3 || Math.abs(projectedDelta[1]) > 1e-3 || Math.abs(projectedDelta[2]) > 1e-3) {
      const newFocalPoint = [0, 0, 0];
      const newPosition = [0, 0, 0];
      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);
      vtkMath.add(camera.position, projectedDelta, newPosition);
      viewport.setCamera({
        focalPoint: newFocalPoint,
        position: newPosition
      });
      viewport.render();
    }
  }
  _pointNearTool(element, annotation, canvasCoords, proximity) {
    const { data } = annotation;
    const referenceLines = data.referenceLines;
    const viewportIdArray = [];
    if (referenceLines) {
      for (let i = 0; i < referenceLines.length; ++i) {
        const otherViewport = referenceLines[i][0];
        const start1 = referenceLines[i][1];
        const end1 = referenceLines[i][2];
        const type = referenceLines[i][3];
        const distance1 = distanceToPoint3(start1, end1, [
          canvasCoords[0],
          canvasCoords[1]
        ]);
        if (distance1 <= proximity) {
          viewportIdArray.push(otherViewport.id);
          data.handles.activeOperation = 1;
          data.handles.activeType = type;
        }
      }
    }
    data.activeViewportIds = [...viewportIdArray];
    this.editData = {
      annotation
    };
    return data.handles.activeOperation === 1 ? true : false;
  }
};
VolumeCroppingControlTool.toolName = "VolumeCroppingControl";
var VolumeCroppingControlTool_default = VolumeCroppingControlTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js
var DEFAULT_MULTIPLIER2 = 4;
var DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;
var PT = "PT";
var WindowLevelTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"]
  }) {
    super(toolProps, defaultToolProps);
    this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {
      const middleSliceIndex = Math.floor(dimensions[2] / 2);
      const frameLength = dimensions[0] * dimensions[1];
      let bytesPerVoxel;
      let TypedArrayConstructor;
      if (scalarData instanceof Float32Array) {
        bytesPerVoxel = 4;
        TypedArrayConstructor = Float32Array;
      } else if (scalarData instanceof Uint8Array) {
        bytesPerVoxel = 1;
        TypedArrayConstructor = Uint8Array;
      } else if (scalarData instanceof Uint16Array) {
        bytesPerVoxel = 2;
        TypedArrayConstructor = Uint16Array;
      } else if (scalarData instanceof Int16Array) {
        bytesPerVoxel = 2;
        TypedArrayConstructor = Int16Array;
      }
      const buffer = scalarData.buffer;
      const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;
      const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);
      const { max, min } = this._getMinMax(frame, frameLength);
      return max - min;
    };
  }
  touchDragCallback(evt) {
    this.mouseDragCallback(evt);
  }
  mouseDragCallback(evt) {
    const { element, deltaPoints } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;
    let isPreScaled = false;
    const properties = viewport.getProperties();
    if (viewport instanceof VolumeViewport_default) {
      volumeId = viewport.getVolumeId();
      viewportsContainingVolumeUID = utilities_exports.getViewportsWithVolumeId(volumeId);
      ({ lower, upper } = properties.voiRange);
      const volume = cache_default.getVolume(volumeId);
      if (!volume) {
        throw new Error("Volume not found " + volumeId);
      }
      modality = volume.metadata.Modality;
      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;
    } else if (properties.voiRange) {
      modality = viewport.modality;
      ({ lower, upper } = properties.voiRange);
      const { preScale = { scaled: false } } = viewport.getImageData?.() || {};
      isPreScaled = preScale.scaled && preScale.scalingParameters?.suvbw !== void 0;
    } else {
      throw new Error("Viewport is not a valid type");
    }
    if (modality === PT && isPreScaled) {
      newRange = this.getPTScaledNewRange({
        deltaPointsCanvas: deltaPoints.canvas,
        lower,
        upper,
        clientHeight: element.clientHeight,
        isPreScaled,
        viewport,
        volumeId
      });
    } else {
      newRange = this.getNewRange({
        viewport,
        deltaPointsCanvas: deltaPoints.canvas,
        volumeId,
        lower,
        upper
      });
    }
    if (newRange.lower >= newRange.upper) {
      return;
    }
    viewport.setProperties({
      voiRange: newRange
    });
    viewport.render();
    if (viewport instanceof VolumeViewport_default) {
      viewportsContainingVolumeUID.forEach((vp) => {
        if (viewport !== vp) {
          vp.render();
        }
      });
      return;
    }
  }
  getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled }) {
    let multiplier = DEFAULT_MULTIPLIER2;
    if (isPreScaled) {
      multiplier = 5 / clientHeight;
    } else {
      multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) || DEFAULT_MULTIPLIER2;
    }
    const deltaY = deltaPointsCanvas[1];
    const wcDelta = deltaY * multiplier;
    upper -= wcDelta;
    upper = isPreScaled ? Math.max(upper, 0.1) : upper;
    return { lower, upper };
  }
  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {
    const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) || DEFAULT_MULTIPLIER2;
    const wwDelta = deltaPointsCanvas[0] * multiplier;
    const wcDelta = deltaPointsCanvas[1] * multiplier;
    let { windowWidth, windowCenter } = utilities_exports.windowLevel.toWindowLevel(lower, upper);
    windowWidth += wwDelta;
    windowCenter += wcDelta;
    windowWidth = Math.max(windowWidth, 1);
    const voiLutFunction = viewport.getProperties().VOILUTFunction;
    return utilities_exports.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);
  }
  _getMultiplierFromDynamicRange(viewport, volumeId) {
    let imageDynamicRange;
    if (volumeId) {
      const imageVolume = cache_default.getVolume(volumeId);
      const { voxelManager } = viewport.getImageData();
      const middleSlicePixelData = voxelManager.getMiddleSliceData();
      const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {
        return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];
      }, [Infinity, -Infinity]);
      const BitsStored = imageVolume?.metadata?.BitsStored;
      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;
      const calculatedRange = calculatedDynamicRange[1] - calculatedDynamicRange[0];
      imageDynamicRange = !Number.isFinite(calculatedRange) ? metadataDynamicRange : Math.min(calculatedRange, metadataDynamicRange);
    } else {
      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);
    }
    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;
    return !Number.isFinite(ratio) ? DEFAULT_IMAGE_DYNAMIC_RANGE : ratio > 1 ? Math.round(ratio) : ratio;
  }
  _getImageDynamicRangeFromViewport(viewport) {
    const { imageData, voxelManager } = viewport.getImageData();
    if (voxelManager?.getRange) {
      const range3 = voxelManager.getRange();
      return range3[1] - range3[0];
    }
    const dimensions = imageData.getDimensions();
    if (imageData.getRange) {
      const imageDataRange = imageData.getRange();
      return imageDataRange[1] - imageDataRange[0];
    }
    let scalarData;
    if (imageData.getScalarData) {
      scalarData = imageData.getScalarData();
    } else {
      scalarData = imageData.getPointData().getScalars().getData();
    }
    if (dimensions[2] !== 1) {
      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);
    }
    let range2;
    if (scalarData.getRange) {
      range2 = scalarData.getRange();
    } else {
      const { min, max } = this._getMinMax(scalarData, scalarData.length);
      range2 = [min, max];
    }
    return range2[1] - range2[0];
  }
  _getMinMax(frame, frameLength) {
    let min = Infinity;
    let max = -Infinity;
    for (let i = 0; i < frameLength; i++) {
      const voxel = frame[i];
      if (voxel < min) {
        min = voxel;
      }
      if (voxel > max) {
        max = voxel;
      }
    }
    return { max, min };
  }
};
WindowLevelTool.toolName = "WindowLevel";
var WindowLevelTool_default = WindowLevelTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js
var WindowLevelRegionTool = class extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      minWindowWidth: 10
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        invalidated: true,
        highlighted: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId
        },
        data: {
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ]
          },
          cachedStats: {}
        }
      };
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender } = this.editData;
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.editData = null;
      this.isDrawing = false;
      removeAnnotation(annotation.annotationUID);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      triggerAnnotationCompleted(annotation);
      this.applyWindowLevelRegion(annotation, element);
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender } = this.editData;
      const { data } = annotation;
      const { currentPoints } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;
      const worldPos = currentPoints.world;
      const { points } = data.handles;
      const DEFAULT_HANDLE_INDEX = 3;
      points[DEFAULT_HANDLE_INDEX] = [...worldPos];
      const bottomLeftCanvas = worldToCanvas(points[0]);
      const topRightCanvas = worldToCanvas(points[3]);
      const bottomRightCanvas = [
        topRightCanvas[0],
        bottomLeftCanvas[1]
      ];
      const topLeftCanvas = [
        bottomLeftCanvas[0],
        topRightCanvas[1]
      ];
      const bottomRightWorld = canvasToWorld(bottomRightCanvas);
      const topLeftWorld = canvasToWorld(topLeftCanvas);
      points[1] = bottomRightWorld;
      points[2] = topLeftWorld;
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        const dataId = `${annotationUID}-rect`;
        const rectangleUID = "0";
        drawRect(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
          color,
          lineDash,
          lineWidth
        }, dataId);
        renderStatus = true;
      }
      return renderStatus;
    };
    this.applyWindowLevelRegion = (annotation, element) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const imageData = windowlevel_exports.extractWindowLevelRegionToolData(viewport);
      const { data } = annotation;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const startCanvas = canvasCoordinates[0];
      const endCanvas = canvasCoordinates[3];
      let left = Math.min(startCanvas[0], endCanvas[0]);
      let top = Math.min(startCanvas[1], endCanvas[1]);
      let width = Math.abs(startCanvas[0] - endCanvas[0]);
      let height = Math.abs(startCanvas[1] - endCanvas[1]);
      left = utilities_exports.clip(left, 0, imageData.width);
      top = utilities_exports.clip(top, 0, imageData.height);
      width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));
      height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));
      const pixelLuminanceData = windowlevel_exports.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);
      const minMaxMean = windowlevel_exports.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);
      if (this.configuration.minWindowWidth === void 0) {
        this.configuration.minWindowWidth = 10;
      }
      const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);
      const windowCenter = minMaxMean.mean;
      const voiLutFunction = viewport.getProperties().VOILUTFunction;
      const voiRange = utilities_exports.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);
      viewport.setProperties({ voiRange });
      viewport.render();
    };
    this.cancel = () => {
      return null;
    };
    this.isPointNearTool = () => {
      return null;
    };
    this.toolSelectedCallback = () => {
      return null;
    };
    this.handleSelectedCallback = () => {
      return null;
    };
    this._activateModify = () => {
      return null;
    };
    this._deactivateModify = () => {
      return null;
    };
  }
};
WindowLevelRegionTool.toolName = "WindowLevelRegion";
var WindowLevelRegionTool_default = WindowLevelRegionTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js
var StackScrollTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      invert: false,
      debounceIfNotLoaded: true,
      loop: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.deltaY = 1;
  }
  mouseWheelCallback(evt) {
    this._scroll(evt);
  }
  mouseDragCallback(evt) {
    this._dragCallback(evt);
  }
  touchDragCallback(evt) {
    this._dragCallback(evt);
  }
  _dragCallback(evt) {
    this._scrollDrag(evt);
  }
  _scrollDrag(evt) {
    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;
    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
    const { debounceIfNotLoaded, invert, loop } = this.configuration;
    const deltaPointY = deltaPoints.canvas[1];
    let volumeId;
    if (viewport instanceof VolumeViewport_default) {
      volumeId = viewport.getVolumeId();
    }
    const pixelsPerImage = this._getPixelPerImage(viewport);
    const deltaY = deltaPointY + this.deltaY;
    if (!pixelsPerImage) {
      return;
    }
    if (Math.abs(deltaY) >= pixelsPerImage) {
      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);
      utilities_exports.scroll(viewport, {
        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,
        volumeId,
        debounceLoading: debounceIfNotLoaded,
        loop
      });
      this.deltaY = deltaY % pixelsPerImage;
    } else {
      this.deltaY = deltaY;
    }
  }
  _scroll(evt) {
    const { wheel, element } = evt.detail;
    const { direction } = wheel;
    const { invert } = this.configuration;
    const { viewport } = getEnabledElement(element);
    const delta = direction * (invert ? -1 : 1);
    utilities_exports.scroll(viewport, {
      delta,
      debounceLoading: this.configuration.debounceIfNotLoaded,
      loop: this.configuration.loop,
      volumeId: viewport instanceof BaseVolumeViewport_default ? viewport.getVolumeId() : void 0,
      scrollSlabs: this.configuration.scrollSlabs
    });
  }
  _getPixelPerImage(viewport) {
    const { element } = viewport;
    const numberOfSlices = viewport.getNumberOfSlices();
    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));
  }
};
StackScrollTool.toolName = "StackScroll";
var StackScrollTool_default = StackScrollTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js
var PlanarRotateTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"]
  }) {
    super(toolProps, defaultToolProps);
    this.mouseWheelCallback = (evt) => {
      const { element, wheel } = evt.detail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { invert } = this.configuration;
      const angle = wheel.direction * 10 * (invert ? -1 : 1);
      this.setAngle(viewport, angle);
    };
    this.touchDragCallback = this._dragCallback.bind(this);
    this.mouseDragCallback = this._dragCallback.bind(this);
  }
  _dragCallback(evt) {
    const { element, currentPoints, startPoints } = evt.detail;
    const currentPointWorld = currentPoints.world;
    const startPointWorld = startPoints.world;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    const width = element.clientWidth;
    const height = element.clientHeight;
    const centerCanvas = [width * 0.5, height * 0.5];
    const centerWorld = viewport.canvasToWorld(centerCanvas);
    let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);
    const { viewPlaneNormal } = camera;
    const v1 = vec3_exports.sub(vec3_exports.create(), centerWorld, startPointWorld);
    const v2 = vec3_exports.sub(vec3_exports.create(), centerWorld, currentPointWorld);
    const cross = vec3_exports.cross(vec3_exports.create(), v1, v2);
    if (vec3_exports.dot(viewPlaneNormal, cross) > 0) {
      angle = -angle;
    }
    if (Number.isNaN(angle)) {
      return;
    }
    this.setAngle(viewport, angle);
  }
  setAngle(viewport, angle) {
    const { viewPlaneNormal, viewUp } = viewport.getCamera();
    if (viewport instanceof BaseVolumeViewport_default) {
      const rotAngle = (angle + 360) % 360 * Math.PI / 180;
      const rotMat = mat4_exports.identity(new Float32Array(16));
      mat4_exports.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);
      const rotatedViewUp = vec3_exports.transformMat4(vec3_exports.create(), viewUp, rotMat);
      viewport.setCamera({ viewUp: rotatedViewUp });
    } else {
      const { rotation } = viewport.getViewPresentation();
      viewport.setViewPresentation({
        rotation: (rotation + angle + 360) % 360
      });
    }
    viewport.render();
  }
};
PlanarRotateTool.toolName = "PlanarRotate";
var PlanarRotateTool_default = PlanarRotateTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js
var ZoomTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      zoomToCenter: false,
      minZoomScale: 1e-3,
      maxZoomScale: 3e3,
      pinchToZoom: true,
      pan: true,
      invert: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      const eventData = evt.detail;
      const { element, currentPoints } = eventData;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const camera = enabledElement.viewport.getCamera();
      const { focalPoint } = camera;
      this.initialMousePosWorld = worldPos;
      let dirVec = vec3_exports.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);
      dirVec = vec3_exports.normalize(vec3_exports.create(), dirVec);
      this.dirVec = dirVec;
      return false;
    };
    this.preTouchStartCallback = (evt) => {
      if (!this.configuration.pinchToZoom) {
        return this.preMouseDownCallback(evt);
      }
    };
    this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {
      const { element, deltaPoints } = evt.detail;
      const deltaY = pinch ? evt.detail.deltaDistance.canvas : deltaPoints.canvas[1];
      const size = [element.clientWidth, element.clientHeight];
      const { parallelScale, focalPoint, position } = camera;
      const zoomScale = 5 / size[1];
      const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);
      const parallelScaleToSet = (1 - k) * parallelScale;
      let focalPointToSet = focalPoint;
      let positionToSet = position;
      if (!this.configuration.zoomToCenter) {
        const distanceToCanvasCenter = vec3_exports.distance(focalPoint, this.initialMousePosWorld);
        positionToSet = vec3_exports.scaleAndAdd(vec3_exports.create(), position, this.dirVec, -distanceToCanvasCenter * k);
        focalPointToSet = vec3_exports.scaleAndAdd(vec3_exports.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);
      }
      const imageData = viewport.getImageData();
      let spacing = [1, 1, 1];
      let cappedParallelScale = parallelScaleToSet;
      let thresholdExceeded = false;
      if (imageData) {
        spacing = imageData.spacing;
        const { dimensions } = imageData;
        const imageWidth = dimensions[0] * spacing[0];
        const imageHeight = dimensions[1] * spacing[1];
        const canvasAspect = size[0] / size[1];
        const insetImageMultiplier = getConfiguration().rendering?.useLegacyCameraFOV ? 1.1 : 1;
        const displayArea = viewport.options?.displayArea;
        const imageAreaScaleX = displayArea?.imageArea?.[0] ?? insetImageMultiplier;
        const imageAreaScaleY = displayArea?.imageArea?.[1] ?? insetImageMultiplier;
        const scaledImageWidth = imageWidth * imageAreaScaleX;
        const scaledImageHeight = imageHeight * imageAreaScaleY;
        const scaledImageAspect = scaledImageWidth / scaledImageHeight;
        let minParallelScaleRequired;
        if (scaledImageAspect > canvasAspect) {
          minParallelScaleRequired = scaledImageWidth / canvasAspect * 0.5;
        } else {
          minParallelScaleRequired = scaledImageHeight * 0.5;
        }
        const { minZoomScale, maxZoomScale } = this.configuration;
        const minScaleInWorld = minParallelScaleRequired / maxZoomScale;
        const maxScaleInWorld = minParallelScaleRequired / minZoomScale;
        if (parallelScaleToSet < minScaleInWorld) {
          cappedParallelScale = minScaleInWorld;
          thresholdExceeded = true;
        } else if (parallelScaleToSet > maxScaleInWorld) {
          cappedParallelScale = maxScaleInWorld;
          thresholdExceeded = true;
        }
      }
      viewport.setCamera({
        parallelScale: cappedParallelScale,
        focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,
        position: thresholdExceeded ? position : positionToSet
      });
    };
    this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {
      const { element, deltaPoints } = evt.detail;
      const deltaY = pinch ? evt.detail.deltaDistance.canvas : deltaPoints.canvas[1];
      const size = [element.clientWidth, element.clientHeight];
      const { position, focalPoint, viewPlaneNormal } = camera;
      const distance = vtkMath.distance2BetweenPoints(position, focalPoint);
      const zoomScale = Math.sqrt(distance) / size[1];
      const directionOfProjection = [
        -viewPlaneNormal[0],
        -viewPlaneNormal[1],
        -viewPlaneNormal[2]
      ];
      const k = this.configuration.invert ? deltaY / zoomScale : deltaY * zoomScale;
      let tmp = k * directionOfProjection[0];
      position[0] += tmp;
      focalPoint[0] += tmp;
      tmp = k * directionOfProjection[1];
      position[1] += tmp;
      focalPoint[1] += tmp;
      tmp = k * directionOfProjection[2];
      position[2] += tmp;
      focalPoint[2] += tmp;
      viewport.setCamera({ position, focalPoint });
    };
    this.initialMousePosWorld = [0, 0, 0];
    this.dirVec = [0, 0, 0];
    if (this.configuration.pinchToZoom) {
      this.touchDragCallback = this._pinchCallback.bind(this);
    } else {
      this.touchDragCallback = this._dragCallback.bind(this);
    }
    this.mouseDragCallback = this._dragCallback.bind(this);
  }
  mouseWheelCallback(evt) {
    this._zoom(evt);
  }
  _pinchCallback(evt) {
    const pointsList = evt.detail.currentPointsList;
    if (pointsList.length > 1) {
      const { element, currentPoints } = evt.detail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const camera = viewport.getCamera();
      const worldPos = currentPoints.world;
      const { focalPoint } = camera;
      this.initialMousePosWorld = worldPos;
      let dirVec = vec3_exports.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);
      dirVec = vec3_exports.normalize(vec3_exports.create(), dirVec);
      this.dirVec = dirVec;
      if (camera.parallelProjection) {
        this._dragParallelProjection(evt, viewport, camera, true);
      } else {
        this._dragPerspectiveProjection(evt, viewport, camera, true);
      }
      viewport.render();
    }
    if (this.configuration.pan) {
      this._panCallback(evt);
    }
  }
  _dragCallback(evt) {
    const { element } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    if (camera.parallelProjection) {
      this._dragParallelProjection(evt, viewport, camera);
    } else {
      this._dragPerspectiveProjection(evt, viewport, camera);
    }
    viewport.render();
  }
  _zoom(evt) {
    const { element, points } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const camera = viewport.getCamera();
    const wheelData = evt.detail.wheel;
    const direction = wheelData.direction;
    const eventDetails = {
      detail: {
        element,
        eventName: Events_default.MOUSE_WHEEL,
        renderingEngineId: enabledElement.renderingEngineId,
        viewportId: viewport.id,
        camera: {},
        deltaPoints: {
          page: points.page,
          client: points.client,
          world: points.world,
          canvas: [0, -direction * 5]
        },
        startPoints: points,
        lastPoints: points,
        currentPoints: points
      }
    };
    if (viewport.type === enums_exports.ViewportType.STACK) {
      this.preMouseDownCallback(eventDetails);
    }
    this._dragCallback(eventDetails);
  }
  _panCallback(evt) {
    const { element, deltaPoints } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const deltaPointsWorld = deltaPoints.world;
    const camera = enabledElement.viewport.getCamera();
    const { focalPoint, position } = camera;
    const updatedPosition = [
      position[0] - deltaPointsWorld[0],
      position[1] - deltaPointsWorld[1],
      position[2] - deltaPointsWorld[2]
    ];
    const updatedFocalPoint = [
      focalPoint[0] - deltaPointsWorld[0],
      focalPoint[1] - deltaPointsWorld[1],
      focalPoint[2] - deltaPointsWorld[2]
    ];
    enabledElement.viewport.setCamera({
      focalPoint: updatedFocalPoint,
      position: updatedPosition
    });
    enabledElement.viewport.render();
  }
};
ZoomTool.toolName = "Zoom";
var ZoomTool_default = ZoomTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js
var MIPJumpToClickTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      targetViewportIds: []
    }
  }) {
    super(toolProps, defaultToolProps);
  }
  mouseClickCallback(evt) {
    const { element, currentPoints } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport, renderingEngine } = enabledElement;
    const volumeId = viewport.getVolumeId();
    if (!volumeId) {
      throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);
    }
    let maxIntensity = -Infinity;
    const maxFn = (intensity, point) => {
      if (intensity > maxIntensity) {
        maxIntensity = intensity;
        return point;
      }
    };
    const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);
    if (!brightestPoint || !brightestPoint.length) {
      return;
    }
    const { targetViewportIds, toolGroupId } = this.configuration;
    const viewports = renderingEngine.getViewports().filter((vp) => {
      if (targetViewportIds?.indexOf(vp.id) >= 0) {
        return true;
      }
      const foundToolGroup = getToolGroupForViewport_default(vp.id, renderingEngine.id);
      if (toolGroupId && toolGroupId === foundToolGroup?.id) {
        return true;
      }
      return false;
    });
    viewports.forEach((viewport2) => {
      if (viewport2 instanceof VolumeViewport_default) {
        viewport2.jumpToWorld(brightestPoint);
      } else {
        console.warn("Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport");
      }
    });
  }
};
MIPJumpToClickTool.toolName = "MIPJumpToClickTool";
var MIPJumpToClickTool_default = MIPJumpToClickTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js
var { RENDERING_DEFAULTS: RENDERING_DEFAULTS2 } = constants_exports;
function defaultReferenceLineColor2() {
  return "rgb(0, 200, 0)";
}
function defaultReferenceLineControllable2() {
  return true;
}
function defaultReferenceLineDraggableRotatable() {
  return true;
}
function defaultReferenceLineSlabThicknessControlsOn() {
  return true;
}
var OPERATION2 = {
  DRAG: 1,
  ROTATE: 2,
  SLAB: 3
};
var CrosshairsTool = class extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse"],
    configuration: {
      shadow: true,
      viewportIndicators: false,
      viewportIndicatorsConfig: {
        radius: 5,
        x: null,
        y: null
      },
      autoPan: {
        enabled: false,
        panSize: 10
      },
      handleRadius: 3,
      enableHDPIHandles: false,
      referenceLinesCenterGapRadius: 20,
      referenceLinesCenterGapRatio: null,
      filterActorUIDsToSetSlabThickness: [],
      slabThicknessBlendMode: enums_exports.BlendModes.MAXIMUM_INTENSITY_BLEND,
      mobile: {
        enabled: false,
        opacity: 0.8,
        handleRadius: 9,
        referenceLinesCenterGapRatio: 0.05
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.toolCenter = [0, 0, 0];
    this.initializeViewport = ({ renderingEngineId, viewportId }) => {
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      if (!enabledElement) {
        return;
      }
      const { FrameOfReferenceUID, viewport } = enabledElement;
      const { element } = viewport;
      const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();
      let annotations = this._getAnnotations(enabledElement);
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (annotations?.length) {
        removeAnnotation(annotations[0].annotationUID);
      }
      const annotation = {
        highlighted: false,
        metadata: {
          cameraPosition: [...position],
          cameraFocalPoint: [...focalPoint],
          FrameOfReferenceUID,
          toolName: this.getToolName()
        },
        data: {
          handles: {
            rotationPoints: [],
            slabThicknessPoints: [],
            toolCenter: this.toolCenter
          },
          activeOperation: null,
          activeViewportIds: [],
          viewportId
        }
      };
      addAnnotation(annotation, element);
      return {
        normal: viewPlaneNormal,
        point: viewport.canvasToWorld([
          viewport.canvas.clientWidth / 2,
          viewport.canvas.clientHeight / 2
        ])
      };
    };
    this._getViewportsInfo = () => {
      const viewports = getToolGroup_default(this.toolGroupId).viewportsInfo;
      return viewports;
    };
    this.resetCrosshairs = () => {
      const viewportsInfo = this._getViewportsInfo();
      for (const viewportInfo of viewportsInfo) {
        const { viewportId, renderingEngineId } = viewportInfo;
        const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
        const viewport = enabledElement.viewport;
        const resetPan = true;
        const resetZoom = true;
        const resetToCenter = true;
        const resetRotation = true;
        const suppressEvents = true;
        viewport.resetCamera({
          resetPan,
          resetZoom,
          resetToCenter,
          resetRotation,
          suppressEvents
        });
        viewport.resetSlabThickness();
        const { element } = viewport;
        let annotations = this._getAnnotations(enabledElement);
        annotations = this.filterInteractableAnnotationsForElement(element, annotations);
        if (annotations.length) {
          removeAnnotation(annotations[0].annotationUID);
        }
        viewport.render();
      }
      this._computeToolCenter(viewportsInfo);
    };
    this.computeToolCenter = () => {
      const viewportsInfo = this._getViewportsInfo();
      this._computeToolCenter(viewportsInfo);
    };
    this._computeToolCenter = (viewportsInfo) => {
      if (!viewportsInfo.length || viewportsInfo.length === 1) {
        console.warn("For crosshairs to operate, at least two viewports must be given.");
        return;
      }
      const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;
      const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);
      const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);
      let normal3 = [0, 0, 0];
      let point3 = vec3_exports.create();
      if (thirdViewport) {
        ({ normal: normal3, point: point3 } = this.initializeViewport(thirdViewport));
      } else {
        vec3_exports.add(point3, point1, point2);
        vec3_exports.scale(point3, point3, 0.5);
        vec3_exports.cross(normal3, normal1, normal2);
      }
      const firstPlane = utilities_exports.planar.planeEquation(normal1, point1);
      const secondPlane = utilities_exports.planar.planeEquation(normal2, point2);
      const thirdPlane = utilities_exports.planar.planeEquation(normal3, point3);
      const toolCenter = utilities_exports.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);
      this.setToolCenter(toolCenter);
    };
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const jumpWorld = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this._jump(enabledElement, jumpWorld);
      const annotations = this._getAnnotations(enabledElement);
      const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);
      const { data } = filteredAnnotations[0];
      const { rotationPoints } = data.handles;
      const viewportIdArray = [];
      for (let i = 0; i < rotationPoints.length - 1; ++i) {
        const otherViewport = rotationPoints[i][1];
        const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
        if (!viewportControllable || !viewportDraggableRotatable) {
          continue;
        }
        viewportIdArray.push(otherViewport.id);
        i++;
      }
      data.activeViewportIds = [...viewportIdArray];
      data.handles.activeOperation = OPERATION2.DRAG;
      evt.preventDefault();
      hideElementCursor(element);
      this._activateModify(element);
      return filteredAnnotations[0];
    };
    this.cancel = () => {
      console.log("Not implemented yet");
    };
    this.handleSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      this._activateModify(element);
      hideElementCursor(element);
      evt.preventDefault();
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      if (this._pointNearTool(element, annotation, canvasCoords, 6)) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation, interactionType) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      this._activateModify(element);
      hideElementCursor(element);
      evt.preventDefault();
    };
    this.onCameraModified = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      const viewport = enabledElement.viewport;
      const annotations = this._getAnnotations(enabledElement);
      const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const viewportAnnotation = filteredToolAnnotations[0];
      if (!viewportAnnotation) {
        return;
      }
      const currentCamera = viewport.getCamera();
      const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;
      const deltaCameraPosition = [0, 0, 0];
      vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);
      const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;
      const deltaCameraFocalPoint = [0, 0, 0];
      vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);
      viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];
      viewportAnnotation.metadata.cameraFocalPoint = [
        ...currentCamera.focalPoint
      ];
      const viewportControllable = this._getReferenceLineControllable(viewport.id);
      const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);
      if (!utilities_exports.isEqual(currentCamera.position, oldCameraPosition, 1e-3) && viewportControllable && viewportDraggableRotatable) {
        let isRotation = false;
        const cameraModifiedSameForPosAndFocalPoint = utilities_exports.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);
        if (!cameraModifiedSameForPosAndFocalPoint) {
          isRotation = true;
        }
        const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 0.01;
        if (!isRotation && !cameraModifiedInPlane) {
          this.toolCenter[0] += deltaCameraPosition[0];
          this.toolCenter[1] += deltaCameraPosition[1];
          this.toolCenter[2] += deltaCameraPosition[2];
          triggerEvent(eventTarget_default, Events_default.CROSSHAIR_TOOL_CENTER_CHANGED, {
            toolGroupId: this.toolGroupId,
            toolCenter: this.toolCenter
          });
        }
      }
      if (this.configuration.autoPan?.enabled) {
        const toolGroup = getToolGroupForViewport_default(viewport.id, renderingEngine.id);
        const otherViewportIds = toolGroup.getViewportIds().filter((id) => id !== viewport.id);
        otherViewportIds.forEach((viewportId) => {
          this._autoPanViewportIfNecessary(viewportId, renderingEngine);
        });
      }
      const requireSameOrientation = false;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.onResetCamera = (evt) => {
      this.resetCrosshairs();
    };
    this.mouseMoveCallback = (evt, filteredToolAnnotations) => {
      const { element, currentPoints } = evt.detail;
      const canvasCoords = currentPoints.canvas;
      let imageNeedsUpdate = false;
      for (let i = 0; i < filteredToolAnnotations.length; i++) {
        const annotation = filteredToolAnnotations[i];
        if (isAnnotationLocked(annotation.annotationUID)) {
          continue;
        }
        const { data, highlighted } = annotation;
        if (!data.handles) {
          continue;
        }
        const previousActiveOperation = data.handles.activeOperation;
        const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0 ? [...data.activeViewportIds] : [];
        data.activeViewportIds = [];
        data.handles.activeOperation = null;
        const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);
        let near = false;
        if (handleNearImagePoint) {
          near = true;
        } else {
          near = this._pointNearTool(element, annotation, canvasCoords, 6);
        }
        const nearToolAndNotMarkedActive = near && !highlighted;
        const notNearToolAndMarkedActive = !near && highlighted;
        if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {
          annotation.highlighted = !highlighted;
          imageNeedsUpdate = true;
        } else if (data.handles.activeOperation !== previousActiveOperation || !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {
          imageNeedsUpdate = true;
        }
      }
      return imageNeedsUpdate;
    };
    this.filterInteractableAnnotationsForElement = (element, annotations) => {
      if (!annotations || !annotations.length) {
        return [];
      }
      const enabledElement = getEnabledElement(element);
      const { viewportId } = enabledElement;
      const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);
      return viewportUIDSpecificCrosshairs;
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport, renderingEngine } = enabledElement;
      const { element } = viewport;
      const annotations = this._getAnnotations(enabledElement);
      const camera = viewport.getCamera();
      const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const viewportAnnotation = filteredToolAnnotations[0];
      if (!annotations?.length || !viewportAnnotation?.data) {
        return renderStatus;
      }
      const annotationUID = viewportAnnotation.annotationUID;
      const { clientWidth, clientHeight } = viewport.canvas;
      const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
      const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);
      const data = viewportAnnotation.data;
      const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);
      const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);
      const referenceLines = [];
      const canvasBox = [0, 0, clientWidth, clientHeight];
      otherViewportAnnotations.forEach((annotation) => {
        const { data: data2 } = annotation;
        data2.handles.toolCenter = this.toolCenter;
        const otherViewport = renderingEngine.getViewport(data2.viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
        const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
        const { clientWidth: clientWidth2, clientHeight: clientHeight2 } = otherViewport.canvas;
        const otherCanvasDiagonalLength = Math.sqrt(clientWidth2 * clientWidth2 + clientHeight2 * clientHeight2);
        const otherCanvasCenter = [
          clientWidth2 * 0.5,
          clientHeight2 * 0.5
        ];
        const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);
        const direction = [0, 0, 0];
        vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);
        vtkMath.normalize(direction);
        vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);
        const pointWorld0 = [0, 0, 0];
        vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);
        const pointWorld1 = [0, 0, 0];
        vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);
        const pointCanvas0 = viewport.worldToCanvas(pointWorld0);
        const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);
        const canvasUnitVectorFromCenter = vec2_exports.create();
        vec2_exports.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);
        vec2_exports.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);
        const canvasVectorFromCenterLong = vec2_exports.create();
        vec2_exports.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);
        const canvasVectorFromCenterMid = vec2_exports.create();
        vec2_exports.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);
        const canvasVectorFromCenterShort = vec2_exports.create();
        vec2_exports.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);
        const canvasVectorFromCenterStart = vec2_exports.create();
        const mobileConfig = this.configuration.mobile;
        const { referenceLinesCenterGapRatio } = mobileConfig?.enabled ? mobileConfig : this.configuration;
        const centerGap = referenceLinesCenterGapRatio > 0 ? canvasMinDimensionLength * referenceLinesCenterGapRatio : this.configuration.referenceLinesCenterGapRadius;
        vec2_exports.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);
        const refLinePointOne = vec2_exports.create();
        const refLinePointTwo = vec2_exports.create();
        const refLinePointThree = vec2_exports.create();
        const refLinePointFour = vec2_exports.create();
        let refLinesCenter = vec2_exports.clone(crosshairCenterCanvas);
        if (!otherViewportDraggableRotatable || !otherViewportControllable) {
          refLinesCenter = vec2_exports.clone(otherViewportCenterCanvas);
        }
        vec2_exports.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);
        vec2_exports.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);
        vec2_exports.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);
        vec2_exports.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);
        clip(refLinePointOne, refLinePointTwo, canvasBox);
        clip(refLinePointThree, refLinePointFour, canvasBox);
        const rotHandleOne = vec2_exports.create();
        vec2_exports.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);
        const rotHandleTwo = vec2_exports.create();
        vec2_exports.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);
        let stHandlesCenterCanvas = vec2_exports.clone(crosshairCenterCanvas);
        if (!otherViewportDraggableRotatable && otherViewportSlabThicknessControlsOn) {
          stHandlesCenterCanvas = vec2_exports.clone(otherViewportCenterCanvas);
        }
        let stHandlesCenterWorld = [...this.toolCenter];
        if (!otherViewportDraggableRotatable && otherViewportSlabThicknessControlsOn) {
          stHandlesCenterWorld = [...otherViewportCenterWorld];
        }
        const worldUnitVectorFromCenter = [0, 0, 0];
        vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);
        vtkMath.normalize(worldUnitVectorFromCenter);
        const { viewPlaneNormal } = camera;
        const { matrix } = vtkMatrixBuilder.buildFromDegree().rotate(90, viewPlaneNormal);
        const worldUnitOrthoVectorFromCenter = [0, 0, 0];
        vec3_exports.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);
        const slabThicknessValue = otherViewport.getSlabThickness();
        const worldOrthoVectorFromCenter = [
          ...worldUnitOrthoVectorFromCenter
        ];
        vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);
        const worldVerticalRefPoint = [0, 0, 0];
        vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);
        const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);
        const canvasOrthoVectorFromCenter = vec2_exports.create();
        vec2_exports.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);
        const stLinePointOne = vec2_exports.create();
        vec2_exports.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);
        vec2_exports.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);
        const stLinePointTwo = vec2_exports.create();
        vec2_exports.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);
        vec2_exports.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);
        clip(stLinePointOne, stLinePointTwo, canvasBox);
        const stLinePointThree = vec2_exports.create();
        vec2_exports.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);
        vec2_exports.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);
        const stLinePointFour = vec2_exports.create();
        vec2_exports.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);
        vec2_exports.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);
        clip(stLinePointThree, stLinePointFour, canvasBox);
        const stHandleOne = vec2_exports.create();
        const stHandleTwo = vec2_exports.create();
        const stHandleThree = vec2_exports.create();
        const stHandleFour = vec2_exports.create();
        vec2_exports.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);
        vec2_exports.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);
        vec2_exports.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);
        vec2_exports.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);
        vec2_exports.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);
        vec2_exports.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);
        vec2_exports.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);
        vec2_exports.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);
        referenceLines.push([
          otherViewport,
          refLinePointOne,
          refLinePointTwo,
          refLinePointThree,
          refLinePointFour,
          stLinePointOne,
          stLinePointTwo,
          stLinePointThree,
          stLinePointFour,
          rotHandleOne,
          rotHandleTwo,
          stHandleOne,
          stHandleTwo,
          stHandleThree,
          stHandleFour
        ]);
      });
      const newRtpoints = [];
      const newStpoints = [];
      const viewportColor = this._getReferenceLineColor(viewport.id);
      const color = viewportColor !== void 0 ? viewportColor : "rgb(200, 200, 200)";
      referenceLines.forEach((line, lineIndex) => {
        const otherViewport = line[0];
        const viewportColor2 = this._getReferenceLineColor(otherViewport.id);
        const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) || this.configuration.mobile?.enabled;
        const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) || this.configuration.mobile?.enabled;
        const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);
        let color2 = viewportColor2 !== void 0 ? viewportColor2 : "rgb(200, 200, 200)";
        let lineWidth = 1;
        const lineActive = data.handles.activeOperation !== null && data.handles.activeOperation === OPERATION2.DRAG && selectedViewportId;
        if (lineActive) {
          lineWidth = 2.5;
        }
        let lineUID = `${lineIndex}`;
        if (viewportControllable && viewportDraggableRotatable) {
          lineUID = `${lineIndex}One`;
          drawLine(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {
            color: color2,
            lineWidth
          });
          lineUID = `${lineIndex}Two`;
          drawLine(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {
            color: color2,
            lineWidth
          });
        } else {
          drawLine(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {
            color: color2,
            lineWidth
          });
        }
        if (viewportControllable) {
          color2 = viewportColor2 !== void 0 ? viewportColor2 : "rgb(200, 200, 200)";
          const rotHandlesActive = data.handles.activeOperation === OPERATION2.ROTATE;
          const rotationHandles = [line[9], line[10]];
          const rotHandleWorldOne = [
            viewport.canvasToWorld(line[9]),
            otherViewport,
            line[1],
            line[2]
          ];
          const rotHandleWorldTwo = [
            viewport.canvasToWorld(line[10]),
            otherViewport,
            line[3],
            line[4]
          ];
          newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);
          const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION2.SLAB;
          const slabThicknessHandles = [line[11], line[12], line[13], line[14]];
          const slabThicknessHandleWorldOne = [
            viewport.canvasToWorld(line[11]),
            otherViewport,
            line[5],
            line[6]
          ];
          const slabThicknessHandleWorldTwo = [
            viewport.canvasToWorld(line[12]),
            otherViewport,
            line[5],
            line[6]
          ];
          const slabThicknessHandleWorldThree = [
            viewport.canvasToWorld(line[13]),
            otherViewport,
            line[7],
            line[8]
          ];
          const slabThicknessHandleWorldFour = [
            viewport.canvasToWorld(line[14]),
            otherViewport,
            line[7],
            line[8]
          ];
          newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);
          let handleRadius = this.configuration.handleRadius * (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);
          let opacity = 1;
          if (this.configuration.mobile?.enabled) {
            handleRadius = this.configuration.mobile.handleRadius;
            opacity = this.configuration.mobile.opacity;
          }
          if ((lineActive || this.configuration.mobile?.enabled) && !rotHandlesActive && !slabThicknessHandlesActive && viewportDraggableRotatable && viewportSlabThicknessControlsOn) {
            let handleUID = `${lineIndex}One`;
            drawHandles_default(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
              color: color2,
              handleRadius,
              opacity,
              type: "circle"
            });
            handleUID = `${lineIndex}Two`;
            drawHandles_default(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {
              color: color2,
              handleRadius,
              opacity,
              type: "rect"
            });
          } else if (lineActive && !rotHandlesActive && !slabThicknessHandlesActive && viewportDraggableRotatable) {
            const handleUID = `${lineIndex}`;
            drawHandles_default(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
              color: color2,
              handleRadius,
              opacity,
              type: "circle"
            });
          } else if (selectedViewportId && !rotHandlesActive && !slabThicknessHandlesActive && viewportSlabThicknessControlsOn) {
            const handleUID = `${lineIndex}`;
            drawHandles_default(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {
              color: color2,
              handleRadius,
              opacity,
              type: "rect"
            });
          } else if (rotHandlesActive && viewportDraggableRotatable) {
            const handleUID = `${lineIndex}`;
            const handleRadius2 = this.configuration.handleRadius * (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);
            drawHandles_default(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
              color: color2,
              handleRadius: handleRadius2,
              fill: color2,
              type: "circle"
            });
          } else if (slabThicknessHandlesActive && selectedViewportId && viewportSlabThicknessControlsOn) {
            const handleRadius2 = this.configuration.handleRadius * (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);
            drawHandles_default(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {
              color: color2,
              handleRadius: handleRadius2,
              fill: color2,
              type: "rect"
            });
          }
          const slabThicknessValue = otherViewport.getSlabThickness();
          if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {
            lineUID = `${lineIndex}STOne`;
            drawLine(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {
              color: color2,
              width: 1,
              lineDash: [2, 3]
            });
            lineUID = `${lineIndex}STTwo`;
            drawLine(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {
              color: color2,
              width: line,
              lineDash: [2, 3]
            });
          }
        }
      });
      renderStatus = true;
      data.handles.rotationPoints = newRtpoints;
      data.handles.slabThicknessPoints = newStpoints;
      if (this.configuration.viewportIndicators) {
        const { viewportIndicatorsConfig } = this.configuration;
        const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;
        const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;
        const referenceColorCoordinates = [
          clientWidth * xOffset,
          clientHeight * yOffset
        ];
        const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;
        const circleUID = "0";
        drawCircle_default(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });
      }
      return renderStatus;
    };
    this._getAnnotations = (enabledElement) => {
      const { viewport } = enabledElement;
      const annotations = getAnnotations(this.getToolName(), viewport.element) || [];
      const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);
      const toolGroupAnnotations = annotations.filter((annotation) => {
        const { data } = annotation;
        return viewportIds.includes(data.viewportId);
      });
      return toolGroupAnnotations;
    };
    this._onNewVolume = () => {
      const viewportsInfo = this._getViewportsInfo();
      this._computeToolCenter(viewportsInfo);
    };
    this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {
      if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {
        return false;
      }
      viewportIdArrayOne.forEach((id) => {
        let itemFound = false;
        for (let i = 0; i < viewportIdArrayTwo.length; ++i) {
          if (id === viewportIdArrayTwo[i]) {
            itemFound = true;
            break;
          }
        }
        if (itemFound === false) {
          return false;
        }
      });
      return true;
    };
    this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {
      const { viewportId, renderingEngine, viewport } = enabledElement;
      const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);
      if (!otherViewportAnnotations || !otherViewportAnnotations.length) {
        return [];
      }
      const camera = viewport.getCamera();
      const { viewPlaneNormal, position } = camera;
      const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {
        const { viewportId: viewportId2 } = annotation.data;
        const targetViewport = renderingEngine.getViewport(viewportId2);
        const cameraOfTarget = targetViewport.getCamera();
        return !(utilities_exports.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 0.01) && utilities_exports.isEqual(cameraOfTarget.position, position, 1));
      });
      return viewportsWithDifferentCameras;
    };
    this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {
      const { renderingEngine } = enabledElement;
      const { data } = referenceAnnotation;
      const viewport = renderingEngine.getViewport(data.viewportId);
      const linkedViewportAnnotations = annotations.filter((annotation) => {
        const { data: data2 } = annotation;
        const otherViewport = renderingEngine.getViewport(data2.viewportId);
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        return otherViewportControllable === true;
      });
      if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {
        return [];
      }
      const camera = viewport.getCamera();
      const viewPlaneNormal = camera.viewPlaneNormal;
      vtkMath.normalize(viewPlaneNormal);
      const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {
        const { viewportId } = annotation.data;
        const otherViewport = renderingEngine.getViewport(viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
        vtkMath.normalize(otherViewPlaneNormal);
        return utilities_exports.isEqual(viewPlaneNormal, otherViewPlaneNormal, 0.01) && utilities_exports.isEqual(camera.viewUp, otherCamera.viewUp, 0.01);
      });
      return otherViewportsAnnotationsWithSameCameraDirection;
    };
    this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {
      const { renderingEngine, viewport } = enabledElement;
      const camera = viewport.getCamera();
      const viewPlaneNormal = camera.viewPlaneNormal;
      vtkMath.normalize(viewPlaneNormal);
      const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {
        const { data } = annotation;
        const otherViewport = renderingEngine.getViewport(data.viewportId);
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        return viewport !== otherViewport && otherViewportControllable === true;
      });
      const otherViewportsAnnotationsWithUniqueCameras = [];
      for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {
        const annotation = otherLinkedViewportAnnotationsFromSameScene[i];
        const { viewportId } = annotation.data;
        const otherViewport = renderingEngine.getViewport(viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
        vtkMath.normalize(otherViewPlaneNormal);
        if (utilities_exports.isEqual(viewPlaneNormal, otherViewPlaneNormal, 0.01) || utilities_exports.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 0.01)) {
          continue;
        }
        let cameraFound = false;
        for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
          const annotation2 = otherViewportsAnnotationsWithUniqueCameras[jj];
          const { viewportId: viewportId2 } = annotation2.data;
          const stockedViewport = renderingEngine.getViewport(viewportId2);
          const cameraOfStocked = stockedViewport.getCamera();
          if (utilities_exports.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 0.01) && utilities_exports.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
            cameraFound = true;
          }
        }
        if (!cameraFound) {
          otherViewportsAnnotationsWithUniqueCameras.push(annotation);
        }
      }
      const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {
        const { data } = annotation;
        const otherViewport = renderingEngine.getViewport(data.viewportId);
        const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
        return viewport !== otherViewport && otherViewportControllable !== true;
      });
      for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {
        const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];
        const { viewportId } = annotation.data;
        const otherViewport = renderingEngine.getViewport(viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
        vtkMath.normalize(otherViewPlaneNormal);
        if (utilities_exports.isEqual(viewPlaneNormal, otherViewPlaneNormal, 0.01) || utilities_exports.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 0.01)) {
          continue;
        }
        let cameraFound = false;
        for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
          const annotation2 = otherViewportsAnnotationsWithUniqueCameras[jj];
          const { viewportId: viewportId2 } = annotation2.data;
          const stockedViewport = renderingEngine.getViewport(viewportId2);
          const cameraOfStocked = stockedViewport.getCamera();
          if (utilities_exports.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 0.01) && utilities_exports.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
            cameraFound = true;
          }
        }
        if (!cameraFound) {
          otherViewportsAnnotationsWithUniqueCameras.push(annotation);
        }
      }
      const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
      for (let i = 0; i < otherViewportAnnotations.length; ++i) {
        const annotation = otherViewportAnnotations[i];
        if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {
          continue;
        }
        const { viewportId } = annotation.data;
        const otherViewport = renderingEngine.getViewport(viewportId);
        const otherCamera = otherViewport.getCamera();
        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
        vtkMath.normalize(otherViewPlaneNormal);
        if (utilities_exports.isEqual(viewPlaneNormal, otherViewPlaneNormal, 0.01) || utilities_exports.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 0.01)) {
          continue;
        }
        let cameraFound = false;
        for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
          const annotation2 = otherViewportsAnnotationsWithUniqueCameras[jj];
          const { viewportId: viewportId2 } = annotation2.data;
          const stockedViewport = renderingEngine.getViewport(viewportId2);
          const cameraOfStocked = stockedViewport.getCamera();
          if (utilities_exports.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 0.01) && utilities_exports.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
            cameraFound = true;
          }
        }
        if (!cameraFound) {
          otherViewportsAnnotationsWithUniqueCameras.push(annotation);
        }
      }
      return otherViewportsAnnotationsWithUniqueCameras;
    };
    this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {
      const volumeIds = viewport.getAllVolumeIds();
      const otherVolumeIds = otherViewport.getAllVolumeIds();
      return volumeIds.length === otherVolumeIds.length && volumeIds.every((id) => otherVolumeIds.includes(id));
    };
    this._jump = (enabledElement, jumpWorld) => {
      state.isInteractingWithTool = true;
      const { viewport, renderingEngine } = enabledElement;
      const annotations = this._getAnnotations(enabledElement);
      const delta = [0, 0, 0];
      vtkMath.subtract(jumpWorld, this.toolCenter, delta);
      const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
        const { data } = annotation;
        const otherViewport = renderingEngine.getViewport(data.viewportId);
        const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);
        return this._getReferenceLineControllable(otherViewport.id) && this._getReferenceLineDraggableRotatable(otherViewport.id) && sameScene;
      });
      if (viewportsAnnotationsToUpdate.length === 0) {
        state.isInteractingWithTool = false;
        return false;
      }
      this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);
      state.isInteractingWithTool = false;
      return true;
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = !this.configuration.mobile?.enabled;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      this.editData.annotation.data.handles.activeOperation = null;
      this.editData.annotation.data.activeViewportIds = [];
      this._deactivateModify(element);
      resetElementCursor(element);
      this.editData = null;
      const requireSameOrientation = false;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragCallback = (evt) => {
      const eventDetail = evt.detail;
      const delta = eventDetail.deltaPoints.world;
      if (Math.abs(delta[0]) < 1e-3 && Math.abs(delta[1]) < 1e-3 && Math.abs(delta[2]) < 1e-3) {
        return;
      }
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const annotations = this._getAnnotations(enabledElement);
      const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const viewportAnnotation = filteredToolAnnotations[0];
      if (!viewportAnnotation) {
        return;
      }
      const { handles } = viewportAnnotation.data;
      const { currentPoints } = evt.detail;
      const canvasCoords = currentPoints.canvas;
      if (handles.activeOperation === OPERATION2.DRAG) {
        const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
        const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
          const { data } = annotation;
          const otherViewport = renderingEngine.getViewport(data.viewportId);
          const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
          const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
          return otherViewportControllable === true && otherViewportDraggableRotatable === true && viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id);
        });
        this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);
      } else if (handles.activeOperation === OPERATION2.ROTATE) {
        const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
        const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
          const { data } = annotation;
          const otherViewport = renderingEngine.getViewport(data.viewportId);
          const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
          const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
          return otherViewportControllable === true && otherViewportDraggableRotatable === true;
        });
        const dir1 = vec2_exports.create();
        const dir2 = vec2_exports.create();
        const center = [
          this.toolCenter[0],
          this.toolCenter[1],
          this.toolCenter[2]
        ];
        const centerCanvas = viewport.worldToCanvas(center);
        const finalPointCanvas = eventDetail.currentPoints.canvas;
        const originalPointCanvas = vec2_exports.create();
        vec2_exports.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);
        vec2_exports.sub(dir1, originalPointCanvas, centerCanvas);
        vec2_exports.sub(dir2, finalPointCanvas, centerCanvas);
        let angle = vec2_exports.angle(dir1, dir2);
        if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {
          angle *= -1;
        }
        angle = Math.round(angle * 100) / 100;
        const rotationAxis = viewport.getCamera().viewPlaneNormal;
        const { matrix } = vtkMatrixBuilder.buildFromRadian().translate(center[0], center[1], center[2]).rotate(angle, rotationAxis).translate(-center[0], -center[1], -center[2]);
        const otherViewportsIds = [];
        viewportsAnnotationsToUpdate.forEach((annotation) => {
          const { data } = annotation;
          data.handles.toolCenter = center;
          const otherViewport = renderingEngine.getViewport(data.viewportId);
          const camera = otherViewport.getCamera();
          const { viewUp, position, focalPoint } = camera;
          viewUp[0] += position[0];
          viewUp[1] += position[1];
          viewUp[2] += position[2];
          vec3_exports.transformMat4(focalPoint, focalPoint, matrix);
          vec3_exports.transformMat4(position, position, matrix);
          vec3_exports.transformMat4(viewUp, viewUp, matrix);
          viewUp[0] -= position[0];
          viewUp[1] -= position[1];
          viewUp[2] -= position[2];
          otherViewport.setCamera({
            position,
            viewUp,
            focalPoint
          });
          otherViewportsIds.push(otherViewport.id);
        });
        renderingEngine.renderViewports(otherViewportsIds);
      } else if (handles.activeOperation === OPERATION2.SLAB) {
        const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
        const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {
          const { data } = annotation;
          const otherViewport = renderingEngine.getViewport(data.viewportId);
          const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
          const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
          return otherViewportControllable === true && otherViewportSlabThicknessControlsOn === true && viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id);
        });
        if (referenceAnnotations.length === 0) {
          return;
        }
        const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);
        const viewportsIds = [];
        viewportsIds.push(viewport.id);
        viewportsAnnotationsToUpdate.forEach((annotation) => {
          const { data } = annotation;
          const otherViewport = renderingEngine.getViewport(data.viewportId);
          const camera = otherViewport.getCamera();
          const normal = camera.viewPlaneNormal;
          const dotProd = vtkMath.dot(delta, normal);
          const projectedDelta = [...normal];
          vtkMath.multiplyScalar(projectedDelta, dotProd);
          if (Math.abs(projectedDelta[0]) > 1e-3 || Math.abs(projectedDelta[1]) > 1e-3 || Math.abs(projectedDelta[2]) > 1e-3) {
            const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] + projectedDelta[1] * projectedDelta[1] + projectedDelta[2] * projectedDelta[2]);
            const currentPoint = eventDetail.lastPoints.world;
            const direction = [0, 0, 0];
            const currentCenter = [
              this.toolCenter[0],
              this.toolCenter[1],
              this.toolCenter[2]
            ];
            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
            if (!viewportDraggableRotatable) {
              const { rotationPoints } = this.editData.annotation.data.handles;
              const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);
              if (otherViewportRotationPoints.length === 2) {
                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);
                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);
                vtkMath.add(point1, point2, currentCenter);
                vtkMath.multiplyScalar(currentCenter, 0.5);
              }
            }
            vtkMath.subtract(currentPoint, currentCenter, direction);
            const dotProdDirection = vtkMath.dot(direction, normal);
            const projectedDirection = [...normal];
            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);
            const normalizedProjectedDirection = [
              projectedDirection[0],
              projectedDirection[1],
              projectedDirection[2]
            ];
            vec3_exports.normalize(normalizedProjectedDirection, normalizedProjectedDirection);
            const normalizedProjectedDelta = [
              projectedDelta[0],
              projectedDelta[1],
              projectedDelta[2]
            ];
            vec3_exports.normalize(normalizedProjectedDelta, normalizedProjectedDelta);
            let slabThicknessValue = otherViewport.getSlabThickness();
            if (utilities_exports.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {
              slabThicknessValue -= mod;
            } else {
              slabThicknessValue += mod;
            }
            slabThicknessValue = Math.abs(slabThicknessValue);
            slabThicknessValue = Math.max(RENDERING_DEFAULTS2.MINIMUM_SLAB_THICKNESS, slabThicknessValue);
            const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);
            if (near) {
              slabThicknessValue = RENDERING_DEFAULTS2.MINIMUM_SLAB_THICKNESS;
            }
            const toolGroup = getToolGroupForViewport_default(otherViewport.id, renderingEngine.id);
            const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());
            crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);
            viewportsIds.push(otherViewport.id);
          }
        });
        renderingEngine.renderViewports(viewportsIds);
      }
    };
    this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {
      const { data } = annotation;
      const { rotationPoints } = data.handles;
      for (let i = 0; i < rotationPoints.length - 1; ++i) {
        const otherViewport = rotationPoints[i][1];
        if (otherViewport.id !== lineViewport.id) {
          continue;
        }
        const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
        if (!viewportControllable) {
          continue;
        }
        const lineSegment1 = {
          start: {
            x: rotationPoints[i][2][0],
            y: rotationPoints[i][2][1]
          },
          end: {
            x: rotationPoints[i][3][0],
            y: rotationPoints[i][3][1]
          }
        };
        const distanceToPoint1 = distanceToPoint3([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
        const lineSegment2 = {
          start: {
            x: rotationPoints[i + 1][2][0],
            y: rotationPoints[i + 1][2][1]
          },
          end: {
            x: rotationPoints[i + 1][3][0],
            y: rotationPoints[i + 1][3][1]
          }
        };
        const distanceToPoint22 = distanceToPoint3([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
        if (distanceToPoint1 <= proximity || distanceToPoint22 <= proximity) {
          return true;
        }
        i++;
      }
      return false;
    };
    this._getReferenceLineColor = toolProps.configuration?.getReferenceLineColor || defaultReferenceLineColor2;
    this._getReferenceLineControllable = toolProps.configuration?.getReferenceLineControllable || defaultReferenceLineControllable2;
    this._getReferenceLineDraggableRotatable = toolProps.configuration?.getReferenceLineDraggableRotatable || defaultReferenceLineDraggableRotatable;
    this._getReferenceLineSlabThicknessControlsOn = toolProps.configuration?.getReferenceLineSlabThicknessControlsOn || defaultReferenceLineSlabThicknessControlsOn;
  }
  onSetToolActive() {
    const viewportsInfo = this._getViewportsInfo();
    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
    this._subscribeToViewportNewVolumeSet(viewportsInfo);
    this._computeToolCenter(viewportsInfo);
  }
  onSetToolPassive() {
    const viewportsInfo = this._getViewportsInfo();
    this._computeToolCenter(viewportsInfo);
  }
  onSetToolEnabled() {
    const viewportsInfo = this._getViewportsInfo();
    this._computeToolCenter(viewportsInfo);
  }
  onSetToolDisabled() {
    const viewportsInfo = this._getViewportsInfo();
    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);
      if (!enabledElement) {
        return;
      }
      const annotations = this._getAnnotations(enabledElement);
      if (annotations?.length) {
        annotations.forEach((annotation) => {
          removeAnnotation(annotation.annotationUID);
        });
      }
    });
  }
  setToolCenter(toolCenter, suppressEvents = false) {
    this.toolCenter = toolCenter;
    const viewportsInfo = this._getViewportsInfo();
    triggerAnnotationRenderForViewportIds_default(viewportsInfo.map(({ viewportId }) => viewportId));
    if (!suppressEvents) {
      triggerEvent(eventTarget_default, Events_default.CROSSHAIR_TOOL_CENTER_CHANGED, {
        toolGroupId: this.toolGroupId,
        toolCenter: this.toolCenter
      });
    }
  }
  getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);
    if (point !== null) {
      return point;
    }
    point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);
    if (point !== null) {
      return point;
    }
  }
  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {
    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.removeEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
  _subscribeToViewportNewVolumeSet(viewports) {
    viewports.forEach(({ viewportId, renderingEngineId }) => {
      const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
      const { element } = viewport;
      element.addEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
    });
  }
  _autoPanViewportIfNecessary(viewportId, renderingEngine) {
    const viewport = renderingEngine.getViewport(viewportId);
    const { clientWidth, clientHeight } = viewport.canvas;
    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);
    const pan = this.configuration.autoPan.panSize;
    const visiblePointCanvas = [
      toolCenterCanvas[0],
      toolCenterCanvas[1]
    ];
    if (toolCenterCanvas[0] < 0) {
      visiblePointCanvas[0] = pan;
    } else if (toolCenterCanvas[0] > clientWidth) {
      visiblePointCanvas[0] = clientWidth - pan;
    }
    if (toolCenterCanvas[1] < 0) {
      visiblePointCanvas[1] = pan;
    } else if (toolCenterCanvas[1] > clientHeight) {
      visiblePointCanvas[1] = clientHeight - pan;
    }
    if (visiblePointCanvas[0] === toolCenterCanvas[0] && visiblePointCanvas[1] === toolCenterCanvas[1]) {
      return;
    }
    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);
    const deltaPointsWorld = [
      visiblePointWorld[0] - this.toolCenter[0],
      visiblePointWorld[1] - this.toolCenter[1],
      visiblePointWorld[2] - this.toolCenter[2]
    ];
    const camera = viewport.getCamera();
    const { focalPoint, position } = camera;
    const updatedPosition = [
      position[0] - deltaPointsWorld[0],
      position[1] - deltaPointsWorld[1],
      position[2] - deltaPointsWorld[2]
    ];
    const updatedFocalPoint = [
      focalPoint[0] - deltaPointsWorld[0],
      focalPoint[1] - deltaPointsWorld[1],
      focalPoint[2] - deltaPointsWorld[2]
    ];
    viewport.setCamera({
      focalPoint: updatedFocalPoint,
      position: updatedPosition
    });
    viewport.render();
  }
  setSlabThickness(viewport, slabThickness) {
    let actorUIDs;
    const { filterActorUIDsToSetSlabThickness } = this.configuration;
    if (filterActorUIDsToSetSlabThickness && filterActorUIDsToSetSlabThickness.length > 0) {
      actorUIDs = filterActorUIDsToSetSlabThickness;
    }
    let blendModeToUse = this.configuration.slabThicknessBlendMode;
    if (slabThickness === RENDERING_DEFAULTS2.MINIMUM_SLAB_THICKNESS) {
      blendModeToUse = enums_exports.BlendModes.COMPOSITE;
    }
    const immediate = false;
    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);
    viewport.setSlabThickness(slabThickness, actorUIDs);
  }
  _isClockWise(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;
  }
  _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {
    viewportsAnnotationsToUpdate.forEach((annotation) => {
      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);
    });
  }
  _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {
    const { data } = annotation;
    const viewport = renderingEngine.getViewport(data.viewportId);
    const camera = viewport.getCamera();
    const normal = camera.viewPlaneNormal;
    const dotProd = vtkMath.dot(delta, normal);
    const projectedDelta = [...normal];
    vtkMath.multiplyScalar(projectedDelta, dotProd);
    if (Math.abs(projectedDelta[0]) > 1e-3 || Math.abs(projectedDelta[1]) > 1e-3 || Math.abs(projectedDelta[2]) > 1e-3) {
      const newFocalPoint = [0, 0, 0];
      const newPosition = [0, 0, 0];
      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);
      vtkMath.add(camera.position, projectedDelta, newPosition);
      viewport.setCamera({
        focalPoint: newFocalPoint,
        position: newPosition
      });
      viewport.render();
    }
  }
  _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {
    const { data } = annotation;
    const { rotationPoints } = data.handles;
    for (let i = 0; i < rotationPoints.length; i++) {
      const point = rotationPoints[i][0];
      const otherViewport = rotationPoints[i][1];
      const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
      if (!viewportControllable) {
        continue;
      }
      const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
      if (!viewportDraggableRotatable) {
        continue;
      }
      const annotationCanvasCoordinate = viewport.worldToCanvas(point);
      if (vec2_exports.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {
        data.handles.activeOperation = OPERATION2.ROTATE;
        this.editData = {
          annotation
        };
        return point;
      }
    }
    return null;
  }
  _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {
    const { data } = annotation;
    const { slabThicknessPoints } = data.handles;
    for (let i = 0; i < slabThicknessPoints.length; i++) {
      const point = slabThicknessPoints[i][0];
      const otherViewport = slabThicknessPoints[i][1];
      const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
      if (!viewportControllable) {
        continue;
      }
      const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
      if (!viewportSlabThicknessControlsOn) {
        continue;
      }
      const annotationCanvasCoordinate = viewport.worldToCanvas(point);
      if (vec2_exports.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {
        data.handles.activeOperation = OPERATION2.SLAB;
        data.activeViewportIds = [otherViewport.id];
        this.editData = {
          annotation
        };
        return point;
      }
    }
    return null;
  }
  _pointNearTool(element, annotation, canvasCoords, proximity) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { clientWidth, clientHeight } = viewport.canvas;
    const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
    const { data } = annotation;
    const { rotationPoints } = data.handles;
    const { slabThicknessPoints } = data.handles;
    const viewportIdArray = [];
    for (let i = 0; i < rotationPoints.length - 1; ++i) {
      const otherViewport = rotationPoints[i][1];
      const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
      const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
      if (!viewportControllable || !viewportDraggableRotatable) {
        continue;
      }
      const lineSegment1 = {
        start: {
          x: rotationPoints[i][2][0],
          y: rotationPoints[i][2][1]
        },
        end: {
          x: rotationPoints[i][3][0],
          y: rotationPoints[i][3][1]
        }
      };
      const distanceToPoint1 = distanceToPoint3([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
      const lineSegment2 = {
        start: {
          x: rotationPoints[i + 1][2][0],
          y: rotationPoints[i + 1][2][1]
        },
        end: {
          x: rotationPoints[i + 1][3][0],
          y: rotationPoints[i + 1][3][1]
        }
      };
      const distanceToPoint22 = distanceToPoint3([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint1 <= proximity || distanceToPoint22 <= proximity) {
        viewportIdArray.push(otherViewport.id);
        data.handles.activeOperation = OPERATION2.DRAG;
      }
      i++;
    }
    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {
      const otherViewport = slabThicknessPoints[i][1];
      if (viewportIdArray.find((id) => id === otherViewport.id)) {
        continue;
      }
      const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
      const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
      if (!viewportControllable || !viewportSlabThicknessControlsOn) {
        continue;
      }
      const stPointLineCanvas1 = slabThicknessPoints[i][2];
      const stPointLineCanvas2 = slabThicknessPoints[i][3];
      const centerCanvas = vec2_exports.create();
      vec2_exports.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);
      vec2_exports.scale(centerCanvas, centerCanvas, 0.5);
      const canvasUnitVectorFromCenter = vec2_exports.create();
      vec2_exports.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);
      vec2_exports.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);
      const canvasVectorFromCenterStart = vec2_exports.create();
      vec2_exports.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);
      const stPointLineCanvas1Start = vec2_exports.create();
      const stPointLineCanvas2Start = vec2_exports.create();
      vec2_exports.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);
      vec2_exports.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);
      const lineSegment1 = {
        start: {
          x: stPointLineCanvas1Start[0],
          y: stPointLineCanvas1Start[1]
        },
        end: {
          x: stPointLineCanvas1[0],
          y: stPointLineCanvas1[1]
        }
      };
      const distanceToPoint1 = distanceToPoint3([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
      const lineSegment2 = {
        start: {
          x: stPointLineCanvas2Start[0],
          y: stPointLineCanvas2Start[1]
        },
        end: {
          x: stPointLineCanvas2[0],
          y: stPointLineCanvas2[1]
        }
      };
      const distanceToPoint22 = distanceToPoint3([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint1 <= proximity || distanceToPoint22 <= proximity) {
        viewportIdArray.push(otherViewport.id);
        data.handles.activeOperation = null;
      }
      i++;
    }
    data.activeViewportIds = [...viewportIdArray];
    this.editData = {
      annotation
    };
    return data.handles.activeOperation === OPERATION2.DRAG ? true : false;
  }
};
CrosshairsTool.toolName = "Crosshairs";
var CrosshairsTool_default = CrosshairsTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js
var MAGNIFY_VIEWPORT_ID = "magnify-viewport";
var MagnifyTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      magnifySize: 10,
      magnifyWidth: 250,
      magnifyHeight: 250
    }
  }) {
    super(toolProps, defaultToolProps);
    this._hasBeenRemoved = false;
    this.preMouseDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      if (!(viewport instanceof StackViewport_default)) {
        throw new Error("MagnifyTool only works on StackViewports");
      }
      const referencedImageId = this._getReferencedImageId(viewport);
      if (!referencedImageId) {
        throw new Error("MagnifyTool: No referenced image id found, reconstructed planes not supported yet");
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        referencedImageId,
        viewportIdsToRender,
        enabledElement,
        renderingEngine,
        currentPoints
      };
      this._createMagnificationViewport();
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return true;
    };
    this.preTouchStartCallback = (evt) => {
      this.preMouseDownCallback(evt);
    };
    this._createMagnificationViewport = () => {
      const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints } = this.editData;
      const { viewport } = enabledElement;
      const { element } = viewport;
      const viewportProperties = viewport.getProperties();
      const { rotation: originalViewportRotation } = viewport.getViewPresentation();
      const { canvas: canvasPos, world: worldPos } = currentPoints;
      let magnifyToolElement;
      magnifyToolElement = element.querySelector(".magnifyTool");
      if (magnifyToolElement === null) {
        const magnifyElement = document.createElement("div");
        magnifyElement.classList.add("magnifyTool");
        magnifyElement.style.display = "block";
        magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;
        magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;
        magnifyElement.style.position = "absolute";
        magnifyToolElement = magnifyElement;
        const viewportElement = element.querySelector(".viewport-element");
        viewportElement.appendChild(magnifyElement);
        const viewportInput = {
          viewportId: MAGNIFY_VIEWPORT_ID,
          type: enums_exports.ViewportType.STACK,
          element: magnifyToolElement
        };
        renderingEngine.enableElement(viewportInput);
      }
      magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;
      magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;
      const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);
      magnifyViewport.setStack([referencedImageId]).then(() => {
        if (this._hasBeenRemoved) {
          return;
        }
        magnifyViewport.setProperties(viewportProperties);
        magnifyViewport.setViewPresentation({
          rotation: originalViewportRotation
        });
        const { parallelScale } = viewport.getCamera();
        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();
        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) + Math.pow(focalPoint[1] - position[1], 2) + Math.pow(focalPoint[2] - position[2], 2));
        const updatedFocalPoint = [
          worldPos[0],
          worldPos[1],
          worldPos[2]
        ];
        const updatedPosition = [
          updatedFocalPoint[0] + distance * viewPlaneNormal[0],
          updatedFocalPoint[1] + distance * viewPlaneNormal[1],
          updatedFocalPoint[2] + distance * viewPlaneNormal[2]
        ];
        magnifyViewport.setCamera({
          parallelScale: parallelScale * (1 / this.configuration.magnifySize),
          focalPoint: updatedFocalPoint,
          position: updatedPosition
        });
        magnifyViewport.render();
      });
      magnifyToolElement.style.display = "block";
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragCallback = (evt) => {
      const eventDetail = evt.detail;
      const { deltaPoints, element, currentPoints } = eventDetail;
      const deltaPointsWorld = deltaPoints.world;
      const canvasPos = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);
      const magnifyElement = element.querySelector(".magnifyTool");
      if (!magnifyElement) {
        return;
      }
      magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;
      magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;
      const { focalPoint, position } = magnifyViewport.getCamera();
      const updatedPosition = [
        position[0] + deltaPointsWorld[0],
        position[1] + deltaPointsWorld[1],
        position[2] + deltaPointsWorld[2]
      ];
      const updatedFocalPoint = [
        focalPoint[0] + deltaPointsWorld[0],
        focalPoint[1] + deltaPointsWorld[1],
        focalPoint[2] + deltaPointsWorld[2]
      ];
      magnifyViewport.setCamera({
        focalPoint: updatedFocalPoint,
        position: updatedPosition
      });
      magnifyViewport.render();
    };
    this._dragEndCallback = (evt) => {
      const { element } = evt.detail;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);
      const viewportElement = element.querySelector(".viewport-element");
      const magnifyToolElement = viewportElement.querySelector(".magnifyTool");
      viewportElement.removeChild(magnifyToolElement);
      this._deactivateDraw(element);
      resetElementCursor(element);
      this._hasBeenRemoved = true;
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      this._hasBeenRemoved = false;
      element.addEventListener(Events_default.MOUSE_UP, this._dragEndCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._dragEndCallback);
      element.addEventListener(Events_default.TOUCH_END, this._dragEndCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._dragEndCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._dragEndCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._dragEndCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
  }
  _getReferencedImageId(viewport) {
    const targetId = this.getTargetId(viewport);
    let referencedImageId;
    if (viewport instanceof StackViewport_default) {
      referencedImageId = targetId.split("imageId:")[1];
    }
    return referencedImageId;
  }
};
MagnifyTool.toolName = "Magnify";
var MagnifyTool_default = MagnifyTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js
var MAGNIFY_CLASSNAME = "advancedMagnifyTool";
var MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;
var { Events: csEvents } = enums_exports;
var isSegmentation = (actor) => actor.uid !== actor.referencedId;
var AdvancedMagnifyToolActions;
(function(AdvancedMagnifyToolActions2) {
  AdvancedMagnifyToolActions2["ShowZoomFactorsList"] = "showZoomFactorsList";
})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));
var ADVANCED_MAGNIFY_TOOL_NAME = "AdvancedMagnify";
var PARALLEL_THRESHOLD4 = 1 - constants_exports.EPSILON;
var _AdvancedMagnifyTool = class _AdvancedMagnifyTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      magnifyingGlass: {
        radius: 125,
        zoomFactor: 3,
        zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],
        autoPan: {
          enabled: true,
          padding: 10
        }
      },
      actions: {
        showZoomFactorsList: {
          method: "showZoomFactorsList",
          bindings: [
            {
              mouseButton: MouseBindings.Secondary,
              modifierKey: KeyboardBindings.Shift
            }
          ]
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      const worldPos = currentPoints.world;
      const canvasPos = currentPoints.canvas;
      const { magnifyingGlass: config2 } = this.configuration;
      const { radius, zoomFactor, autoPan } = config2;
      const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const annotationUID = utilities_exports.uuidv4();
      const magnifyViewportId = utilities_exports.uuidv4();
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        annotationUID,
        highlighted: true,
        invalidated: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId
        },
        data: {
          sourceViewportId: viewport.id,
          magnifyViewportId,
          zoomFactor,
          isCanvasAnnotation: true,
          handles: {
            points: canvasHandlePoints,
            activeHandleIndex: null
          }
        }
      };
      this.magnifyViewportManager.createViewport(annotation, {
        magnifyViewportId,
        sourceEnabledElement: enabledElement,
        position: canvasPos,
        radius,
        zoomFactor,
        autoPan: {
          enabled: autoPan.enabled,
          padding: autoPan.padding,
          callback: (data) => {
            const annotationPoints = annotation.data.handles.points;
            const { canvas: canvasDelta } = data.delta;
            for (let i = 0, len = annotationPoints.length; i < len; i++) {
              const point = annotationPoints[i];
              point[0] += canvasDelta[0];
              point[1] += canvasDelta[1];
              annotation.invalidated = true;
            }
          }
        }
      });
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.onSetToolDisabled = () => {
      this.magnifyViewportManager.dispose();
      const annotations = getAllAnnotations();
      annotations.forEach((annotation) => {
        if (annotation.metadata.toolName === this.getToolName()) {
          removeAnnotation(annotation.annotationUID);
        }
      });
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const { data } = annotation;
      const { points } = data.handles;
      const canvasCoordinates = points;
      const canvasTop = canvasCoordinates[0];
      const canvasBottom = canvasCoordinates[2];
      const canvasLeft = canvasCoordinates[3];
      const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;
      const center = [
        canvasLeft[0] + radius,
        canvasTop[1] + radius
      ];
      const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);
      if (Math.abs(radiusPoint - radius) < proximity * 2) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender
      };
      hideElementCursor(element);
      this._activateModify(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      const { points } = data.handles;
      const handleIndex = points.findIndex((p) => p === handle);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      resetElementCursor(element);
      this.editData = null;
      this.isDrawing = false;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragDrawCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { deltaPoints } = eventDetail;
      const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];
      const { annotation, viewportIdsToRender } = this.editData;
      const { points } = annotation.data.handles;
      points.forEach((point) => {
        point[0] += canvasDelta[0];
        point[1] += canvasDelta[1];
      });
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragModifyCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex } = this.editData;
      const { data } = annotation;
      if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const canvasDelta = deltaPoints.canvas;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += canvasDelta[0];
          point[1] += canvasDelta[1];
        });
        annotation.invalidated = true;
      } else {
        this._dragHandle(evt);
        annotation.invalidated = true;
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragHandle = (evt) => {
      const eventDetail = evt.detail;
      const { annotation } = this.editData;
      const { data } = annotation;
      const { points } = data.handles;
      const canvasCoordinates = points;
      const canvasTop = canvasCoordinates[0];
      const canvasBottom = canvasCoordinates[2];
      const canvasLeft = canvasCoordinates[3];
      const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;
      const canvasCenter = [
        canvasLeft[0] + radius,
        canvasTop[1] + radius
      ];
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const newRadius = getCanvasCircleRadius([
        canvasCenter,
        currentCanvasPoints
      ]);
      const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);
      points[0] = newCanvasHandlePoints[0];
      points[1] = newCanvasHandlePoints[1];
      points[2] = newCanvasHandlePoints[2];
      points[3] = newCanvasHandlePoints[3];
    };
    this.cancel = (element) => {
      if (!this.isDrawing) {
        return;
      }
      this.isDrawing = false;
      this._deactivateModify(element);
      resetElementCursor(element);
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      return annotation.annotationUID;
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId === viewport.id);
      const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!filteredAnnotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < filteredAnnotations.length; i++) {
        const annotation = filteredAnnotations[i];
        const { annotationUID, data } = annotation;
        const { magnifyViewportId, zoomFactor, handles } = data;
        const { points, activeHandleIndex } = handles;
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        const canvasCoordinates = points;
        const canvasTop = canvasCoordinates[0];
        const canvasBottom = canvasCoordinates[2];
        const canvasLeft = canvasCoordinates[3];
        const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;
        const center = [
          canvasLeft[0] + radius,
          canvasTop[1] + radius
        ];
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        const dataId = `${annotationUID}-advancedMagnify`;
        const circleUID = "0";
        drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
          color,
          lineWidth: 5
        }, dataId);
        const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);
        magnifyViewport.position = center;
        magnifyViewport.radius = radius;
        magnifyViewport.zoomFactor = zoomFactor;
        magnifyViewport.update();
        renderStatus = true;
      }
      return renderStatus;
    };
    this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {
      return [
        [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],
        [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],
        [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],
        [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0]
      ];
    };
    this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();
  }
  showZoomFactorsList(evt, annotation) {
    const { element, currentPoints } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { canvas: canvasPoint } = currentPoints;
    const viewportElement = element.querySelector(":scope .viewport-element");
    const currentZoomFactor = annotation.data.zoomFactor;
    const remove = () => dropdown.parentElement.removeChild(dropdown);
    const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {
      if (newZoomFactor !== void 0) {
        annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);
        annotation.invalidated = true;
      }
      remove();
      viewport.render();
    });
    Object.assign(dropdown.style, {
      left: `${canvasPoint[0]}px`,
      top: `${canvasPoint[1]}px`
    });
    viewportElement.appendChild(dropdown);
    dropdown.focus();
  }
  _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {
    const { zoomFactorList } = this.configuration.magnifyingGlass;
    const dropdown = document.createElement("select");
    dropdown.size = 5;
    Object.assign(dropdown.style, {
      width: "50px",
      position: "absolute"
    });
    ["mousedown", "mouseup", "mousemove", "click"].forEach((eventName2) => {
      dropdown.addEventListener(eventName2, (evt) => evt.stopPropagation());
    });
    dropdown.addEventListener("change", (evt) => {
      evt.stopPropagation();
      onChangeCallback(dropdown.value);
    });
    dropdown.addEventListener("keydown", (evt) => {
      const shouldCancel = (evt.keyCode ?? evt.which === 27) || evt.key?.toLowerCase() === "escape";
      if (shouldCancel) {
        evt.stopPropagation();
        onChangeCallback();
      }
    });
    zoomFactorList.forEach((zoomFactor) => {
      const option = document.createElement("option");
      option.label = zoomFactor;
      option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;
      option.value = zoomFactor;
      option.defaultSelected = zoomFactor === currentZoomFactor;
      dropdown.add(option);
    });
    return dropdown;
  }
};
_AdvancedMagnifyTool.Actions = AdvancedMagnifyToolActions;
var AdvancedMagnifyTool = _AdvancedMagnifyTool;
var AdvancedMagnifyViewportManager = class _AdvancedMagnifyViewportManager {
  constructor() {
    this.createViewport = (annotation, viewportInfo) => {
      const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan } = viewportInfo;
      const { viewport: sourceViewport } = sourceEnabledElement;
      const { element: sourceElement } = sourceViewport;
      const magnifyViewport = new AdvancedMagnifyViewport({
        magnifyViewportId,
        sourceEnabledElement,
        radius,
        position,
        zoomFactor,
        autoPan
      });
      this._addSourceElementEventListener(sourceElement);
      this._magnifyViewportsMap.set(magnifyViewport.viewportId, {
        annotation,
        magnifyViewport,
        magnifyViewportInfo: viewportInfo
      });
      return magnifyViewport;
    };
    this._annotationRemovedCallback = (evt) => {
      const { annotation } = evt.detail;
      if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {
        return;
      }
      this.destroyViewport(annotation.data.magnifyViewportId);
    };
    this._newStackImageCallback = (evt) => {
      const { viewportId: sourceViewportId, imageId } = evt.detail;
      const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);
      const { viewport } = getEnabledElementByViewportId(sourceViewportId);
      if (viewport.stackActorReInitialized) {
        this._reset(sourceViewportId);
      }
      magnifyViewportsMapEntries.forEach(({ annotation }) => {
        annotation.metadata.referencedImageId = imageId;
        annotation.invalidated = true;
      });
    };
    this._newVolumeImageCallback = (evt) => {
      const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;
      const renderingEngine = getRenderingEngine(renderingEngineId);
      const sourceViewport = renderingEngine.getViewport(sourceViewportId);
      const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();
      const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);
      magnifyViewportsMapEntries.forEach(({ annotation }) => {
        const { viewPlaneNormal } = annotation.metadata;
        const isParallel = Math.abs(vec3_exports.dot(viewPlaneNormal, currentViewPlaneNormal)) > PARALLEL_THRESHOLD4;
        if (!isParallel) {
          return;
        }
        const { handles } = annotation.data;
        const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);
        const vecHandleToImagePlane = vec3_exports.sub(vec3_exports.create(), worldImagePlanePoint, handles.points[0]);
        const worldDist = vec3_exports.dot(vecHandleToImagePlane, currentViewPlaneNormal);
        const worldDelta = vec3_exports.scale(vec3_exports.create(), currentViewPlaneNormal, worldDist);
        for (let i = 0, len = handles.points.length; i < len; i++) {
          const point = handles.points[i];
          point[0] += worldDelta[0];
          point[1] += worldDelta[1];
          point[2] += worldDelta[2];
        }
        annotation.invalidated = true;
      });
    };
    this._magnifyViewportsMap = /* @__PURE__ */ new Map();
    this._initialize();
  }
  static getInstance() {
    _AdvancedMagnifyViewportManager._singleton = _AdvancedMagnifyViewportManager._singleton ?? new _AdvancedMagnifyViewportManager();
    return _AdvancedMagnifyViewportManager._singleton;
  }
  getViewport(magnifyViewportId) {
    return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;
  }
  dispose() {
    this._removeEventListeners();
    this._destroyViewports();
  }
  destroyViewport(magnifyViewportId) {
    const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);
    if (magnifyViewportMapEntry) {
      const { magnifyViewport } = magnifyViewportMapEntry;
      const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;
      const { element: sourceElement } = sourceViewport;
      this._removeSourceElementEventListener(sourceElement);
      magnifyViewport.dispose();
      this._magnifyViewportsMap.delete(magnifyViewportId);
    }
  }
  _destroyViewports() {
    const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());
    magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));
  }
  _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {
    const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());
    return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {
      const { viewport } = magnifyViewport.sourceEnabledElement;
      return viewport.id === sourceViewportId;
    });
  }
  _reset(sourceViewportId) {
    const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);
    magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {
      this.destroyViewport(magnifyViewport.viewportId);
      const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);
      this.createViewport(annotation, {
        ...magnifyViewportInfo,
        sourceEnabledElement: {
          ...newEnabledElement
        }
      });
    });
  }
  _addEventListeners() {
    eventTarget_default.addEventListener(Events_default.ANNOTATION_REMOVED, this._annotationRemovedCallback);
  }
  _removeEventListeners() {
    eventTarget_default.removeEventListener(Events_default.ANNOTATION_REMOVED, this._annotationRemovedCallback);
  }
  _addSourceElementEventListener(element) {
    element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);
    const newStackHandler = (evt) => {
      const { viewportId: sourceViewportId } = evt.detail;
      this._reset(sourceViewportId);
    };
    element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);
    const newVolumeHandler = (evt) => {
      const { viewportId: sourceViewportId } = evt.detail;
      this._reset(sourceViewportId);
    };
    element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);
    element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);
    element.newStackHandler = newStackHandler;
    element.newVolumeHandler = newVolumeHandler;
  }
  _removeSourceElementEventListener(element) {
    element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);
    element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);
    element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);
    element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);
    delete element.newStackHandler;
    delete element.newVolumeHandler;
  }
  _initialize() {
    this._addEventListeners();
  }
};
var AdvancedMagnifyViewport = class {
  constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan }) {
    this._enabledElement = null;
    this._sourceToolGroup = null;
    this._magnifyToolGroup = null;
    this._isViewportReady = false;
    this._radius = 0;
    this._resized = false;
    this._canAutoPan = false;
    this._viewportId = magnifyViewportId ?? utilities_exports.uuidv4();
    this._sourceEnabledElement = sourceEnabledElement;
    this._autoPan = autoPan;
    this.radius = radius;
    this.position = position;
    this.zoomFactor = zoomFactor;
    this.visible = true;
    this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);
    this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);
    this._handleToolModeChanged = this._handleToolModeChanged.bind(this);
    this._mouseDragCallback = this._mouseDragCallback.bind(this);
    this._resizeViewportAsync = debounce_default(this._resizeViewport.bind(this), 1);
    this._initialize();
  }
  get sourceEnabledElement() {
    return this._sourceEnabledElement;
  }
  get viewportId() {
    return this._viewportId;
  }
  get radius() {
    return this._radius;
  }
  set radius(radius) {
    if (Math.abs(this._radius - radius) > 1e-5) {
      this._radius = radius;
      this._resized = true;
    }
  }
  update() {
    const { radius, position, visible } = this;
    const { viewport } = this._enabledElement;
    const { element } = viewport;
    const size = 2 * radius;
    const [x, y] = position;
    if (this._resized) {
      this._resizeViewportAsync();
      this._resized = false;
    }
    Object.assign(element.style, {
      display: visible ? "block" : "hidden",
      width: `${size}px`,
      height: `${size}px`,
      left: `${-radius}px`,
      top: `${-radius}px`,
      transform: `translate(${x}px, ${y}px)`
    });
    if (this._isViewportReady) {
      this._syncViewports();
      viewport.render();
    }
  }
  dispose() {
    const { viewport } = this._enabledElement;
    const { element } = viewport;
    const renderingEngine = viewport.getRenderingEngine();
    this._removeEventListeners(element);
    renderingEngine.disableElement(viewport.id);
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  }
  _handleToolModeChanged(evt) {
    const { _magnifyToolGroup: magnifyToolGroup } = this;
    const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;
    if (this._sourceToolGroup?.id !== toolGroupId) {
      return;
    }
    switch (mode) {
      case ToolModes_default.Active:
        magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);
        break;
      case ToolModes_default.Passive:
        magnifyToolGroup.setToolPassive(toolName);
        break;
      case ToolModes_default.Enabled:
        magnifyToolGroup.setToolEnabled(toolName);
        break;
      case ToolModes_default.Disabled:
        magnifyToolGroup.setToolDisabled(toolName);
        break;
      default:
        throw new Error(`Unknow tool mode (${mode})`);
    }
  }
  _inheritBorderRadius(magnifyElement) {
    const viewport = magnifyElement.querySelector(".viewport-element");
    const canvas = magnifyElement.querySelector(".cornerstone-canvas");
    viewport.style.borderRadius = "inherit";
    canvas.style.borderRadius = "inherit";
  }
  _createViewportNode() {
    const magnifyElement = document.createElement("div");
    const { radius } = this;
    const size = radius * 2;
    magnifyElement.classList.add(MAGNIFY_CLASSNAME);
    Object.assign(magnifyElement.style, {
      display: "block",
      width: `${size}px`,
      height: `${size}px`,
      position: "absolute",
      overflow: "hidden",
      borderRadius: "50%",
      boxSizing: "border-box",
      left: `${-radius}px`,
      top: `${-radius}px`,
      transform: `translate(-1000px, -1000px)`
    });
    return magnifyElement;
  }
  _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {
    const { parallelScale } = viewport.getCamera();
    const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;
    return parallelScale * (1 / zoomFactor) * canvasRatio;
  }
  _isStackViewport(viewport) {
    return "setStack" in viewport;
  }
  _isVolumeViewport(viewport) {
    return "addVolumes" in viewport;
  }
  _cloneToolGroups(sourceViewport, magnifyViewport) {
    const sourceActors = sourceViewport.getActors();
    const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;
    const sourceToolGroup = getToolGroupForViewport_default(sourceViewport.id, sourceViewport.renderingEngineId);
    const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {
      const toolInstance = sourceToolGroup.getToolInstance(toolName);
      const isAnnotationTool = toolInstance instanceof AnnotationTool_default && !(toolInstance instanceof AdvancedMagnifyTool);
      return isAnnotationTool;
    });
    magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);
    sourceActors.filter(isSegmentation).forEach((actor) => {
      addSegmentationRepresentations(this.viewportId, [
        {
          segmentationId: actor.referencedId,
          type: SegmentationRepresentations_default.Labelmap
        }
      ]);
    });
    return { sourceToolGroup, magnifyToolGroup };
  }
  _cloneStack(sourceViewport, magnifyViewport) {
    const imageIds = sourceViewport.getImageIds();
    magnifyViewport.setStack(imageIds).then(() => {
      this._isViewportReady = true;
      this.update();
    });
  }
  _cloneVolumes(sourceViewport, magnifyViewport) {
    const actors = sourceViewport.getActors();
    const volumeInputArray = actors.filter((actor) => !isSegmentation(actor)).map((actor) => ({ volumeId: actor.uid }));
    magnifyViewport.setVolumes(volumeInputArray).then(() => {
      this._isViewportReady = true;
      this.update();
    });
    return magnifyViewport;
  }
  _cloneViewport(sourceViewport, magnifyElement) {
    const { viewportId: magnifyViewportId } = this;
    const renderingEngine = sourceViewport.getRenderingEngine();
    const { options: sourceViewportOptions } = sourceViewport;
    const viewportInput = {
      element: magnifyElement,
      viewportId: magnifyViewportId,
      type: sourceViewport.type,
      defaultOptions: { ...sourceViewportOptions }
    };
    renderingEngine.enableElement(viewportInput);
    const magnifyViewport = renderingEngine.getViewport(magnifyViewportId);
    if (this._isStackViewport(sourceViewport)) {
      this._cloneStack(sourceViewport, magnifyViewport);
    } else if (this._isVolumeViewport(sourceViewport)) {
      this._cloneVolumes(sourceViewport, magnifyViewport);
    }
    this._inheritBorderRadius(magnifyElement);
    const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);
    this._sourceToolGroup = toolGroups.sourceToolGroup;
    this._magnifyToolGroup = toolGroups.magnifyToolGroup;
  }
  _cancelMouseEventCallback(evt) {
    evt.stopPropagation();
    evt.preventDefault();
  }
  _browserMouseUpCallback(evt) {
    const { element } = this._enabledElement.viewport;
    document.removeEventListener("mouseup", this._browserMouseUpCallback);
    element.addEventListener("mouseup", this._cancelMouseEventCallback);
    element.addEventListener("mousemove", this._cancelMouseEventCallback);
  }
  _browserMouseDownCallback(evt) {
    const { element } = this._enabledElement.viewport;
    this._canAutoPan = !!evt.target?.closest(".advancedMagnifyTool");
    document.addEventListener("mouseup", this._browserMouseUpCallback);
    element.removeEventListener("mouseup", this._cancelMouseEventCallback);
    element.removeEventListener("mousemove", this._cancelMouseEventCallback);
  }
  _mouseDragCallback(evt) {
    if (!state.isInteractingWithTool) {
      return;
    }
    const { _autoPan: autoPan } = this;
    if (!autoPan.enabled || !this._canAutoPan) {
      return;
    }
    const { currentPoints } = evt.detail;
    const { viewport } = this._enabledElement;
    const { canvasToWorld } = viewport;
    const { canvas: canvasCurrent } = currentPoints;
    const { radius: magnifyRadius } = this;
    const canvasCenter = [magnifyRadius, magnifyRadius];
    const dist = distanceToPoint2(canvasCenter, canvasCurrent);
    const maxDist = magnifyRadius - autoPan.padding;
    if (dist <= maxDist) {
      return;
    }
    const panDist = dist - maxDist;
    const canvasDeltaPos = vec2_exports.sub(vec2_exports.create(), canvasCurrent, canvasCenter);
    vec2_exports.normalize(canvasDeltaPos, canvasDeltaPos);
    vec2_exports.scale(canvasDeltaPos, canvasDeltaPos, panDist);
    const newCanvasPosition = vec2_exports.add(vec2_exports.create(), this.position, canvasDeltaPos);
    const currentWorldPos = canvasToWorld(this.position);
    const newWorldPos = canvasToWorld(newCanvasPosition);
    const worldDeltaPos = vec3_exports.sub(vec3_exports.create(), newWorldPos, currentWorldPos);
    const autoPanCallbackData = {
      points: {
        currentPosition: {
          canvas: this.position,
          world: currentWorldPos
        },
        newPosition: {
          canvas: newCanvasPosition,
          world: newWorldPos
        }
      },
      delta: {
        canvas: canvasDeltaPos,
        world: worldDeltaPos
      }
    };
    autoPan.callback(autoPanCallbackData);
  }
  _addBrowserEventListeners(element) {
    document.addEventListener("mousedown", this._browserMouseDownCallback, true);
    element.addEventListener("mousedown", this._cancelMouseEventCallback);
    element.addEventListener("mouseup", this._cancelMouseEventCallback);
    element.addEventListener("mousemove", this._cancelMouseEventCallback);
    element.addEventListener("dblclick", this._cancelMouseEventCallback);
  }
  _removeBrowserEventListeners(element) {
    document.removeEventListener("mousedown", this._browserMouseDownCallback, true);
    document.removeEventListener("mouseup", this._browserMouseUpCallback);
    element.removeEventListener("mousedown", this._cancelMouseEventCallback);
    element.removeEventListener("mouseup", this._cancelMouseEventCallback);
    element.removeEventListener("mousemove", this._cancelMouseEventCallback);
    element.removeEventListener("dblclick", this._cancelMouseEventCallback);
  }
  _addEventListeners(element) {
    eventTarget_default.addEventListener(Events_default.TOOL_MODE_CHANGED, this._handleToolModeChanged);
    element.addEventListener(Events_default.MOUSE_MOVE, this._mouseDragCallback);
    element.addEventListener(Events_default.MOUSE_DRAG, this._mouseDragCallback);
    this._addBrowserEventListeners(element);
  }
  _removeEventListeners(element) {
    eventTarget_default.removeEventListener(Events_default.TOOL_MODE_CHANGED, this._handleToolModeChanged);
    element.addEventListener(Events_default.MOUSE_MOVE, this._mouseDragCallback);
    element.addEventListener(Events_default.MOUSE_DRAG, this._mouseDragCallback);
    this._removeBrowserEventListeners(element);
  }
  _initialize() {
    const { _sourceEnabledElement: sourceEnabledElement } = this;
    const { viewport: sourceViewport } = sourceEnabledElement;
    const { canvas: sourceCanvas } = sourceViewport;
    const magnifyElement = this._createViewportNode();
    sourceCanvas.parentNode.appendChild(magnifyElement);
    this._addEventListeners(magnifyElement);
    this._cloneViewport(sourceViewport, magnifyElement);
    this._enabledElement = getEnabledElement(magnifyElement);
  }
  _syncViewportsCameras(sourceViewport, magnifyViewport) {
    const worldPos = sourceViewport.canvasToWorld(this.position);
    const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);
    const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();
    const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) + Math.pow(focalPoint[1] - position[1], 2) + Math.pow(focalPoint[2] - position[2], 2));
    const updatedFocalPoint = [
      worldPos[0],
      worldPos[1],
      worldPos[2]
    ];
    const updatedPosition = [
      updatedFocalPoint[0] + distance * viewPlaneNormal[0],
      updatedFocalPoint[1] + distance * viewPlaneNormal[1],
      updatedFocalPoint[2] + distance * viewPlaneNormal[2]
    ];
    magnifyViewport.setCamera({
      parallelScale,
      focalPoint: updatedFocalPoint,
      position: updatedPosition
    });
  }
  _syncStackViewports(sourceViewport, magnifyViewport) {
    magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());
  }
  _syncViewports() {
    const { viewport: sourceViewport } = this._sourceEnabledElement;
    const { viewport: magnifyViewport } = this._enabledElement;
    const sourceProperties = sourceViewport.getProperties();
    const imageData = magnifyViewport.getImageData();
    if (!imageData) {
      return;
    }
    magnifyViewport.setProperties(sourceProperties);
    this._syncViewportsCameras(sourceViewport, magnifyViewport);
    if (this._isStackViewport(sourceViewport)) {
      this._syncStackViewports(sourceViewport, magnifyViewport);
    }
    this._syncViewportsCameras(sourceViewport, magnifyViewport);
    magnifyViewport.render();
  }
  _resizeViewport() {
    const { viewport } = this._enabledElement;
    const renderingEngine = viewport.getRenderingEngine();
    renderingEngine.resize();
  }
};
AdvancedMagnifyTool.toolName = "AdvancedMagnify";

// node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js
var { EPSILON: EPSILON10 } = constants_exports;
var ReferenceLines = class extends AnnotationDisplayTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      sourceViewportId: "",
      enforceSameFrameOfReference: true,
      showFullDimension: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.editData = null;
    this._init = () => {
      const renderingEngines = getRenderingEngines();
      const renderingEngine = renderingEngines[0];
      if (!renderingEngine) {
        return;
      }
      let viewports = renderingEngine.getViewports();
      viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());
      const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);
      if (!sourceViewport?.getImageData()) {
        return;
      }
      const { element } = sourceViewport;
      const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();
      const sourceViewportCanvasCornersInWorld = utilities_exports.getViewportImageCornersInWorld(sourceViewport);
      let annotation = this.editData?.annotation;
      const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();
      if (!annotation) {
        const newAnnotation = {
          highlighted: true,
          invalidated: true,
          metadata: {
            toolName: this.getToolName(),
            viewPlaneNormal: [...viewPlaneNormal],
            viewUp: [...viewUp],
            FrameOfReferenceUID,
            referencedImageId: null
          },
          data: {
            handles: {
              points: sourceViewportCanvasCornersInWorld
            }
          }
        };
        addAnnotation(newAnnotation, element);
        annotation = newAnnotation;
      } else {
        this.editData.annotation.data.handles.points = sourceViewportCanvasCornersInWorld;
      }
      this.editData = {
        sourceViewportId: sourceViewport.id,
        renderingEngine,
        annotation
      };
      triggerAnnotationRenderForViewportIds_default(viewports.filter((viewport) => viewport.id !== sourceViewport.id).map((viewport) => viewport.id));
    };
    this.onSetToolEnabled = () => {
      this._init();
    };
    this.onSetToolConfiguration = () => {
      this._init();
    };
    this.onCameraModified = (evt) => {
      this._init();
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      const { viewport: targetViewport } = enabledElement;
      if (!this.editData) {
        return false;
      }
      const { annotation, sourceViewportId } = this.editData;
      let renderStatus = false;
      const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};
      if (!sourceViewport) {
        return renderStatus;
      }
      if (sourceViewport.id === targetViewport.id) {
        return renderStatus;
      }
      if (!annotation || !annotation?.data?.handles?.points) {
        return renderStatus;
      }
      if (this.configuration.enforceSameFrameOfReference && sourceViewport.getFrameOfReferenceUID() !== targetViewport.getFrameOfReferenceUID()) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      const topLeft = annotation.data.handles.points[0];
      const topRight = annotation.data.handles.points[1];
      const bottomLeft = annotation.data.handles.points[2];
      const bottomRight = annotation.data.handles.points[3];
      const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();
      const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();
      if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {
        return renderStatus;
      }
      const targetViewportPlane = utilities_exports.planar.planeEquation(viewPlaneNormal, focalPoint);
      const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];
      const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];
      let pointSetToUse = pointSet1;
      let topBottomVec = vec3_exports.subtract(vec3_exports.create(), pointSet1[0], pointSet1[1]);
      topBottomVec = vec3_exports.normalize(vec3_exports.create(), topBottomVec);
      let topRightVec = vec3_exports.subtract(vec3_exports.create(), pointSet1[2], pointSet1[0]);
      topRightVec = vec3_exports.normalize(vec3_exports.create(), topRightVec);
      const newNormal = vec3_exports.cross(vec3_exports.create(), topBottomVec, topRightVec);
      if (this.isParallel(newNormal, viewPlaneNormal)) {
        return renderStatus;
      }
      if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {
        pointSetToUse = pointSet2;
      }
      const lineStartWorld = utilities_exports.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);
      const lineEndWorld = utilities_exports.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);
      const { annotationUID } = annotation;
      styleSpecifier.annotationUID = annotationUID;
      const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
      const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
      const color = this.getStyle("color", styleSpecifier, annotation);
      const shadow = this.getStyle("shadow", styleSpecifier, annotation);
      let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));
      if (this.configuration.showFullDimension) {
        canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);
      }
      if (canvasCoordinates.length < 2) {
        return renderStatus;
      }
      const dataId = `${annotationUID}-line`;
      const lineUID = "1";
      drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
        color,
        width: lineWidth,
        lineDash,
        shadow
      }, dataId);
      renderStatus = true;
      return renderStatus;
    };
    this.isPerpendicular = (vec1, vec2) => {
      const dot2 = vec3_exports.dot(vec1, vec2);
      return Math.abs(dot2) < EPSILON10;
    };
  }
  handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {
    const renderingEngine = targetViewport.getRenderingEngine();
    const targetId = this.getTargetId(targetViewport);
    const targetImage = this.getTargetImageData(targetId);
    const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);
    if (referencedImageId && targetImage) {
      try {
        const { imageData, dimensions } = targetImage;
        const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord] = [
          imageData.indexToWorld([0, 0, 0]),
          imageData.indexToWorld([dimensions[0] - 1, 0, 0]),
          imageData.indexToWorld([
            dimensions[0] - 1,
            dimensions[1] - 1,
            0
          ]),
          imageData.indexToWorld([0, dimensions[1] - 1, 0])
        ].map((world) => utilities_exports.worldToImageCoords(referencedImageId, world));
        const [lineStartImageCoord, lineEndImageCoord] = [
          lineStartWorld,
          lineEndWorld
        ].map((world) => utilities_exports.worldToImageCoords(referencedImageId, world));
        canvasCoordinates = [
          [topLeftImageCoord, topRightImageCoord],
          [topRightImageCoord, bottomRightImageCoord],
          [bottomLeftImageCoord, bottomRightImageCoord],
          [topLeftImageCoord, bottomLeftImageCoord]
        ].map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord)).filter((point) => point && this.isInBound(point, dimensions)).map((point) => {
          const world = utilities_exports.imageToWorldCoords(referencedImageId, point);
          return targetViewport.worldToCanvas(world);
        });
      } catch (err) {
        console.log(err);
      }
    }
    return canvasCoordinates;
  }
  intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {
    const [x1, y1] = line1Start;
    const [x2, y2] = line1End;
    const [x3, y3] = line2Start;
    const [x4, y4] = line2End;
    const a1 = y2 - y1;
    const b1 = x1 - x2;
    const c1 = x2 * y1 - x1 * y2;
    const a2 = y4 - y3;
    const b2 = x3 - x4;
    const c2 = x4 * y3 - x3 * y4;
    if (Math.abs(a1 * b2 - a2 * b1) < EPSILON10) {
      return;
    }
    const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);
    const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);
    return [x, y];
  }
  isParallel(vec1, vec2) {
    return Math.abs(vec3_exports.dot(vec1, vec2)) > 1 - EPSILON10;
  }
  isInBound(point, dimensions) {
    return point[0] >= 0 && point[0] <= dimensions[0] && point[1] >= 0 && point[1] <= dimensions[1];
  }
};
ReferenceLines.toolName = "ReferenceLines";
var ReferenceLinesTool_default = ReferenceLines;

// node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js
var { EPSILON: EPSILON11 } = constants_exports;
var OverlayGridTool = class extends AnnotationDisplayTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      sourceImageIds: []
    }
  }) {
    super(toolProps, defaultToolProps);
    this.onSetToolEnabled = () => {
      this._init();
    };
    this.onSetToolActive = () => {
      this._init();
    };
    this._init = () => {
      const sourceImageIds = this.configuration.sourceImageIds;
      if (!sourceImageIds?.length) {
        console.warn("OverlayGridTool: No sourceImageIds provided in configuration");
        return;
      }
      const imagePlaneModule = metaData_exports.get("imagePlaneModule", sourceImageIds[0]);
      if (!imagePlaneModule) {
        console.warn("OverlayGridTool: No imagePlaneModule found for sourceImageIds");
        return;
      }
      const { frameOfReferenceUID } = imagePlaneModule;
      const viewportsInfo = getToolGroup_default(this.toolGroupId).viewportsInfo;
      if (!viewportsInfo?.length) {
        console.warn("OverlayGridTool: No viewports found");
        return;
      }
      const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);
      if (!annotations?.length) {
        const pointSets = sourceImageIds.map((id) => {
          return this.calculateImageIdPointSets(id);
        });
        const newAnnotation = {
          highlighted: true,
          invalidated: true,
          metadata: {
            toolName: this.getToolName(),
            FrameOfReferenceUID: frameOfReferenceUID,
            referencedImageId: null
          },
          data: {
            viewportData: /* @__PURE__ */ new Map(),
            pointSets
          }
        };
        addAnnotation(newAnnotation, frameOfReferenceUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportsInfo.map(({ viewportId }) => viewportId));
    };
    this.calculateImageIdPointSets = (imageId) => {
      const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing } = metaData_exports.get("imagePlaneModule", imageId);
      const topLeft = [...imagePositionPatient];
      const topRight = [...imagePositionPatient];
      const bottomLeft = [...imagePositionPatient];
      const bottomRight = [...imagePositionPatient];
      vec3_exports.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);
      vec3_exports.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);
      vec3_exports.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);
      const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];
      const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];
      return { pointSet1, pointSet2 };
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      const sourceImageIds = this.configuration.sourceImageIds;
      let renderStatus = false;
      if (!sourceImageIds?.length) {
        return renderStatus;
      }
      const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;
      const targetImageIds = targetViewport.getImageIds();
      if (targetImageIds.length < 2) {
        return renderStatus;
      }
      const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);
      if (!annotations?.length) {
        return renderStatus;
      }
      const annotation = annotations[0];
      const { annotationUID } = annotation;
      const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      const imageIdNormal = this.getImageIdNormal(sourceImageIds[0]);
      if (this.isParallel(viewPlaneNormal, imageIdNormal)) {
        return renderStatus;
      }
      const targetViewportPlane = utilities_exports.planar.planeEquation(viewPlaneNormal, focalPoint);
      const pointSets = annotation.data.pointSets;
      const viewportData = annotation.data.viewportData;
      for (let i = 0; i < sourceImageIds.length; i++) {
        const { pointSet1, pointSet2 } = pointSets[i];
        const targetData = viewportData.get(targetViewport.id) || this.initializeViewportData(viewportData, targetViewport.id);
        if (!targetData.pointSetsToUse[i]) {
          let pointSetToUse = pointSet1;
          let topBottomVec = vec3_exports.subtract(vec3_exports.create(), pointSet1[0], pointSet1[1]);
          topBottomVec = vec3_exports.normalize(vec3_exports.create(), topBottomVec);
          if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {
            pointSetToUse = pointSet2;
          }
          targetData.pointSetsToUse[i] = pointSetToUse;
          targetData.lineStartsWorld[i] = utilities_exports.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);
          targetData.lineEndsWorld[i] = utilities_exports.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);
        }
        const lineStartWorld = targetData.lineStartsWorld[i];
        const lineEndWorld = targetData.lineEndsWorld[i];
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        const shadow = this.getStyle("shadow", styleSpecifier, annotation);
        const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));
        const dataId = `${annotationUID}-line`;
        const lineUID = `${i}`;
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          width: lineWidth,
          lineDash,
          shadow
        }, dataId);
      }
      renderStatus = true;
      return renderStatus;
    };
    this.initializeViewportData = (viewportData, id) => {
      viewportData.set(id, {
        pointSetsToUse: [],
        lineStartsWorld: [],
        lineEndsWorld: []
      });
      return viewportData.get(id);
    };
    this.isPerpendicular = (vec1, vec2) => {
      const dot2 = vec3_exports.dot(vec1, vec2);
      return Math.abs(dot2) < EPSILON11;
    };
  }
  isParallel(vec1, vec2) {
    return Math.abs(vec3_exports.dot(vec1, vec2)) > 1 - EPSILON11;
  }
  getImageIdNormal(imageId) {
    const { imageOrientationPatient } = metaData_exports.get("imagePlaneModule", imageId);
    const rowCosineVec = vec3_exports.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);
    const colCosineVec = vec3_exports.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);
    return vec3_exports.cross(vec3_exports.create(), rowCosineVec, colCosineVec);
  }
};
OverlayGridTool.toolName = "OverlayGrid";
var OverlayGridTool_default = OverlayGridTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js
var SegmentationIntersectionTool = class extends AnnotationDisplayTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    configuration: {
      opacity: 0.5
    }
  }) {
    super(toolProps, defaultToolProps);
    this._init = () => {
      const viewportsInfo = getToolGroup_default(this.toolGroupId).viewportsInfo;
      if (!viewportsInfo?.length) {
        console.warn(this.getToolName() + "Tool: No viewports found");
        return;
      }
      const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);
      if (!firstViewport) {
        return;
      }
      const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();
      const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);
      if (!annotations?.length) {
        const actorsWorldPointsMap = /* @__PURE__ */ new Map();
        calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);
        const newAnnotation = {
          highlighted: true,
          invalidated: true,
          metadata: {
            toolName: this.getToolName(),
            FrameOfReferenceUID: frameOfReferenceUID,
            referencedImageId: null
          },
          data: {
            actorsWorldPointsMap
          }
        };
        addAnnotation(newAnnotation, frameOfReferenceUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportsInfo.map(({ viewportId }) => viewportId));
    };
    this.onSetToolEnabled = () => {
      this._init();
    };
    this.onCameraModified = (evt) => {
      this._init();
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      const { viewport, FrameOfReferenceUID } = enabledElement;
      let renderStatus = false;
      const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);
      if (!annotations?.length) {
        return renderStatus;
      }
      const annotation = annotations[0];
      const { annotationUID } = annotation;
      const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;
      calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);
      const actorEntries = viewport.getActors();
      const cacheId = getCacheId(viewport);
      actorEntries.forEach((actorEntry) => {
        if (!actorEntry?.clippingFilter) {
          return;
        }
        const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);
        if (!actorWorldPointMap) {
          return;
        }
        if (!actorWorldPointMap.get(cacheId)) {
          return;
        }
        let polyLineIdx = 1;
        const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);
        for (let i = 0; i < worldPointsSet.length; i++) {
          const worldPoints = worldPointsSet[i];
          const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));
          const options = {
            color,
            fillColor: color,
            fillOpacity: this.configuration.opacity,
            closePath: true,
            lineWidth: 2
          };
          const polyLineUID = actorEntry.uid + "#" + polyLineIdx;
          drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);
          polyLineIdx++;
        }
      });
      renderStatus = true;
      return renderStatus;
    };
  }
};
function calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {
  viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
    const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);
    calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);
  });
}
function calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {
  const actorEntries = viewport.getActors();
  const cacheId = getCacheId(viewport);
  actorEntries.forEach((actorEntry) => {
    if (!actorEntry?.clippingFilter) {
      return;
    }
    let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);
    if (!actorWorldPointsMap) {
      actorWorldPointsMap = /* @__PURE__ */ new Map();
      actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);
    }
    if (!actorWorldPointsMap.get(cacheId)) {
      const polyData = actorEntry.clippingFilter.getOutputData();
      const worldPointsSet = utils_exports.getPolyDataPoints(polyData);
      if (!worldPointsSet) {
        return;
      }
      const colorArray = actorEntry.actor.getProperty().getColor();
      const color = colorToString(colorArray);
      actorWorldPointsMap.set(cacheId, { worldPointsSet, color });
    }
  });
}
function getCacheId(viewport) {
  const { viewPlaneNormal } = viewport.getCamera();
  const imageIndex = viewport.getCurrentImageIdIndex();
  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;
}
function colorToString(colorArray) {
  function colorComponentToString(component) {
    let componentString = Math.floor(component * 255).toString(16);
    if (componentString.length === 1) {
      componentString = "0" + componentString;
    }
    return componentString;
  }
  return "#" + colorComponentToString(colorArray[0]) + colorComponentToString(colorArray[1]) + colorComponentToString(colorArray[2]);
}
SegmentationIntersectionTool.toolName = "SegmentationIntersection";
var SegmentationIntersectionTool_default = SegmentationIntersectionTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js
var ReferenceCursors = class extends AnnotationDisplayTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      displayThreshold: 5,
      positionSync: true,
      disableCursor: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isDrawing = false;
    this.isHandleOutsideImage = false;
    this._elementWithCursor = null;
    this._currentCursorWorldPosition = null;
    this._currentCanvasPosition = null;
    this._disableCursorEnabled = false;
    this.mouseMoveCallback = (evt) => {
      const { detail } = evt;
      const { element, currentPoints } = detail;
      this._currentCursorWorldPosition = currentPoints.world;
      this._currentCanvasPosition = currentPoints.canvas;
      this._elementWithCursor = element;
      const annotation = this.getActiveAnnotation(element);
      if (annotation === null) {
        this.createInitialAnnotation(currentPoints.world, element);
        return false;
      }
      this.updateAnnotationPosition(element, annotation);
      return false;
    };
    this.createInitialAnnotation = (worldPos, element) => {
      const enabledElement = getEnabledElement(element);
      if (!enabledElement) {
        throw new Error("No enabled element found");
      }
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      if (!viewPlaneNormal || !viewUp) {
        throw new Error("Camera not found");
      }
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId
        },
        data: {
          label: "",
          handles: {
            points: [[...worldPos]],
            activeHandleIndex: null,
            textBox: {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            }
          }
        }
      };
      const annotations = getAnnotations(this.getToolName(), element);
      if (annotations.length > 0) {
        return null;
      }
      const annotationId = addAnnotation(annotation, element);
      if (annotationId === null) {
        return;
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.onCameraModified = (evt) => {
      const eventDetail = evt.detail;
      const { element, previousCamera, camera } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const viewport = enabledElement.viewport;
      if (element !== this._elementWithCursor) {
        return;
      }
      const oldFocalPoint = previousCamera.focalPoint;
      const cameraNormal = camera.viewPlaneNormal;
      const newFocalPoint = camera.focalPoint;
      const deltaCameraFocalPoint = [0, 0, 0];
      vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);
      if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {
        return;
      }
      const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);
      if (Math.abs(dotProduct) < 0.01) {
        return;
      }
      if (!this._currentCanvasPosition) {
        return;
      }
      const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);
      this._currentCursorWorldPosition = newWorldPos;
      this.updateAnnotationPosition(element, this.getActiveAnnotation(element));
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport, FrameOfReferenceUID } = enabledElement;
      const isElementWithCursor = this._elementWithCursor === viewport.element;
      if (this.configuration.positionSync && !isElementWithCursor) {
        this.updateViewportImage(viewport);
      }
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { handles } = data;
        const { points } = handles;
        if (!annotationUID) {
          return renderStatus;
        }
        styleSpecifier.annotationUID = annotationUID;
        const lineWidthBase = parseFloat(this.getStyle("lineWidth", styleSpecifier, annotation));
        const lineWidth = typeof lineWidthBase === "number" && isElementWithCursor ? lineWidthBase : lineWidthBase;
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        if (points[0].some((e) => isNaN(e))) {
          return renderStatus;
        }
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        const crosshairUIDs = {
          upper: "upper",
          right: "right",
          lower: "lower",
          left: "left"
        };
        const [x, y] = canvasCoordinates[0];
        const centerSpace = isElementWithCursor ? 20 : 7;
        const lineLength = isElementWithCursor ? 5 : 7;
        drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });
        drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });
        drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });
        drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });
        renderStatus = true;
      }
      return renderStatus;
    };
    this._disableCursorEnabled = this.configuration.disableCursor;
  }
  onSetToolActive() {
    this._disableCursorEnabled = this.configuration.disableCursor;
    if (!this._disableCursorEnabled) {
      return;
    }
    const viewportIds = getToolGroup_default(this.toolGroupId).viewportsInfo;
    if (!viewportIds) {
      return;
    }
    const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));
    enabledElements.forEach((element) => {
      if (element) {
        hideElementCursor(element.viewport.element);
      }
    });
  }
  onSetToolDisabled() {
    if (!this._disableCursorEnabled) {
      return;
    }
    const viewportIds = getToolGroup_default(this.toolGroupId).viewportsInfo;
    if (!viewportIds) {
      return;
    }
    const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));
    enabledElements.forEach((element) => {
      if (element) {
        resetElementCursor(element.viewport.element);
      }
    });
  }
  getActiveAnnotation(element) {
    const annotations = getAnnotations(this.getToolName(), element);
    if (!annotations.length) {
      return null;
    }
    const targetAnnotation = annotations[0];
    return targetAnnotation;
  }
  updateAnnotationPosition(element, annotation) {
    const worldPos = this._currentCursorWorldPosition;
    if (!worldPos) {
      return;
    }
    if (!annotation.data?.handles?.points) {
      return;
    }
    annotation.data.handles.points = [[...worldPos]];
    annotation.invalidated = true;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  }
  filterInteractableAnnotationsForElement(element, annotations) {
    if (!(annotations instanceof Array) || annotations.length === 0) {
      return [];
    }
    const annotation = annotations[0];
    const viewport = getEnabledElement(element)?.viewport;
    if (!viewport) {
      return [];
    }
    const camera = viewport.getCamera();
    const { viewPlaneNormal, focalPoint } = camera;
    if (!viewPlaneNormal || !focalPoint) {
      return [];
    }
    const points = annotation.data?.handles?.points;
    if (!(points instanceof Array) || points.length !== 1) {
      return [];
    }
    const worldPos = points[0];
    const plane = utilities_exports.planar.planeEquation(viewPlaneNormal, focalPoint);
    const distance = utilities_exports.planar.planeDistanceToPoint(plane, worldPos);
    return distance < this.configuration.displayThreshold ? [annotation] : [];
  }
  updateViewportImage(viewport) {
    const currentMousePosition = this._currentCursorWorldPosition;
    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {
      return;
    }
    if (viewport instanceof StackViewport_default) {
      const closestIndex = utilities_exports.getClosestStackImageIndexForPoint(currentMousePosition, viewport);
      if (closestIndex === null) {
        return;
      }
      if (closestIndex !== viewport.getCurrentImageIdIndex()) {
        viewport.setImageIdIndex(closestIndex);
      }
    } else if (viewport instanceof VolumeViewport_default) {
      const { focalPoint, viewPlaneNormal } = viewport.getCamera();
      if (!focalPoint || !viewPlaneNormal) {
        return;
      }
      const plane = utilities_exports.planar.planeEquation(viewPlaneNormal, focalPoint);
      const currentDistance = utilities_exports.planar.planeDistanceToPoint(plane, currentMousePosition, true);
      if (Math.abs(currentDistance) < 0.5) {
        return;
      }
      const normalizedViewPlane = vec3_exports.normalize(vec3_exports.create(), vec3_exports.fromValues(...viewPlaneNormal));
      const scaledPlaneNormal = vec3_exports.scale(vec3_exports.create(), normalizedViewPlane, currentDistance);
      const newFocalPoint = vec3_exports.add(vec3_exports.create(), vec3_exports.fromValues(...focalPoint), scaledPlaneNormal);
      const isInBounds = true;
      if (isInBounds) {
        viewport.setCamera({ focalPoint: newFocalPoint });
        const renderingEngine = viewport.getRenderingEngine();
        if (renderingEngine) {
          renderingEngine.renderViewport(viewport.id);
        }
      }
    }
  }
};
ReferenceCursors.toolName = "ReferenceCursors";
var ReferenceCursors_default = ReferenceCursors;

// node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js
var viewportsWithAnnotations = [];
var ScaleOverlayTool = class extends AnnotationDisplayTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    configuration: {
      viewportId: "",
      scaleLocation: "bottom"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.editData = null;
    this._init = () => {
      const renderingEngines = getRenderingEngines();
      const renderingEngine = renderingEngines[0];
      if (!renderingEngine) {
        return;
      }
      const viewportIds = getToolGroup_default(this.toolGroupId).viewportsInfo;
      if (!viewportIds) {
        return;
      }
      const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));
      let { viewport } = enabledElements[0];
      const { FrameOfReferenceUID } = enabledElements[0];
      if (this.configuration.viewportId) {
        enabledElements.forEach((element) => {
          if (element.viewport.id == this.configuration.viewportId) {
            viewport = element.viewport;
          }
        });
      }
      if (!viewport) {
        return;
      }
      const { viewUp, viewPlaneNormal } = viewport.getCamera();
      const viewportCanvasCornersInWorld = utilities_exports.getViewportImageCornersInWorld(viewport);
      let annotation = this.editData?.annotation;
      const annotations = getAnnotations(this.getToolName(), viewport.element);
      if (annotations.length) {
        annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];
      }
      enabledElements.forEach((element) => {
        const { viewport: viewport2 } = element;
        if (!viewportsWithAnnotations.includes(viewport2.id)) {
          const newAnnotation = {
            metadata: {
              toolName: this.getToolName(),
              viewPlaneNormal: [...viewPlaneNormal],
              viewUp: [...viewUp],
              FrameOfReferenceUID,
              referencedImageId: null
            },
            data: {
              handles: {
                points: utilities_exports.getViewportImageCornersInWorld(viewport2)
              },
              viewportId: viewport2.id
            }
          };
          viewportsWithAnnotations.push(viewport2.id);
          addAnnotation(newAnnotation, viewport2.element);
          annotation = newAnnotation;
        }
      });
      if (this.editData?.annotation && this.editData.annotation.data.viewportId == viewport.id) {
        this.editData.annotation.data.handles.points = viewportCanvasCornersInWorld;
        this.editData.annotation.data.viewportId = viewport.id;
      }
      this.editData = {
        viewport,
        renderingEngine,
        annotation
      };
    };
    this.onSetToolEnabled = () => {
      this._init();
    };
    this.onCameraModified = (evt) => {
      this.configuration.viewportId = evt.detail.viewportId;
      this._init();
    };
    this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {
      const scaleSizes = [
        16e3,
        8e3,
        4e3,
        2e3,
        1e3,
        500,
        250,
        100,
        50,
        25,
        10,
        5,
        2
      ];
      let currentScaleSize;
      if (location == "top" || location == "bottom") {
        currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 && scaleSize > worldWidthViewport * 0.2);
      } else {
        currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 && scaleSize > worldHeightViewport * 0.2);
      }
      return currentScaleSize[0];
    };
    this.computeEndScaleTicks = (canvasCoordinates, location) => {
      const locationTickOffset = {
        bottom: [
          [0, -10],
          [0, -10]
        ],
        top: [
          [0, 10],
          [0, 10]
        ],
        left: [
          [0, 0],
          [10, 0]
        ],
        right: [
          [0, 0],
          [-10, 0]
        ]
      };
      const endTick1 = [
        [
          canvasCoordinates[1][0] + locationTickOffset[location][0][0],
          canvasCoordinates[1][1] + locationTickOffset[location][0][0]
        ],
        [
          canvasCoordinates[1][0] + locationTickOffset[location][1][0],
          canvasCoordinates[1][1] + locationTickOffset[location][1][1]
        ]
      ];
      const endTick2 = [
        [
          canvasCoordinates[0][0] + locationTickOffset[location][0][0],
          canvasCoordinates[0][1] + locationTickOffset[location][0][0]
        ],
        [
          canvasCoordinates[0][0] + locationTickOffset[location][1][0],
          canvasCoordinates[0][1] + locationTickOffset[location][1][1]
        ]
      ];
      return {
        endTick1,
        endTick2
      };
    };
    this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {
      let canvasScaleSize;
      if (location == "bottom" || location == "top") {
        canvasScaleSize = rightTick[0][0] - leftTick[0][0];
      } else if (location == "left" || location == "right") {
        canvasScaleSize = rightTick[0][1] - leftTick[0][1];
      }
      const tickIds = [];
      const tickUIDs = [];
      const tickCoordinates = [];
      let numberSmallTicks = scaleSize;
      if (scaleSize >= 50) {
        numberSmallTicks = scaleSize / 10;
      }
      const tickSpacing = canvasScaleSize / numberSmallTicks;
      for (let i = 0; i < numberSmallTicks - 1; i++) {
        const locationOffset = {
          bottom: [
            [tickSpacing * (i + 1), 0],
            [tickSpacing * (i + 1), 5]
          ],
          top: [
            [tickSpacing * (i + 1), 0],
            [tickSpacing * (i + 1), -5]
          ],
          left: [
            [0, tickSpacing * (i + 1)],
            [-5, tickSpacing * (i + 1)]
          ],
          right: [
            [0, tickSpacing * (i + 1)],
            [5, tickSpacing * (i + 1)]
          ]
        };
        tickIds.push(`${annotationUID}-tick${i}`);
        tickUIDs.push(`tick${i}`);
        if ((i + 1) % 5 == 0) {
          tickCoordinates.push([
            [
              leftTick[0][0] + locationOffset[location][0][0],
              leftTick[0][1] + locationOffset[location][0][1]
            ],
            [
              leftTick[1][0] + locationOffset[location][0][0],
              leftTick[1][1] + locationOffset[location][0][1]
            ]
          ]);
        } else {
          tickCoordinates.push([
            [
              leftTick[0][0] + locationOffset[location][0][0],
              leftTick[0][1] + locationOffset[location][0][1]
            ],
            [
              leftTick[1][0] + locationOffset[location][1][0],
              leftTick[1][1] + locationOffset[location][1][1]
            ]
          ]);
        }
      }
      return { tickIds, tickUIDs, tickCoordinates };
    };
    this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {
      let worldCoordinates;
      let topBottomVec = vec3_exports.subtract(vec3_exports.create(), pointSet[0], pointSet[1]);
      topBottomVec = vec3_exports.normalize(vec3_exports.create(), topBottomVec);
      let topRightVec = vec3_exports.subtract(vec3_exports.create(), pointSet[2], pointSet[0]);
      topRightVec = vec3_exports.normalize(vec3_exports.create(), topRightVec);
      const midpointLocation = {
        bottom: [pointSet[1], pointSet[2]],
        top: [pointSet[0], pointSet[3]],
        right: [pointSet[2], pointSet[3]],
        left: [pointSet[0], pointSet[1]]
      };
      const midpoint = vec3_exports.add(vec3_exports.create(), midpointLocation[location][0], midpointLocation[location][0]).map((i) => i / 2);
      const offset = scaleSize / 2 / Math.sqrt(Math.pow(topBottomVec[0], 2) + Math.pow(topBottomVec[1], 2) + Math.pow(topBottomVec[2], 2));
      if (location == "top" || location == "bottom") {
        worldCoordinates = [
          vec3_exports.subtract(vec3_exports.create(), midpoint, topRightVec.map((i) => i * offset)),
          vec3_exports.add(vec3_exports.create(), midpoint, topRightVec.map((i) => i * offset))
        ];
      } else if (location == "left" || location == "right") {
        worldCoordinates = [
          vec3_exports.add(vec3_exports.create(), midpoint, topBottomVec.map((i) => i * offset)),
          vec3_exports.subtract(vec3_exports.create(), midpoint, topBottomVec.map((i) => i * offset))
        ];
      }
      return worldCoordinates;
    };
    this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {
      let scaleCanvasCoordinates;
      if (location == "top" || location == "bottom") {
        const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];
        scaleCanvasCoordinates = [
          [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],
          [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height]
        ];
      } else if (location == "left" || location == "right") {
        const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];
        scaleCanvasCoordinates = [
          [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],
          [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2]
        ];
      }
      return scaleCanvasCoordinates;
    };
    this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {
      const hReduction = horizontalReduction * Math.min(1e3, canvasSize.width);
      const vReduction = verticalReduction * Math.min(1e3, canvasSize.height);
      const locationBounds = {
        bottom: [-vReduction, -hReduction],
        top: [vReduction, hReduction],
        left: [vReduction, hReduction],
        right: [-vReduction, -hReduction]
      };
      const canvasBounds = {
        bottom: [canvasSize.height, canvasSize.width],
        top: [0, canvasSize.width],
        left: [canvasSize.height, 0],
        right: [canvasSize.height, canvasSize.width]
      };
      return {
        height: canvasBounds[location][0] + locationBounds[location][0],
        width: canvasBounds[location][1] + locationBounds[location][1]
      };
    };
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    if (!this.editData || !this.editData.viewport) {
      return;
    }
    const location = this.configuration.scaleLocation;
    const { viewport } = enabledElement;
    const annotations = getAnnotations(this.getToolName(), viewport.element);
    const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];
    const canvas = enabledElement.viewport.canvas;
    const renderStatus = false;
    if (!viewport) {
      return renderStatus;
    }
    const styleSpecifier = {
      toolGroupId: this.toolGroupId,
      toolName: this.getToolName(),
      viewportId: enabledElement.viewport.id
    };
    const canvasSize = {
      width: canvas.width / window.devicePixelRatio || 1,
      height: canvas.height / window.devicePixelRatio || 1
    };
    const topLeft = annotation.data.handles.points[0];
    const topRight = annotation.data.handles.points[1];
    const bottomLeft = annotation.data.handles.points[2];
    const bottomRight = annotation.data.handles.points[3];
    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];
    const worldWidthViewport = vec3_exports.distance(bottomLeft, bottomRight);
    const worldHeightViewport = vec3_exports.distance(topLeft, bottomLeft);
    const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);
    const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);
    const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);
    const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));
    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);
    const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);
    const { annotationUID } = annotation;
    styleSpecifier.annotationUID = annotationUID;
    const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
    const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
    const color = this.getStyle("color", styleSpecifier, annotation);
    const shadow = this.getStyle("shadow", styleSpecifier, annotation);
    const scaleId = `${annotationUID}-scaleline`;
    const scaleLineUID = "1";
    drawLine(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {
      color,
      width: lineWidth,
      lineDash,
      shadow
    }, scaleId);
    const leftTickId = `${annotationUID}-left`;
    const leftTickUID = "2";
    drawLine(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {
      color,
      width: lineWidth,
      lineDash,
      shadow
    }, leftTickId);
    const rightTickId = `${annotationUID}-right`;
    const rightTickUID = "3";
    drawLine(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {
      color,
      width: lineWidth,
      lineDash,
      shadow
    }, rightTickId);
    const locationTextOffest = {
      bottom: [-10, -42],
      top: [-12, -35],
      left: [-40, -20],
      right: [-50, -20]
    };
    const textCanvasCoordinates = [
      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],
      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1]
    ];
    const textBoxLines = this._getTextLines(scaleSize);
    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);
    for (let i = 0; i < tickUIDs.length; i++) {
      drawLine(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {
        color,
        width: lineWidth,
        lineDash,
        shadow
      }, tickIds[i]);
    }
    const textUID = "text0";
    drawTextBox_default(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {
      fontFamily: "Helvetica Neue, Helvetica, Arial, sans-serif",
      fontSize: "14px",
      lineDash: "2,3",
      lineWidth: "1",
      shadow: true,
      color
    });
    return renderStatus;
  }
  _getTextLines(scaleSize) {
    let scaleSizeDisplayValue;
    let scaleSizeUnits;
    if (scaleSize >= 50) {
      scaleSizeDisplayValue = scaleSize / 10;
      scaleSizeUnits = " cm";
    } else {
      scaleSizeDisplayValue = scaleSize;
      scaleSizeUnits = " mm";
    }
    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];
    return textLines;
  }
};
ScaleOverlayTool.toolName = "ScaleOverlay";
var ScaleOverlayTool_default = ScaleOverlayTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/distancePointToContour.js
var distancePointToContour = (viewport, annotation, coords) => {
  if (!annotation?.data?.contour?.polyline?.length) {
    return;
  }
  const { polyline } = annotation.data.contour;
  const { length } = polyline;
  let distance = Infinity;
  for (let i = 0; i < length; i++) {
    const canvasPoint = viewport.worldToCanvas(polyline[i]);
    const distanceToPoint5 = point_exports.distanceToPoint(canvasPoint, coords);
    distance = Math.min(distance, distanceToPoint5);
  }
  if (distance === Infinity || isNaN(distance)) {
    return;
  }
  return distance;
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool/CircleSculptCursor.js
var _CircleSculptCursor = class _CircleSculptCursor {
  constructor() {
    this.toolInfo = {
      toolSize: null,
      maxToolSize: null
    };
  }
  renderShape(svgDrawingHelper, canvasLocation, options) {
    const circleUID = "0";
    drawCircle_default(svgDrawingHelper, "SculptorTool", circleUID, canvasLocation, this.toolInfo.toolSize, options);
  }
  pushHandles(viewport, sculptData) {
    const { points, mouseCanvasPoint } = sculptData;
    const pushedHandles = { first: void 0, last: void 0 };
    const worldRadius = point_exports.distanceToPoint(viewport.canvasToWorld(mouseCanvasPoint), viewport.canvasToWorld([
      mouseCanvasPoint[0] + this.toolInfo.toolSize,
      mouseCanvasPoint[1]
    ]));
    for (let i = 0; i < points.length; i++) {
      const handleCanvasPoint = viewport.worldToCanvas(points[i]);
      const distanceToHandle = point_exports.distanceToPoint(handleCanvasPoint, mouseCanvasPoint);
      if (distanceToHandle > this.toolInfo.toolSize) {
        continue;
      }
      this.pushOneHandle(i, worldRadius, sculptData);
      if (pushedHandles.first === void 0) {
        pushedHandles.first = i;
        pushedHandles.last = i;
      } else {
        pushedHandles.last = i;
      }
    }
    if (pushedHandles.first !== void 0 && pushedHandles.last !== void 0) {
      for (let i = 0; i < _CircleSculptCursor.CHAIN_MAINTENANCE_ITERATIONS; i++) {
        this.maintainChainStructure(sculptData, pushedHandles);
      }
    }
    return pushedHandles;
  }
  configureToolSize(evt) {
    const toolInfo = this.toolInfo;
    if (toolInfo.toolSize && toolInfo.maxToolSize) {
      return;
    }
    const eventData = evt.detail;
    const element = eventData.element;
    const minDim = Math.min(element.clientWidth, element.clientHeight);
    const maxRadius = minDim / 12;
    toolInfo.toolSize = maxRadius;
    toolInfo.maxToolSize = maxRadius;
  }
  updateToolSize(canvasCoords, viewport, activeAnnotation) {
    const toolInfo = this.toolInfo;
    const radius = distancePointToContour(viewport, activeAnnotation, canvasCoords);
    if (radius > 0) {
      toolInfo.toolSize = Math.min(toolInfo.maxToolSize, radius);
    }
  }
  getMaxSpacing(minSpacing) {
    return Math.max(this.toolInfo.toolSize / 4, minSpacing);
  }
  getInsertPosition(previousIndex, nextIndex, sculptData) {
    let insertPosition;
    const { points, element, mouseCanvasPoint } = sculptData;
    const toolSize = this.toolInfo.toolSize;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const previousCanvasPoint = viewport.worldToCanvas(points[previousIndex]);
    const nextCanvasPoint = viewport.worldToCanvas(points[nextIndex]);
    const midPoint3 = [
      (previousCanvasPoint[0] + nextCanvasPoint[0]) / 2,
      (previousCanvasPoint[1] + nextCanvasPoint[1]) / 2
    ];
    const distanceToMidPoint = point_exports.distanceToPoint(mouseCanvasPoint, midPoint3);
    if (distanceToMidPoint < toolSize) {
      const directionUnitVector = {
        x: (midPoint3[0] - mouseCanvasPoint[0]) / distanceToMidPoint,
        y: (midPoint3[1] - mouseCanvasPoint[1]) / distanceToMidPoint
      };
      insertPosition = [
        mouseCanvasPoint[0] + toolSize * directionUnitVector.x,
        mouseCanvasPoint[1] + toolSize * directionUnitVector.y
      ];
    } else {
      insertPosition = midPoint3;
    }
    const worldPosition = viewport.canvasToWorld(insertPosition);
    return worldPosition;
  }
  pushOneHandle(i, worldRadius, sculptData) {
    const { points, mousePoint } = sculptData;
    const handle = points[i];
    const directionUnitVector = this.directionalVector(mousePoint, handle);
    const position = vec3_exports.scaleAndAdd(vec3_exports.create(), mousePoint, directionUnitVector, worldRadius);
    handle[0] = position[0];
    handle[1] = position[1];
    handle[2] = position[2];
  }
  directionalVector(p1, p2) {
    return vec3_exports.normalize(vec3_exports.create(), [
      p2[0] - p1[0],
      p2[1] - p1[1],
      p2[2] - p1[2]
    ]);
  }
  calculateMeanConsecutiveDistance(points) {
    if (points.length < 2) {
      return 0;
    }
    let totalDistance = 0;
    const numPoints = points.length;
    for (let i = 0; i < numPoints; i++) {
      const nextIndex = (i + 1) % numPoints;
      const distance = point_exports.distanceToPoint(points[i], points[nextIndex]);
      totalDistance += distance;
    }
    return totalDistance / numPoints;
  }
  maintainChainStructure(sculptData, pushedHandles) {
    const { points } = sculptData;
    const first = pushedHandles.first;
    const last = pushedHandles.last;
    const mean = Math.round((first + last) / 2);
    const numPoints = points.length;
    if (!sculptData.meanDistance) {
      sculptData.meanDistance = this.calculateMeanConsecutiveDistance(points);
    }
    const maxInterDistance = sculptData.meanDistance * _CircleSculptCursor.MAX_INTER_DISTANCE_FACTOR;
    for (let i = mean; i >= 0; i--) {
      if (i >= numPoints - 1 || i < 0) {
        continue;
      }
      const nextIndex = i + 1;
      const distanceToNext = point_exports.distanceToPoint(points[i], points[nextIndex]);
      if (distanceToNext > maxInterDistance) {
        const pullDirection = this.directionalVector(points[i], points[nextIndex]);
        const pullStrength = (distanceToNext - sculptData.meanDistance) / sculptData.meanDistance;
        const adjustmentMagnitude = pullStrength * sculptData.meanDistance * _CircleSculptCursor.CHAIN_PULL_STRENGTH_FACTOR;
        points[i][0] += pullDirection[0] * adjustmentMagnitude;
        points[i][1] += pullDirection[1] * adjustmentMagnitude;
        points[i][2] += pullDirection[2] * adjustmentMagnitude;
      }
    }
    for (let i = mean + 1; i < numPoints; i++) {
      if (i >= numPoints || i <= 0) {
        continue;
      }
      const previousIndex = i - 1;
      const distanceToPrevious = point_exports.distanceToPoint(points[i], points[previousIndex]);
      if (distanceToPrevious > maxInterDistance) {
        const pullDirection = this.directionalVector(points[i], points[previousIndex]);
        const pullStrength = (distanceToPrevious - sculptData.meanDistance) / sculptData.meanDistance;
        const adjustmentMagnitude = pullStrength * sculptData.meanDistance * _CircleSculptCursor.CHAIN_PULL_STRENGTH_FACTOR;
        points[i][0] += pullDirection[0] * adjustmentMagnitude;
        points[i][1] += pullDirection[1] * adjustmentMagnitude;
        points[i][2] += pullDirection[2] * adjustmentMagnitude;
      }
    }
  }
};
_CircleSculptCursor.shapeName = "Circle";
_CircleSculptCursor.CHAIN_MAINTENANCE_ITERATIONS = 3;
_CircleSculptCursor.CHAIN_PULL_STRENGTH_FACTOR = 0.3;
_CircleSculptCursor.MAX_INTER_DISTANCE_FACTOR = 1.2;
var CircleSculptCursor = _CircleSculptCursor;
var CircleSculptCursor_default = CircleSculptCursor;

// node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js
var SculptorTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      minSpacing: 1,
      referencedToolNames: [
        "PlanarFreehandROI",
        "PlanarFreehandContourSegmentationTool"
      ],
      toolShape: "circle",
      referencedToolName: "PlanarFreehandROI",
      updateCursorSize: "dynamic"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.registeredShapes = /* @__PURE__ */ new Map();
    this.isActive = false;
    this.commonData = {
      activeAnnotationUID: null,
      viewportIdsToRender: [],
      isEditingOpenContour: false,
      canvasLocation: void 0
    };
    this.preMouseDownCallback = (evt) => {
      const eventData = evt.detail;
      const element = eventData.element;
      this.configureToolSize(evt);
      this.selectFreehandTool(eventData);
      if (this.commonData.activeAnnotationUID === null) {
        return;
      }
      this.isActive = true;
      hideElementCursor(element);
      this.activateModify(element);
      return true;
    };
    this.mouseMoveCallback = (evt) => {
      if (this.mode === ToolModes_default.Active) {
        this.configureToolSize(evt);
        this.updateCursor(evt);
      } else {
        this.commonData.canvasLocation = void 0;
      }
    };
    this.endCallback = (evt) => {
      const eventData = evt.detail;
      const { element } = eventData;
      const config2 = this.configuration;
      const enabledElement = getEnabledElement(element);
      this.isActive = false;
      this.deactivateModify(element);
      resetElementCursor(element);
      const { renderingEngineId, viewportId } = enabledElement;
      const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
      const toolInstance = toolGroup.getToolInstance(config2.referencedToolName);
      const annotations = this.filterSculptableAnnotationsForElement(element);
      const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);
      if (toolInstance.configuration.calculateStats) {
        activeAnnotation.invalidated = true;
      }
      triggerAnnotationModified(activeAnnotation, element, ChangeTypes_default.HandlesUpdated);
    };
    this.dragCallback = (evt) => {
      const eventData = evt.detail;
      const element = eventData.element;
      this.updateCursor(evt);
      const annotations = this.filterSculptableAnnotationsForElement(element);
      const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);
      if (!annotations?.length || !this.isActive) {
        return;
      }
      const points = activeAnnotation.data.contour.polyline;
      this.sculpt(eventData, points);
    };
    this.registerShapes(CircleSculptCursor_default.shapeName, CircleSculptCursor_default);
    this.setToolShape(this.configuration.toolShape);
  }
  registerShapes(shapeName, shapeClass) {
    const shape = new shapeClass();
    this.registeredShapes.set(shapeName, shape);
  }
  sculpt(eventData, points) {
    const config2 = this.configuration;
    const element = eventData.element;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const cursorShape = this.registeredShapes.get(this.selectedShape);
    this.sculptData = {
      mousePoint: eventData.currentPoints.world,
      mouseCanvasPoint: eventData.currentPoints.canvas,
      deltaWorld: eventData.deltaPoints.world,
      points,
      maxSpacing: cursorShape.getMaxSpacing(config2.minSpacing),
      element
    };
    const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);
    if (pushedHandles.first !== void 0) {
      this.insertNewHandles(pushedHandles);
    }
  }
  interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {
    const { element } = this.sculptData;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const nextHandleIndex = contourIndex(i + 1, points.length);
    const currentCanvasPoint = viewport.worldToCanvas(points[i]);
    const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);
    const distanceToNextHandle = point_exports.distanceToPoint(currentCanvasPoint, nextCanvasPoint);
    if (distanceToNextHandle > maxSpacing) {
      indicesToInsertAfter.push(i);
    }
  }
  updateCursor(evt) {
    const eventData = evt.detail;
    const element = eventData.element;
    const enabledElement = getEnabledElement(element);
    const { renderingEngine, viewport } = enabledElement;
    this.commonData.viewportIdsToRender = [viewport.id];
    const annotations = this.filterSculptableAnnotationsForElement(element);
    if (!annotations?.length) {
      return;
    }
    const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);
    this.commonData.canvasLocation = eventData.currentPoints.canvas;
    if (this.isActive) {
      activeAnnotation.highlighted = true;
    } else {
      const cursorShape = this.registeredShapes.get(this.selectedShape);
      const canvasCoords = eventData.currentPoints.canvas;
      if (this.configuration.updateCursorSize === "dynamic") {
        cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);
      }
    }
    triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);
  }
  filterSculptableAnnotationsForElement(element) {
    const config2 = this.configuration;
    const enabledElement = getEnabledElement(element);
    const { renderingEngineId, viewportId } = enabledElement;
    const sculptableAnnotations = [];
    const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
    const toolInstance = toolGroup.getToolInstance(config2.referencedToolName);
    config2.referencedToolNames.forEach((referencedToolName) => {
      const annotations = getAnnotations(referencedToolName, element);
      if (annotations) {
        sculptableAnnotations.push(...annotations);
      }
    });
    return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);
  }
  configureToolSize(evt) {
    const cursorShape = this.registeredShapes.get(this.selectedShape);
    cursorShape.configureToolSize(evt);
  }
  insertNewHandles(pushedHandles) {
    const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);
    let newIndexModifier = 0;
    for (let i = 0; i < indicesToInsertAfter?.length; i++) {
      const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;
      this.insertHandleRadially(insertIndex);
      newIndexModifier++;
    }
  }
  findNewHandleIndices(pushedHandles) {
    const { points, maxSpacing } = this.sculptData;
    const indicesToInsertAfter = [];
    for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {
      this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);
    }
    return indicesToInsertAfter;
  }
  insertHandleRadially(insertIndex) {
    const { points } = this.sculptData;
    if (insertIndex > points.length - 1 && this.commonData.isEditingOpenContour) {
      return;
    }
    const cursorShape = this.registeredShapes.get(this.selectedShape);
    const previousIndex = insertIndex - 1;
    const nextIndex = contourIndex(insertIndex, points.length);
    const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);
    const handleData = insertPosition;
    points.splice(insertIndex, 0, handleData);
  }
  selectFreehandTool(eventData) {
    const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);
    if (closestAnnotationUID === void 0) {
      return;
    }
    this.commonData.activeAnnotationUID = closestAnnotationUID;
  }
  getClosestFreehandToolOnElement(eventData) {
    const { element } = eventData;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const config2 = this.configuration;
    const annotations = this.filterSculptableAnnotationsForElement(element);
    if (!annotations?.length) {
      return;
    }
    const canvasPoints = eventData.currentPoints.canvas;
    const closest = {
      distance: Infinity,
      toolIndex: void 0,
      annotationUID: void 0
    };
    for (let i = 0; i < annotations?.length; i++) {
      if (annotations[i].isLocked || !annotations[i].isVisible) {
        continue;
      }
      const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);
      if (distanceFromTool === -1) {
        continue;
      }
      if (distanceFromTool < closest.distance) {
        closest.distance = distanceFromTool;
        closest.toolIndex = i;
        closest.annotationUID = annotations[i].annotationUID;
      }
    }
    this.commonData.isEditingOpenContour = !annotations[closest.toolIndex].data.contour.closed;
    config2.referencedToolName = annotations[closest.toolIndex].metadata.toolName;
    return closest.annotationUID;
  }
  activateModify(element) {
    element.addEventListener(Events_default.MOUSE_UP, this.endCallback);
    element.addEventListener(Events_default.MOUSE_CLICK, this.endCallback);
    element.addEventListener(Events_default.MOUSE_DRAG, this.dragCallback);
    element.addEventListener(Events_default.TOUCH_TAP, this.endCallback);
    element.addEventListener(Events_default.TOUCH_END, this.endCallback);
    element.addEventListener(Events_default.TOUCH_DRAG, this.dragCallback);
  }
  deactivateModify(element) {
    element.removeEventListener(Events_default.MOUSE_UP, this.endCallback);
    element.removeEventListener(Events_default.MOUSE_CLICK, this.endCallback);
    element.removeEventListener(Events_default.MOUSE_DRAG, this.dragCallback);
    element.removeEventListener(Events_default.TOUCH_TAP, this.endCallback);
    element.removeEventListener(Events_default.TOUCH_END, this.endCallback);
    element.removeEventListener(Events_default.TOUCH_DRAG, this.dragCallback);
  }
  setToolShape(toolShape) {
    this.selectedShape = this.registeredShapes.get(toolShape) ?? CircleSculptCursor_default.shapeName;
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    const { viewport } = enabledElement;
    const { element } = viewport;
    const viewportIdsToRender = this.commonData.viewportIdsToRender;
    if (!this.commonData.canvasLocation || this.mode !== ToolModes_default.Active || !viewportIdsToRender.includes(viewport.id)) {
      return;
    }
    const annotations = this.filterSculptableAnnotationsForElement(element);
    if (!annotations?.length) {
      return;
    }
    const styleSpecifier = {
      toolGroupId: this.toolGroupId,
      toolName: this.getToolName(),
      viewportId: enabledElement.viewport.id
    };
    let color = getStyleProperty("color", styleSpecifier, AnnotationStyleStates_default.Default, this.mode);
    if (this.isActive) {
      color = getStyleProperty("color", styleSpecifier, AnnotationStyleStates_default.Highlighted, this.mode);
    }
    const cursorShape = this.registeredShapes.get(this.selectedShape);
    cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {
      color
    });
  }
};
var contourIndex = (i, length) => {
  return (i + length) % length;
};
SculptorTool.toolName = "SculptorTool";
var SculptorTool_default = SculptorTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js
var DIRECTIONS = {
  X: [1, 0, 0],
  Y: [0, 1, 0],
  Z: [0, 0, 1],
  CUSTOM: []
};
var VolumeRotateTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      direction: DIRECTIONS.Z,
      rotateIncrementDegrees: 30
    }
  }) {
    super(toolProps, defaultToolProps);
  }
  mouseWheelCallback(evt) {
    const { element, wheel } = evt.detail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { direction, rotateIncrementDegrees } = this.configuration;
    const camera = viewport.getCamera();
    const { viewUp, position, focalPoint } = camera;
    const { direction: deltaY } = wheel;
    const [cx, cy, cz] = focalPoint;
    const [ax, ay, az] = direction;
    const angle = deltaY * (rotateIncrementDegrees * Math.PI) / 180;
    const newPosition = [0, 0, 0];
    const newFocalPoint = [0, 0, 0];
    const newViewUp = [0, 0, 0];
    const transform = mat4_exports.identity(new Float32Array(16));
    mat4_exports.translate(transform, transform, [cx, cy, cz]);
    mat4_exports.rotate(transform, transform, angle, [ax, ay, az]);
    mat4_exports.translate(transform, transform, [-cx, -cy, -cz]);
    vec3_exports.transformMat4(newPosition, position, transform);
    vec3_exports.transformMat4(newFocalPoint, focalPoint, transform);
    mat4_exports.identity(transform);
    mat4_exports.rotate(transform, transform, angle, [ax, ay, az]);
    vec3_exports.transformMat4(newViewUp, viewUp, transform);
    viewport.setCamera({
      position: newPosition,
      viewUp: newViewUp,
      focalPoint: newFocalPoint
    });
    viewport.render();
  }
};
VolumeRotateTool.toolName = "VolumeRotateMouseWheel";
var VolumeRotateTool_default = VolumeRotateTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js
var _LabelTool = class _LabelTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      getTextCallback,
      changeTextCallback,
      preventHandleOutsideImage: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { annotationUID } = annotation;
      const point = annotation.data.handles.points[0];
      const annotationCanvasCoordinate = viewport.worldToCanvas(point);
      const dist = vec2_exports.distance(canvasCoords, annotationCanvasCoordinate);
      if (dist < proximity) {
        return true;
      }
      const svgLayer = element.querySelector("svg");
      if (!svgLayer) {
        return false;
      }
      const textGroup = svgLayer.querySelector(`g[data-annotation-uid="${annotationUID}"]`);
      if (!textGroup) {
        return false;
      }
      const textGroupElement = textGroup;
      const bbox = textGroupElement.getBBox();
      const transform = textGroupElement.getAttribute("transform");
      let translateX = 0;
      let translateY = 0;
      if (transform) {
        const matches = transform.match(/translate\(([-\d.]+)\s+([-\d.]+)\)/);
        if (matches) {
          translateX = parseFloat(matches[1]);
          translateY = parseFloat(matches[2]);
        }
      }
      const x = bbox.x + translateX;
      const y = bbox.y + translateY;
      const isNear = canvasCoords[0] >= x && canvasCoords[0] <= x + bbox.width && canvasCoords[1] >= y && canvasCoords[1] <= y + bbox.height;
      return isNear;
    };
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        newAnnotation: true,
        viewportIdsToRender,
        offset: [0, 0, 0]
      };
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.configuration.getTextCallback((label) => {
        if (!label) {
          removeAnnotation(annotation.annotationUID);
          triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
          this.isDrawing = false;
          return;
        }
        resetElementCursor(element);
        annotation.data.label = label;
        triggerAnnotationCompleted(annotation);
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      });
      this.createMemo(element, annotation, { newAnnotation: true });
      return annotation;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      let offset = [0, 0, 0];
      if (currentPoints && currentPoints.world) {
        const initialWorldPos = currentPoints.world;
        const anchorWorldPos = annotation.data.handles.points[0];
        offset = [
          anchorWorldPos[0] - initialWorldPos[0],
          anchorWorldPos[1] - initialWorldPos[1],
          anchorWorldPos[2] - initialWorldPos[2]
        ];
      }
      this.editData = {
        annotation,
        viewportIdsToRender,
        offset
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      this._deactivateDraw(element);
      this._deactivateModify(element);
      resetElementCursor(element);
      if (newAnnotation) {
        this.createMemo(element, annotation, { newAnnotation });
      }
      this.editData = null;
      this.isDrawing = false;
      this.doneEditMemo();
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragCallback = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const { annotation, viewportIdsToRender, offset } = this.editData;
      if (offset) {
        annotation.data.handles.points[0] = [
          worldPos[0] + offset[0],
          worldPos[1] + offset[1],
          worldPos[2] + offset[2]
        ];
      } else {
        annotation.data.handles.points[0] = [...worldPos];
      }
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      triggerAnnotationModified(annotation, element, ChangeTypes_default.LabelChange);
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const point = data.handles.points[0];
        styleSpecifier.annotationUID = annotationUID;
        const canvasCoordinates = viewport.worldToCanvas(point);
        renderStatus = true;
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!data.label) {
          continue;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        const textBoxUID = "1";
        drawTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, [data.label], canvasCoordinates, {
          ...options,
          padding: 0
        });
      }
      return renderStatus;
    };
  }
  handleSelectedCallback(_evt, _annotation, _handle, _interactionType) {
  }
  _doneChangingTextCallback(element, annotation, updatedLabel) {
    annotation.data.label = updatedLabel;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    triggerAnnotationModified(annotation, element);
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_LabelTool.toolName = "Label";
_LabelTool.hydrate = (viewportId, position, label, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
  const { viewPlaneNormal, viewUp } = viewport.getCamera();
  const instance = new _LabelTool();
  const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      label,
      handles: {
        points: [position]
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...options
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var LabelTool = _LabelTool;
function getTextCallback(doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
function changeTextCallback(data, eventData, doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
LabelTool.toolName = "Label";
var LabelTool_default = LabelTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js
var { transformWorldToIndex: transformWorldToIndex11 } = utilities_exports;
var _LengthTool = class _LengthTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines5,
      actions: {
        undo: {
          method: "undo",
          bindings: [{ key: "z" }]
        },
        redo: {
          method: "redo",
          bindings: [{ key: "y" }]
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.doneEditMemo();
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].unit == null) {
          data.cachedStats[targetId] = {
            length: null,
            unit: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color,
            lineDash,
            lineWidth
          });
        }
        const dataId = `${annotationUID}-line`;
        const lineUID = "1";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          width: lineWidth,
          lineDash,
          shadow
        }, dataId);
        renderStatus = true;
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateLength(pos1, pos2) {
    const dx = pos1[0] - pos2[0];
    const dy = pos1[1] - pos2[1];
    const dz = pos1[2] - pos2[2];
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement) {
    const data = annotation.data;
    const { element } = enabledElement.viewport;
    const worldPos1 = data.handles.points[0];
    const worldPos2 = data.handles.points[1];
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      const image = this.getTargetImageData(targetId);
      if (!image) {
        continue;
      }
      const { imageData, dimensions } = image;
      const index1 = transformWorldToIndex11(imageData, worldPos1);
      const index2 = transformWorldToIndex11(imageData, worldPos2);
      const handles = [index1, index2];
      const { scale: scale2, unit } = getCalibratedLengthUnitsAndScale(image, handles);
      const length = this._calculateLength(worldPos1, worldPos2) / scale2;
      if (this._isInsideVolume(index1, index2, dimensions)) {
        this.isHandleOutsideImage = false;
      } else {
        this.isHandleOutsideImage = true;
      }
      cachedStats[targetId] = {
        length,
        unit
      };
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
    }
    return cachedStats;
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_LengthTool.toolName = "Length";
_LengthTool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _LengthTool.hydrateBase(_LengthTool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var LengthTool = _LengthTool;
function defaultGetTextLines5(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { length, unit } = cachedVolumeStats;
  if (length === void 0 || length === null || isNaN(length)) {
    return;
  }
  const textLines = [`${utilities_exports.roundNumber(length)} ${unit}`];
  return textLines;
}
var LengthTool_default = LengthTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js
var { transformWorldToIndex: transformWorldToIndex12 } = utilities_exports;
var _HeightTool = class _HeightTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines6
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        const enabledElement = getEnabledElement(element);
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        let activeHandleCanvasCoords;
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].unit == null) {
          data.cachedStats[targetId] = {
            length: null,
            unit: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color,
            lineDash,
            lineWidth
          });
        }
        const heightUID = "0";
        drawHeight(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          width: lineWidth,
          lineDash
        });
        renderStatus = true;
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateHeight(pos1, pos2) {
    const dx = pos2[0] - pos1[0];
    const dy = pos2[1] - pos1[1];
    const dz = pos2[2] - pos1[2];
    if (dx == 0) {
      if (dy != 0) {
        return Math.abs(dz);
      } else {
        return 0;
      }
    } else if (dy == 0) {
      return Math.abs(dz);
    } else if (dz == 0) {
      return Math.abs(dy);
    }
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement) {
    const data = annotation.data;
    const { element } = enabledElement.viewport;
    const worldPos1 = data.handles.points[0];
    const worldPos2 = data.handles.points[1];
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      const image = this.getTargetImageData(targetId);
      if (!image) {
        continue;
      }
      const { imageData, dimensions } = image;
      const index1 = transformWorldToIndex12(imageData, worldPos1);
      const index2 = transformWorldToIndex12(imageData, worldPos2);
      const handles = [index1, index2];
      const { scale: scale2, unit } = getCalibratedLengthUnitsAndScale(image, handles);
      const height = this._calculateHeight(worldPos1, worldPos2) / scale2;
      const outside = this._isInsideVolume(index1, index2, dimensions);
      this.isHandleOutsideImage = outside;
      cachedStats[targetId] = {
        height,
        unit
      };
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
    }
    return cachedStats;
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_HeightTool.toolName = "Height";
var HeightTool = _HeightTool;
function defaultGetTextLines6(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { height, unit } = cachedVolumeStats;
  if (height === void 0 || height === null || isNaN(height)) {
    return;
  }
  const textLines = [`${utilities_exports.roundNumber(height)} ${unit}`];
  return textLines;
}
var HeightTool_default = HeightTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js
var { transformWorldToIndex: transformWorldToIndex13 } = utilities_exports;
var _ProbeTool = class _ProbeTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps) {
    super(toolProps, AnnotationTool_default.mergeDefaultProps(_ProbeTool.probeDefaults, defaultToolProps));
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const annotation = this.constructor.createAnnotationForViewport(viewport, {
        data: {
          handles: { points: [[...worldPos]] }
        }
      });
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        newAnnotation: true,
        viewportIdsToRender
      };
      this._activateModify(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { viewportId, renderingEngine } = getEnabledElement(element);
      this.eventDispatchDetail = {
        viewportId,
        renderingEngineId: renderingEngine.id
      };
      this._deactivateModify(element);
      resetElementCursor(element);
      if (newAnnotation) {
        this.createMemo(element, annotation, { newAnnotation });
      }
      this.editData = null;
      this.isDrawing = false;
      this.doneEditMemo();
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      data.handles.points[0] = [...worldPos];
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const annotationUID = annotation.annotationUID;
        const data = annotation.data;
        const point = data.handles.points[0];
        const canvasCoordinates = viewport.worldToCanvas(point);
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        if (!data.cachedStats) {
          data.cachedStats = {};
        }
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].value === null) {
          data.cachedStats[targetId] = {
            Modality: null,
            index: null,
            value: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes_default.StatsUpdated);
        } else if (annotation.invalidated) {
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
          if (viewport instanceof VolumeViewport_default) {
            const { referencedImageId } = annotation.metadata;
            for (const targetId2 in data.cachedStats) {
              if (targetId2.startsWith("imageId")) {
                const viewports = renderingEngine.getStackViewports();
                const invalidatedStack = viewports.find((vp) => {
                  const referencedImageURI = utilities_exports.imageIdToURI(referencedImageId);
                  const hasImageURI = vp.hasImageURI(referencedImageURI);
                  const currentImageURI = utilities_exports.imageIdToURI(vp.getCurrentImageId());
                  return hasImageURI && currentImageURI !== referencedImageURI;
                });
                if (invalidatedStack) {
                  delete data.cachedStats[targetId2];
                }
              }
            }
          }
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        const handleGroupUID = "0";
        drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });
        renderStatus = true;
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (textLines) {
          const textCanvasCoordinates = [
            canvasCoordinates[0] + this.configuration.textCanvasOffset.x,
            canvasCoordinates[1] + this.configuration.textCanvasOffset.y
          ];
          const textUID = "0";
          drawTextBox_default(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);
        }
      }
      return renderStatus;
    };
  }
  isPointNearTool(element, annotation, canvasCoords, proximity) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { data } = annotation;
    const point = data.handles.points[0];
    const annotationCanvasCoordinate = viewport.worldToCanvas(point);
    return vec2_exports.distance(canvasCoords, annotationCanvasCoordinate) < proximity;
  }
  toolSelectedCallback() {
  }
  getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { data } = annotation;
    const point = data.handles.points[0];
    const annotationCanvasCoordinate = viewport.worldToCanvas(point);
    const near = vec2_exports.distance(canvasCoords, annotationCanvasCoordinate) < proximity;
    if (near === true) {
      return point;
    }
  }
  handleSelectedCallback(evt, annotation) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    annotation.highlighted = true;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender
    };
    this._activateModify(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes_default.StatsUpdated) {
    const data = annotation.data;
    const { renderingEngineId, viewport } = enabledElement;
    const { element } = viewport;
    const worldPos = data.handles.points[0];
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      const pixelUnitsOptions = {
        isPreScaled: isViewportPreScaled(viewport, targetId),
        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
      };
      const image = this.getTargetImageData(targetId);
      if (!image) {
        continue;
      }
      const { dimensions, imageData, metadata, voxelManager } = image;
      const modality = metadata.Modality;
      let ijk = transformWorldToIndex13(imageData, worldPos);
      ijk = vec3_exports.round(ijk, ijk);
      if (utilities_exports.indexWithinDimensions(ijk, dimensions)) {
        this.isHandleOutsideImage = false;
        let value = voxelManager.getAtIJKPoint(ijk);
        if (targetId.startsWith("imageId:")) {
          const imageId = targetId.split("imageId:")[1];
          const imageURI = utilities_exports.imageIdToURI(imageId);
          const viewports = utilities_exports.getViewportsWithImageURI(imageURI);
          const viewport2 = viewports[0];
          ijk[2] = viewport2.getCurrentImageIdIndex();
        }
        let modalityUnit;
        if (modality === "US") {
          const calibratedResults = getCalibratedProbeUnitsAndValue(image, [
            ijk
          ]);
          const hasEnhancedRegionValues = calibratedResults.values.every((value2) => value2 !== null);
          value = hasEnhancedRegionValues ? calibratedResults.values : value;
          modalityUnit = hasEnhancedRegionValues ? calibratedResults.units : "raw";
        } else {
          modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);
        }
        cachedStats[targetId] = {
          index: ijk,
          value,
          Modality: modality,
          modalityUnit
        };
        annotation.invalidated = true;
      } else {
        this.isHandleOutsideImage = true;
        cachedStats[targetId] = {
          index: ijk,
          Modality: modality
        };
      }
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, changeType);
    }
    return cachedStats;
  }
};
_ProbeTool.toolName = "Probe";
_ProbeTool.probeDefaults = {
  supportedInteractionTypes: ["Mouse", "Touch"],
  configuration: {
    shadow: true,
    preventHandleOutsideImage: false,
    getTextLines: defaultGetTextLines7,
    handleRadius: "6",
    textCanvasOffset: {
      x: 6,
      y: -6
    }
  }
};
_ProbeTool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport } = _ProbeTool.hydrateBase(_ProbeTool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var ProbeTool = _ProbeTool;
function defaultGetTextLines7(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { index, value, modalityUnit } = cachedVolumeStats;
  if (value === void 0 || !index) {
    return;
  }
  const textLines = [];
  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);
  if (value instanceof Array && modalityUnit instanceof Array) {
    for (let i = 0; i < value.length; i++) {
      textLines.push(`${utilities_exports.roundNumber(value[i])} ${modalityUnit[i]}`);
    }
  } else {
    textLines.push(`${utilities_exports.roundNumber(value)} ${modalityUnit}`);
  }
  return textLines;
}
var ProbeTool_default = ProbeTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js
var _DragProbeTool = class _DragProbeTool extends ProbeTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines8
    }
  }) {
    super(toolProps, defaultToolProps);
    this.postMouseDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const annotation = {
        invalidated: true,
        highlighted: true,
        isVisible: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
          referencedImageId
        },
        data: {
          label: "",
          handles: { points: [[...worldPos]] },
          cachedStats: {}
        }
      };
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        newAnnotation: true,
        viewportIdsToRender
      };
      this._activateModify(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.postTouchStartCallback = (evt) => {
      return this.postMouseDownCallback(evt);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      if (!this.editData) {
        return renderStatus;
      }
      const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      const annotation = this.editData.annotation;
      const annotationUID = annotation.annotationUID;
      const data = annotation.data;
      const point = data.handles.points[0];
      const canvasCoordinates = viewport.worldToCanvas(point);
      styleSpecifier.annotationUID = annotationUID;
      const { color } = this.getAnnotationStyle({
        annotation,
        styleSpecifier
      });
      if (!data.cachedStats[targetId] || data.cachedStats[targetId].value === null) {
        data.cachedStats[targetId] = {
          Modality: null,
          index: null,
          value: null
        };
        this._calculateCachedStats(annotation, renderingEngine, enabledElement);
      } else if (annotation.invalidated) {
        this._calculateCachedStats(annotation, renderingEngine, enabledElement);
      }
      if (!viewport.getRenderingEngine()) {
        console.warn("Rendering Engine has been destroyed");
        return renderStatus;
      }
      const handleGroupUID = "0";
      drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });
      renderStatus = true;
      const textLines = this.configuration.getTextLines(data, targetId);
      if (textLines) {
        const textCanvasCoordinates = [
          canvasCoordinates[0] + 6,
          canvasCoordinates[1] - 6
        ];
        const textUID = "0";
        drawTextBox_default(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));
      }
      return renderStatus;
    };
  }
};
_DragProbeTool.toolName = "DragProbe";
var DragProbeTool = _DragProbeTool;
function defaultGetTextLines8(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { index, value, modalityUnit } = cachedVolumeStats;
  if (value === void 0) {
    return;
  }
  const textLines = [];
  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);
  textLines.push(`${value.toFixed(2)} ${modalityUnit}`);
  return textLines;
}
var DragProbeTool_default = DragProbeTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js
var { transformWorldToIndex: transformWorldToIndex14 } = utilities_exports;
var _EllipticalROITool = class _EllipticalROITool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      storePointData: false,
      centerPointRadius: 0,
      calculateStats: true,
      getTextLines: defaultGetTextLines9,
      statsCalculator: BasicStatsCalculator
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isHandleOutsideImage = false;
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos],
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        centerWorld: worldPos,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const [bottom, top, left, right] = canvasCoordinates;
      const w = Math.hypot(left[0] - right[0], left[1] - right[1]);
      const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);
      const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);
      const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];
      const minorEllipse = {
        center,
        xRadius: (w - proximity) / 2,
        yRadius: (h - proximity) / 2,
        angle
      };
      const majorEllipse = {
        center,
        xRadius: (w + proximity) / 2,
        yRadius: (h + proximity) / 2,
        angle
      };
      const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);
      const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);
      if (pointInMajorEllipse && !pointInMinorEllipse) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      hideElementCursor(element);
      this._activateModify(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      let centerCanvas;
      let centerWorld;
      let canvasWidth;
      let canvasHeight;
      let originalHandleCanvas;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        const { points } = data.handles;
        const { viewport } = getEnabledElement(element);
        const { worldToCanvas, canvasToWorld } = viewport;
        handleIndex = points.findIndex((p) => p === handle);
        const pointsCanvas = points.map(worldToCanvas);
        originalHandleCanvas = pointsCanvas[handleIndex];
        canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);
        canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);
        centerCanvas = [
          (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,
          (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2
        ];
        centerWorld = canvasToWorld(centerCanvas);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        canvasWidth,
        canvasHeight,
        centerWorld,
        originalHandleCanvas,
        movingTextBox
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      this.doneEditMemo();
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragDrawCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const centerCanvas = viewport.worldToCanvas(centerWorld);
      const { data } = annotation;
      const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
      const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
      const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];
      const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];
      const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];
      const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];
      data.handles.points = [
        canvasToWorld(bottomCanvas),
        canvasToWorld(topCanvas),
        canvasToWorld(leftCanvas),
        canvasToWorld(rightCanvas)
      ];
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
    };
    this._dragModifyCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        this._dragHandle(evt);
        annotation.invalidated = true;
      }
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this._dragHandle = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { viewport } = getEnabledElement(element);
      const { canvasToWorld, worldToCanvas } = viewport;
      const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas } = this.editData;
      const centerCanvas = viewport.worldToCanvas(centerWorld);
      const { data } = annotation;
      const { points } = data.handles;
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      if (handleIndex === 0 || handleIndex === 1) {
        const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
        const canvasBottom = [
          centerCanvas[0],
          centerCanvas[1] - dYCanvas
        ];
        const canvasTop = [
          centerCanvas[0],
          centerCanvas[1] + dYCanvas
        ];
        points[0] = canvasToWorld(canvasBottom);
        points[1] = canvasToWorld(canvasTop);
        const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];
        const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;
        const canvasLeft = [
          centerCanvas[0] - newHalfCanvasWidth,
          centerCanvas[1]
        ];
        const canvasRight = [
          centerCanvas[0] + newHalfCanvasWidth,
          centerCanvas[1]
        ];
        points[2] = canvasToWorld(canvasLeft);
        points[3] = canvasToWorld(canvasRight);
      } else {
        const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
        const canvasLeft = [
          centerCanvas[0] - dXCanvas,
          centerCanvas[1]
        ];
        const canvasRight = [
          centerCanvas[0] + dXCanvas,
          centerCanvas[1]
        ];
        points[2] = canvasToWorld(canvasLeft);
        points[3] = canvasToWorld(canvasRight);
        const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];
        const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;
        const canvasBottom = [
          centerCanvas[0],
          centerCanvas[1] - newHalfCanvasHeight
        ];
        const canvasTop = [
          centerCanvas[0],
          centerCanvas[1] + newHalfCanvasHeight
        ];
        points[0] = canvasToWorld(canvasBottom);
        points[1] = canvasToWorld(canvasTop);
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { handles } = data;
        const { points, activeHandleIndex } = handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);
        const { centerPointRadius } = this.configuration;
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].areaUnit == null) {
          data.cachedStats[targetId] = {
            Modality: null,
            area: null,
            max: null,
            mean: null,
            stdDev: null,
            areaUnit: null
          };
          this._calculateCachedStats(annotation, viewport, renderingEngine);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
          if (viewport instanceof VolumeViewport_default) {
            const { referencedImageId } = annotation.metadata;
            for (const targetId2 in data.cachedStats) {
              if (targetId2.startsWith("imageId")) {
                const viewports = renderingEngine.getStackViewports();
                const invalidatedStack = viewports.find((vp) => {
                  const referencedImageURI = utilities_exports.imageIdToURI(referencedImageId);
                  const hasImageURI = vp.hasImageURI(referencedImageURI);
                  const currentImageURI = utilities_exports.imageIdToURI(vp.getCurrentImageId());
                  return hasImageURI && currentImageURI !== referencedImageURI;
                });
                if (invalidatedStack) {
                  delete data.cachedStats[targetId2];
                }
              }
            }
          }
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {
            color
          });
        }
        const dataId = `${annotationUID}-ellipse`;
        const ellipseUID = "0";
        drawEllipseByCoordinates_default(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {
          color,
          lineDash,
          lineWidth
        }, dataId);
        if (centerPointRadius > 0) {
          const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);
          if (minRadius > 3 * centerPointRadius) {
            const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);
            drawCircle_default(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {
              color,
              lineDash,
              lineWidth
            });
          }
        }
        renderStatus = true;
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!textLines || textLines.length === 0) {
          continue;
        }
        let canvasTextBoxCoords;
        if (!data.handles.textBox.hasMoved) {
          canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._calculateCachedStats = (annotation, viewport, renderingEngine) => {
      if (!this.configuration.calculateStats) {
        return;
      }
      const data = annotation.data;
      const { element } = viewport;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const { viewPlaneNormal, viewUp } = viewport.getCamera();
      const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);
      const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
      const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
      const { cachedStats } = data;
      const targetIds = Object.keys(cachedStats);
      const worldPos1 = topLeftWorld;
      const worldPos2 = bottomRightWorld;
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { dimensions, imageData, metadata, voxelManager } = image;
        const pos1Index = transformWorldToIndex14(imageData, worldPos1);
        pos1Index[0] = Math.floor(pos1Index[0]);
        pos1Index[1] = Math.floor(pos1Index[1]);
        pos1Index[2] = Math.floor(pos1Index[2]);
        const pos2Index = transformWorldToIndex14(imageData, worldPos2);
        pos2Index[0] = Math.floor(pos2Index[0]);
        pos2Index[1] = Math.floor(pos2Index[1]);
        pos2Index[2] = Math.floor(pos2Index[2]);
        if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {
          const iMin = Math.min(pos1Index[0], pos2Index[0]);
          const iMax = Math.max(pos1Index[0], pos2Index[0]);
          const jMin = Math.min(pos1Index[1], pos2Index[1]);
          const jMax = Math.max(pos1Index[1], pos2Index[1]);
          const kMin = Math.min(pos1Index[2], pos2Index[2]);
          const kMax = Math.max(pos1Index[2], pos2Index[2]);
          const boundsIJK = [
            [iMin, iMax],
            [jMin, jMax],
            [kMin, kMax]
          ];
          const center = [
            (topLeftWorld[0] + bottomRightWorld[0]) / 2,
            (topLeftWorld[1] + bottomRightWorld[1]) / 2,
            (topLeftWorld[2] + bottomRightWorld[2]) / 2
          ];
          const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;
          const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;
          const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;
          const ellipseObj = {
            center,
            xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,
            yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,
            zRadius: zRadius < EPSILON / 2 ? 0 : zRadius
          };
          const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);
          const isEmptyArea = worldWidth === 0 && worldHeight === 0;
          const handles = [pos1Index, pos2Index];
          const { scale: scale2, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);
          const aspect = getCalibratedAspect(image);
          const area = Math.abs(Math.PI * (worldWidth / scale2 / 2) * (worldHeight / aspect / scale2 / 2));
          const pixelUnitsOptions = {
            isPreScaled: isViewportPreScaled(viewport, targetId),
            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
          };
          const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);
          let pointsInShape;
          if (voxelManager) {
            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
              isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),
              boundsIJK,
              imageData,
              returnPoints: this.configuration.storePointData
            });
          }
          const stats = this.configuration.statsCalculator.getStatistics();
          cachedStats[targetId] = {
            Modality: metadata.Modality,
            area,
            mean: stats.mean?.value,
            max: stats.max?.value,
            min: stats.min?.value,
            stdDev: stats.stdDev?.value,
            statsArray: stats.array,
            pointsInShape,
            isEmptyArea,
            areaUnit,
            modalityUnit
          };
        } else {
          this.isHandleOutsideImage = true;
          cachedStats[targetId] = {
            Modality: metadata.Modality
          };
        }
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._isInsideVolume = (index1, index2, dimensions) => {
      return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  _pointInEllipseCanvas(ellipse, location) {
    const { xRadius, yRadius, center, angle } = ellipse;
    const rotLocation = vec2_exports.rotate(vec2_exports.create(), location, center, -angle);
    if (xRadius <= 0 || yRadius <= 0) {
      return false;
    }
    const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];
    const inEllipse = normalized[0] * normalized[0] / (xRadius * xRadius) + normalized[1] * normalized[1] / (yRadius * yRadius) <= 1;
    return inEllipse;
  }
  _getCanvasEllipseCenter(ellipseCanvasPoints) {
    const [bottom, top, left, right] = ellipseCanvasPoints;
    const topLeft = [left[0], top[1]];
    const bottomRight = [right[0], bottom[1]];
    return [
      (topLeft[0] + bottomRight[0]) / 2,
      (topLeft[1] + bottomRight[1]) / 2
    ];
  }
};
_EllipticalROITool.toolName = "EllipticalROI";
_EllipticalROITool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _EllipticalROITool.hydrateBase(_EllipticalROITool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points,
        activeHandleIndex: null
      },
      label: "",
      cachedStats: {}
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var EllipticalROITool = _EllipticalROITool;
function defaultGetTextLines9(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;
  const textLines = [];
  if (utilities_exports.isNumber(area)) {
    const areaLine = isEmptyArea ? `Area: Oblique not supported` : `Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`;
    textLines.push(areaLine);
  }
  if (utilities_exports.isNumber(mean)) {
    textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(max)) {
    textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(min)) {
    textLines.push(`Min: ${utilities_exports.roundNumber(min)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(stdDev)) {
    textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  }
  return textLines;
}
var EllipticalROITool_default = EllipticalROITool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js
var { transformWorldToIndex: transformWorldToIndex15 } = utilities_exports;
var _CircleROITool = class _CircleROITool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      storePointData: false,
      centerPointRadius: 0,
      calculateStats: true,
      getTextLines: defaultGetTextLines10,
      statsCalculator: BasicStatsCalculator,
      simplified: true
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isHandleOutsideImage = false;
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      this.isDrawing = true;
      let points;
      if (this.configuration.simplified) {
        points = [[...worldPos], [...worldPos]];
      } else {
        points = [
          [...worldPos],
          [...worldPos],
          [...worldPos],
          [...worldPos],
          [...worldPos]
        ];
      }
      const annotation = this.createAnnotation(evt, points);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { points } = annotation.data.handles;
      const canvasHandles = points.map((p) => viewport.worldToCanvas(p));
      const canvasCenter = canvasHandles[0];
      const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);
      const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);
      return Math.abs(radiusPoint - radius) < proximity / 2;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      hideElementCursor(element);
      this._activateModify(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        const { points } = data.handles;
        handleIndex = points.findIndex((p) => p === handle);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        movingTextBox
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      this.doneEditMemo();
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragDrawCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      const centerWorld = data.handles.points[0];
      const centerCanvas = viewport.worldToCanvas(centerWorld);
      if (this.configuration.simplified) {
        data.handles.points[1] = worldPos;
      } else {
        const radiusCanvas = vec2_exports.distance(centerCanvas, currentCanvasPoints);
        data.handles.points[0] = [...centerWorld];
        data.handles.points[1] = canvasToWorld([
          centerCanvas[0],
          centerCanvas[1] - radiusCanvas
        ]);
        data.handles.points[2] = canvasToWorld([
          centerCanvas[0],
          centerCanvas[1] + radiusCanvas
        ]);
        data.handles.points[3] = canvasToWorld([
          centerCanvas[0] - radiusCanvas,
          centerCanvas[1]
        ]);
        data.handles.points[4] = canvasToWorld([
          centerCanvas[0] + radiusCanvas,
          centerCanvas[1]
        ]);
      }
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
    };
    this._dragModifyCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        this._dragHandle(evt);
        annotation.invalidated = true;
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this._dragHandle = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { canvasToWorld, worldToCanvas } = enabledElement.viewport;
      const { annotation, handleIndex } = this.editData;
      const { data } = annotation;
      const { points } = data.handles;
      const { currentPoints, deltaPoints } = eventDetail;
      if (handleIndex === 0) {
        const worldPosDelta = deltaPoints.world;
        points.forEach((point) => {
          vec3_exports.add(point, point, worldPosDelta);
        });
      } else {
        const centerWorld = points[0];
        const centerCanvas = worldToCanvas(centerWorld);
        const currentCanvasPoint = currentPoints.canvas;
        const newRadiusCanvas = vec2_exports.distance(centerCanvas, currentCanvasPoint);
        points[1] = canvasToWorld([
          centerCanvas[0],
          centerCanvas[1] - newRadiusCanvas
        ]);
        points[2] = canvasToWorld([
          centerCanvas[0],
          centerCanvas[1] + newRadiusCanvas
        ]);
        points[3] = canvasToWorld([
          centerCanvas[0] - newRadiusCanvas,
          centerCanvas[1]
        ]);
        points[4] = canvasToWorld([
          centerCanvas[0] + newRadiusCanvas,
          centerCanvas[1]
        ]);
      }
      annotation.invalidated = true;
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        annotation.highlighted = false;
        annotation.data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { handles } = data;
        const { points, activeHandleIndex } = handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const center = canvasCoordinates[0];
        const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);
        const canvasCorners = getCanvasCircleCorners([
          center,
          canvasCoordinates[1]
        ]);
        const { centerPointRadius } = this.configuration;
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].areaUnit == null) {
          data.cachedStats[targetId] = {
            Modality: null,
            area: null,
            max: null,
            mean: null,
            stdDev: null,
            areaUnit: null,
            radius: null,
            radiusUnit: null,
            perimeter: null
          };
          this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
          if (viewport instanceof VolumeViewport_default) {
            const { referencedImageId } = annotation.metadata;
            for (const targetId2 in data.cachedStats) {
              if (targetId2.startsWith("imageId")) {
                const viewports = renderingEngine.getStackViewports();
                const invalidatedStack = viewports.find((vp) => {
                  const referencedImageURI = utilities_exports.imageIdToURI(referencedImageId);
                  const hasImageURI = vp.hasImageURI(referencedImageURI);
                  const currentImageURI = utilities_exports.imageIdToURI(vp.getCurrentImageId());
                  return hasImageURI && currentImageURI !== referencedImageURI;
                });
                if (invalidatedStack) {
                  delete data.cachedStats[targetId2];
                }
              }
            }
          }
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          if (this.configuration.simplified) {
            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
          } else {
            activeHandleCanvasCoords = canvasCoordinates;
          }
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {
            color
          });
        }
        const dataId = `${annotationUID}-circle`;
        const circleUID = "0";
        drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
          color,
          lineDash,
          lineWidth
        }, dataId);
        if (centerPointRadius > 0) {
          if (radius > 3 * centerPointRadius) {
            drawCircle_default(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {
              color,
              lineDash,
              lineWidth
            });
          }
        }
        renderStatus = true;
        if (this.configuration.calculateStats) {
          const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
          if (!options.visibility) {
            data.handles.textBox = {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            };
            continue;
          }
          const textLines = this.configuration.getTextLines(data, targetId);
          if (!textLines || textLines.length === 0) {
            continue;
          }
          let canvasTextBoxCoords;
          if (!data.handles.textBox.hasMoved) {
            canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);
            data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
          }
          const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
          const textBoxUID = "1";
          const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);
          const { x: left, y: top, width, height } = boundingBox;
          data.handles.textBox.worldBoundingBox = {
            topLeft: viewport.canvasToWorld([left, top]),
            topRight: viewport.canvasToWorld([left + width, top]),
            bottomLeft: viewport.canvasToWorld([left, top + height]),
            bottomRight: viewport.canvasToWorld([left + width, top + height])
          };
        }
      }
      return renderStatus;
    };
    this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {
      if (!this.configuration.calculateStats) {
        return;
      }
      const data = annotation.data;
      const { element } = viewport;
      const wasInvalidated = annotation.invalidated;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const canvasCenter = canvasCoordinates[0];
      const canvasTop = canvasCoordinates[1];
      const { viewPlaneNormal, viewUp } = viewport.getCamera();
      const [topLeftCanvas, bottomRightCanvas] = getCanvasCircleCorners([canvasCenter, canvasTop]);
      const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
      const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
      const { cachedStats } = data;
      const targetIds = Object.keys(cachedStats);
      const worldPos1 = topLeftWorld;
      const worldPos2 = bottomRightWorld;
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { dimensions, imageData, metadata, voxelManager } = image;
        const pos1Index = transformWorldToIndex15(imageData, worldPos1);
        pos1Index[0] = Math.floor(pos1Index[0]);
        pos1Index[1] = Math.floor(pos1Index[1]);
        pos1Index[2] = Math.floor(pos1Index[2]);
        const pos2Index = transformWorldToIndex15(imageData, worldPos2);
        pos2Index[0] = Math.floor(pos2Index[0]);
        pos2Index[1] = Math.floor(pos2Index[1]);
        pos2Index[2] = Math.floor(pos2Index[2]);
        if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {
          const iMin = Math.min(pos1Index[0], pos2Index[0]);
          const iMax = Math.max(pos1Index[0], pos2Index[0]);
          const jMin = Math.min(pos1Index[1], pos2Index[1]);
          const jMax = Math.max(pos1Index[1], pos2Index[1]);
          const kMin = Math.min(pos1Index[2], pos2Index[2]);
          const kMax = Math.max(pos1Index[2], pos2Index[2]);
          const boundsIJK = [
            [iMin, iMax],
            [jMin, jMax],
            [kMin, kMax]
          ];
          const center = points[0];
          const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;
          const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;
          const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;
          const ellipseObj = {
            center,
            xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,
            yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,
            zRadius: zRadius < EPSILON / 2 ? 0 : zRadius
          };
          const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);
          const isEmptyArea = worldWidth === 0 && worldHeight === 0;
          const handles = [pos1Index, pos2Index];
          const { scale: scale2, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);
          const aspect = getCalibratedAspect(image);
          const area = Math.abs(Math.PI * (worldWidth / scale2 / 2) * (worldHeight / aspect / scale2 / 2));
          const pixelUnitsOptions = {
            isPreScaled: isViewportPreScaled(viewport, targetId),
            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
          };
          const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);
          let pointsInShape;
          if (voxelManager) {
            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
              isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),
              boundsIJK,
              imageData,
              returnPoints: this.configuration.storePointData
            });
          }
          const stats = this.configuration.statsCalculator.getStatistics();
          cachedStats[targetId] = {
            Modality: metadata.Modality,
            area,
            mean: stats.mean?.value,
            max: stats.max?.value,
            min: stats.min?.value,
            pointsInShape,
            stdDev: stats.stdDev?.value,
            statsArray: stats.array,
            isEmptyArea,
            areaUnit,
            radius: worldWidth / 2 / scale2,
            radiusUnit: unit,
            perimeter: 2 * Math.PI * (worldWidth / 2) / scale2,
            modalityUnit
          };
        } else {
          this.isHandleOutsideImage = true;
          cachedStats[targetId] = {
            Modality: metadata.Modality
          };
        }
      }
      annotation.invalidated = false;
      if (wasInvalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._isInsideVolume = (index1, index2, dimensions) => {
      return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
};
_CircleROITool.toolName = "CircleROI";
_CircleROITool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _CircleROITool.hydrateBase(_CircleROITool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points,
        textBox: {
          hasMoved: false,
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        },
        activeHandleIndex: null
      },
      label: "",
      cachedStats: {}
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var CircleROITool = _CircleROITool;
function defaultGetTextLines10(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit } = cachedVolumeStats;
  const textLines = [];
  if (utilities_exports.isNumber(radius)) {
    const radiusLine = isEmptyArea ? `Radius: Oblique not supported` : `Radius: ${utilities_exports.roundNumber(radius)} ${radiusUnit}`;
    textLines.push(radiusLine);
  }
  if (utilities_exports.isNumber(area)) {
    const areaLine = isEmptyArea ? `Area: Oblique not supported` : `Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`;
    textLines.push(areaLine);
  }
  if (utilities_exports.isNumber(mean)) {
    textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(max)) {
    textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(min)) {
    textLines.push(`Min: ${utilities_exports.roundNumber(min)} ${modalityUnit}`);
  }
  if (utilities_exports.isNumber(stdDev)) {
    textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  }
  return textLines;
}
var CircleROITool_default = CircleROITool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js
var CROSSHAIR_SIZE = 5;
var _ETDRSGridTool = class _ETDRSGridTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      degrees: [45, 135, 225, 315],
      diameters: [10, 30, 60]
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isHandleOutsideImage = false;
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId,
          ...viewport.getViewReference({ points: [worldPos] })
        },
        data: {
          label: "",
          handles: {
            points: [[...worldPos]]
          }
        }
      };
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        newAnnotation: true
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      const center = viewport.worldToCanvas(points[0]);
      const radius = getCanvasCircleRadius([center, canvasCoords]);
      if (Math.abs(radius) < proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender
      };
      hideElementCursor(element);
      this._activateModify(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const { renderingEngine } = getEnabledElement(element);
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this._dragDrawCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { annotation, viewportIdsToRender } = this.editData;
      const { data } = annotation;
      data.handles.points = [
        canvasToWorld(currentCanvasPoints),
        canvasToWorld(currentCanvasPoints)
      ];
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragModifyCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender } = this.editData;
      const { data } = annotation;
      const { deltaPoints } = eventDetail;
      const worldPosDelta = deltaPoints.world;
      const points = data.handles.points;
      points.forEach((point) => {
        point[0] += worldPosDelta[0];
        point[1] += worldPosDelta[1];
        point[2] += worldPosDelta[2];
      });
      annotation.invalidated = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._dragHandle = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { canvasToWorld, worldToCanvas } = enabledElement.viewport;
      const { annotation } = this.editData;
      const { data } = annotation;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => worldToCanvas(p));
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];
      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];
      const canvasCenter = currentCanvasPoints;
      const canvasEnd = [
        canvasCoordinates[1][0] + dXCanvas,
        canvasCoordinates[1][1] + dYCanvas
      ];
      points[0] = canvasToWorld(canvasCenter);
      points[1] = canvasToWorld(canvasEnd);
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        const { renderingEngine } = getEnabledElement(element);
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragModifyCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragDrawCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragDrawCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { handles } = data;
        const { points } = handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const center = canvasCoordinates[0];
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        let lineUID = `${annotationUID}-crosshair-vertical`;
        let start = [center[0], center[1] + CROSSHAIR_SIZE];
        let end = [center[0], center[1] - CROSSHAIR_SIZE];
        drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {
          color,
          lineDash,
          lineWidth
        });
        lineUID = `${annotationUID}-crosshair-horizontal`;
        start = [center[0] + CROSSHAIR_SIZE, center[1]];
        end = [center[0] - CROSSHAIR_SIZE, center[1]];
        drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {
          color,
          lineDash,
          lineWidth
        });
        const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));
        for (let i2 = 0; i2 < diametersCanvas.length; i2++) {
          const dataId = `${annotationUID}-circle-${i2}`;
          const circleUID = `${annotationUID}-circle-${i2}`;
          drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i2] / 2, {
            color,
            lineDash,
            lineWidth
          }, dataId);
        }
        const degreesRad = (x) => x * Math.PI / 180;
        const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));
        for (let i2 = 0; i2 < angleRadians.length; i2++) {
          const lineUID2 = `${annotationUID}-line-${i2}`;
          const start2 = [
            Math.cos(angleRadians[i2]) * diametersCanvas[0] / 2 + center[0],
            Math.sin(angleRadians[i2]) * diametersCanvas[0] / 2 + center[1]
          ];
          const end2 = [
            Math.cos(angleRadians[i2]) * diametersCanvas[2] / 2 + center[0],
            Math.sin(angleRadians[i2]) * diametersCanvas[2] / 2 + center[1]
          ];
          drawLine(svgDrawingHelper, annotationUID, lineUID2, start2, end2, {
            color,
            lineDash,
            lineWidth
          });
        }
        renderStatus = true;
      }
      return renderStatus;
    };
  }
  worldMeasureToCanvas(measurement, viewport) {
    const p1 = viewport.canvasToWorld([
      viewport.canvas.width / 2,
      viewport.canvas.height / 2
    ]);
    const { viewUp } = viewport.getCamera();
    const p2 = vec3_exports.scaleAndAdd(vec3_exports.create(), p1, viewUp, measurement);
    const p1Canvas = viewport.worldToCanvas(p1);
    const p2Canvas = viewport.worldToCanvas(p2);
    const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) + Math.pow(p2Canvas[1] - p1Canvas[1], 2));
    return distance;
  }
};
_ETDRSGridTool.toolName = "ETDRSGrid";
var ETDRSGridTool = _ETDRSGridTool;
var ETDRSGridTool_default = ETDRSGridTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js
var SPLINE_MIN_POINTS = 3;
var SPLINE_CLICK_CLOSE_CURVE_DIST = 10;
var DEFAULT_SPLINE_CONFIG = {
  resolution: 20,
  controlPointAdditionDistance: 6,
  controlPointDeletionDistance: 6,
  showControlPointsConnectors: false,
  controlPointAdditionEnabled: true,
  controlPointDeletionEnabled: true
};
var SplineTypesEnum;
(function(SplineTypesEnum2) {
  SplineTypesEnum2["Cardinal"] = "CARDINAL";
  SplineTypesEnum2["Linear"] = "LINEAR";
  SplineTypesEnum2["CatmullRom"] = "CATMULLROM";
  SplineTypesEnum2["BSpline"] = "BSPLINE";
})(SplineTypesEnum || (SplineTypesEnum = {}));
var SplineToolActions;
(function(SplineToolActions2) {
  SplineToolActions2["AddControlPoint"] = "addControlPoint";
  SplineToolActions2["DeleteControlPoint"] = "deleteControlPoint";
})(SplineToolActions || (SplineToolActions = {}));
var splineToolNames = [
  "CatmullRomSplineROI",
  "LinearSplineROI",
  "BSplineROI",
  "CardinalSplineROI"
];
var _SplineROITool = class _SplineROITool extends ContourSegmentationBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      preventHandleOutsideImage: false,
      calculateStats: true,
      simplifiedSpline: false,
      getTextLines: defaultGetTextLines11,
      contourHoleAdditionModifierKey: KeyboardBindings.Shift,
      decimate: {
        enabled: false,
        epsilon: 0.1
      },
      spline: {
        configuration: {
          [SplineTypesEnum.Cardinal]: {
            Class: CardinalSpline,
            scale: 0.5
          },
          [SplineTypesEnum.CatmullRom]: {
            Class: CatmullRomSpline
          },
          [SplineTypesEnum.Linear]: {
            Class: LinearSpline
          },
          [SplineTypesEnum.BSpline]: {
            Class: BSpline,
            controlPointAdditionEnabled: false,
            controlPointDeletionEnabled: false,
            showControlPointsConnectors: true
          }
        },
        type: SplineTypesEnum.CatmullRom,
        drawPreviewEnabled: true,
        enableTwoPointPreview: false,
        lastControlPointDeletionKeys: ["Backspace", "Delete"]
      },
      actions: {
        [SplineToolActions.AddControlPoint]: {
          method: "addControlPointCallback",
          bindings: [
            {
              mouseButton: MouseBindings.Primary,
              modifierKey: KeyboardBindings.Shift
            }
          ]
        },
        [SplineToolActions.DeleteControlPoint]: {
          method: "deleteControlPointCallback",
          bindings: [
            {
              mouseButton: MouseBindings.Primary,
              modifierKey: KeyboardBindings.Ctrl
            }
          ]
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.splineToolNames = [
      "CatmullRomSplineROI",
      "LinearSplineROI",
      "BSplineROI",
      "CardinalSplineROI"
    ];
    this.isHandleOutsideImage = false;
    this.fireChangeOnUpdate = null;
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const { instance: spline } = annotation.data.spline;
      return spline.isPointNearCurve(canvasCoords, proximity);
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        const { points } = data.handles;
        handleIndex = points.findIndex((p) => p === handle);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        movingTextBox
      };
      this._activateModify(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled } = this.editData;
      const { data } = annotation;
      annotation.autoGenerated = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));
      const { imageData, dimensions } = image;
      this.isHandleOutsideImage = data.handles.points.map((p) => utilities_exports.transformWorldToIndex(imageData, p)).some((index) => !utilities_exports.indexWithinDimensions(index, dimensions));
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      const changeType = newAnnotation ? ChangeTypes_default.Completed : ChangeTypes_default.HandlesUpdated;
      if (!this.fireChangeOnUpdate) {
        this.fireChangeOnUpdate = {
          annotationUID: annotation.annotationUID,
          changeType,
          contourHoleProcessingEnabled
        };
      } else {
        this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;
        this.fireChangeOnUpdate.changeType = changeType;
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.doneEditMemo();
      this.editData = null;
      this.isDrawing = false;
    };
    this._keyDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const key = eventDetail.key ?? "";
      const { lastControlPointDeletionKeys } = this.configuration.spline;
      const deleteLastPoint = lastControlPointDeletionKeys.includes(key);
      if (!deleteLastPoint) {
        return;
      }
      const { annotation } = this.editData;
      const { data } = annotation;
      if (data.handles.points.length === SPLINE_MIN_POINTS) {
        this.cancel(element);
        return;
      } else {
        const controlPointIndex = data.handles.points.length - 1;
        this._deleteControlPointByIndex(element, annotation, controlPointIndex);
      }
      evt.preventDefault();
    };
    this._mouseMoveCallback = (evt) => {
      const { drawPreviewEnabled } = this.configuration.spline;
      if (!drawPreviewEnabled) {
        return;
      }
      const { element } = evt.detail;
      const { renderingEngine } = getEnabledElement(element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._mouseDownCallback = (evt) => {
      const doubleClick = evt.type === Events_default.MOUSE_DOUBLE_CLICK;
      const { annotation, viewportIdsToRender } = this.editData;
      const { data } = annotation;
      if (data.contour.closed) {
        return;
      }
      this.doneEditMemo();
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const { canvas: canvasPoint, world: worldPoint } = currentPoints;
      let closeContour = data.handles.points.length >= 2 && doubleClick;
      let addNewPoint = true;
      if (data.handles.points.length) {
        this.createMemo(element, annotation, {
          newAnnotation: data.handles.points.length === 1
        });
      }
      if (data.handles.points.length >= 3) {
        this.createMemo(element, annotation);
        const { instance: spline } = data.spline;
        const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);
        if (closestControlPoint?.index === 0) {
          addNewPoint = false;
          closeContour = true;
        }
      }
      if (addNewPoint) {
        data.handles.points.push(worldPoint);
      }
      data.contour.closed = data.contour.closed || closeContour;
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (data.contour.closed) {
        this._endCallback(evt);
      }
      evt.preventDefault();
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        this.moveAnnotation(annotation, worldPosDelta);
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {
      const eventType = Events_default.ANNOTATION_COMPLETED;
      const eventDetail = {
        annotation,
        changeType: ChangeTypes_default.Completed,
        contourHoleProcessingEnabled
      };
      triggerEvent(eventTarget_default, eventType, eventDetail);
    };
    this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes_default.StatsUpdated) => {
      const { viewportId, renderingEngineId } = enabledElement;
      const eventType = Events_default.ANNOTATION_MODIFIED;
      const eventDetail = {
        annotation,
        viewportId,
        renderingEngineId,
        changeType
      };
      triggerEvent(eventTarget_default, eventType, eventDetail);
    };
    this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes_default.StatsUpdated, contourHoleProcessingEnabled) => {
      if (changeType === ChangeTypes_default.Completed) {
        this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);
      } else {
        this.triggerAnnotationModified(annotation, enabledElement, changeType);
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.KEY_DOWN, this._keyDownCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._mouseMoveCallback);
      element.addEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.addEventListener(Events_default.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._mouseDownCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.KEY_DOWN, this._keyDownCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._mouseMoveCallback);
      element.removeEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.removeEventListener(Events_default.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._mouseDownCallback);
    };
    this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {
      const data = annotation.data;
      const targetId = this.getTargetId(viewport);
      if (!data.spline.instance.closed || !textboxStyle.visibility) {
        return;
      }
      const textLines = this.configuration.getTextLines(data, targetId);
      if (!textLines || textLines.length === 0) {
        return;
      }
      const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));
      if (!data.handles.textBox.hasMoved) {
        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
        data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
      }
      const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
      const textBoxUID = "textBox";
      const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotation.annotationUID ?? "", textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);
      const { x: left, y: top, width, height } = boundingBox;
      data.handles.textBox.worldBoundingBox = {
        topLeft: viewport.canvasToWorld([left, top]),
        topRight: viewport.canvasToWorld([left + width, top]),
        bottomLeft: viewport.canvasToWorld([left, top + height]),
        bottomRight: viewport.canvasToWorld([left + width, top + height])
      };
    };
    this.addControlPointCallback = (evt, annotation) => {
      const { data } = annotation;
      const splineType = data.spline.type;
      const splineConfig = this._getSplineConfig(splineType);
      const maxDist = splineConfig.controlPointAdditionDistance;
      if (splineConfig.controlPointAdditionEnabled === false) {
        return;
      }
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { instance: spline } = data.spline;
      const canvasPos = evt.detail.currentPoints.canvas;
      const closestPointInfo = spline.getClosestPoint(canvasPos);
      if (closestPointInfo.distance > maxDist) {
        return;
      }
      const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);
      data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));
      annotation.invalidated = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.deleteControlPointCallback = (evt, annotation) => {
      const splineType = annotation.data.spline.type;
      const splineConfig = this._getSplineConfig(splineType);
      const maxDist = splineConfig.controlPointDeletionDistance;
      if (splineConfig.controlPointDeletionEnabled === false) {
        return;
      }
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      const { canvas: canvasPos } = currentPoints;
      const { instance: spline } = annotation.data.spline;
      const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);
      if (!closestControlPoint) {
        return;
      }
      this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);
    };
    this._calculateCachedStats = (annotation, element) => {
      if (!this.configuration.calculateStats) {
        return;
      }
      const data = annotation.data;
      if (!data.contour.closed) {
        return;
      }
      const enabledElement = getEnabledElement(element);
      if (!enabledElement) {
        return;
      }
      const { viewport } = enabledElement;
      const { cachedStats } = data;
      const { polyline: points } = data.contour;
      const targetIds = Object.keys(cachedStats);
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { metadata } = image;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const canvasPoint = canvasCoordinates[0];
        const originalWorldPoint = viewport.canvasToWorld(canvasPoint);
        const deltaXPoint = viewport.canvasToWorld([
          canvasPoint[0] + 1,
          canvasPoint[1]
        ]);
        const deltaYPoint = viewport.canvasToWorld([
          canvasPoint[0],
          canvasPoint[1] + 1
        ]);
        const deltaInX = vec3_exports.distance(originalWorldPoint, deltaXPoint);
        const deltaInY = vec3_exports.distance(originalWorldPoint, deltaYPoint);
        const { imageData } = image;
        const { scale: scale2, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {
          const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY } = polyline_exports.getAABB(canvasCoordinates);
          const topLeftBBWorld = viewport.canvasToWorld([
            canvasMinX,
            canvasMinY
          ]);
          const topLeftBBIndex = utilities_exports.transformWorldToIndex(imageData, topLeftBBWorld);
          const bottomRightBBWorld = viewport.canvasToWorld([
            canvasMaxX,
            canvasMaxY
          ]);
          const bottomRightBBIndex = utilities_exports.transformWorldToIndex(imageData, bottomRightBBWorld);
          return [topLeftBBIndex, bottomRightBBIndex];
        });
        let area = polyline_exports.getArea(canvasCoordinates) / scale2 / scale2;
        area *= deltaInX * deltaInY;
        cachedStats[targetId] = {
          Modality: metadata.Modality,
          area,
          areaUnit
        };
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
    this.annotationCompletedBinded = this.annotationCompleted.bind(this);
  }
  annotationCompleted(evt) {
    const { sourceAnnotation: annotation } = evt.detail;
    if (!this.splineToolNames.includes(annotation?.metadata?.toolName) || !this.configuration.simplifiedSpline || !this.isContourSegmentationTool()) {
      return;
    }
    convertContourSegmentationAnnotation(annotation);
  }
  initializeListeners() {
    eventTarget_default.addEventListener(Events_default.ANNOTATION_COMPLETED, this.annotationCompletedBinded);
  }
  removeListeners() {
    eventTarget_default.removeEventListener(Events_default.ANNOTATION_COMPLETED, this.annotationCompletedBinded);
  }
  onSetToolEnabled() {
    this.initializeListeners();
  }
  onSetToolActive() {
    this.initializeListeners();
  }
  onSetToolDisabled() {
    this.removeListeners();
  }
  addNewAnnotation(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const { canvas: canvasPos } = currentPoints;
    const contourHoleProcessingEnabled = getMouseModifier_default(evt.detail.event) === this.configuration.contourHoleAdditionModifierKey;
    const annotation = this.createAnnotation(evt);
    this.isDrawing = true;
    this.addAnnotation(annotation, element);
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      movingTextBox: false,
      newAnnotation: true,
      hasMoved: false,
      lastCanvasPoint: canvasPos,
      contourHoleProcessingEnabled
    };
    this._activateDraw(element);
    evt.preventDefault();
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    return annotation;
  }
  cancel(element) {
    if (!this.isDrawing) {
      return;
    }
    this.isDrawing = false;
    this._deactivateDraw(element);
    this._deactivateModify(element);
    resetElementCursor(element);
    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
    if (newAnnotation) {
      removeAnnotation(annotation.annotationUID);
    }
    super.cancelAnnotation(annotation);
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    this.editData = null;
    return annotation.annotationUID;
  }
  isContourSegmentationTool() {
    return false;
  }
  renderAnnotationInstance(renderContext) {
    const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;
    const { viewport } = enabledElement;
    const { worldToCanvas } = viewport;
    const { element } = viewport;
    const annotation = renderContext.annotation;
    const { annotationUID, data, highlighted } = annotation;
    const { handles } = data;
    const { points: controlPoints, activeHandleIndex } = handles;
    const newAnnotation = this.editData?.newAnnotation;
    const { lineWidth, lineDash, color, locked: annotationLocked } = annotationStyle;
    const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));
    const { drawPreviewEnabled } = this.configuration.spline;
    const splineType = annotation.data.spline.type;
    const splineConfig = this._getSplineConfig(splineType);
    const spline = annotation.data.spline.instance;
    const childAnnotations = getChildAnnotations(annotation);
    const missingAnnotation = childAnnotations.findIndex((it) => !it);
    if (missingAnnotation !== -1) {
      throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);
    }
    const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation2) => this._isSplineROIAnnotation(annotation2));
    splineAnnotationsGroup.forEach((annotation2) => {
      const spline2 = this._updateSplineInstance(element, annotation2);
      const splinePolylineCanvas = spline2.getPolylinePoints();
      this.updateContourPolyline(annotation2, {
        points: splinePolylineCanvas,
        closed: data.contour.closed,
        targetWindingDirection: ContourWindingDirection.Clockwise
      }, viewport, { updateWindingDirection: data.contour.closed });
    });
    super.renderAnnotationInstance(renderContext);
    if (!data.cachedStats[targetId] || data.cachedStats[targetId].areaUnit == null) {
      data.cachedStats[targetId] = {
        Modality: null,
        area: null,
        areaUnit: null
      };
      this._calculateCachedStats(annotation, element);
    } else if (annotation.invalidated) {
      this._throttledCalculateCachedStats(annotation, element);
    }
    let activeHandleCanvasCoords;
    if (!annotationLocked && !this.editData && activeHandleIndex !== null) {
      activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
    }
    if (activeHandleCanvasCoords || newAnnotation || highlighted) {
      const handleGroupUID = "0";
      drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
        color,
        lineWidth,
        handleRadius: "3"
      });
    }
    if (drawPreviewEnabled && spline.numControlPoints >= 1 && this.editData?.lastCanvasPoint && !spline.closed) {
      const { lastCanvasPoint } = this.editData;
      const { enableTwoPointPreview } = this.configuration.spline;
      if (spline.numControlPoints === 1 && enableTwoPointPreview) {
        const firstPoint = canvasCoordinates[0];
        const previewPolylinePoints = [firstPoint, lastCanvasPoint];
        drawPolyline(svgDrawingHelper, annotationUID, "previewSplineChange", previewPolylinePoints, {
          color: "#9EA0CA",
          lineDash,
          lineWidth: 1
        });
      } else if (spline.numControlPoints > 1) {
        const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);
        drawPolyline(svgDrawingHelper, annotationUID, "previewSplineChange", previewPolylinePoints, {
          color: "#9EA0CA",
          lineDash,
          lineWidth: 1
        });
      }
    }
    if (splineConfig.showControlPointsConnectors) {
      const controlPointsConnectors = [...canvasCoordinates];
      if (spline.closed) {
        controlPointsConnectors.push(canvasCoordinates[0]);
      }
      drawPolyline(svgDrawingHelper, annotationUID, "controlPointsConnectors", controlPointsConnectors, {
        color: "rgba(255, 255, 255, 0.5)",
        lineWidth: 1
      });
    }
    this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);
    if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {
      this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);
      this.fireChangeOnUpdate = null;
    }
    annotation.invalidated = false;
    return true;
  }
  createInterpolatedSplineControl(annotation) {
    if (annotation.data.handles.points?.length) {
      return;
    }
    const { polyline } = annotation.data.contour;
    if (!polyline || !polyline.length) {
      return;
    }
    annotation.data.handles.points = [];
    const { points } = annotation.data.handles;
    const increment = Math.max(10, Math.floor(polyline.length / 20));
    for (let i = 0; i < polyline.length - increment; i += increment) {
      points.push(polyline[i]);
    }
    points.push(polyline[polyline.length - 1]);
  }
  isSplineAnnotation(annotation) {
    return splineToolNames.includes(annotation?.metadata?.toolName);
  }
  createSplineObjectFromType(annotation, splineType) {
    const splineConfig = this._getSplineConfig(splineType);
    const spline = new splineConfig.Class();
    annotation.data.spline = {
      type: splineConfig.type,
      instance: spline,
      resolution: splineConfig.resolution
    };
  }
  createAnnotation(evt) {
    const contourAnnotation = super.createAnnotation(evt);
    const { world: worldPos } = evt.detail.currentPoints;
    const { type: splineType } = this.configuration.spline;
    const splineConfig = this._getSplineConfig(splineType);
    const spline = new splineConfig.Class();
    const createSpline = () => ({
      type: splineConfig.type,
      instance: spline,
      resolution: splineConfig.resolution
    });
    let onInterpolationComplete;
    if (this.configuration.interpolation?.enabled) {
      onInterpolationComplete = (annotation) => {
        annotation.data.spline ||= createSpline();
        this.createInterpolatedSplineControl(annotation);
      };
    }
    return utilities_exports.deepMerge(contourAnnotation, {
      data: {
        handles: {
          points: [[...worldPos]]
        },
        spline: createSpline(),
        cachedStats: {}
      },
      onInterpolationComplete
    });
  }
  _deleteControlPointByIndex(element, annotation, controlPointIndex) {
    const enabledElement = getEnabledElement(element);
    const { points: controlPoints } = annotation.data.handles;
    if (controlPoints.length === 3) {
      removeAnnotation(annotation.annotationUID);
    } else {
      controlPoints.splice(controlPointIndex, 1);
    }
    const { renderingEngine } = enabledElement;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    annotation.invalidated = true;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
  }
  _isSplineROIAnnotation(annotation) {
    return !!annotation.data?.spline;
  }
  _getSplineConfig(type) {
    const { configuration: config2 } = this;
    const splineConfigs = config2.spline.configuration;
    return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);
  }
  _updateSplineInstance(element, annotation) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    const { worldToCanvas } = viewport;
    const { data } = annotation;
    const { type: splineType, instance: spline } = annotation.data.spline;
    const splineConfig = this._getSplineConfig(splineType);
    const worldPoints = data.handles.points;
    const canvasPoints = worldPoints.map(worldToCanvas);
    const resolution = splineConfig.resolution !== void 0 ? parseInt(splineConfig.resolution) : void 0;
    const scale2 = splineConfig.scale !== void 0 ? parseFloat(splineConfig.scale) : void 0;
    spline.setControlPoints(canvasPoints);
    spline.closed = !!data.contour.closed;
    if (!spline.fixedResolution && resolution !== void 0 && spline.resolution !== resolution) {
      spline.resolution = resolution;
      annotation.invalidated = true;
    }
    if (spline instanceof CardinalSpline && !spline.fixedScale && scale2 !== void 0 && spline.scale !== scale2) {
      spline.scale = scale2;
      annotation.invalidated = true;
    }
    return spline;
  }
};
_SplineROITool.toolName = "SplineROI";
_SplineROITool.SplineTypes = SplineTypesEnum;
_SplineROITool.Actions = SplineToolActions;
_SplineROITool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  if (points.length < SPLINE_MIN_POINTS) {
    console.warn("Spline requires at least 3 control points");
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport } = _SplineROITool.hydrateBase(_SplineROITool, enabledElement, points, options);
  const splineType = options?.splineType || SplineTypesEnum.CatmullRom;
  const splineConfig = instance._getSplineConfig(splineType);
  const SplineClass = splineConfig.Class;
  const splineInstance = new SplineClass();
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points
      },
      label: "",
      cachedStats: {},
      spline: {
        type: splineType,
        instance: splineInstance
      },
      contour: {
        closed: true
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: true,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var SplineROITool = _SplineROITool;
function defaultGetTextLines11(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { area, isEmptyArea, areaUnit } = cachedVolumeStats;
  const textLines = [];
  if (area) {
    const areaLine = isEmptyArea ? `Area: Oblique not supported` : `Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`;
    textLines.push(areaLine);
  }
  return textLines;
}
var SplineROITool_default = SplineROITool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js
var _SplineContourSegmentationTool = class _SplineContourSegmentationTool extends SplineROITool_default {
  constructor(toolProps) {
    const initialProps = utilities_exports.deepMerge({
      configuration: {
        calculateStats: false
      }
    }, toolProps);
    super(initialProps);
    this.annotationCutMergeCompletedBinded = this.annotationCutMergeCompleted.bind(this);
  }
  isContourSegmentationTool() {
    return true;
  }
  initializeListeners() {
    eventTarget_default.addEventListener(Events_default.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);
  }
  removeListeners() {
    eventTarget_default.removeEventListener(Events_default.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);
  }
  annotationCutMergeCompleted(evt) {
    const { sourceAnnotation: annotation } = evt.detail;
    if (this.toolName !== annotation?.metadata?.toolName || !this.splineToolNames.includes(annotation?.metadata?.toolName) || !this.configuration.simplifiedSpline) {
      return;
    }
    convertContourSegmentationAnnotation(annotation);
  }
};
_SplineContourSegmentationTool.toolName = "SplineContourSegmentationTool";
var SplineContourSegmentationTool = _SplineContourSegmentationTool;
var SplineContourSegmentationTool_default = SplineContourSegmentationTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/BucketQueue.js
var BucketQueue = class {
  constructor({ numBits, getPriority, areEqual }) {
    this._bucketCount = 1 << numBits;
    this._mask = this._bucketCount - 1;
    this._size = 0;
    this._currentBucketIndex = 0;
    this._buckets = this._buildArray(this._bucketCount);
    this._getPriority = typeof getPriority !== "undefined" ? getPriority : (item) => item;
    this._areEqual = typeof areEqual === "function" ? areEqual : (itemA, itemB) => itemA === itemB;
  }
  push(item) {
    const bucketIndex = this._getBucketIndex(item);
    const oldHead = this._buckets[bucketIndex];
    const newHead = {
      value: item,
      next: oldHead
    };
    this._buckets[bucketIndex] = newHead;
    this._size++;
  }
  pop() {
    if (this._size === 0) {
      throw new Error("Cannot pop because the queue is empty.");
    }
    while (this._buckets[this._currentBucketIndex] === null) {
      this._currentBucketIndex = (this._currentBucketIndex + 1) % this._bucketCount;
    }
    const ret = this._buckets[this._currentBucketIndex];
    this._buckets[this._currentBucketIndex] = ret.next;
    this._size--;
    return ret.value;
  }
  remove(item) {
    if (!item) {
      return false;
    }
    const bucketIndex = this._getBucketIndex(item);
    const firstBucketNode = this._buckets[bucketIndex];
    let node = firstBucketNode;
    let prevNode;
    while (node !== null) {
      if (this._areEqual(item, node.value)) {
        break;
      }
      prevNode = node;
      node = node.next;
    }
    if (node === null) {
      return false;
    }
    if (node === firstBucketNode) {
      this._buckets[bucketIndex] = node.next;
    } else {
      prevNode.next = node.next;
    }
    this._size--;
    return true;
  }
  isEmpty() {
    return this._size === 0;
  }
  _getBucketIndex(item) {
    return this._getPriority(item) & this._mask;
  }
  _buildArray(size) {
    const buckets = new Array(size);
    buckets.fill(null);
    return buckets;
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/livewire/LivewireScissors.js
var { isEqual: isEqual8 } = utilities_exports;
var MAX_UINT32 = 4294967295;
var TWO_THIRD_PI = 2 / (3 * Math.PI);
var LivewireScissors = class _LivewireScissors {
  constructor(grayscalePixelData, width, height) {
    this._getPointIndex = (row, col) => {
      const { width: width2 } = this;
      return row * width2 + col;
    };
    this._getPointCoordinate = (index) => {
      const x = index % this.width;
      const y = Math.floor(index / this.width);
      return [x, y];
    };
    this._getPointCost = (pointIndex) => {
      return Math.round(this.searchGranularity * this.costs[pointIndex]);
    };
    const numPixels = grayscalePixelData.length;
    this.searchGranularityBits = 8;
    this.searchGranularity = 1 << this.searchGranularityBits;
    this.width = width;
    this.height = height;
    this.grayscalePixelData = grayscalePixelData;
    this.laplace = null;
    this.gradXNew = null;
    this.gradYNew = null;
    this.laplace = this._computeLaplace();
    this.gradMagnitude = this._computeGradient();
    this.gradXNew = this._computeGradientX();
    this.gradYNew = this._computeGradientY();
    this.visited = new Array(numPixels);
    this.parents = new Uint32Array(numPixels);
    this.costs = new Float32Array(numPixels);
  }
  startSearch(startPoint) {
    const startPointIndex = this._getPointIndex(startPoint[1], startPoint[0]);
    this.startPoint = null;
    this.visited.fill(false);
    this.parents.fill(MAX_UINT32);
    this.costs.fill(Infinity);
    this.priorityQueueNew = new BucketQueue({
      numBits: this.searchGranularityBits,
      getPriority: this._getPointCost
    });
    this.startPoint = startPoint;
    this.costs[startPointIndex] = 0;
    this.priorityQueueNew.push(startPointIndex);
  }
  findMinNearby(testPoint, delta = 2) {
    const [x, y] = testPoint;
    const { costs } = this;
    const xRange = [
      Math.max(0, x - delta),
      Math.min(x + delta + 1, this.width)
    ];
    const yRange = [
      Math.max(0, y - delta),
      Math.min(y + delta + 1, this.height)
    ];
    let minValue = costs[this._getPointIndex(y, x)] * 0.8;
    let minPoint = testPoint;
    for (let xTest = xRange[0]; xTest < xRange[1]; xTest++) {
      for (let yTest = yRange[0]; yTest < yRange[1]; yTest++) {
        const distanceCost = 1 - (Math.abs(xTest - testPoint[0]) + Math.abs(yTest - testPoint[1])) / delta / 2;
        const weightCost = costs[this._getPointIndex(yTest, xTest)];
        const weight = weightCost * 0.8 + distanceCost * 0.2;
        if (weight < minValue) {
          minPoint = [xTest, yTest];
          minValue = weight;
        }
      }
    }
    return minPoint;
  }
  findPathToPoint(targetPoint) {
    if (!this.startPoint) {
      throw new Error("There is no search in progress");
    }
    const { startPoint, _getPointIndex: index, _getPointCoordinate: coord } = this;
    const startPointIndex = index(startPoint[1], startPoint[0]);
    const targetPointIndex = index(targetPoint[1], targetPoint[0]);
    const { visited, parents, costs: cost, priorityQueueNew: priorityQueue } = this;
    if (targetPointIndex === startPointIndex) {
      return [];
    }
    while (!priorityQueue.isEmpty() && parents[targetPointIndex] === MAX_UINT32) {
      const pointIndex = priorityQueue.pop();
      if (visited[pointIndex]) {
        continue;
      }
      const point = coord(pointIndex);
      const neighborsPoints = this._getNeighborPoints(point);
      visited[pointIndex] = true;
      for (let i = 0, len = neighborsPoints.length; i < len; i++) {
        const neighborPoint = neighborsPoints[i];
        const neighborPointIndex = index(neighborPoint[1], neighborPoint[0]);
        const dist = this._getWeightedDistance(point, neighborPoint);
        const neighborCost = cost[pointIndex] + dist;
        if (neighborCost < cost[neighborPointIndex]) {
          if (cost[neighborPointIndex] !== Infinity) {
            priorityQueue.remove(neighborPointIndex);
          }
          cost[neighborPointIndex] = neighborCost;
          parents[neighborPointIndex] = pointIndex;
          priorityQueue.push(neighborPointIndex);
        }
      }
    }
    const pathPoints = [];
    let pathPointIndex = targetPointIndex;
    while (pathPointIndex !== MAX_UINT32) {
      pathPoints.push(coord(pathPointIndex));
      pathPointIndex = parents[pathPointIndex];
    }
    return pathPoints.reverse();
  }
  _getDeltaX(x, y) {
    const { grayscalePixelData: data, width } = this;
    let index = this._getPointIndex(y, x);
    if (x + 1 === width) {
      index--;
    }
    return data[index + 1] - data[index];
  }
  _getDeltaY(x, y) {
    const { grayscalePixelData: data, width, height } = this;
    let index = this._getPointIndex(y, x);
    if (y + 1 === height) {
      index -= width;
    }
    return data[index] - data[index + width];
  }
  _getGradientMagnitude(x, y) {
    const dx = this._getDeltaX(x, y);
    const dy = this._getDeltaY(x, y);
    return Math.sqrt(dx * dx + dy * dy);
  }
  _getLaplace(x, y) {
    const { grayscalePixelData: data, _getPointIndex: index } = this;
    const p02 = data[index(y - 2, x)];
    const p11 = data[index(y - 1, x - 1)];
    const p12 = data[index(y - 1, x)];
    const p13 = data[index(y - 1, x + 1)];
    const p20 = data[index(y, x - 2)];
    const p21 = data[index(y, x - 1)];
    const p22 = data[index(y, x)];
    const p23 = data[index(y, x + 1)];
    const p24 = data[index(y, x + 2)];
    const p31 = data[index(y + 1, x - 1)];
    const p32 = data[index(y + 1, x)];
    const p33 = data[index(y + 1, x + 1)];
    const p42 = data[index(y + 2, x)];
    let lap = p02;
    lap += p11 + 2 * p12 + p13;
    lap += p20 + 2 * p21 - 16 * p22 + 2 * p23 + p24;
    lap += p31 + 2 * p32 + p33;
    lap += p42;
    return lap;
  }
  _computeGradient() {
    const { width, height } = this;
    const gradient = new Float32Array(width * height);
    let pixelIndex = 0;
    let max = 0;
    let x = 0;
    let y = 0;
    for (y = 0; y < height - 1; y++) {
      for (x = 0; x < width - 1; x++) {
        gradient[pixelIndex] = this._getGradientMagnitude(x, y);
        max = Math.max(gradient[pixelIndex], max);
        pixelIndex++;
      }
      gradient[pixelIndex] = gradient[pixelIndex - 1];
      pixelIndex++;
    }
    for (let len = gradient.length; pixelIndex < len; pixelIndex++) {
      gradient[pixelIndex] = gradient[pixelIndex - width];
    }
    for (let i = 0, len = gradient.length; i < len; i++) {
      gradient[i] = 1 - gradient[i] / max;
    }
    return gradient;
  }
  _computeLaplace() {
    const { width, height, _getPointIndex: index } = this;
    const laplace = new Float32Array(width * height);
    laplace.fill(1, 0, index(2, 0));
    for (let y = 2; y < height - 2; y++) {
      laplace[index(y, 0)] = 1;
      laplace[index(y, 1)] = 1;
      for (let x = 2; x < width - 2; x++) {
        laplace[index(y, x)] = this._getLaplace(x, y) > 0.33 ? 0 : 1;
      }
      laplace[index(y, width - 2)] = 1;
      laplace[index(y, width - 1)] = 1;
    }
    laplace.fill(1, index(height - 2, 0));
    return laplace;
  }
  _computeGradientX() {
    const { width, height } = this;
    const gradX = new Float32Array(width * height);
    let pixelIndex = 0;
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        gradX[pixelIndex++] = this._getDeltaX(x, y);
      }
    }
    return gradX;
  }
  _computeGradientY() {
    const { width, height } = this;
    const gradY = new Float32Array(width * height);
    let pixelIndex = 0;
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        gradY[pixelIndex++] = this._getDeltaY(x, y);
      }
    }
    return gradY;
  }
  _getGradientUnitVector(px, py) {
    const { gradXNew, gradYNew, _getPointIndex: index } = this;
    const pointGradX = gradXNew[index(py, px)];
    const pointGradY = gradYNew[index(py, px)];
    let gradVecLen = Math.sqrt(pointGradX * pointGradX + pointGradY * pointGradY);
    gradVecLen = Math.max(gradVecLen, 1e-100);
    return [pointGradX / gradVecLen, pointGradY / gradVecLen];
  }
  _getGradientDirection(px, py, qx, qy) {
    const dgpUnitVec = this._getGradientUnitVector(px, py);
    const gdqUnitVec = this._getGradientUnitVector(qx, qy);
    let dp = dgpUnitVec[1] * (qx - px) - dgpUnitVec[0] * (qy - py);
    let dq = gdqUnitVec[1] * (qx - px) - gdqUnitVec[0] * (qy - py);
    if (dp < 0) {
      dp = -dp;
      dq = -dq;
    }
    if (px !== qx && py !== qy) {
      dp *= Math.SQRT1_2;
      dq *= Math.SQRT1_2;
    }
    dq = Math.min(Math.max(dq, -1), 1);
    const direction = TWO_THIRD_PI * (Math.acos(Math.min(dp, 1)) + Math.acos(dq));
    if (isNaN(direction) || !isFinite(direction)) {
      console.warn("Found non-direction:", px, py, qx, qy, dp, dq, direction);
      return 1;
    }
    return direction;
  }
  getCost(pointA, pointB) {
    return this._getWeightedDistance(pointA, pointB);
  }
  _getWeightedDistance(pointA, pointB) {
    const { _getPointIndex: index, width, height } = this;
    const [aX, aY] = pointA;
    const [bX, bY] = pointB;
    if (bX < 0 || bX >= width || bY < 0 || bY >= height) {
      return 1;
    }
    if (aX < 0 || aY < 0 || aX >= width || aY >= height) {
      return 0;
    }
    const bIndex = index(bY, bX);
    let gradient = this.gradMagnitude[bIndex];
    if (aX === bX || aY === bY) {
      gradient *= Math.SQRT1_2;
    }
    const laplace = this.laplace[bIndex];
    const direction = this._getGradientDirection(aX, aY, bX, bY);
    return 0.43 * gradient + 0.43 * laplace + 0.11 * direction;
  }
  _getNeighborPoints(point) {
    const { width, height } = this;
    const list = [];
    const sx = Math.max(point[0] - 1, 0);
    const sy = Math.max(point[1] - 1, 0);
    const ex = Math.min(point[0] + 1, width - 1);
    const ey = Math.min(point[1] + 1, height - 1);
    for (let y = sy; y <= ey; y++) {
      for (let x = sx; x <= ex; x++) {
        if (x !== point[0] || y !== point[1]) {
          list.push([x, y]);
        }
      }
    }
    return list;
  }
  static createInstanceFromRawPixelData(pixelData, width, height, voiRange) {
    const numPixels = pixelData.length;
    const grayscalePixelData = new Float32Array(numPixels);
    const { lower: minPixelValue, upper: maxPixelValue } = voiRange;
    const pixelRange = maxPixelValue - minPixelValue;
    for (let i = 0, len = pixelData.length; i < len; i++) {
      grayscalePixelData[i] = Math.max(0, Math.min(1, (pixelData[i] - minPixelValue) / pixelRange));
    }
    return new _LivewireScissors(grayscalePixelData, width, height);
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/utilities/livewire/LiveWirePath.js
var LivewirePath = class {
  constructor(inputPointArray, inputControlPointIndexArray) {
    this.pointArray = inputPointArray ? inputPointArray.slice() : [];
    this._controlPointIndexes = inputControlPointIndexArray ? inputControlPointIndexArray.slice() : [];
  }
  getPoint(index) {
    return this.pointArray[index];
  }
  getLastPoint() {
    return this.pointArray[this.pointArray.length - 1];
  }
  isControlPoint(point) {
    const index = this.pointArray.indexOf(point);
    if (index !== -1) {
      return this._controlPointIndexes.indexOf(index) !== -1;
    } else {
      throw new Error("Error: isControlPoint called with not in list point.");
    }
  }
  addPoint(point) {
    this.pointArray.push(point);
  }
  addControlPoint(point) {
    const index = this.pointArray.indexOf(point);
    if (index !== -1) {
      this._controlPointIndexes.push(index);
    } else {
      throw new Error("Cannot mark a non registered point as control point.");
    }
  }
  getControlPoints() {
    return this._controlPointIndexes.map((i) => this.pointArray[i]);
  }
  getNumControlPoints() {
    return this._controlPointIndexes.length;
  }
  removeLastControlPoint() {
    if (this._controlPointIndexes.length) {
      this._controlPointIndexes.pop();
    }
  }
  getLastControlPoint() {
    if (this._controlPointIndexes.length) {
      return this.pointArray[this._controlPointIndexes[this._controlPointIndexes.length - 1]];
    }
  }
  removeLastPoints(count) {
    this.pointArray.splice(this.pointArray.length - count, count);
  }
  addPoints(newPointArray) {
    this.pointArray = this.pointArray.concat(newPointArray);
  }
  prependPath(other) {
    const otherSize = other.pointArray.length;
    const shiftedIndexArray = [];
    this.pointArray = other.pointArray.concat(this.pointArray);
    for (let i = 0; i < this._controlPointIndexes.length; ++i) {
      shiftedIndexArray[i] = this._controlPointIndexes[i] + otherSize;
    }
    this._controlPointIndexes = other._controlPointIndexes.concat(shiftedIndexArray);
  }
  appendPath(other) {
    this.addPoints(other.pointArray);
    other._controlPointIndexes.forEach((point) => this._controlPointIndexes.push(point));
  }
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js
var CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;
var _LivewireContourTool = class _LivewireContourTool extends ContourSegmentationBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      getTextLines: defaultGetTextLines12,
      calculateStats: true,
      preventHandleOutsideImage: false,
      contourHoleAdditionModifierKey: KeyboardBindings.Shift,
      snapHandleNearby: 2,
      interpolation: {
        enabled: false,
        nearestEdge: 2,
        showInterpolationPolyline: false
      },
      decimate: {
        enabled: false,
        epsilon: 0.1
      },
      actions: {
        cancelInProgress: {
          method: "cancelInProgress",
          bindings: [
            {
              key: "Escape"
            }
          ]
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isHandleOutsideImage = false;
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const proximitySquared = proximity * proximity;
      const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));
      let startPoint = canvasPoints[canvasPoints.length - 1];
      for (let i = 0; i < canvasPoints.length; i++) {
        const endPoint = canvasPoints[i];
        const distanceToPointSquared4 = line_exports.distanceToPointSquared(startPoint, endPoint, canvasCoords);
        if (distanceToPointSquared4 <= proximitySquared) {
          return true;
        }
        startPoint = endPoint;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      this._activateModify(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { data } = annotation;
      annotation.highlighted = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        const { points } = data.handles;
        handleIndex = points.findIndex((p) => p === handle);
      }
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex,
        movingTextBox
      };
      this._activateModify(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt, clearAnnotation = false) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled } = this.editData;
      const { data } = annotation;
      this.doneEditMemo();
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage || clearAnnotation) {
        removeAnnotation(annotation.annotationUID);
        this.clearEditData();
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        return;
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      const changeType = newAnnotation ? ChangeTypes_default.Completed : ChangeTypes_default.HandlesUpdated;
      this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);
      this.clearEditData();
    };
    this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes_default.StatsUpdated, contourHoleProcessingEnabled = false) => {
      if (changeType === ChangeTypes_default.Completed) {
        triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);
      } else {
        triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);
      }
    };
    this._mouseDownCallback = (evt) => {
      const doubleClick = evt.type === Events_default.MOUSE_DOUBLE_CLICK;
      const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation } = this.editData;
      if (this.editData.closed) {
        return;
      }
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;
      let worldPos = worldPosOriginal;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      const controlPoints = this.editData.currentPath.getControlPoints();
      let closePath = controlPoints.length >= 2 && doubleClick;
      this.doneEditMemo();
      this.createMemo(element, annotation, {
        newAnnotation: newAnnotation && controlPoints.length === 1
      });
      if (controlPoints.length >= 2) {
        const closestHandlePoint = {
          index: -1,
          distSquared: Infinity
        };
        for (let i = 0, len = controlPoints.length; i < len; i++) {
          const controlPoint = controlPoints[i];
          const worldControlPoint = sliceToWorld(controlPoint);
          const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);
          const distSquared = point_exports.distanceToPointSquared(canvasPos, canvasControlPoint);
          if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST && distSquared < closestHandlePoint.distSquared) {
            closestHandlePoint.distSquared = distSquared;
            closestHandlePoint.index = i;
          }
        }
        if (closestHandlePoint.index === 0) {
          closePath = true;
        }
      }
      const { snapHandleNearby } = this.configuration;
      if (snapHandleNearby && !this.editData.closed) {
        const currentPath = new LivewirePath();
        const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);
        const pathPoints = this.scissors.findPathToPoint(snapPoint);
        currentPath.addPoints(pathPoints);
        currentPath.prependPath(this.editData.confirmedPath);
        worldPos = sliceToWorld(snapPoint);
        this.editData.currentPath = currentPath;
      }
      this.editData.closed = this.editData.closed || closePath;
      this.editData.confirmedPath = this.editData.currentPath;
      const lastPoint = this.editData.currentPath.getLastPoint();
      this.editData.confirmedPath.addControlPoint(lastPoint);
      annotation.data.handles.points.push(sliceToWorld(lastPoint));
      this.scissors.startSearch(worldToSlice(worldPos));
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (this.editData.closed) {
        this.updateAnnotation(this.editData.confirmedPath);
        this._endCallback(evt);
      }
      evt.preventDefault();
    };
    this._mouseMoveCallback = (evt) => {
      const { element, currentPoints } = evt.detail;
      const { world: worldPos, canvas: canvasPos } = currentPoints;
      const { renderingEngine } = getEnabledElement(element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData.lastCanvasPoint = canvasPos;
      const { width: imgWidth, height: imgHeight } = this.scissors;
      const { worldToSlice } = this.editData;
      const slicePoint = worldToSlice(worldPos);
      if (slicePoint[0] < 0 || slicePoint[1] < 0 || slicePoint[0] >= imgWidth || slicePoint[1] >= imgHeight) {
        return;
      }
      const pathPoints = this.scissors.findPathToPoint(slicePoint);
      const currentPath = new LivewirePath();
      currentPath.addPoints(pathPoints);
      currentPath.prependPath(this.editData.confirmedPath);
      this.editData.currentPath = currentPath;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        console.warn("Drag annotation not implemented");
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        this.editHandle(worldPos, element, annotation, handleIndex);
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.cancel = (element) => {
      if (!this.isDrawing) {
        return;
      }
      this.isDrawing = false;
      this._deactivateDraw(element);
      this._deactivateModify(element);
      resetElementCursor(element);
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      if (newAnnotation) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.doneEditMemo();
      this.scissors = null;
      return annotation.annotationUID;
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_MOVE, this._mouseMoveCallback);
      element.addEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.addEventListener(Events_default.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._mouseDownCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_MOVE, this._mouseMoveCallback);
      element.removeEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.removeEventListener(Events_default.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._mouseDownCallback);
    };
    this._calculateCachedStats = (annotation, element) => {
      if (!this.configuration.calculateStats) {
        return;
      }
      const data = annotation.data;
      if (!data.contour.closed) {
        return;
      }
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      const { cachedStats } = data;
      const { polyline: points } = data.contour;
      const targetIds = Object.keys(cachedStats);
      for (let i = 0; i < targetIds.length; i++) {
        const targetId = targetIds[i];
        const image = this.getTargetImageData(targetId);
        if (!image) {
          continue;
        }
        const { metadata } = image;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const canvasPoint = canvasCoordinates[0];
        const originalWorldPoint = viewport.canvasToWorld(canvasPoint);
        const deltaXPoint = viewport.canvasToWorld([
          canvasPoint[0] + 1,
          canvasPoint[1]
        ]);
        const deltaYPoint = viewport.canvasToWorld([
          canvasPoint[0],
          canvasPoint[1] + 1
        ]);
        const deltaInX = vec3_exports.distance(originalWorldPoint, deltaXPoint);
        const deltaInY = vec3_exports.distance(originalWorldPoint, deltaYPoint);
        const { imageData } = image;
        const { scale: scale2, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {
          const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY } = polyline_exports.getAABB(canvasCoordinates);
          const topLeftBBWorld = viewport.canvasToWorld([
            canvasMinX,
            canvasMinY
          ]);
          const topLeftBBIndex = utilities_exports.transformWorldToIndex(imageData, topLeftBBWorld);
          const bottomRightBBWorld = viewport.canvasToWorld([
            canvasMaxX,
            canvasMaxY
          ]);
          const bottomRightBBIndex = utilities_exports.transformWorldToIndex(imageData, bottomRightBBWorld);
          return [topLeftBBIndex, bottomRightBBIndex];
        });
        let area = polyline_exports.getArea(canvasCoordinates) / scale2 / scale2;
        area *= deltaInX * deltaInY;
        cachedStats[targetId] = {
          Modality: metadata.Modality,
          area,
          areaUnit
        };
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes_default.StatsUpdated);
      }
      return cachedStats;
    };
    this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {
      const data = annotation.data;
      const targetId = this.getTargetId(viewport);
      if (!data.contour.closed || !textboxStyle.visibility) {
        return;
      }
      const textLines = this.configuration.getTextLines(data, targetId);
      if (!textLines || textLines.length === 0) {
        return;
      }
      const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));
      if (!data.handles.textBox.hasMoved) {
        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
        data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
      }
      const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
      const textBoxUID = "textBox";
      const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotation.annotationUID ?? "", textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);
      const { x: left, y: top, width, height } = boundingBox;
      data.handles.textBox.worldBoundingBox = {
        topLeft: viewport.canvasToWorld([left, top]),
        topRight: viewport.canvasToWorld([left + width, top]),
        bottomLeft: viewport.canvasToWorld([left, top + height]),
        bottomRight: viewport.canvasToWorld([left + width, top + height])
      };
    };
    this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes_default.StatsUpdated) => {
      const { viewportId, renderingEngineId } = enabledElement;
      const eventType = Events_default.ANNOTATION_MODIFIED;
      const eventDetail = {
        annotation,
        viewportId,
        renderingEngineId,
        changeType
      };
      triggerEvent(eventTarget_default, eventType, eventDetail);
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    this.isDrawing = true;
    const viewportImageData = viewport.getImageData();
    const { imageData: vtkImageData } = viewportImageData;
    let worldToSlice;
    let sliceToWorld;
    let width;
    let height;
    let scalarData;
    if (!(viewport instanceof VolumeViewport_default)) {
      width = viewportImageData.dimensions[0];
      height = viewportImageData.dimensions[1];
      worldToSlice = (point) => {
        const ijkPoint = utilities_exports.transformWorldToIndex(vtkImageData, point);
        return [ijkPoint[0], ijkPoint[1]];
      };
      sliceToWorld = (point) => utilities_exports.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);
      scalarData = viewportImageData.scalarData;
    } else if (viewport instanceof VolumeViewport_default) {
      const sliceImageData = utilities_exports.getCurrentVolumeViewportSlice(viewport);
      const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;
      worldToSlice = (point) => {
        const ijkPoint = utilities_exports.transformWorldToIndex(vtkImageData, point);
        const slicePoint = vec3_exports.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);
        return [slicePoint[0], slicePoint[1]];
      };
      sliceToWorld = (point) => {
        const ijkPoint = vec3_exports.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);
        return utilities_exports.transformIndexToWorld(vtkImageData, ijkPoint);
      };
      scalarData = sliceImageData.scalarData;
      width = sliceImageData.width;
      height = sliceImageData.height;
    } else {
      throw new Error("Viewport not supported");
    }
    scalarData = utilities_exports.convertToGrayscale(scalarData, width, height);
    const { voiRange } = viewport.getProperties();
    const startPos = worldToSlice(worldPos);
    this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);
    if (nextPos) {
      this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);
      this.scissorsNext.startSearch(worldToSlice(nextPos));
    }
    this.scissors.startSearch(startPos);
    const newAnnotation = !nextPos;
    const confirmedPath = new LivewirePath();
    const currentPath = new LivewirePath();
    const currentPathNext = newAnnotation ? void 0 : new LivewirePath();
    confirmedPath.addPoint(startPos);
    confirmedPath.addControlPoint(startPos);
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    const lastCanvasPoint = viewport.worldToCanvas(worldPos);
    this.editData = {
      annotation,
      viewportIdsToRender,
      newAnnotation,
      hasMoved: false,
      lastCanvasPoint,
      confirmedPath,
      currentPath,
      confirmedPathNext: currentPathNext,
      closed: false,
      handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,
      worldToSlice,
      sliceToWorld,
      contourHoleProcessingEnabled
    };
  }
  addNewAnnotation(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const { world: worldPos } = currentPoints;
    const annotation = this.createAnnotation(evt);
    const contourHoleProcessingEnabled = getMouseModifier_default(evt.detail.event) === this.configuration.contourHoleAdditionModifierKey;
    this.setupBaseEditData(worldPos, element, annotation, void 0, contourHoleProcessingEnabled);
    this.addAnnotation(annotation, element);
    this._activateDraw(element);
    evt.preventDefault();
    triggerAnnotationRenderForViewportIds_default(this.editData.viewportIdsToRender);
    return annotation;
  }
  clearEditData() {
    this.editData = null;
    this.scissors = null;
    this.scissorsNext = null;
    this.isDrawing = false;
  }
  editHandle(worldPos, element, annotation, handleIndex) {
    const { data } = annotation;
    const { points: handlePoints } = data.handles;
    const { length: numHandles } = handlePoints;
    const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];
    const nextHandle = handlePoints[(handleIndex + 1) % numHandles];
    if (!this.editData?.confirmedPathNext) {
      this.setupBaseEditData(previousHandle, element, annotation, nextHandle);
      const { polyline } = data.contour;
      const confirmedPath = new LivewirePath();
      const confirmedPathNext = new LivewirePath();
      const { worldToSlice: worldToSlice2 } = this.editData;
      const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);
      const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);
      if (nextIndex === -1 || previousIndex === -1) {
        throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);
      }
      if (handleIndex === 0) {
        confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice2));
      } else {
        confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice2));
        confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice2));
      }
      this.editData.confirmedPath = confirmedPath;
      this.editData.confirmedPathNext = confirmedPathNext;
    }
    const { editData, scissors } = this;
    const { worldToSlice, sliceToWorld } = editData;
    const { activeHandleIndex } = data.handles;
    if (activeHandleIndex === null || activeHandleIndex === void 0) {
      data.handles.activeHandleIndex = handleIndex;
    } else if (activeHandleIndex !== handleIndex) {
      throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);
    }
    const slicePos = worldToSlice(worldPos);
    if (slicePos[0] < 0 || slicePos[0] >= scissors.width || slicePos[1] < 0 || slicePos[1] >= scissors.height) {
      return;
    }
    handlePoints[handleIndex] = sliceToWorld(slicePos);
    const pathPointsLeft = scissors.findPathToPoint(slicePos);
    const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);
    const currentPath = new LivewirePath();
    currentPath.prependPath(editData.confirmedPath);
    if (handleIndex !== 0) {
      currentPath.addPoints(pathPointsLeft);
    }
    currentPath.addPoints(pathPointsRight.reverse());
    currentPath.appendPath(editData.confirmedPathNext);
    if (handleIndex === 0) {
      currentPath.addPoints(pathPointsLeft);
    }
    editData.currentPath = currentPath;
    annotation.invalidated = true;
    editData.hasMoved = true;
    editData.closed = true;
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    this.updateAnnotation(this.editData?.currentPath);
    return super.renderAnnotation(enabledElement, svgDrawingHelper);
  }
  isContourSegmentationTool() {
    return false;
  }
  createAnnotation(evt) {
    const contourSegmentationAnnotation = super.createAnnotation(evt);
    const { world: worldPos } = evt.detail.currentPoints;
    const annotation = utilities_exports.deepMerge(contourSegmentationAnnotation, {
      data: {
        handles: {
          points: [[...worldPos]]
        }
      }
    });
    return annotation;
  }
  cancelInProgress(element, config2, evt) {
    if (!this.editData) {
      this.undo();
      return;
    }
    this._endCallback(evt, true);
  }
  renderAnnotationInstance(renderContext) {
    const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId } = renderContext;
    const { viewport } = enabledElement;
    const { element } = viewport;
    const { worldToCanvas } = viewport;
    const { annotationUID, data, highlighted } = annotation;
    const { handles } = data;
    const newAnnotation = this.editData?.newAnnotation;
    const { lineWidth, lineDash, color } = annotationStyle;
    if (highlighted || newAnnotation && annotation.annotationUID === this.editData?.annotation?.annotationUID) {
      const handleGroupUID = "0";
      const canvasHandles = handles.points.map(worldToCanvas);
      drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {
        color,
        lineDash,
        lineWidth
      });
    }
    super.renderAnnotationInstance(renderContext);
    if (!data.cachedStats[targetId] || data.cachedStats[targetId]?.areaUnit === null) {
      data.cachedStats[targetId] = {
        Modality: null,
        area: null,
        areaUnit: null
      };
      this._calculateCachedStats(annotation, element);
    } else if (annotation.invalidated) {
      this._throttledCalculateCachedStats(annotation, element);
    }
    this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);
    return true;
  }
  updateAnnotation(livewirePath) {
    if (!this.editData || !livewirePath) {
      return;
    }
    const { annotation, sliceToWorld, worldToSlice, closed: closed2, newAnnotation } = this.editData;
    let { pointArray: imagePoints } = livewirePath;
    if (imagePoints.length > 1) {
      imagePoints = [...imagePoints, imagePoints[0]];
    }
    const targetWindingDirection = newAnnotation && closed2 ? ContourWindingDirection.Clockwise : void 0;
    this.updateContourPolyline(annotation, {
      points: imagePoints,
      closed: closed2,
      targetWindingDirection
    }, {
      canvasToWorld: sliceToWorld,
      worldToCanvas: worldToSlice
    });
  }
};
_LivewireContourTool.toolName = "LivewireContour";
var LivewireContourTool = _LivewireContourTool;
var LivewireContourTool_default = LivewireContourTool;
function defaultGetTextLines12(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { area, areaUnit } = cachedVolumeStats;
  const textLines = [];
  if (area) {
    const areaLine = `Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`;
    textLines.push(areaLine);
  }
  return textLines;
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js
var _LivewireContourSegmentationTool = class _LivewireContourSegmentationTool extends LivewireContourTool_default {
  updateInterpolatedAnnotation(annotation, enabledElement) {
    if (this.editData || !annotation.invalidated || !annotation.data.handles.interpolationSources) {
      return;
    }
    annotation.data.contour.originalPolyline = annotation.data.contour.polyline;
    queueMicrotask(() => {
      if (!annotation.data.handles.interpolationSources) {
        return;
      }
      const { points } = annotation.data.handles;
      const { element } = enabledElement.viewport;
      this.setupBaseEditData(points[0], element, annotation);
      const { length: count } = points;
      const { scissors } = this;
      const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;
      annotation.data.handles.originalPoints = points;
      const { worldToSlice, sliceToWorld } = this.editData;
      const handleSmoothing = [];
      if (nearestEdge) {
        let lastPoint = worldToSlice(points[points.length - 1]);
        points.forEach((point, hIndex) => {
          const testPoint = worldToSlice(point);
          lastPoint = testPoint;
          handleSmoothing.push(testPoint);
          scissors.startSearch(lastPoint);
          scissors.findPathToPoint(testPoint);
          scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));
          const minPoint = scissors.findMinNearby(testPoint, nearestEdge);
          if (!utilities_exports.isEqual(testPoint, minPoint)) {
            handleSmoothing[hIndex] = minPoint;
            lastPoint = minPoint;
            points[hIndex] = sliceToWorld(minPoint);
          }
        });
      }
      const acceptedPath = new LivewirePath();
      for (let i = 0; i < count; i++) {
        scissors.startSearch(worldToSlice(points[i]));
        const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));
        acceptedPath.addPoints(path);
      }
      this.updateAnnotation(acceptedPath);
      this.scissors = null;
      this.scissorsNext = null;
      this.editData = null;
      annotation.data.handles.interpolationSources = null;
      if (repeatInterpolation) {
        triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes_default.InterpolationUpdated);
      }
    });
  }
  renderAnnotationInstance(renderContext) {
    const { enabledElement, svgDrawingHelper } = renderContext;
    const annotation = renderContext.annotation;
    const { annotationUID } = annotation;
    const { viewport } = enabledElement;
    const { worldToCanvas } = viewport;
    const { showInterpolationPolyline } = this.configuration.interpolation || {};
    this.updateInterpolatedAnnotation?.(annotation, enabledElement);
    const { originalPolyline } = annotation.data.contour;
    const rendered = super.renderAnnotationInstance(renderContext);
    if (showInterpolationPolyline && originalPolyline && annotation.autoGenerated) {
      const polylineCanvasPoints = originalPolyline.map(worldToCanvas);
      polylineCanvasPoints.push(polylineCanvasPoints[0]);
      drawPolyline(svgDrawingHelper, annotationUID, "interpolationContour-0", polylineCanvasPoints, {
        color: "#70ffff",
        lineWidth: 1,
        fillOpacity: 0
      });
    }
    return rendered;
  }
  isContourSegmentationTool() {
    return true;
  }
};
_LivewireContourSegmentationTool.toolName = "LivewireContourSegmentationTool";
var LivewireContourSegmentationTool = _LivewireContourSegmentationTool;
var LivewireContourSegmentationTool_default = LivewireContourSegmentationTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js
var _ArrowAnnotateTool = class _ArrowAnnotateTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      getTextCallback: getTextCallback2,
      changeTextCallback: changeTextCallback2,
      preventHandleOutsideImage: false,
      arrowFirst: true,
      arrowHeadStyle: "legacy"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const { arrowFirst } = this.configuration;
      const annotation = this.createAnnotation(evt, [[...worldPos], [...worldPos]], {
        data: {
          handles: {
            arrowFirst
          }
        }
      });
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      if (newAnnotation) {
        this.configuration.getTextCallback((label) => {
          if (!label) {
            removeAnnotation(annotation.annotationUID);
            triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
            this.editData = null;
            this.isDrawing = false;
            return;
          }
          annotation.data.label = label;
          triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
          triggerAnnotationCompleted(annotation);
          this.createMemo(element, annotation, { newAnnotation: !!this.memo });
          setAnnotationLabel(annotation, element, label);
          triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        });
      } else if (!movingTextBox) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
      this.doneEditMemo();
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.touchTapCallback = (evt) => {
      if (evt.detail.taps == 2) {
        this.doubleClickCallback(evt);
      }
    };
    this.doubleClickCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      let annotations = getAnnotations(this.getToolName(), element);
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return;
      }
      const clickedAnnotation = annotations.find((annotation2) => this.isPointNearTool(element, annotation2, eventDetail.currentPoints.canvas, 6));
      if (!clickedAnnotation) {
        return;
      }
      const annotation = clickedAnnotation;
      this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));
      this.editData = null;
      this.isDrawing = false;
      evt.stopImmediatePropagation();
      evt.preventDefault();
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { handles, label } = data;
        const { points, activeHandleIndex } = handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        let activeHandleCanvasCoords;
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color,
            lineWidth
          });
        }
        const arrowUID = "1";
        if (this.configuration.arrowFirst) {
          drawArrow(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {
            color,
            width: lineWidth,
            lineDash,
            viaMarker: this.configuration.arrowHeadStyle !== "legacy",
            markerSize
          });
        } else {
          drawArrow(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {
            color,
            width: lineWidth,
            lineDash,
            viaMarker: this.configuration.arrowHeadStyle !== "legacy",
            markerSize
          });
        }
        renderStatus = true;
        if (!label) {
          continue;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = canvasCoordinates[1];
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, [label], textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _doneChangingTextCallback(element, annotation, updatedLabel) {
    annotation.data.label = updatedLabel;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    triggerAnnotationModified(annotation, element);
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_ArrowAnnotateTool.toolName = "ArrowAnnotate";
_ArrowAnnotateTool.hydrate = (viewportId, points, label, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _ArrowAnnotateTool.hydrateBase(_ArrowAnnotateTool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = _ArrowAnnotateTool.createAnnotation({
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      label: label || "",
      handles: {
        points
      }
    },
    autoGenerated: false,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  });
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var ArrowAnnotateTool = _ArrowAnnotateTool;
function getTextCallback2(doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
function changeTextCallback2(data, eventData, doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
var ArrowAnnotateTool_default = ArrowAnnotateTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js
var _AngleTool = class _AngleTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      showAngleArc: false,
      arcOffset: 5,
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines13
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      if (this.angleStartedNotYetCompleted) {
        return;
      }
      this.angleStartedNotYetCompleted = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2, point3] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line1 = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      if (!point3) {
        return false;
      }
      const canvasPoint3 = viewport.worldToCanvas(point3);
      const line2 = {
        start: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        },
        end: {
          x: canvasPoint3[0],
          y: canvasPoint3[1]
        }
      };
      const distanceToPoint22 = distanceToPoint3([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint22 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {
        this.editData.handleIndex = 2;
        return;
      }
      this.angleStartedNotYetCompleted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.doneEditMemo();
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        this.angleStartedNotYetCompleted = false;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].angle == null) {
          data.cachedStats[targetId] = {
            angle: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationLocked(annotation.annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color,
            lineDash,
            lineWidth
          });
        }
        let lineUID = "1";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          width: lineWidth,
          lineDash
        });
        renderStatus = true;
        if (canvasCoordinates.length !== 3) {
          return renderStatus;
        }
        lineUID = "2";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {
          color,
          width: lineWidth,
          lineDash
        });
        if (this.configuration.showAngleArc) {
          const center = canvasCoordinates[1];
          const offset = this.configuration.arcOffset;
          const radius = Math.min(distanceToPoint3([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), distanceToPoint3([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;
          const anglePoints = [];
          let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);
          let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);
          if (endAngle < startAngle) {
            endAngle += 2 * Math.PI;
          }
          const angleDifference = endAngle - startAngle;
          if (angleDifference > Math.PI) {
            const temp = startAngle;
            startAngle = endAngle;
            endAngle = temp + 2 * Math.PI;
          }
          const segments = 32;
          for (let i2 = 0; i2 <= segments; i2++) {
            const angle = startAngle + i2 / segments * (endAngle - startAngle);
            anglePoints.push([
              center[0] + radius * Math.cos(angle),
              center[1] + radius * Math.sin(angle)
            ]);
          }
          drawPath(svgDrawingHelper, annotationUID, "3", anglePoints, {
            color,
            width: lineWidth,
            lineDash: angleArcLineDash
          });
        }
        if (!data.cachedStats[targetId]?.angle) {
          continue;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = canvasCoordinates[1];
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement) {
    const data = annotation.data;
    const { element } = enabledElement.viewport;
    if (data.handles.points.length !== 3) {
      return;
    }
    const worldPos1 = data.handles.points[0];
    const worldPos2 = data.handles.points[1];
    const worldPos3 = data.handles.points[2];
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);
      const { dimensions, imageData } = this.getTargetImageData(targetId);
      this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3].map((worldPos) => utilities_exports.transformWorldToIndex(imageData, worldPos)).some((index) => !utilities_exports.indexWithinDimensions(index, dimensions));
      cachedStats[targetId] = {
        angle: isNaN(angle) ? "Incomplete Angle" : angle
      };
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
    }
    return cachedStats;
  }
};
_AngleTool.toolName = "Angle";
_AngleTool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _AngleTool.hydrateBase(_AngleTool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var AngleTool = _AngleTool;
function defaultGetTextLines13(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { angle } = cachedVolumeStats;
  if (angle === void 0) {
    return;
  }
  if (isNaN(angle)) {
    return [`${angle}`];
  }
  const textLines = [
    `${utilities_exports.roundNumber(angle)} ${String.fromCharCode(176)}`
  ];
  return textLines;
}
var AngleTool_default = AngleTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/midPoint.js
var midPoint = (...args) => {
  const ret = args[0].length === 2 ? [0, 0] : [0, 0, 0];
  const len = args.length;
  for (const arg of args) {
    ret[0] += arg[0] / len;
    ret[1] += arg[1] / len;
    if (ret.length === 3) {
      ret[2] += arg[2] / len;
    }
  }
  return ret;
};
var midPoint2 = midPoint;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js
var _CobbAngleTool = class _CobbAngleTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines14,
      showArcLines: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      if (this.angleStartedNotYetCompleted) {
        return;
      }
      this.angleStartedNotYetCompleted = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { distanceToPoint: distanceToPoint5, distanceToPoint2: distanceToPoint22 } = this.distanceToLines({
        viewport,
        points: data.handles.points,
        canvasCoords,
        proximity
      });
      if (distanceToPoint5 <= proximity || distanceToPoint22 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({
        viewport,
        points: annotation.data.handles.points,
        canvasCoords,
        proximity
      });
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false,
        isNearFirstLine,
        isNearSecondLine
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      this.doneEditMemo();
      if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {
        resetElementCursor(element);
        this.editData.handleIndex = data.handles.points.length;
        return;
      }
      this.angleStartedNotYetCompleted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._mouseDownCallback = (evt) => {
      const { annotation, handleIndex } = this.editData;
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      const worldPos = currentPoints.world;
      const { data } = annotation;
      if (handleIndex === 1) {
        data.handles.points[1] = worldPos;
        this.editData.hasMoved = data.handles.points[1][0] !== data.handles.points[0][0] || data.handles.points[1][1] !== data.handles.points[0][0];
        return;
      }
      if (handleIndex === 3) {
        data.handles.points[3] = worldPos;
        this.editData.hasMoved = data.handles.points[3][0] !== data.handles.points[2][0] || data.handles.points[3][1] !== data.handles.points[2][0];
        this.angleStartedNotYetCompleted = false;
        return;
      }
      this.editData.hasMoved = false;
      hideElementCursor(element);
      data.handles.points[2] = data.handles.points[3] = worldPos;
      this.editData.handleIndex = data.handles.points.length - 1;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0 && (isNearFirstLine || isNearSecondLine)) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        if (isNearFirstLine) {
          const firstLinePoints = [points[0], points[1]];
          firstLinePoints.forEach((point) => {
            point[0] += worldPosDelta[0];
            point[1] += worldPosDelta[1];
            point[2] += worldPosDelta[2];
          });
        } else if (isNearSecondLine) {
          const secondLinePoints = [points[2], points[3]];
          secondLinePoints.forEach((point) => {
            point[0] += worldPosDelta[0];
            point[1] += worldPosDelta[1];
            point[2] += worldPosDelta[2];
          });
        }
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.cancel = (element) => {
      if (!this.isDrawing) {
        return;
      }
      this.isDrawing = false;
      this._deactivateDraw(element);
      this._deactivateModify(element);
      resetElementCursor(element);
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      if (data.handles.points.length < 4) {
        removeAnnotation(annotation.annotationUID);
      }
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.angleStartedNotYetCompleted = false;
      return annotation.annotationUID;
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_START, this._mouseDownCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_START, this._mouseDownCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_START, this._mouseDownCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DOWN, this._mouseDownCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_START, this._mouseDownCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].angle == null) {
          data.cachedStats[targetId] = {
            angle: null,
            arc1Angle: null,
            arc2Angle: null,
            points: {
              world: {
                arc1Start: null,
                arc1End: null,
                arc2Start: null,
                arc2End: null,
                arc1Angle: null,
                arc2Angle: null
              },
              canvas: {
                arc1Start: null,
                arc1End: null,
                arc2Start: null,
                arc2End: null,
                arc1Angle: null,
                arc2Angle: null
              }
            }
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        const showHandlesAlways = Boolean(getStyleProperty("showHandlesAlways", {}));
        if (activeHandleCanvasCoords || showHandlesAlways) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color,
            lineDash,
            lineWidth
          });
        }
        const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];
        const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];
        let lineUID = "line1";
        drawLine(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {
          color,
          width: lineWidth,
          lineDash
        });
        renderStatus = true;
        if (canvasCoordinates.length < 4) {
          return renderStatus;
        }
        lineUID = "line2";
        drawLine(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {
          color,
          width: lineWidth,
          lineDash
        });
        lineUID = "linkLine";
        const mid1 = midPoint2(firstLine[0], firstLine[1]);
        const mid2 = midPoint2(secondLine[0], secondLine[1]);
        drawLine(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {
          color,
          lineWidth: "1",
          lineDash: "1,4"
        });
        const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;
        const { arc1Angle, arc2Angle } = data.cachedStats[targetId];
        if (this.configuration.showArcLines) {
          lineUID = "arc1";
          drawLine(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {
            color,
            lineWidth: "1"
          });
          lineUID = "arc2";
          drawLine(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {
            color,
            lineWidth: "1"
          });
        }
        if (!data.cachedStats[targetId]?.angle) {
          continue;
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "cobbAngleText";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
        if (this.configuration.showArcLines) {
          const arc1TextBoxUID = "arcAngle1";
          const arc1TextLine = [
            `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`
          ];
          const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);
          drawTextBox_default(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {
            ...options,
            padding: 3
          });
          const arc2TextBoxUID = "arcAngle2";
          const arc2TextLine = [
            `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`
          ];
          const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);
          drawTextBox_default(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {
            ...options,
            padding: 3
          });
        }
      }
      return renderStatus;
    };
    this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {
      const [point1, point2, point3, point4] = points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const canvasPoint3 = viewport.worldToCanvas(point3);
      const canvasPoint4 = viewport.worldToCanvas(point4);
      const line1 = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const line2 = {
        start: {
          x: canvasPoint3[0],
          y: canvasPoint3[1]
        },
        end: {
          x: canvasPoint4[0],
          y: canvasPoint4[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);
      const distanceToPoint22 = distanceToPoint3([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);
      let isNearFirstLine = false;
      let isNearSecondLine = false;
      if (distanceToPoint5 <= proximity) {
        isNearFirstLine = true;
      } else if (distanceToPoint22 <= proximity) {
        isNearSecondLine = true;
      }
      return {
        distanceToPoint: distanceToPoint5,
        distanceToPoint2: distanceToPoint22,
        isNearFirstLine,
        isNearSecondLine
      };
    };
    this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2 }) => {
      const linkLine = [mid1, mid2];
      const arc1Angle = angleBetweenLines(firstLine, linkLine);
      const arc2Angle = angleBetweenLines(secondLine, linkLine);
      const arc1Side = arc1Angle > 90 ? 1 : 0;
      const arc2Side = arc2Angle > 90 ? 0 : 1;
      const midLinkLine = midPoint2(linkLine[0], linkLine[1]);
      const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 + (linkLine[1][1] - linkLine[0][1]) ** 2);
      const ratio = 0.1;
      const midFirstLine = midPoint2(firstLine[0], firstLine[1]);
      const midSecondLine = midPoint2(secondLine[0], secondLine[1]);
      const directionVectorStartArc1 = [
        firstLine[arc1Side][0] - midFirstLine[0],
        firstLine[arc1Side][1] - midFirstLine[1]
      ];
      const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);
      const normalizedDirectionStartArc1 = [
        directionVectorStartArc1[0] / magnitudeStartArc1,
        directionVectorStartArc1[1] / magnitudeStartArc1
      ];
      const arc1Start = [
        midFirstLine[0] + normalizedDirectionStartArc1[0] * linkLineLength * ratio,
        midFirstLine[1] + normalizedDirectionStartArc1[1] * linkLineLength * ratio
      ];
      const directionVectorEndArc1 = [
        midLinkLine[0] - mid1[0],
        midLinkLine[1] - mid1[1]
      ];
      const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);
      const normalizedDirectionEndArc1 = [
        directionVectorEndArc1[0] / magnitudeEndArc1,
        directionVectorEndArc1[1] / magnitudeEndArc1
      ];
      const arc1End = [
        mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,
        mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio
      ];
      const directionVectorStartArc2 = [
        secondLine[arc2Side][0] - midSecondLine[0],
        secondLine[arc2Side][1] - midSecondLine[1]
      ];
      const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);
      const normalizedDirectionStartArc2 = [
        directionVectorStartArc2[0] / magnitudeStartArc2,
        directionVectorStartArc2[1] / magnitudeStartArc2
      ];
      const arc2Start = [
        midSecondLine[0] + normalizedDirectionStartArc2[0] * linkLineLength * ratio,
        midSecondLine[1] + normalizedDirectionStartArc2[1] * linkLineLength * ratio
      ];
      const directionVectorEndArc2 = [
        midLinkLine[0] - mid2[0],
        midLinkLine[1] - mid2[1]
      ];
      const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);
      const normalizedDirectionEndArc2 = [
        directionVectorEndArc2[0] / magnitudeEndArc2,
        directionVectorEndArc2[1] / magnitudeEndArc2
      ];
      const arc2End = [
        mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,
        mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio
      ];
      return {
        arc1Start,
        arc1End,
        arc2Start,
        arc2End,
        arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,
        arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle
      };
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 25, { trailing: true });
  }
  handleSelectedCallback(evt, annotation, handle, interactionType = "mouse") {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement) {
    const data = annotation.data;
    if (data.handles.points.length !== 4) {
      return;
    }
    const seg1 = [null, null];
    const seg2 = [null, null];
    let minDist = Number.MAX_VALUE;
    for (let i = 0; i < 2; i += 1) {
      for (let j = 2; j < 4; j += 1) {
        const dist = vec3_exports.distance(data.handles.points[i], data.handles.points[j]);
        if (dist < minDist) {
          minDist = dist;
          seg1[1] = data.handles.points[i];
          seg1[0] = data.handles.points[(i + 1) % 2];
          seg2[0] = data.handles.points[j];
          seg2[1] = data.handles.points[2 + (j - 1) % 2];
        }
      }
    }
    const { viewport } = enabledElement;
    const { element } = viewport;
    const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));
    const firstLine = [canvasPoints[0], canvasPoints[1]];
    const secondLine = [canvasPoints[2], canvasPoints[3]];
    const mid1 = midPoint2(firstLine[0], firstLine[1]);
    const mid2 = midPoint2(secondLine[0], secondLine[1]);
    const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({
      firstLine,
      secondLine,
      mid1,
      mid2
    });
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      cachedStats[targetId] = {
        angle: angleBetweenLines(seg1, seg2),
        arc1Angle,
        arc2Angle,
        points: {
          canvas: {
            arc1Start,
            arc1End,
            arc2End,
            arc2Start
          },
          world: {
            arc1Start: viewport.canvasToWorld(arc1Start),
            arc1End: viewport.canvasToWorld(arc1End),
            arc2End: viewport.canvasToWorld(arc2End),
            arc2Start: viewport.canvasToWorld(arc2Start)
          }
        }
      };
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
    }
    return cachedStats;
  }
};
_CobbAngleTool.toolName = "CobbAngle";
var CobbAngleTool = _CobbAngleTool;
function defaultGetTextLines14(data, targetId) {
  const cachedVolumeStats = data.cachedStats[targetId];
  const { angle } = cachedVolumeStats;
  if (angle === void 0) {
    return;
  }
  const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];
  return textLines;
}
var CobbAngleTool_default = CobbAngleTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js
var { transformWorldToIndex: transformWorldToIndex16 } = utilities_exports;
var _UltrasoundDirectionalTool = class _UltrasoundDirectionalTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      shadow: true,
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines15,
      displayBothAxesDistances: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      if (this.startedDrawing) {
        return;
      }
      this.startedDrawing = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      if (!(viewport instanceof StackViewport_default)) {
        throw new Error("UltrasoundDirectionalTool can only be used on a StackViewport");
      }
      hideElementCursor(element);
      this.isDrawing = true;
      const annotation = this.createAnnotation(evt, [
        [...worldPos],
        [...worldPos]
      ]);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = line_exports.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      if (this.startedDrawing && data.handles.points.length === 1) {
        this.editData.handleIndex = 1;
        return;
      }
      this.startedDrawing = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
      const { data } = annotation;
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        annotation.invalidated = true;
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        data.handles.points[handleIndex] = [...worldPos];
        annotation.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine } = enabledElement;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        this.startedDrawing = false;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const color = this.getStyle("color", styleSpecifier, annotation);
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].xValues == null) {
          data.cachedStats[targetId] = {
            xValues: [0, 0],
            yValues: [0, 0],
            isHorizontal: false,
            units: [""],
            isUnitless: false
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let handleGroupUID = "0";
        drawHandle_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {
          color
        }, 0);
        renderStatus = true;
        if (canvasCoordinates.length !== 2) {
          return renderStatus;
        }
        handleGroupUID = "1";
        drawHandle_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {
          color
        }, 1);
        const isUnitless = data.cachedStats[targetId].isUnitless;
        if (!isUnitless) {
          const canvasPoint1 = canvasCoordinates[0];
          const canvasPoint2 = canvasCoordinates[1];
          const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];
          const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];
          const isHorizontal = data.cachedStats[targetId].isHorizontal;
          let projectedPointCanvas = [0, 0];
          if (isHorizontal) {
            projectedPointCanvas = [
              canvasPoint1[0] + canvasDeltaX,
              canvasPoint1[1]
            ];
          } else {
            projectedPointCanvas = [
              canvasPoint1[0],
              canvasPoint1[1] + canvasDeltaY
            ];
          }
          let dataId = `${annotationUID}-line-1`;
          let lineUID = "1";
          drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {
            color,
            width: 1,
            shadow: this.configuration.shadow
          }, dataId);
          dataId = `${annotationUID}-line-2`;
          lineUID = "2";
          drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {
            color,
            width: 1,
            lineDash: [1, 1],
            shadow: this.configuration.shadow
          }, dataId);
        } else {
          const dataId = `${annotationUID}-line-1`;
          const lineUID = "1";
          drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
            color,
            width: 1,
            shadow: this.configuration.shadow
          }, dataId);
        }
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        const textLines = this.configuration.getTextLines(data, targetId, this.configuration);
        if (!data.handles.textBox.hasMoved) {
          const canvasTextBoxCoords = canvasCoordinates[1];
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {
    return;
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    this.editData = {
      handleIndex,
      annotation,
      viewportIdsToRender
    };
    this._activateModify(element);
    hideElementCursor(element);
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  _calculateCachedStats(annotation, renderingEngine, enabledElement) {
    const data = annotation.data;
    const { element } = enabledElement.viewport;
    if (data.handles.points.length !== 2) {
      return;
    }
    const { cachedStats } = data;
    const targetIds = Object.keys(cachedStats);
    for (let i = 0; i < targetIds.length; i++) {
      const targetId = targetIds[i];
      const image = this.getTargetImageData(targetId);
      if (!image) {
        continue;
      }
      const { imageData } = image;
      const worldPos1 = data.handles.points[0];
      const worldPos2 = data.handles.points[1];
      const imageIndex1 = transformWorldToIndex16(imageData, worldPos1);
      const imageIndex2 = transformWorldToIndex16(imageData, worldPos2);
      const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);
      const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);
      let xValues, yValues, units, isHorizontal;
      let isUnitless = false;
      if (units1[0] !== units2[0] || units1[1] !== units2[1] || units1[0] === "raw" && units2[0] === "raw") {
        const value = distanceToPoint2(worldPos1, worldPos2);
        xValues = [value, 0];
        yValues = [value, 0];
        units = ["px"];
        isUnitless = true;
      } else {
        const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);
        const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);
        const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];
        const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];
        isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);
        xValues = [values1[0], values2[0]];
        yValues = [values1[1], values2[1]];
        units = [units1[0], units1[1]];
      }
      cachedStats[targetId] = {
        xValues,
        yValues,
        isHorizontal,
        units,
        isUnitless
      };
    }
    const invalidated = annotation.invalidated;
    annotation.invalidated = false;
    if (invalidated) {
      triggerAnnotationModified(annotation, element, ChangeTypes_default.StatsUpdated);
    }
    return cachedStats;
  }
};
_UltrasoundDirectionalTool.toolName = "UltrasoundDirectionalTool";
var UltrasoundDirectionalTool = _UltrasoundDirectionalTool;
function defaultGetTextLines15(data, targetId, configuration3) {
  const cachedStats = data.cachedStats[targetId];
  const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;
  if (isUnitless) {
    return [`${utilities_exports.roundNumber(xValues[0])} px`];
  }
  if (configuration3.displayBothAxesDistances) {
    const dist1 = Math.abs(xValues[1] - xValues[0]);
    const dist2 = Math.abs(yValues[1] - yValues[0]);
    return [
      `${utilities_exports.roundNumber(dist1)} ${units[0]}`,
      `${utilities_exports.roundNumber(dist2)} ${units[1]}`
    ];
  }
  if (isHorizontal) {
    const dist = Math.abs(xValues[1] - xValues[0]);
    return [`${utilities_exports.roundNumber(dist)} ${units[0]}`];
  } else {
    const dist = Math.abs(yValues[1] - yValues[0]);
    return [`${utilities_exports.roundNumber(dist)} ${units[1]}`];
  }
}
var UltrasoundDirectionalTool_default = UltrasoundDirectionalTool;

// node_modules/@cornerstonejs/tools/dist/esm/utilities/math/fan/fanUtils.js
function normalizeAngle(angle) {
  return (angle % 360 + 360) % 360;
}
function angleFromCenter(center, point) {
  const dx = point[0] - center[0];
  const dy = point[1] - center[1];
  const angle = Math.atan2(dy, dx) * (180 / Math.PI);
  return normalizeAngle(angle);
}
function intervalFromPoints(center, pair) {
  const start = angleFromCenter(center, pair[0]);
  const end = angleFromCenter(center, pair[1]);
  return start < end ? [start, end] : [end, start];
}
function mergeIntervals(intervals) {
  if (!intervals.length) {
    return [];
  }
  intervals.sort((a, b) => a[0] - b[0]);
  const merged = [intervals[0].slice()];
  for (let i = 1; i < intervals.length; i++) {
    const last = merged[merged.length - 1];
    const current = intervals[i];
    if (current[0] <= last[1]) {
      last[1] = Math.max(last[1], current[1]);
    } else {
      merged.push(current.slice());
    }
  }
  return merged;
}
function subtractIntervals(blocked, target) {
  const [T0, T1] = target;
  if (T1 <= T0) {
    return [];
  }
  const overlaps = blocked.map(([a, b]) => [Math.max(a, T0), Math.min(b, T1)]).filter(([a, b]) => b > a);
  if (overlaps.length === 0) {
    return [[T0, T1]];
  }
  overlaps.sort((p, q) => p[0] - q[0]);
  const merged = [];
  let [curA, curB] = overlaps[0];
  for (let i = 1; i < overlaps.length; i++) {
    const [a, b] = overlaps[i];
    if (a <= curB) {
      curB = Math.max(curB, b);
    } else {
      merged.push([curA, curB]);
      [curA, curB] = [a, b];
    }
  }
  merged.push([curA, curB]);
  const gaps = [];
  let cursor = T0;
  for (const [a, b] of merged) {
    if (a > cursor) {
      gaps.push([cursor, a]);
    }
    cursor = Math.max(cursor, b);
  }
  if (cursor < T1) {
    gaps.push([cursor, T1]);
  }
  return gaps;
}
function clipInterval(inner, outerMerged) {
  const result = [];
  for (const out of outerMerged) {
    const start = Math.max(inner[0], out[0]);
    const end = Math.min(inner[1], out[1]);
    if (start < end) {
      result.push([start, end]);
    }
  }
  return result;
}
function calculateInnerFanPercentage(center, outerFanPairs, innerFanPairs) {
  const outerIntervals = outerFanPairs.map((pair) => intervalFromPoints(center, pair));
  const mergedOuter = mergeIntervals(outerIntervals);
  const outerTotal = mergedOuter.reduce((sum, [a, b]) => sum + (b - a), 0);
  if (outerTotal === 0) {
    return 0;
  }
  const clippedInnerIntervals = [];
  for (const pair of innerFanPairs) {
    const innerInterval = intervalFromPoints(center, pair);
    const clipped = clipInterval(innerInterval, mergedOuter);
    clippedInnerIntervals.push(...clipped);
  }
  const mergedInner = mergeIntervals(clippedInnerIntervals);
  const innerTotal = mergedInner.reduce((sum, [a, b]) => sum + (b - a), 0);
  const percentage = innerTotal / outerTotal * 100;
  return Math.min(100, Math.max(0, percentage));
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js
var { transformIndexToWorld: transformIndexToWorld2 } = utilities_exports;
var _UltrasoundPleuraBLineTool = class _UltrasoundPleuraBLineTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      preventHandleOutsideImage: false,
      getTextLines: defaultGetTextLines16,
      center: null,
      innerRadius: null,
      outerRadius: null,
      startAngle: null,
      endAngle: null,
      bLineColor: "rgb(60, 255, 60)",
      pleuraColor: "rgb(0, 4, 255)",
      drawDepthGuide: true,
      depth_ratio: 0.5,
      depthGuideColor: "rgb(0, 255, 255)",
      depthGuideThickness: 4,
      depthGuideDashLength: 20,
      depthGuideDashGap: 16,
      depthGuideOpacity: 0.2,
      fanOpacity: 0.1,
      showFanAnnotations: true,
      updatePercentageCallback: null,
      actions: {
        undo: {
          method: "undo",
          bindings: [{ key: "z" }]
        },
        redo: {
          method: "redo",
          bindings: [{ key: "y" }]
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.pleuraAnnotations = [];
    this.bLineAnnotations = [];
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      hideElementCursor(element);
      this.isDrawing = true;
      const { viewPlaneNormal, viewUp, position: cameraPosition } = viewport.getCamera();
      const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          ...viewport.getViewReference({ points: [worldPos] }),
          toolName: this.getToolName(),
          referencedImageId,
          viewUp,
          cameraPosition
        },
        data: {
          handles: {
            points: [[...worldPos], [...worldPos]],
            activeHandleIndex: null
          },
          annotationType: this.getActiveAnnotationType(),
          label: ""
        }
      };
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        handleIndex: 1,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const [point1, point2] = data.handles.points;
      const canvasPoint1 = viewport.worldToCanvas(point1);
      const canvasPoint2 = viewport.worldToCanvas(point2);
      const line = {
        start: {
          x: canvasPoint1[0],
          y: canvasPoint1[1]
        },
        end: {
          x: canvasPoint2[0],
          y: canvasPoint2[1]
        }
      };
      const distanceToPoint5 = distanceToPoint3([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      annotation.highlighted = true;
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        movingTextBox: false
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.doneEditMemo();
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      this.isDrawing = false;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { viewport } = getEnabledElement(element) || {};
      if (!viewport) {
        return;
      }
      const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      if (movingTextBox) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
      } else if (handleIndex === void 0) {
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const points = data.handles.points;
        const allPointsInsideShape = points.every((point) => {
          const newPoint = [
            point[0] + worldPosDelta[0],
            point[1] + worldPosDelta[1],
            point[2] + worldPosDelta[2]
          ];
          return this.isInsideFanShape(viewport, newPoint);
        });
        if (allPointsInsideShape) {
          points.forEach((point) => {
            point[0] += worldPosDelta[0];
            point[1] += worldPosDelta[1];
            point[2] += worldPosDelta[2];
          });
          annotation.invalidated = true;
        }
      } else {
        const { currentPoints } = eventDetail;
        const worldPos = currentPoints.world;
        if (this.isInsideFanShape(viewport, worldPos)) {
          data.handles.points[handleIndex] = [...worldPos];
          annotation.invalidated = true;
        }
      }
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (annotation.invalidated) {
        triggerAnnotationModified(annotation, element, ChangeTypes_default.HandlesUpdated);
      }
    };
    this.cancel = (element) => {
      if (this.isDrawing) {
        this.isDrawing = false;
        this._deactivateDraw(element);
        this._deactivateModify(element);
        resetElementCursor(element);
        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
        const { data } = annotation;
        annotation.highlighted = false;
        data.handles.activeHandleIndex = null;
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
        if (newAnnotation) {
          triggerAnnotationCompleted(annotation);
        }
        this.editData = null;
        return annotation.annotationUID;
      }
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      if (!this.getFanShapeGeometryParameters(viewport)) {
        return;
      }
      const { imageData } = viewport.getImageData() || {};
      if (!imageData) {
        return renderStatus;
      }
      if (this.configuration.drawDepthGuide) {
        this.drawDepthGuide(svgDrawingHelper, viewport);
      }
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      const fanCenter = viewport.worldToCanvas(transformIndexToWorld2(imageData, this.configuration.center));
      const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);
      const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;
      const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;
      const currentImageId = viewport.getCurrentImageId();
      const unMergedPleuraIntervals = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA && annotation.metadata.referencedImageId === currentImageId).map((annotation) => {
        const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));
        const interval = intervalFromPoints(fanCenter, canvasCoordinates);
        return interval;
      });
      const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);
      const pleuraIntervalsDisplayed = [];
      const bLineIntervalsDisplayed = [];
      const drawAnnotation = (annotation) => {
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          return;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
            color: this.getColorForLineType(annotation),
            fill: this.getColorForLineType(annotation),
            lineDash,
            lineWidth
          });
        }
        const dataId = `${annotationUID}-line`;
        const lineUID = "1";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color: this.getColorForLineType(annotation),
          width: lineWidth,
          lineDash,
          shadow
        }, dataId);
        if (this.configuration.showFanAnnotations) {
          const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);
          let fanNumber = 0;
          if (annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {
            const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);
            uncoveredIntervals.forEach((interval) => {
              const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);
              clippedIntervals.forEach((clippedInterval) => {
                fanNumber++;
                const fanIndex = fanNumber;
                const fanDataId = `${annotationUID}-fan-${fanIndex}`;
                const fanUID = `2-${fanIndex}`;
                drawFan_default(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {
                  color: "transparent",
                  fill: this.getColorForLineType(annotation),
                  fillOpacity: this.configuration.fanOpacity,
                  width: lineWidth,
                  lineDash,
                  shadow
                }, fanDataId, 10);
                bLineIntervalsDisplayed.push(clippedInterval);
              });
            });
          } else if (annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {
            const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);
            uncoveredIntervals.forEach((interval, index) => {
              fanNumber++;
              const fanIndex = fanNumber;
              const fanDataId = `${annotationUID}-fan-${fanIndex}`;
              const fanUID = `2-${fanIndex}`;
              drawFan_default(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {
                color: "transparent",
                fill: this.getColorForLineType(annotation),
                fillOpacity: this.configuration.fanOpacity,
                width: lineWidth,
                lineDash,
                shadow
              }, fanDataId, 5);
              pleuraIntervalsDisplayed.push(interval);
            });
          }
        }
      };
      const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA && annotation.metadata.referencedImageId === currentImageId);
      pleuraAnnotationsToDraw.forEach((annotation) => {
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        drawAnnotation(annotation);
      });
      const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE && annotation.metadata.referencedImageId === currentImageId);
      bLineAnnotationsToDraw.forEach((annotation) => {
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        drawAnnotation(annotation);
      });
      renderStatus = true;
      if (this.configuration.updatePercentageCallback && viewport) {
        this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));
      }
      return renderStatus;
    };
    this.activeAnnotationType = _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;
  }
  static filterAnnotations(element, filterFunction = () => true) {
    const annotations = getAnnotations(_UltrasoundPleuraBLineTool.toolName, element);
    if (!annotations?.length) {
      return [];
    }
    const filteredAnnotations = annotations.filter((annotation) => {
      const currentImageId = annotation.metadata.referencedImageId;
      return filterFunction(currentImageId);
    });
    return filteredAnnotations;
  }
  static countAnnotations(element, filterFunction = () => true) {
    const annotations = getAnnotations(_UltrasoundPleuraBLineTool.toolName, element);
    const { viewport } = getEnabledElement(element);
    const imageIds = viewport.getImageIds();
    const getImageIdIndex = (imageId) => {
      const index = imageIds.findIndex((id) => id === imageId);
      if (index === -1) {
        return 0;
      }
      return index;
    };
    if (!annotations?.length) {
      return;
    }
    const annotationMapping = /* @__PURE__ */ new Map();
    annotations.forEach((annotation) => {
      const currentImageId = annotation.metadata.referencedImageId;
      if (!filterFunction(currentImageId)) {
        return;
      }
      const { annotationType } = annotation.data;
      let counts;
      if (annotationMapping.has(currentImageId)) {
        counts = annotationMapping.get(currentImageId);
      } else {
        counts = {
          frame: getImageIdIndex(currentImageId),
          bLine: 0,
          pleura: 0
        };
      }
      if (annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {
        counts.pleura++;
      } else if (annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {
        counts.bLine++;
      }
      annotationMapping.set(currentImageId, counts);
    });
    return annotationMapping;
  }
  static deleteAnnotations(element, filterFunction = () => false) {
    const annotations = getAnnotations(_UltrasoundPleuraBLineTool.toolName, element);
    if (!annotations?.length) {
      return;
    }
    annotations.forEach((annotation) => {
      if (!filterFunction(annotation.metadata.referencedImageId)) {
        return;
      }
      removeAnnotation(annotation.annotationUID);
    });
  }
  setActiveAnnotationType(type) {
    this.activeAnnotationType = type;
  }
  getActiveAnnotationType() {
    return this.activeAnnotationType;
  }
  deleteLastAnnotationType(element, type) {
    let annotationList;
    const annotations = getAnnotations(_UltrasoundPleuraBLineTool.toolName, element);
    if (type === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {
      annotationList = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);
    } else if (type === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {
      annotationList = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);
    }
    if (annotationList?.length > 0) {
      const annotation = annotationList.pop();
      removeAnnotation(annotation.annotationUID);
    }
  }
  handleSelectedCallback(evt, annotation, handle) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { data } = annotation;
    annotation.highlighted = true;
    let movingTextBox = false;
    let handleIndex;
    if (handle.worldPosition) {
      movingTextBox = true;
    } else {
      handleIndex = data.handles.points.findIndex((p) => p === handle);
    }
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex,
      movingTextBox
    };
    this._activateModify(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  isInsideFanShape(viewport, point) {
    if (!this.getFanShapeGeometryParameters(viewport)) {
      return false;
    }
    const { imageData } = viewport.getImageData() || {};
    if (imageData) {
      const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));
      const canvasCoordinates = viewport.worldToCanvas(point);
      const angle = angleFromCenter(fanCenter, canvasCoordinates);
      return angle >= this.configuration.startAngle && angle <= this.configuration.endAngle;
    }
  }
  updateFanGeometryConfiguration(fanGeometry) {
    if (!fanGeometry) {
      return;
    }
    if (this.isFanShapeGeometryParametersValid(fanGeometry)) {
      this.configuration.center = [
        fanGeometry.center[0],
        fanGeometry.center[1],
        0
      ];
    }
    this.configuration.innerRadius = fanGeometry.innerRadius;
    this.configuration.outerRadius = fanGeometry.outerRadius;
    this.configuration.startAngle = fanGeometry.startAngle;
    this.configuration.endAngle = fanGeometry.endAngle;
  }
  deriveFanGeometryFromViewport(viewport) {
    const imageId = viewport.getCurrentImageId();
    const { fanGeometry } = calculateFanGeometry(imageId) || {};
    if (fanGeometry) {
      this.updateFanGeometryConfiguration(fanGeometry);
    }
  }
  isFanShapeGeometryParametersValid(fanGeometry) {
    if (!fanGeometry) {
      fanGeometry = this.configuration;
    }
    return fanGeometry?.center && fanGeometry?.innerRadius > 0 && fanGeometry?.outerRadius && fanGeometry?.startAngle > 0 && fanGeometry?.startAngle < 360 && fanGeometry?.endAngle > 0 && fanGeometry?.endAngle < 360;
  }
  getFanShapeGeometryParameters(viewport) {
    if (this.isFanShapeGeometryParametersValid()) {
      return true;
    }
    if (!this.isFanShapeGeometryParametersValid()) {
      const imageId = viewport.getCurrentImageId();
      const fanGeometry = metaData_exports.get("ultrasoundFanShapeGeometry", imageId);
      this.updateFanGeometryConfiguration(fanGeometry);
    }
    if (!this.isFanShapeGeometryParametersValid()) {
      this.deriveFanGeometryFromViewport(viewport);
    }
    return this.isFanShapeGeometryParametersValid();
  }
  calculateBLinePleuraPercentage(viewport) {
    if (!this.getFanShapeGeometryParameters(viewport)) {
      return;
    }
    const { imageData } = viewport.getImageData() || {};
    if (!imageData) {
      return;
    }
    const { element } = viewport;
    const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));
    const currentImageId = viewport.getCurrentImageId();
    const annotations = getAnnotations(this.getToolName(), element) || [];
    const pleuraIntervals = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA && annotation.metadata.referencedImageId === currentImageId).map((annotation) => {
      const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));
      return canvasCoordinates;
    });
    const bLineIntervals = annotations.filter((annotation) => annotation.data.annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE && annotation.metadata.referencedImageId === currentImageId).map((annotation) => {
      const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));
      return canvasCoordinates;
    });
    return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);
  }
  getColorForLineType(annotation) {
    const { annotationType } = annotation.data;
    const { bLineColor, pleuraColor } = this.configuration;
    if (annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {
      return bLineColor;
    }
    if (annotationType === _UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {
      return pleuraColor;
    }
    return bLineColor;
  }
  getIndexToCanvasRatio(viewport) {
    const { imageData } = viewport.getImageData() || {};
    const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));
    const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));
    const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];
    const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);
    return vectorSize;
  }
  drawDepthGuide(svgDrawingHelper, viewport) {
    if (!this.getFanShapeGeometryParameters(viewport)) {
      return;
    }
    const { imageData } = viewport.getImageData() || {};
    if (!imageData) {
      return;
    }
    const radToDegree = (rad) => rad * 180 / Math.PI;
    const degreeToRad = (degree) => degree * Math.PI / 180;
    const indexToCanvas = (point) => {
      return viewport.worldToCanvas(transformIndexToWorld2(imageData, point));
    };
    const depth_radius = this.configuration.innerRadius + this.configuration.depth_ratio * (this.configuration.outerRadius - this.configuration.innerRadius);
    const theta_start = this.configuration.startAngle;
    const theta_end = this.configuration.endAngle;
    const theta_range = theta_end - theta_start;
    const arc_length = degreeToRad(theta_range) * depth_radius;
    let num_dashes = Math.round(arc_length / (this.configuration.depthGuideDashLength + this.configuration.depthGuideDashGap));
    if (num_dashes <= 0) {
      num_dashes = Math.max(15, Math.round(theta_range / 5));
    }
    const theta_step = theta_range / num_dashes;
    for (let i = 0; i < num_dashes; i++) {
      const theta1 = degreeToRad(theta_start + i * theta_step);
      const theta2 = degreeToRad(theta_start + i * theta_step + radToDegree(this.configuration.depthGuideDashLength) / depth_radius);
      const start_point = [
        this.configuration.center[0] + depth_radius * Math.cos(theta1),
        this.configuration.center[1] + depth_radius * Math.sin(theta1),
        0
      ];
      const end_point = [
        this.configuration.center[0] + depth_radius * Math.cos(theta2),
        this.configuration.center[1] + depth_radius * Math.sin(theta2),
        0
      ];
      drawLine(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {
        color: this.configuration.depthGuideColor,
        lineWidth: this.configuration.depthGuideThickness,
        strokeOpacity: this.configuration.depthGuideOpacity
      });
    }
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_UltrasoundPleuraBLineTool.toolName = "UltrasoundPleuraBLineTool";
_UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType = {
  BLINE: "bLine",
  PLEURA: "pleura"
};
_UltrasoundPleuraBLineTool.hydrate = (viewportId, points, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport } = _UltrasoundPleuraBLineTool.hydrateBase(_UltrasoundPleuraBLineTool, enabledElement, points, options);
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points
      }
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
};
var UltrasoundPleuraBLineTool = _UltrasoundPleuraBLineTool;
function defaultGetTextLines16(data, targetId) {
  return [""];
}
var UltrasoundPleuraBLineTool_default = UltrasoundPleuraBLineTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js
var _KeyImageTool = class _KeyImageTool extends AnnotationTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      getTextCallback: getTextCallback3,
      changeTextCallback: changeTextCallback3,
      canvasPosition: [10, 10],
      canvasSize: 10,
      handleRadius: "6",
      seriesLevel: false,
      isPoint: false
    }
  }) {
    super(toolProps, defaultToolProps);
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { element, currentPoints } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const worldPos = currentPoints.world;
      const annotation = this.constructor.createAnnotationForViewport(viewport, {
        data: {
          handles: { points: [[...worldPos]] },
          seriesLevel: this.configuration.seriesLevel,
          isPoint: this.configuration.isPoint
        }
      });
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      this.configuration.getTextCallback((label) => {
        if (!label) {
          removeAnnotation(annotation.annotationUID);
          triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
          this.isDrawing = false;
          return;
        }
        annotation.data.label = label;
        triggerAnnotationCompleted(annotation);
        triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      });
      this.createMemo(element, annotation, { newAnnotation: true });
      return annotation;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      if (!data?.isPoint) {
        return false;
      }
      const { canvasPosition, canvasSize } = this.configuration;
      if (!canvasPosition?.length) {
        return false;
      }
      if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <= canvasSize / 2 && Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <= canvasSize / 2) {
        return true;
      }
      return false;
    };
    this.toolSelectedCallback = (evt, annotation) => {
      annotation.highlighted = true;
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { viewportId, renderingEngine } = getEnabledElement(element);
      this.eventDispatchDetail = {
        viewportId,
        renderingEngineId: renderingEngine.id
      };
      this._deactivateModify(element);
      resetElementCursor(element);
      if (newAnnotation) {
        this.createMemo(element, annotation, { newAnnotation });
      }
      this.editData = null;
      this.isDrawing = false;
      this.doneEditMemo();
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
    };
    this.doubleClickCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      let annotations = getAnnotations(this.getToolName(), element);
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return;
      }
      const clickedAnnotation = annotations.find((annotation2) => this.isPointNearTool(element, annotation2, eventDetail.currentPoints.canvas, 6));
      if (!clickedAnnotation) {
        return;
      }
      const annotation = clickedAnnotation;
      this.createMemo(element, annotation);
      this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));
      this.isDrawing = false;
      this.doneEditMemo();
      evt.stopImmediatePropagation();
      evt.preventDefault();
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      this.createMemo(element, annotation, { newAnnotation });
      data.handles.points[0] = [...worldPos];
      annotation.invalidated = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        styleSpecifier.annotationUID = annotationUID;
        const { color, lineWidth } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const { canvasPosition, canvasSize } = this.configuration;
        const arrowUID = "1";
        if (data?.isPoint) {
          const point = data.handles.points[0];
          const canvasCoordinates = viewport.worldToCanvas(point);
          drawHandles_default(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {
            color,
            lineWidth,
            handleRadius: this.configuration.handleRadius
          });
        } else if (canvasPosition?.length) {
          drawArrow(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {
            color,
            width: 1
          });
        }
        renderStatus = true;
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
      }
      return renderStatus;
    };
  }
  handleSelectedCallback(evt, annotation) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    annotation.highlighted = true;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender
    };
    this._activateModify(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    evt.preventDefault();
  }
  static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {
    annotation.data.isPoint = isPoint;
    triggerAnnotationModified(annotation, element);
  }
  _doneChangingTextCallback(element, annotation, updatedText) {
    annotation.data.label = updatedText;
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    triggerAnnotationModified(annotation, element);
  }
  cancel(element) {
    if (this.isDrawing) {
      this.isDrawing = false;
      this._deactivateModify(element);
      resetElementCursor(element);
      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
      const { data } = annotation;
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      }
      this.editData = null;
      return annotation.annotationUID;
    }
  }
  _isInsideVolume(index1, index2, dimensions) {
    return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
  }
};
_KeyImageTool.toolName = "KeyImage";
_KeyImageTool.dataSeries = {
  data: {
    seriesLevel: true
  }
};
_KeyImageTool.dataPoint = {
  data: {
    isPoint: true
  }
};
var KeyImageTool = _KeyImageTool;
function getTextCallback3(doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
function changeTextCallback3(data, eventData, doneChangingTextCallback) {
  return doneChangingTextCallback(prompt("Enter your annotation:"));
}
var KeyImageTool_default = KeyImageTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js
var AnnotationEraserTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"]
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      return this._deleteNearbyAnnotations(evt, "mouse");
    };
    this.preTouchStartCallback = (evt) => {
      return this._deleteNearbyAnnotations(evt, "touch");
    };
  }
  _deleteNearbyAnnotations(evt, interactionType) {
    const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;
    const toolGroup = getToolGroupForViewport_default(viewportId, renderingEngineId);
    if (!toolGroup) {
      return false;
    }
    const tools = toolGroup._toolInstances;
    const annotationsToRemove = [];
    for (const toolName in tools) {
      const toolInstance = tools[toolName];
      if (typeof toolInstance.isPointNearTool !== "function" || typeof toolInstance.filterInteractableAnnotationsForElement !== "function") {
        continue;
      }
      const annotations = getAnnotations(toolName, element);
      const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);
      if (!interactableAnnotations) {
        continue;
      }
      for (const annotation of interactableAnnotations) {
        if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {
          annotationsToRemove.push(annotation.annotationUID);
        }
      }
    }
    for (const annotationUID of annotationsToRemove) {
      setAnnotationSelected(annotationUID);
      const annotation = getAnnotation(annotationUID);
      AnnotationTool_default.createAnnotationMemo(element, annotation, {
        deleting: true
      });
      removeAnnotation(annotationUID);
    }
    evt.preventDefault();
    return true;
  }
};
AnnotationEraserTool.toolName = "Eraser";
var AnnotationEraserTool_default = AnnotationEraserTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/base/GrowCutBaseTool.js
var { transformWorldToIndex: transformWorldToIndex17, transformIndexToWorld: transformIndexToWorld3 } = utilities_exports;
var _GrowCutBaseTool = class _GrowCutBaseTool extends BaseTool_default {
  constructor(toolProps, defaultToolProps) {
    const baseToolProps = utilities_exports.deepMerge({
      configuration: {
        positiveStdDevMultiplier: DEFAULT_POSITIVE_STD_DEV_MULTIPLIER,
        shrinkExpandIncrement: 0.1,
        islandRemoval: {
          enabled: false
        }
      }
    }, defaultToolProps);
    super(toolProps, baseToolProps);
  }
  async preMouseDownCallback(evt) {
    const eventData = evt.detail;
    const { element, currentPoints } = eventData;
    const { world: worldPoint } = currentPoints;
    const enabledElement = getEnabledElement(element);
    const { viewport, renderingEngine } = enabledElement;
    const { viewUp } = viewport.getCamera();
    const { segmentationId, segmentIndex, labelmapVolumeId, referencedVolumeId } = await this.getLabelmapSegmentationData(viewport);
    if (!this._isOrthogonalView(viewport, referencedVolumeId)) {
      throw new Error("Oblique view is not supported yet");
    }
    this.growCutData = {
      metadata: {
        ...viewport.getViewReference({ points: [worldPoint] }),
        viewUp
      },
      segmentation: {
        segmentationId,
        segmentIndex,
        labelmapVolumeId,
        referencedVolumeId
      },
      viewportId: viewport.id,
      renderingEngineId: renderingEngine.id
    };
    evt.preventDefault();
    return true;
  }
  shrink() {
    this._runLastCommand({
      shrinkExpandAmount: -this.configuration.shrinkExpandIncrement
    });
  }
  expand() {
    this._runLastCommand({
      shrinkExpandAmount: this.configuration.shrinkExpandIncrement
    });
  }
  refresh() {
    this._runLastCommand();
  }
  async getGrowCutLabelmap(_growCutData) {
    throw new Error("Not implemented");
  }
  async runGrowCut() {
    const { growCutData, configuration: config2 } = this;
    const { segmentation: { segmentationId, segmentIndex, labelmapVolumeId } } = growCutData;
    const labelmap = cache_default.getVolume(labelmapVolumeId);
    let shrinkExpandAccumulator = 0;
    const growCutCommand = async ({ shrinkExpandAmount = 0 } = {}) => {
      if (shrinkExpandAmount !== 0) {
        this.seeds = null;
      }
      shrinkExpandAccumulator += shrinkExpandAmount;
      const newPositiveStdDevMultiplier = Math.max(0.1, config2.positiveStdDevMultiplier + shrinkExpandAccumulator);
      const negativeSeedMargin = shrinkExpandAmount < 0 ? Math.max(1, DEFAULT_NEGATIVE_SEED_MARGIN - Math.abs(shrinkExpandAccumulator) * 3) : DEFAULT_NEGATIVE_SEED_MARGIN + shrinkExpandAccumulator * 3;
      const updatedGrowCutData = {
        ...growCutData,
        options: {
          ...growCutData.options || {},
          positiveSeedValue: segmentIndex,
          negativeSeedValue: 255,
          positiveStdDevMultiplier: newPositiveStdDevMultiplier,
          negativeSeedMargin
        }
      };
      const growcutLabelmap = await this.getGrowCutLabelmap(updatedGrowCutData);
      const { isPartialVolume } = config2;
      const fn = isPartialVolume ? this.applyPartialGrowCutLabelmap : this.applyGrowCutLabelmap;
      fn(segmentationId, segmentIndex, labelmap, growcutLabelmap);
      this._removeIslands(updatedGrowCutData);
    };
    await growCutCommand();
    _GrowCutBaseTool.lastGrowCutCommand = growCutCommand;
    this.growCutData = null;
  }
  applyPartialGrowCutLabelmap(segmentationId, segmentIndex, targetLabelmap, sourceLabelmap) {
    const srcLabelmapData = sourceLabelmap.voxelManager.getCompleteScalarDataArray();
    const tgtVoxelManager = targetLabelmap.voxelManager;
    const [srcColumns, srcRows, srcNumSlices] = sourceLabelmap.dimensions;
    const [tgtColumns, tgtRows] = targetLabelmap.dimensions;
    const srcPixelsPerSlice = srcColumns * srcRows;
    const tgtPixelsPerSlice = tgtColumns * tgtRows;
    for (let srcSlice = 0; srcSlice < srcNumSlices; srcSlice++) {
      for (let srcRow = 0; srcRow < srcRows; srcRow++) {
        const srcRowIJK = [0, srcRow, srcSlice];
        const rowVoxelWorld = transformIndexToWorld3(sourceLabelmap.imageData, srcRowIJK);
        const tgtRowIJK = transformWorldToIndex17(targetLabelmap.imageData, rowVoxelWorld);
        const [tgtColumn, tgtRow, tgtSlice] = tgtRowIJK;
        const srcOffset = srcRow * srcColumns + srcSlice * srcPixelsPerSlice;
        const tgtOffset = tgtColumn + tgtRow * tgtColumns + tgtSlice * tgtPixelsPerSlice;
        for (let column = 0; column < srcColumns; column++) {
          const labelmapValue = srcLabelmapData[srcOffset + column] === segmentIndex ? segmentIndex : 0;
          tgtVoxelManager.setAtIndex(tgtOffset + column, labelmapValue);
        }
      }
    }
    triggerSegmentationDataModified(segmentationId);
  }
  applyGrowCutLabelmap(segmentationId, segmentIndex, targetLabelmap, sourceLabelmap) {
    const tgtVoxelManager = targetLabelmap.voxelManager;
    const srcVoxelManager = sourceLabelmap.voxelManager;
    srcVoxelManager.forEach(({ value, index }) => {
      if (value === segmentIndex) {
        tgtVoxelManager.setAtIndex(index, value);
      }
    });
    triggerSegmentationDataModified(segmentationId);
  }
  _runLastCommand({ shrinkExpandAmount = 0 } = {}) {
    const cmd = _GrowCutBaseTool.lastGrowCutCommand;
    if (cmd) {
      cmd({ shrinkExpandAmount });
    }
  }
  async getLabelmapSegmentationData(viewport) {
    const activeSeg = activeSegmentation_exports.getActiveSegmentation(viewport.id);
    if (!activeSeg) {
      throw new Error("No active segmentation found");
    }
    const { segmentationId } = activeSeg;
    const segmentIndex = segmentIndex_exports.getActiveSegmentIndex(segmentationId);
    const { representationData } = segmentationState_exports.getSegmentation(segmentationId);
    const labelmapData = representationData[SegmentationRepresentations_default.Labelmap];
    let { volumeId: labelmapVolumeId, referencedVolumeId } = labelmapData;
    if (!labelmapVolumeId) {
      const referencedImageIds = viewport.getImageIds();
      if (!utilities_exports.isValidVolume(referencedImageIds)) {
        const currentImageId = viewport.getCurrentImageId();
        const currentImage = cache_default.getImage(currentImageId);
        const fakeImage = imageLoader_exports.createAndCacheDerivedImage(currentImageId);
        const fakeVolume = this._createFakeVolume([
          currentImage.imageId,
          fakeImage.imageId
        ]);
        referencedVolumeId = fakeVolume.volumeId;
        const currentLabelmapImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
        const fakeDerivedImage = imageLoader_exports.createAndCacheDerivedImage(currentLabelmapImageId);
        const fakeLabelmapVolume = this._createFakeVolume([
          currentLabelmapImageId,
          fakeDerivedImage.imageId
        ]);
        labelmapVolumeId = fakeLabelmapVolume.volumeId;
      } else {
        const segVolume = getOrCreateSegmentationVolume_default(segmentationId);
        labelmapVolumeId = segVolume.volumeId;
      }
    }
    if (!referencedVolumeId) {
      const { imageIds: segImageIds } = labelmapData;
      const referencedImageIds = segImageIds.map((imageId) => cache_default.getImage(imageId).referencedImageId);
      const volumeId = cache_default.generateVolumeId(referencedImageIds);
      const imageVolume = cache_default.getVolume(volumeId);
      referencedVolumeId = imageVolume ? imageVolume.volumeId : (await volumeLoader_exports.createAndCacheVolumeFromImagesSync(volumeId, referencedImageIds)).volumeId;
    }
    return {
      segmentationId,
      segmentIndex,
      labelmapVolumeId,
      referencedVolumeId
    };
  }
  _createFakeVolume(imageIds) {
    const volumeId = cache_default.generateVolumeId(imageIds);
    const cachedVolume = cache_default.getVolume(volumeId);
    if (cachedVolume) {
      return cachedVolume;
    }
    const volumeProps = utilities_exports.generateVolumePropsFromImageIds(imageIds, volumeId);
    const spacing = volumeProps.spacing;
    if (spacing[2] === 0) {
      spacing[2] = 1;
    }
    const derivedVolume = new ImageVolume_default({
      volumeId,
      dataType: volumeProps.dataType,
      metadata: structuredClone(volumeProps.metadata),
      dimensions: volumeProps.dimensions,
      spacing: volumeProps.spacing,
      origin: volumeProps.origin,
      direction: volumeProps.direction,
      referencedVolumeId: volumeProps.referencedVolumeId,
      imageIds: volumeProps.imageIds,
      referencedImageIds: volumeProps.referencedImageIds
    });
    cache_default.putVolumeSync(volumeId, derivedVolume);
    return derivedVolume;
  }
  _isOrthogonalView(viewport, referencedVolumeId) {
    const volume = cache_default.getVolume(referencedVolumeId);
    const volumeImageData = volume.imageData;
    const camera = viewport.getCamera();
    const { ijkVecColDir, ijkVecSliceDir } = utilities_exports.getVolumeDirectionVectors(volumeImageData, camera);
    return [ijkVecColDir, ijkVecSliceDir].every((vec) => utilities_exports.isEqual(Math.abs(vec[0]), 1) || utilities_exports.isEqual(Math.abs(vec[1]), 1) || utilities_exports.isEqual(Math.abs(vec[2]), 1));
  }
  getRemoveIslandData(_growCutData) {
    return;
  }
  _removeIslands(growCutData) {
    const { islandRemoval: config2 } = this.configuration;
    if (!config2.enabled) {
      return;
    }
    const { segmentation: { segmentIndex, labelmapVolumeId }, renderingEngineId, viewportId } = growCutData;
    const labelmap = cache_default.getVolume(labelmapVolumeId);
    const removeIslandData = this.getRemoveIslandData(growCutData);
    if (!removeIslandData) {
      return;
    }
    const [width, height] = labelmap.dimensions;
    const numPixelsPerSlice = width * height;
    const { worldIslandPoints = [], islandPointIndexes = [] } = removeIslandData;
    let ijkIslandPoints = [...removeIslandData?.ijkIslandPoints ?? []];
    const renderingEngine = getRenderingEngine(renderingEngineId);
    const viewport = renderingEngine.getViewport(viewportId);
    const { voxelManager } = labelmap;
    const islandRemoval = new IslandRemoval();
    ijkIslandPoints = ijkIslandPoints.concat(worldIslandPoints.map((worldPoint) => transformWorldToIndex17(labelmap.imageData, worldPoint)));
    ijkIslandPoints = ijkIslandPoints.concat(islandPointIndexes.map((pointIndex) => {
      const x = pointIndex % width;
      const y = Math.floor(pointIndex / width) % height;
      const z = Math.floor(pointIndex / numPixelsPerSlice);
      return [x, y, z];
    }));
    islandRemoval.initialize(viewport, voxelManager, {
      points: ijkIslandPoints,
      previewSegmentIndex: segmentIndex,
      segmentIndex
    });
    islandRemoval.floodFillSegmentIsland();
    islandRemoval.removeExternalIslands();
    islandRemoval.removeInternalIslands();
  }
  getSegmentStyle({ segmentationId, viewportId, segmentIndex }) {
    return getSVGStyleForSegment({
      segmentationId,
      segmentIndex,
      viewportId
    });
  }
};
_GrowCutBaseTool.lastGrowCutCommand = null;
var GrowCutBaseTool = _GrowCutBaseTool;
GrowCutBaseTool.toolName = "GrowCutBaseTool";
var GrowCutBaseTool_default = GrowCutBaseTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js
var _RegionSegmentTool = class _RegionSegmentTool extends GrowCutBaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      isPartialVolume: true,
      positiveSeedVariance: 0.5,
      negativeSeedVariance: 0.9
    }
  }) {
    super(toolProps, defaultToolProps);
    this._dragCallback = (evt) => {
      const eventData = evt.detail;
      const { element, currentPoints } = eventData;
      const { world: currentWorldPoint } = currentPoints;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.growCutData.circleBorderPoint = currentWorldPoint;
      triggerAnnotationRenderForViewportIds_default([viewport.id]);
    };
    this._endCallback = async (evt) => {
      const eventData = evt.detail;
      const { element } = eventData;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.runGrowCut();
      this._deactivateDraw(element);
      this.growCutData = null;
      resetElementCursor(element);
      triggerAnnotationRenderForViewportIds_default([viewport.id]);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
    };
  }
  async preMouseDownCallback(evt) {
    const eventData = evt.detail;
    const { element, currentPoints } = eventData;
    const { world: worldPoint } = currentPoints;
    const enabledElement = getEnabledElement(element);
    const { viewport, renderingEngine } = enabledElement;
    await super.preMouseDownCallback(evt);
    Object.assign(this.growCutData, {
      circleCenterPoint: worldPoint,
      circleBorderPoint: worldPoint
    });
    this._activateDraw(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default([viewport.id]);
    return true;
  }
  async getGrowCutLabelmap(growCutData) {
    const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options } = growCutData;
    const renderingEngine = getRenderingEngine(renderingEngineId);
    const viewport = renderingEngine.getViewport(viewportId);
    const worldCircleRadius = vec3_exports.len(vec3_exports.sub(vec3_exports.create(), circleCenterPoint, circleBorderPoint));
    const sphereInfo = {
      center: circleCenterPoint,
      radius: worldCircleRadius
    };
    return growCut_exports.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);
  }
  _activateDraw(element) {
    element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
    element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
    element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    if (!this.growCutData) {
      return;
    }
    const { viewport } = enabledElement;
    const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint } = this.growCutData;
    const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);
    const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);
    const vecCenterToBorder = vec2_exports.sub(vec2_exports.create(), canvasBorderPoint, canvasCenterPoint);
    const circleRadius = vec2_exports.len(vecCenterToBorder);
    if (utilities_exports.isEqual(circleRadius, 0)) {
      return;
    }
    const annotationUID = "growcut";
    const circleUID = "0";
    const { color } = this.getSegmentStyle({
      segmentationId: segmentationData.segmentationId,
      segmentIndex: segmentationData.segmentIndex,
      viewportId: viewport.id
    });
    drawCircle_default(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {
      color
    });
  }
};
_RegionSegmentTool.toolName = "RegionSegment";
var RegionSegmentTool = _RegionSegmentTool;
var RegionSegmentTool_default = RegionSegmentTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js
var _RegionSegmentPlusTool = class _RegionSegmentPlusTool extends GrowCutBaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      isPartialVolume: false,
      positiveSeedVariance: 0.4,
      negativeSeedVariance: 0.9,
      subVolumePaddingPercentage: 0.1,
      islandRemoval: {
        enabled: false
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this.mouseTimer = null;
    this.allowedToProceed = false;
  }
  mouseMoveCallback(evt) {
    if (this.mode !== ToolModes_default.Active) {
      return;
    }
    const eventData = evt.detail;
    const { currentPoints, element } = eventData;
    const { world: worldPoint } = currentPoints;
    element.style.cursor = "default";
    if (this.mouseTimer !== null) {
      window.clearTimeout(this.mouseTimer);
      this.mouseTimer = null;
    }
    this.mouseTimer = window.setTimeout(() => {
      this.onMouseStable(evt, worldPoint, element);
    }, this.configuration.mouseStabilityDelay || 500);
  }
  async onMouseStable(evt, worldPoint, element) {
    await super.preMouseDownCallback(evt);
    const refVolume = cache_default.getVolume(this.growCutData.segmentation.referencedVolumeId);
    const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {
      positiveSeedIndices: /* @__PURE__ */ new Set(),
      negativeSeedIndices: /* @__PURE__ */ new Set()
    };
    const { positiveSeedIndices, negativeSeedIndices } = seeds;
    let cursor;
    if (positiveSeedIndices.size / negativeSeedIndices.size > 20 || negativeSeedIndices.size < 30) {
      cursor = "not-allowed";
      this.allowedToProceed = false;
    } else {
      cursor = "copy";
      this.allowedToProceed = true;
    }
    const enabledElement = getEnabledElement(element);
    if (element) {
      element.style.cursor = cursor;
      requestAnimationFrame(() => {
        if (element.style.cursor !== cursor) {
          element.style.cursor = cursor;
        }
      });
    }
    if (this.allowedToProceed) {
      this.seeds = seeds;
    }
    if (enabledElement && enabledElement.viewport) {
      enabledElement.viewport.render();
    }
  }
  async preMouseDownCallback(evt) {
    if (!this.allowedToProceed) {
      return false;
    }
    const eventData = evt.detail;
    const { currentPoints, element } = eventData;
    const enabledElement = getEnabledElement(element);
    if (enabledElement) {
      element.style.cursor = "wait";
      requestAnimationFrame(() => {
        if (element.style.cursor !== "wait") {
          element.style.cursor = "wait";
        }
      });
    }
    const { world: worldPoint } = currentPoints;
    await super.preMouseDownCallback(evt);
    this.growCutData = utilities_exports.deepMerge(this.growCutData, {
      worldPoint,
      islandRemoval: {
        worldIslandPoints: [worldPoint]
      }
    });
    this.growCutData.worldPoint = worldPoint;
    this.growCutData.islandRemoval = {
      worldIslandPoints: [worldPoint]
    };
    await this.runGrowCut();
    if (element) {
      element.style.cursor = "default";
    }
    return true;
  }
  getRemoveIslandData(growCutData) {
    const { worldPoint } = growCutData;
    return {
      worldIslandPoints: [worldPoint]
    };
  }
  async getGrowCutLabelmap(growCutData) {
    const { segmentation: { referencedVolumeId }, worldPoint, options } = growCutData;
    const { subVolumePaddingPercentage } = this.configuration;
    const mergedOptions = {
      ...options,
      subVolumePaddingPercentage,
      seeds: this.seeds
    };
    return growCut_exports.runOneClickGrowCut({
      referencedVolumeId,
      worldPosition: worldPoint,
      options: mergedOptions
    });
  }
};
_RegionSegmentPlusTool.toolName = "RegionSegmentPlus";
var RegionSegmentPlusTool = _RegionSegmentPlusTool;
var RegionSegmentPlusTool_default = RegionSegmentPlusTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js
var NEGATIVE_PIXEL_RANGE2 = [-Infinity, -995];
var POSITIVE_PIXEL_RANGE2 = [0, 1900];
var ISLAND_PIXEL_RANGE = [1e3, 1900];
var { transformWorldToIndex: transformWorldToIndex18, transformIndexToWorld: transformIndexToWorld4 } = utilities_exports;
var WholeBodySegmentTool = class extends GrowCutBaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      isPartialVolume: true,
      positivePixelRange: POSITIVE_PIXEL_RANGE2,
      negativePixelRange: NEGATIVE_PIXEL_RANGE2,
      islandRemoval: {
        enabled: true,
        islandPixelRange: ISLAND_PIXEL_RANGE
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this._dragCallback = (evt) => {
      const eventData = evt.detail;
      const { element, currentPoints } = eventData;
      const { world: currentWorldPoint } = currentPoints;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);
      this.growCutData.horizontalLines[1] = linePoints;
      triggerAnnotationRenderForViewportIds_default([viewport.id]);
    };
    this._endCallback = async (evt) => {
      const eventData = evt.detail;
      const { element } = eventData;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      await this.runGrowCut();
      this._deactivateDraw(element);
      this.growCutData = null;
      resetElementCursor(element);
      triggerAnnotationRenderForViewportIds_default([viewport.id]);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
    };
  }
  async preMouseDownCallback(evt) {
    const eventData = evt.detail;
    const { element, currentPoints } = eventData;
    const { world: worldPoint } = currentPoints;
    const enabledElement = getEnabledElement(element);
    const { viewport, renderingEngine } = enabledElement;
    const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);
    await super.preMouseDownCallback(evt);
    this.growCutData.horizontalLines = [linePoints, linePoints];
    this._activateDraw(element);
    hideElementCursor(element);
    triggerAnnotationRenderForViewportIds_default([viewport.id]);
    return true;
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    if (!this.growCutData) {
      return;
    }
    const { segmentation: segmentationData, horizontalLines } = this.growCutData;
    if (horizontalLines.length !== 2) {
      return;
    }
    const { viewport } = enabledElement;
    const { segmentationId, segmentIndex } = segmentationData;
    const [line1, line2] = horizontalLines;
    const [worldLine1P1, worldLine1P2] = line1;
    const [worldLine2P1, worldLine2P2] = line2;
    const canvasPoints = [
      worldLine1P1,
      worldLine1P2,
      worldLine2P2,
      worldLine2P1
    ].map((worldPoint) => viewport.worldToCanvas(worldPoint));
    const annotationUID = "growCutRect";
    const squareGroupUID = "0";
    const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({
      segmentationId,
      segmentIndex,
      viewportId: viewport.id
    });
    drawPolyline(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {
      color,
      fillColor,
      fillOpacity,
      lineWidth,
      lineDash,
      closePath: true
    });
  }
  async getGrowCutLabelmap(growCutData) {
    const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines } = growCutData;
    const renderingEngine = getRenderingEngine(renderingEngineId);
    const viewport = renderingEngine.getViewport(viewportId);
    const [line1, line2] = horizontalLines;
    const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];
    const referencedVolume = cache_default.getVolume(referencedVolumeId);
    const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);
    const ijkTopLeft = transformWorldToIndex18(referencedVolume.imageData, worldTopLeft);
    const ijkBottomRight = transformWorldToIndex18(referencedVolume.imageData, worldBottomRight);
    const boundingBoxInfo = {
      boundingBox: {
        ijkTopLeft,
        ijkBottomRight
      }
    };
    const config2 = this.configuration;
    const options = {
      positiveSeedValue: segmentIndex,
      negativeSeedValue: 255,
      negativePixelRange: config2.negativePixelRange,
      positivePixelRange: config2.positivePixelRange
    };
    return growCut_exports.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);
  }
  getRemoveIslandData() {
    const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId } } = this.growCutData;
    const referencedVolume = cache_default.getVolume(referencedVolumeId);
    const labelmapVolume = cache_default.getVolume(labelmapVolumeId);
    const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();
    const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();
    const { islandPixelRange } = this.configuration.islandRemoval;
    const islandPointIndexes = [];
    for (let i = 0, len = labelmapData.length; i < len; i++) {
      if (labelmapData[i] !== segmentIndex) {
        continue;
      }
      const pixelValue = referencedVolumeData[i];
      if (pixelValue >= islandPixelRange[0] && pixelValue <= islandPixelRange[1]) {
        islandPointIndexes.push(i);
      }
    }
    return {
      islandPointIndexes
    };
  }
  _activateDraw(element) {
    element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
    element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
    element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
  }
  _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {
    const volume = this._getViewportVolume(viewport);
    const { dimensions } = volume;
    const ijkPoint = transformWorldToIndex18(volume.imageData, worldEdgePoint);
    const axis = vecDirection.findIndex((n) => utilities_exports.isEqual(Math.abs(n), 1));
    if (axis === -1) {
      throw new Error("Non-orthogonal direction vector");
    }
    const ijkLineP1 = [...ijkPoint];
    const ijkLineP2 = [...ijkPoint];
    ijkLineP1[axis] = 0;
    ijkLineP2[axis] = dimensions[axis] - 1;
    return [ijkLineP1, ijkLineP2];
  }
  _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {
    const { viewPlaneNormal } = viewport.getCamera();
    return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);
  }
  _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {
    const cuboidPoints = [];
    const volume = this._getViewportVolume(viewport);
    worldSquarePoints.forEach((worldSquarePoint) => {
      const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);
      const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld4(volume.imageData, ijkPoint));
      cuboidPoints.push(...worldEdgePoints);
    });
    return cuboidPoints;
  }
  _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {
    const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);
    const topLeft = [...worldCuboidPoints[0]];
    const bottomRight = [...worldCuboidPoints[0]];
    worldCuboidPoints.forEach((worldPoint) => {
      vec3_exports.min(topLeft, topLeft, worldPoint);
      vec3_exports.max(bottomRight, bottomRight, worldPoint);
    });
    return { topLeft, bottomRight };
  }
  _getViewportVolume(viewport) {
    if (!(viewport instanceof BaseVolumeViewport_default)) {
      throw new Error("Viewport is not a BaseVolumeViewport");
    }
    const volumeId = viewport.getAllVolumeIds()[0];
    return cache_default.getVolume(volumeId);
  }
  _getHorizontalLineIJKPoints(enabledElement, worldPoint) {
    const { viewport } = enabledElement;
    const volume = this._getViewportVolume(viewport);
    const { dimensions } = volume;
    const ijkPoint = transformWorldToIndex18(volume.imageData, worldPoint);
    const { viewUp, viewPlaneNormal } = viewport.getCamera();
    const vecRow = vec3_exports.cross(vec3_exports.create(), viewUp, viewPlaneNormal);
    const axis = vecRow.findIndex((n) => utilities_exports.isEqual(Math.abs(n), 1));
    const ijkLineP1 = [...ijkPoint];
    const ijkLineP2 = [...ijkPoint];
    ijkLineP1[axis] = 0;
    ijkLineP2[axis] = dimensions[axis] - 1;
    return [ijkLineP1, ijkLineP2];
  }
  _getHorizontalLineWorldPoints(enabledElement, worldPoint) {
    const { viewport } = enabledElement;
    const volume = this._getViewportVolume(viewport);
    const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);
    const worldPoint1 = transformIndexToWorld4(volume.imageData, ijkPoint1);
    const worldPoint2 = transformIndexToWorld4(volume.imageData, ijkPoint2);
    return [worldPoint1, worldPoint2];
  }
};
WholeBodySegmentTool.toolName = "WholeBodySegment";
var WholeBodySegmentTool_default = WholeBodySegmentTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseRectangle.js
function eraseRectangle(enabledElement, operationData, inside = true) {
  const eraseOperationData = Object.assign({}, operationData, {
    segmentIndex: 0
  });
  fillInsideRectangle(enabledElement, eraseOperationData);
}
function eraseInsideRectangle(enabledElement, operationData) {
  eraseRectangle(enabledElement, operationData, true);
}

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js
var RectangleScissorsTool = class extends LabelmapBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      strategies: {
        FILL_INSIDE: fillInsideRectangle,
        ERASE_INSIDE: eraseInsideRectangle
      },
      defaultStrategy: "FILL_INSIDE",
      activeStrategy: "FILL_INSIDE"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      if (this.isDrawing === true) {
        return;
      }
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const activeLabelmapSegmentation = activeSegmentation_exports.getActiveSegmentation(viewport.id);
      if (!activeLabelmapSegmentation) {
        throw new Error("No active segmentation detected, create one before using scissors tool");
      }
      const { segmentationId } = activeLabelmapSegmentation;
      const segmentIndex = segmentIndex_exports.getActiveSegmentIndex(segmentationId);
      const segmentsLocked = segmentLocking_exports.getLockedSegmentIndices(segmentationId);
      const segmentColor = config_exports2.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);
      const { representationData } = getSegmentation(segmentationId);
      const labelmapData = representationData[SegmentationRepresentations_default.Labelmap];
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
          referencedImageId: "",
          toolName: this.getToolName(),
          segmentColor
        },
        data: {
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            activeHandleIndex: null
          }
        }
      };
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        segmentIndex,
        segmentationId,
        segmentsLocked,
        segmentColor,
        viewportIdsToRender,
        handleIndex: 3,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false,
        volumeId: null,
        referencedVolumeId: null,
        imageId: null
      };
      if (viewport instanceof BaseVolumeViewport_default) {
        const { volumeId } = labelmapData;
        const segmentation = cache_default.getVolume(volumeId);
        this.editData = {
          ...this.editData,
          volumeId,
          referencedVolumeId: segmentation.referencedVolumeId
        };
      } else {
        const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
        this.editData = {
          ...this.editData,
          imageId: segmentationImageId
        };
      }
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return true;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, handleIndex } = this.editData;
      const { data } = annotation;
      const { currentPoints } = eventDetail;
      const enabledElement = getEnabledElement(element);
      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;
      const worldPos = currentPoints.world;
      const { points } = data.handles;
      points[handleIndex] = [...worldPos];
      let bottomLeftCanvas;
      let bottomRightCanvas;
      let topLeftCanvas;
      let topRightCanvas;
      let bottomLeftWorld;
      let bottomRightWorld;
      let topLeftWorld;
      let topRightWorld;
      switch (handleIndex) {
        case 0:
        case 3:
          bottomLeftCanvas = worldToCanvas(points[0]);
          topRightCanvas = worldToCanvas(points[3]);
          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];
          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];
          bottomRightWorld = canvasToWorld(bottomRightCanvas);
          topLeftWorld = canvasToWorld(topLeftCanvas);
          points[1] = bottomRightWorld;
          points[2] = topLeftWorld;
          break;
        case 1:
        case 2:
          bottomRightCanvas = worldToCanvas(points[1]);
          topLeftCanvas = worldToCanvas(points[2]);
          bottomLeftCanvas = [
            topLeftCanvas[0],
            bottomRightCanvas[1]
          ];
          topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];
          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);
          topRightWorld = canvasToWorld(topRightCanvas);
          points[0] = bottomLeftWorld;
          points[3] = topRightWorld;
          break;
      }
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const operationData = {
        ...this.editData,
        points: data.handles.points,
        createMemo: this.createMemo.bind(this)
      };
      this.editData = null;
      this.isDrawing = false;
      this.applyActiveStrategy(enabledElement, operationData);
      this.doneEditMemo();
    };
    this._activateDraw = (element) => {
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      if (!this.editData) {
        return renderStatus;
      }
      const { viewport } = enabledElement;
      const { annotation } = this.editData;
      const toolMetadata = annotation.metadata;
      const annotationUID = annotation.annotationUID;
      const data = annotation.data;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
      if (!viewport.getRenderingEngine()) {
        console.warn("Rendering Engine has been destroyed");
        return renderStatus;
      }
      const rectangleUID = "0";
      drawRect(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
        color
      });
      renderStatus = true;
      return renderStatus;
    };
  }
};
RectangleScissorsTool.toolName = "RectangleScissor";
var RectangleScissorsTool_default = RectangleScissorsTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js
var CircleScissorsTool = class extends LabelmapBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      strategies: {
        FILL_INSIDE: fillInsideCircle,
        ERASE_INSIDE: eraseInsideCircle
      },
      defaultStrategy: "FILL_INSIDE",
      activeStrategy: "FILL_INSIDE"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      if (this.isDrawing === true) {
        return;
      }
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const canvasPos = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const activeLabelmapSegmentation = activeSegmentation_exports.getActiveSegmentation(viewport.id);
      if (!activeLabelmapSegmentation) {
        throw new Error("No active segmentation detected, create one before using scissors tool");
      }
      const { segmentationId } = activeLabelmapSegmentation;
      const segmentIndex = segmentIndex_exports.getActiveSegmentIndex(segmentationId);
      const segmentsLocked = segmentLocking_exports.getLockedSegmentIndices(segmentationId);
      const segmentColor = config_exports2.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);
      const { representationData } = getSegmentation(segmentationId);
      const labelmapData = representationData.Labelmap;
      if (!labelmapData) {
        throw new Error("No labelmap data found for the active segmentation, create one before using scissors tool");
      }
      const annotation = {
        invalidated: true,
        highlighted: true,
        metadata: {
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
          referencedImageId: "",
          toolName: this.getToolName(),
          segmentColor
        },
        data: {
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            activeHandleIndex: null
          },
          isDrawing: true,
          cachedStats: {}
        }
      };
      const viewportIdsToRender = [viewport.id];
      this.editData = {
        annotation,
        centerCanvas: canvasPos,
        segmentIndex,
        segmentationId,
        segmentsLocked,
        segmentColor,
        viewportIdsToRender,
        handleIndex: 3,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false,
        volumeId: null,
        referencedVolumeId: null,
        imageId: null
      };
      if (viewport instanceof BaseVolumeViewport_default) {
        const { volumeId } = labelmapData;
        const segmentation = cache_default.getVolume(volumeId);
        this.editData = {
          ...this.editData,
          volumeId,
          referencedVolumeId: segmentation.referencedVolumeId
        };
      } else {
        const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
        this.editData = {
          ...this.editData,
          imageId: segmentationImageId
        };
      }
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return true;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { annotation, viewportIdsToRender, centerCanvas } = this.editData;
      const { data } = annotation;
      const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
      const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
      const radius = Math.sqrt(dX * dX + dY * dY);
      const bottomCanvas = [
        centerCanvas[0],
        centerCanvas[1] + radius
      ];
      const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];
      const leftCanvas = [
        centerCanvas[0] - radius,
        centerCanvas[1]
      ];
      const rightCanvas = [
        centerCanvas[0] + radius,
        centerCanvas[1]
      ];
      data.handles.points = [
        canvasToWorld(bottomCanvas),
        canvasToWorld(topCanvas),
        canvasToWorld(leftCanvas),
        canvasToWorld(rightCanvas)
      ];
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      const { viewPlaneNormal, viewUp } = annotation.metadata;
      if (newAnnotation && !hasMoved) {
        return;
      }
      data.handles.activeHandleIndex = null;
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const operationData = {
        ...this.editData,
        points: data.handles.points,
        viewPlaneNormal,
        viewUp,
        createMemo: this.createMemo.bind(this)
      };
      this.editData = null;
      this.isDrawing = false;
      this.applyActiveStrategy(enabledElement, operationData);
      this.doneEditMemo();
    };
    this._activateDraw = (element) => {
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      if (!this.editData) {
        return renderStatus;
      }
      const { viewport } = enabledElement;
      const { viewportIdsToRender } = this.editData;
      if (!viewportIdsToRender.includes(viewport.id)) {
        return renderStatus;
      }
      const { annotation } = this.editData;
      const toolMetadata = annotation.metadata;
      const annotationUID = annotation.annotationUID;
      const data = annotation.data;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const bottom = canvasCoordinates[0];
      const top = canvasCoordinates[1];
      const center = [
        Math.floor((bottom[0] + top[0]) / 2),
        Math.floor((bottom[1] + top[1]) / 2)
      ];
      const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
      const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
      if (!viewport.getRenderingEngine()) {
        console.warn("Rendering Engine has been destroyed");
        return renderStatus;
      }
      const circleUID = "0";
      drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
        color
      });
      renderStatus = true;
      return renderStatus;
    };
  }
};
CircleScissorsTool.toolName = "CircleScissor";
var CircleScissorsTool_default = CircleScissorsTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js
var SphereScissorsTool = class extends LabelmapBaseTool {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      strategies: {
        FILL_INSIDE: fillInsideSphere,
        ERASE_INSIDE: eraseInsideSphere
      },
      defaultStrategy: "FILL_INSIDE",
      activeStrategy: "FILL_INSIDE"
    }
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      if (this.isDrawing === true) {
        return;
      }
      this.doneEditMemo();
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const canvasPos = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      const activeSegmentationRepresentation = activeSegmentation_exports.getActiveSegmentation(viewport.id);
      if (!activeSegmentationRepresentation) {
        throw new Error("No active segmentation detected, create one before using scissors tool");
      }
      const { segmentationId } = activeSegmentationRepresentation;
      const segmentIndex = segmentIndex_exports.getActiveSegmentIndex(segmentationId);
      const segmentsLocked = segmentLocking_exports.getLockedSegmentIndices(segmentationId);
      const segmentColor = config_exports2.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);
      this.isDrawing = true;
      const annotation = {
        metadata: {
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
          referencedImageId: "",
          toolName: this.getToolName(),
          segmentColor
        },
        data: {
          invalidated: true,
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ],
            activeHandleIndex: null
          },
          cachedStats: {},
          highlighted: true
        }
      };
      const viewportIdsToRender = [viewport.id];
      this.editData = {
        annotation,
        centerCanvas: canvasPos,
        segmentIndex,
        segmentationId,
        segmentsLocked,
        segmentColor,
        toolGroupId: this.toolGroupId,
        viewportIdsToRender,
        handleIndex: 3,
        movingTextBox: false,
        newAnnotation: true,
        hasMoved: false,
        volumeId: null,
        referencedVolumeId: null,
        imageId: null
      };
      const { representationData } = getSegmentation(segmentationId);
      const editData = this.getEditData({
        viewport,
        representationData,
        segmentsLocked,
        segmentationId
      });
      this.editData = {
        ...this.editData,
        ...editData
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return true;
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { currentPoints } = eventDetail;
      const currentCanvasPoints = currentPoints.canvas;
      const enabledElement = getEnabledElement(element);
      const { renderingEngine, viewport } = enabledElement;
      const { canvasToWorld } = viewport;
      const { annotation, viewportIdsToRender, centerCanvas } = this.editData;
      const { data } = annotation;
      const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
      const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
      const radius = Math.sqrt(dX * dX + dY * dY);
      const bottomCanvas = [
        centerCanvas[0],
        centerCanvas[1] + radius
      ];
      const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];
      const leftCanvas = [
        centerCanvas[0] - radius,
        centerCanvas[1]
      ];
      const rightCanvas = [
        centerCanvas[0] + radius,
        centerCanvas[1]
      ];
      data.handles.points = [
        canvasToWorld(bottomCanvas),
        canvasToWorld(topCanvas),
        canvasToWorld(leftCanvas),
        canvasToWorld(rightCanvas)
      ];
      annotation.invalidated = true;
      this.editData.hasMoved = true;
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked } = this.editData;
      const { data } = annotation;
      const { viewPlaneNormal, viewUp } = annotation.metadata;
      if (newAnnotation && !hasMoved) {
        return;
      }
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateDraw(element);
      resetElementCursor(element);
      const enabledElement = getEnabledElement(element);
      const operationData = {
        ...this.editData,
        points: data.handles.points,
        segmentIndex,
        segmentsLocked,
        viewPlaneNormal,
        viewUp,
        createMemo: this.createMemo.bind(this)
      };
      this.editData = null;
      this.isDrawing = false;
      this.applyActiveStrategy(enabledElement, operationData);
      this.doneEditMemo();
    };
    this._activateDraw = (element) => {
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_TAP, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.TOUCH_TAP, this._endCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      if (!this.editData) {
        return renderStatus;
      }
      const { viewport } = enabledElement;
      const { viewportIdsToRender } = this.editData;
      if (!viewportIdsToRender.includes(viewport.id)) {
        return renderStatus;
      }
      const { annotation } = this.editData;
      const toolMetadata = annotation.metadata;
      const annotationUID = annotation.annotationUID;
      const data = annotation.data;
      const { points } = data.handles;
      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
      const bottom = canvasCoordinates[0];
      const top = canvasCoordinates[1];
      const center = [
        Math.floor((bottom[0] + top[0]) / 2),
        Math.floor((bottom[1] + top[1]) / 2)
      ];
      const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
      const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
      if (!viewport.getRenderingEngine()) {
        console.warn("Rendering Engine has been destroyed");
        return renderStatus;
      }
      const circleUID = "0";
      drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
        color
      });
      renderStatus = true;
      return renderStatus;
    };
  }
};
SphereScissorsTool.toolName = "SphereScissor";
var SphereScissorsTool_default = SphereScissorsTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js
var { transformWorldToIndex: transformWorldToIndex19 } = utilities_exports;
var CircleROIStartEndThresholdTool = class extends CircleROITool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      simplified: true,
      storePointData: false,
      numSlicesToPropagate: 10,
      calculatePointsInsideVolume: true,
      getTextLines: defaultGetTextLines17,
      statsCalculator: BasicStatsCalculator,
      showTextBox: false,
      throttleTimeout: 100
    }
  }) {
    super(toolProps, defaultToolProps);
    this.isHandleOutsideImage = false;
    this.addNewAnnotation = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport, renderingEngine } = enabledElement;
      this.isDrawing = true;
      const camera = viewport.getCamera();
      const { viewPlaneNormal, viewUp } = camera;
      let referencedImageId, imageVolume, volumeId;
      if (viewport instanceof StackViewport_default) {
        throw new Error("Stack Viewport Not implemented");
      } else {
        const targetId = this.getTargetId(viewport);
        volumeId = utilities_exports.getVolumeId(targetId);
        imageVolume = cache_default.getVolume(volumeId);
        referencedImageId = utilities_exports.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
      }
      const spacingInNormal = utilities_exports.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);
      const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);
      const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);
      const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
      let points;
      if (this.configuration.simplified) {
        points = [[...worldPos], [...worldPos]];
      } else {
        points = [
          [...worldPos],
          [...worldPos],
          [...worldPos],
          [...worldPos],
          [...worldPos]
        ];
      }
      const annotation = {
        highlighted: true,
        invalidated: true,
        metadata: {
          toolName: this.getToolName(),
          viewPlaneNormal: [...viewPlaneNormal],
          viewUp: [...viewUp],
          FrameOfReferenceUID,
          referencedImageId,
          volumeId,
          spacingInNormal,
          enabledElement
        },
        data: {
          label: "",
          startCoordinate: startCoord,
          endCoordinate: endCoord,
          handles: {
            textBox: {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            },
            points,
            activeHandleIndex: null
          },
          cachedStats: {
            pointsInVolume: [],
            projectionPoints: [],
            statistics: []
          },
          labelmapUID: null
        }
      };
      this._computeProjectionPoints(annotation, imageVolume);
      addAnnotation(annotation, element);
      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
      this.editData = {
        annotation,
        viewportIdsToRender,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      return annotation;
    };
    this._endCallback = (evt) => {
      const eventDetail = evt.detail;
      const { element } = eventDetail;
      const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      annotation.highlighted = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      const { metadata } = annotation;
      const { enabledElement } = metadata;
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      const targetId = this.getTargetId(enabledElement.viewport);
      const imageVolume = cache_default.getVolume(targetId.split(/volumeId:|\?/)[1]);
      this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);
      triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
      if (newAnnotation) {
        triggerAnnotationCompleted(annotation);
      } else {
        triggerAnnotationModified(annotation, element);
      }
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = false;
      const { viewport } = enabledElement;
      let annotations = getAnnotations(this.getToolName(), viewport.element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data, metadata } = annotation;
        const { startCoordinate, endCoordinate } = data;
        const { points, activeHandleIndex } = data.handles;
        const { enabledElement: annotationEnabledElement } = metadata;
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const center = canvasCoordinates[0];
        const radius = getCanvasCircleRadius([
          canvasCoordinates[0],
          canvasCoordinates[1]
        ]);
        const { centerPointRadius } = this.configuration;
        const canvasCorners = getCanvasCircleCorners([
          canvasCoordinates[0],
          canvasCoordinates[1]
        ]);
        const focalPoint = viewport.getCamera().focalPoint;
        const viewplaneNormal = viewport.getCamera().viewPlaneNormal;
        let tempStartCoordinate = startCoordinate;
        let tempEndCoordinate = endCoordinate;
        if (Array.isArray(startCoordinate)) {
          tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);
          data.startCoordinate = tempStartCoordinate;
        }
        if (Array.isArray(endCoordinate)) {
          tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);
          data.endCoordinate = tempEndCoordinate;
        }
        const roundedStartCoordinate = utilities_exports.roundToPrecision(data.startCoordinate);
        const roundedEndCoordinate = utilities_exports.roundToPrecision(data.endCoordinate);
        const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);
        const roundedCameraCoordinate = utilities_exports.roundToPrecision(cameraCoordinate);
        if (roundedCameraCoordinate < Math.min(roundedStartCoordinate, roundedEndCoordinate) || roundedCameraCoordinate > Math.max(roundedStartCoordinate, roundedEndCoordinate)) {
          continue;
        }
        const middleCoordinate = utilities_exports.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);
        let isMiddleSlice = false;
        if (roundedCameraCoordinate === middleCoordinate) {
          isMiddleSlice = true;
        }
        data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;
        const iteratorVolumeIDs = annotationEnabledElement.viewport?.volumeIds.values();
        for (const volumeId of iteratorVolumeIDs) {
          if (annotation.invalidated && annotation.metadata.volumeId === volumeId) {
            this._throttledCalculateCachedStats(annotation, annotationEnabledElement);
          }
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null && isMiddleSlice) {
          if (this.configuration.simplified) {
            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
          } else {
            activeHandleCanvasCoords = canvasCoordinates;
          }
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        let lineWidthToUse = lineWidth;
        let lineDashToUse = lineDash;
        if (isMiddleSlice) {
          lineWidthToUse = lineWidth;
          lineDashToUse = [];
        } else {
          lineDashToUse = [5, 5];
        }
        const circleUID = "0";
        drawCircle_default(svgDrawingHelper, annotationUID, circleUID, center, radius, {
          color,
          lineDash: lineDashToUse,
          lineWidth: lineWidthToUse
        });
        if (centerPointRadius > 0) {
          if (radius > 3 * centerPointRadius) {
            drawCircle_default(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {
              color,
              lineDash,
              lineWidth
            });
          }
        }
        renderStatus = true;
        if (this.configuration.showTextBox) {
          const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
          if (!options.visibility) {
            data.handles.textBox = {
              hasMoved: false,
              worldPosition: [0, 0, 0],
              worldBoundingBox: {
                topLeft: [0, 0, 0],
                topRight: [0, 0, 0],
                bottomLeft: [0, 0, 0],
                bottomRight: [0, 0, 0]
              }
            };
            continue;
          }
          const textLines = this.configuration.getTextLines(data, { metadata });
          if (!textLines || textLines.length === 0) {
            continue;
          }
          let canvasTextBoxCoords;
          if (!data.handles.textBox.hasMoved) {
            canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);
            data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
          }
          const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
          const textBoxUID = "1";
          const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);
          const { x: left, y: top, width, height } = boundingBox;
          data.handles.textBox.worldBoundingBox = {
            topLeft: viewport.canvasToWorld([left, top]),
            topRight: viewport.canvasToWorld([left + width, top]),
            bottomLeft: viewport.canvasToWorld([left, top + height]),
            bottomRight: viewport.canvasToWorld([left + width, top + height])
          };
        }
      }
      return renderStatus;
    };
    if (this.configuration.calculatePointsInsideVolume) {
      this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });
    } else {
      this._throttledCalculateCachedStats = debounce_default(this._calculateCachedStatsTool, this.configuration.throttleTimeout);
    }
  }
  _computeProjectionPoints(annotation, imageVolume) {
    const { data, metadata } = annotation;
    const { viewPlaneNormal, spacingInNormal } = metadata;
    const { startCoordinate, endCoordinate } = data;
    const { points } = data.handles;
    const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
    const startWorld = vec3_exports.clone(points[0]);
    startWorld[projectionAxisIndex] = startCoordinate;
    const endWorld = vec3_exports.clone(points[0]);
    endWorld[projectionAxisIndex] = endCoordinate;
    const direction = vec3_exports.create();
    vec3_exports.subtract(direction, endWorld, startWorld);
    const distance = vec3_exports.length(direction);
    if (distance === 0) {
      const handlesOnStartPlane = points.map((p) => {
        const newPoint = vec3_exports.clone(p);
        newPoint[projectionAxisIndex] = startCoordinate;
        return Array.from(newPoint);
      });
      data.cachedStats.projectionPoints = [handlesOnStartPlane];
      return;
    }
    vec3_exports.normalize(direction, direction);
    const handlesToStart = utilities_exports.deepClone(points);
    handlesToStart[0][projectionAxisIndex] = startCoordinate;
    handlesToStart[1][projectionAxisIndex] = startCoordinate;
    const newProjectionPoints = [];
    for (let dist = 0; dist <= distance + 1e-6; dist += spacingInNormal) {
      newProjectionPoints.push(handlesToStart.map((point) => {
        const newPoint = vec3_exports.create();
        vec3_exports.scaleAndAdd(newPoint, point, direction, dist);
        return Array.from(newPoint);
      }));
    }
    data.cachedStats.projectionPoints = newProjectionPoints;
  }
  _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {
    const { data, metadata } = annotation;
    const { viewPlaneNormal, viewUp } = metadata;
    const { viewport } = enabledElement;
    const projectionPoints = data.cachedStats.projectionPoints;
    const pointsInsideVolume = [[]];
    const image = this.getTargetImageData(targetId);
    const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));
    const baseTopLeftCanvas = getCanvasCircleCorners([
      canvasCoordinates[0],
      canvasCoordinates[1]
    ])[0];
    const baseBottomRightCanvas = getCanvasCircleCorners([
      canvasCoordinates[0],
      canvasCoordinates[1]
    ])[1];
    const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);
    const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);
    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);
    const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);
    const aspect = getCalibratedAspect(image);
    const area = Math.abs(Math.PI * (worldWidth / measureInfo.scale / 2) * (worldHeight / aspect / measureInfo.scale / 2));
    const modalityUnitOptions = {
      isPreScaled: isViewportPreScaled(viewport, targetId),
      isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId)
    };
    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);
    for (let i = 0; i < projectionPoints.length; i++) {
      if (!imageVolume) {
        continue;
      }
      const centerWorld = projectionPoints[i][0];
      const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));
      const [topLeftCanvas, bottomRightCanvas] = getCanvasCircleCorners([
        currentCanvasCoordinates[0],
        currentCanvasCoordinates[1]
      ]);
      const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
      const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
      const worldPos1 = topLeftWorld;
      const worldPos2 = bottomRightWorld;
      const { dimensions, imageData, voxelManager } = imageVolume;
      const worldPos1Index = transformWorldToIndex19(imageData, worldPos1);
      const worldProjectionPointIndex = transformWorldToIndex19(imageData, centerWorld);
      const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
      worldPos1Index[0] = Math.floor(worldPos1Index[0]);
      worldPos1Index[1] = Math.floor(worldPos1Index[1]);
      worldPos1Index[2] = Math.floor(worldPos1Index[2]);
      worldPos1Index[indexOfProjection] = worldProjectionPointIndex[indexOfProjection];
      const worldPos2Index = transformWorldToIndex19(imageData, worldPos2);
      worldPos2Index[0] = Math.floor(worldPos2Index[0]);
      worldPos2Index[1] = Math.floor(worldPos2Index[1]);
      worldPos2Index[2] = Math.floor(worldPos2Index[2]);
      worldPos2Index[indexOfProjection] = worldProjectionPointIndex[indexOfProjection];
      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
        const boundsIJK = [
          [iMin, iMax],
          [jMin, jMax],
          [kMin, kMax]
        ];
        const center = centerWorld;
        const ellipseObj = {
          center,
          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,
          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,
          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2
        };
        const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {
          isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),
          boundsIJK,
          imageData,
          returnPoints: this.configuration.storePointData
        });
        pointsInsideVolume.push(pointsInShape);
      }
    }
    const stats = this.configuration.statsCalculator.getStatistics();
    data.cachedStats.pointsInVolume = pointsInsideVolume;
    data.cachedStats.statistics = {
      Modality: metadata.Modality,
      area,
      mean: stats.mean?.value,
      stdDev: stats.stdDev?.value,
      max: stats.max?.value,
      statsArray: stats.array,
      areaUnit: measureInfo.areaUnit,
      modalityUnit
    };
  }
  _calculateCachedStatsTool(annotation, enabledElement) {
    const data = annotation.data;
    const { viewport } = enabledElement;
    const { cachedStats } = data;
    const targetId = this.getTargetId(viewport);
    const imageVolume = cache_default.getVolume(targetId.split(/volumeId:|\?/)[1]);
    this._computeProjectionPoints(annotation, imageVolume);
    this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);
    annotation.invalidated = false;
    triggerAnnotationModified(annotation, viewport.element);
    return cachedStats;
  }
  _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {
    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;
    const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);
    const startPos = vec3_exports.create();
    vec3_exports.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);
    const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);
    return startCoord;
  }
  _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {
    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;
    const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);
    const endPos = vec3_exports.create();
    vec3_exports.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);
    const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);
    return endCoord;
  }
  _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {
    const viewplaneNormalAbs = [
      Math.abs(viewPlaneNormal[0]),
      Math.abs(viewPlaneNormal[1]),
      Math.abs(viewPlaneNormal[2])
    ];
    const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));
    return indexOfDirection;
  }
  _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {
    const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);
    return pos[indexOfDirection];
  }
};
function defaultGetTextLines17(data, _context = {}) {
  const cachedVolumeStats = data.cachedStats.statistics;
  const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;
  if (mean === void 0) {
    return;
  }
  const textLines = [];
  textLines.push(`Area: ${utilities_exports.roundNumber(area)} ${areaUnit}`);
  textLines.push(`Mean: ${utilities_exports.roundNumber(mean)} ${modalityUnit}`);
  textLines.push(`Max: ${utilities_exports.roundNumber(max)} ${modalityUnit}`);
  textLines.push(`Std Dev: ${utilities_exports.roundNumber(stdDev)} ${modalityUnit}`);
  return textLines;
}
CircleROIStartEndThresholdTool.toolName = "CircleROIStartEndThreshold";
var CircleROIStartEndThresholdTool_default = CircleROIStartEndThresholdTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js
var { transformWorldToIndex: transformWorldToIndex20, isEqual: isEqual9 } = utilities_exports;
var PaintFillTool = class extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"]
  }) {
    super(toolProps, defaultToolProps);
    this.preMouseDownCallback = (evt) => {
      const eventDetail = evt.detail;
      const { currentPoints, element } = eventDetail;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const camera = viewport.getCamera();
      const { viewPlaneNormal } = camera;
      const activeSegmentationRepresentation = activeSegmentation_exports.getActiveSegmentation(viewport.id);
      if (!activeSegmentationRepresentation) {
        throw new Error("No active segmentation detected, create one before using scissors tool");
      }
      const { segmentationId } = activeSegmentationRepresentation;
      const segmentIndex = segmentIndex_exports.getActiveSegmentIndex(segmentationId);
      const segmentsLocked = segmentLocking_exports.getLockedSegmentIndices(segmentationId);
      const { representationData } = getSegmentation(segmentationId);
      let dimensions;
      let direction;
      let index;
      let voxelManager;
      this.doneEditMemo();
      if (viewport instanceof BaseVolumeViewport_default) {
        const { volumeId } = representationData[SegmentationRepresentations_default.Labelmap];
        const segmentation = cache_default.getVolume(volumeId);
        ({ dimensions, direction } = segmentation);
        voxelManager = segmentation.voxelManager;
        index = transformWorldToIndex20(segmentation.imageData, worldPos);
      } else {
        const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);
        if (!currentSegmentationImageId) {
          throw new Error("No active segmentation imageId detected, create one before using scissors tool");
        }
        const { imageData } = viewport.getImageData();
        dimensions = imageData.getDimensions();
        direction = imageData.getDirection();
        const image = cache_default.getImage(currentSegmentationImageId);
        voxelManager = image.voxelManager;
        index = transformWorldToIndex20(imageData, worldPos);
      }
      const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);
      if (fixedDimension === void 0) {
        console.warn("Oblique paint fill not yet supported");
        return;
      }
      const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);
      if (index[0] < 0 || index[0] >= dimensions[0] || index[1] < 0 || index[1] >= dimensions[1] || index[2] < 0 || index[2] >= dimensions[2]) {
        return;
      }
      const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);
      if (segmentsLocked.includes(clickedLabelValue)) {
        return;
      }
      const floodFillResult = floodFill_default(floodFillGetter, inPlaneSeedPoint);
      const { flooded } = floodFillResult;
      flooded.forEach((index2) => {
        const scalarDataIndex = getScalarDataPositionFromPlane(index2[0], index2[1]);
        voxelManager.setAtIndex(scalarDataIndex, segmentIndex);
      });
      const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);
      triggerSegmentationDataModified(segmentationId, framesModified);
      return true;
    };
    this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {
      const { flooded: boundaries } = floodFillResult;
      if (fixedDimension === 2) {
        return [fixedDimensionValue];
      }
      let minJ = Infinity;
      let maxJ = -Infinity;
      for (let b = 0; b < boundaries.length; b++) {
        const j = boundaries[b][1];
        if (j < minJ) {
          minJ = j;
        }
        if (j > maxJ) {
          maxJ = j;
        }
      }
      const framesModified = [];
      for (let frame = minJ; frame <= maxJ; frame++) {
        framesModified.push(frame);
      }
      return framesModified;
    };
    this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {
      let fixedDimensionValue;
      let inPlaneSeedPoint;
      switch (fixedDimension) {
        case 0:
          fixedDimensionValue = seedIndex3D[0];
          inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];
          break;
        case 1:
          fixedDimensionValue = seedIndex3D[1];
          inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];
          break;
        case 2:
          fixedDimensionValue = seedIndex3D[2];
          inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];
          break;
        default:
          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
      }
      const getScalarDataPosition = (x, y, z) => {
        return voxelManager.toIndex([x, y, z]);
      };
      const getLabelValue = (x, y, z) => {
        return voxelManager.getAtIJK(x, y, z);
      };
      const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);
      const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);
      return {
        getScalarDataPositionFromPlane,
        getLabelValue,
        floodFillGetter,
        inPlaneSeedPoint,
        fixedDimensionValue
      };
    };
    this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {
      let floodFillGetter;
      switch (fixedDimension) {
        case 0:
          floodFillGetter = (y, z) => {
            if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {
              return;
            }
            return getLabelValue(fixedDimensionValue, y, z);
          };
          break;
        case 1:
          floodFillGetter = (x, z) => {
            if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {
              return;
            }
            return getLabelValue(x, fixedDimensionValue, z);
          };
          break;
        case 2:
          floodFillGetter = (x, y) => {
            if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {
              return;
            }
            return getLabelValue(x, y, fixedDimensionValue);
          };
          break;
        default:
          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
      }
      return floodFillGetter;
    };
    this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {
      let getScalarDataPositionFromPlane;
      switch (fixedDimension) {
        case 0:
          getScalarDataPositionFromPlane = (y, z) => {
            return getScalarDataPosition(fixedDimensionValue, y, z);
          };
          break;
        case 1:
          getScalarDataPositionFromPlane = (x, z) => {
            return getScalarDataPosition(x, fixedDimensionValue, z);
          };
          break;
        case 2:
          getScalarDataPositionFromPlane = (x, y) => {
            return getScalarDataPosition(x, y, fixedDimensionValue);
          };
          break;
        default:
          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
      }
      return getScalarDataPositionFromPlane;
    };
  }
  getFixedDimension(viewPlaneNormal, direction) {
    const xDirection = direction.slice(0, 3);
    const yDirection = direction.slice(3, 6);
    const zDirection = direction.slice(6, 9);
    const absoluteOfViewPlaneNormal = [
      Math.abs(viewPlaneNormal[0]),
      Math.abs(viewPlaneNormal[1]),
      Math.abs(viewPlaneNormal[2])
    ];
    const absoluteOfXDirection = [
      Math.abs(xDirection[0]),
      Math.abs(xDirection[1]),
      Math.abs(xDirection[2])
    ];
    if (isEqual9(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {
      return 0;
    }
    const absoluteOfYDirection = [
      Math.abs(yDirection[0]),
      Math.abs(yDirection[1]),
      Math.abs(yDirection[2])
    ];
    if (isEqual9(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {
      return 1;
    }
    const absoluteOfZDirection = [
      Math.abs(zDirection[0]),
      Math.abs(zDirection[1]),
      Math.abs(zDirection[2])
    ];
    if (isEqual9(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {
      return 2;
    }
  }
};
PaintFillTool.toolName = "PaintFill";
var PaintFillTool_default = PaintFillTool;

// node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget/Constants.js
var Corners = {
  TOP_LEFT: "TOP_LEFT",
  TOP_RIGHT: "TOP_RIGHT",
  BOTTOM_LEFT: "BOTTOM_LEFT",
  BOTTOM_RIGHT: "BOTTOM_RIGHT"
};
var Constants = {
  Corners
};

// node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget.js
var {
  vtkErrorMacro
} = macro;
var {
  Corners: Corners2
} = Constants;
function vtkOrientationMarkerWidget(publicAPI, model) {
  model.classHierarchy.push("vtkOrientationMarkerWidget");
  const superClass = {
    ...publicAPI
  };
  const previousCameraInput = [];
  const selfRenderer = vtkRenderer$1.newInstance();
  const resizeObserver = new ResizeObserver((entries) => {
    publicAPI.updateViewport();
  });
  let onCameraChangedSub = null;
  let onCameraModifiedSub = null;
  let onAnimationSub = null;
  let onEndAnimationSub = null;
  let selfSubscription = null;
  function onCameraModified2() {
    if (!model._interactor.isAnimating()) {
      publicAPI.updateMarkerOrientation();
    }
  }
  model._onParentRendererChanged = () => publicAPI.updateViewport();
  publicAPI.computeViewport = () => {
    const parentRen = model.parentRenderer || model._interactor.getCurrentRenderer();
    const [xMin, yMin, xMax, yMax] = parentRen.getViewport();
    const view = model._interactor.getView();
    const canvasSize = view.getSize();
    const [viewXSize, viewYSize] = view.getViewportSize(parentRen);
    const minViewSize = Math.min(viewXSize, viewYSize);
    let pixelSize = model.viewportSize * minViewSize;
    pixelSize = Math.max(Math.min(model.minPixelSize, minViewSize), Math.min(model.maxPixelSize, pixelSize));
    const xFrac = pixelSize / canvasSize[0];
    const yFrac = pixelSize / canvasSize[1];
    switch (model.viewportCorner) {
      case Corners2.TOP_LEFT:
        return [xMin, yMax - yFrac, xMin + xFrac, yMax];
      case Corners2.TOP_RIGHT:
        return [xMax - xFrac, yMax - yFrac, xMax, yMax];
      case Corners2.BOTTOM_LEFT:
        return [xMin, yMin, xMin + xFrac, yMin + yFrac];
      case Corners2.BOTTOM_RIGHT:
        return [xMax - xFrac, yMin, xMax, yMin + yFrac];
      default:
        vtkErrorMacro("Invalid widget corner");
        return null;
    }
  };
  publicAPI.updateViewport = () => {
    if (model.enabled) {
      selfRenderer.setViewport(...publicAPI.computeViewport());
      model._interactor.render();
    }
  };
  publicAPI.updateMarkerOrientation = () => {
    const ren = model.parentRenderer || model._interactor.getCurrentRenderer();
    const currentCamera = ren.getActiveCamera();
    if (!currentCamera) {
      return;
    }
    const position = currentCamera.getReferenceByName("position");
    const focalPoint = currentCamera.getReferenceByName("focalPoint");
    const viewUp = currentCamera.getReferenceByName("viewUp");
    if (previousCameraInput[0] !== position[0] || previousCameraInput[1] !== position[1] || previousCameraInput[2] !== position[2] || previousCameraInput[3] !== focalPoint[0] || previousCameraInput[4] !== focalPoint[1] || previousCameraInput[5] !== focalPoint[2] || previousCameraInput[6] !== viewUp[0] || previousCameraInput[7] !== viewUp[1] || previousCameraInput[8] !== viewUp[2]) {
      previousCameraInput[0] = position[0];
      previousCameraInput[1] = position[1];
      previousCameraInput[2] = position[2];
      previousCameraInput[3] = focalPoint[0];
      previousCameraInput[4] = focalPoint[1];
      previousCameraInput[5] = focalPoint[2];
      previousCameraInput[6] = viewUp[0];
      previousCameraInput[7] = viewUp[1];
      previousCameraInput[8] = viewUp[2];
      const activeCamera = selfRenderer.getActiveCamera();
      activeCamera.setPosition(position[0], position[1], position[2]);
      activeCamera.setFocalPoint(focalPoint[0], focalPoint[1], focalPoint[2]);
      activeCamera.setViewUp(viewUp[0], viewUp[1], viewUp[2]);
      selfRenderer.resetCamera();
    }
  };
  publicAPI.setEnabled = (enabling) => {
    if (enabling) {
      if (model.enabled) {
        return;
      }
      if (!model.actor) {
        vtkErrorMacro("Must set actor before enabling orientation marker.");
        return;
      }
      if (!model._interactor) {
        vtkErrorMacro("Must set interactor before enabling orientation marker.");
        return;
      }
      const ren = model.parentRenderer || model._interactor.getCurrentRenderer();
      const renderWindow = ren.getRenderWindow();
      renderWindow.addRenderer(selfRenderer);
      if (renderWindow.getNumberOfLayers() < 2) {
        renderWindow.setNumberOfLayers(2);
      }
      selfRenderer.setLayer(renderWindow.getNumberOfLayers() - 1);
      selfRenderer.setInteractive(model.interactiveRenderer);
      selfRenderer.addViewProp(model.actor);
      model.actor.setVisibility(true);
      onCameraChangedSub = ren.onEvent((event) => {
        if (event.type === "ActiveCameraEvent") {
          if (onCameraModifiedSub) {
            onCameraModifiedSub.unsubscribe();
          }
          onCameraModifiedSub = event.camera.onModified(onCameraModified2);
        }
      });
      onCameraModifiedSub = ren.getActiveCamera().onModified(onCameraModified2);
      onAnimationSub = model._interactor.onAnimation(publicAPI.updateMarkerOrientation);
      onEndAnimationSub = model._interactor.onEndAnimation(publicAPI.updateMarkerOrientation);
      resizeObserver.observe(model._interactor.getView().getCanvas());
      publicAPI.updateViewport();
      publicAPI.updateMarkerOrientation();
      model.enabled = true;
    } else {
      if (!model.enabled) {
        return;
      }
      model.enabled = false;
      resizeObserver.disconnect();
      onCameraChangedSub.unsubscribe();
      onCameraChangedSub = null;
      onCameraModifiedSub.unsubscribe();
      onCameraModifiedSub = null;
      onAnimationSub.unsubscribe();
      onAnimationSub = null;
      onEndAnimationSub.unsubscribe();
      onEndAnimationSub = null;
      model.actor.setVisibility(false);
      selfRenderer.removeViewProp(model.actor);
      const renderWindow = model._interactor?.findPokedRenderer()?.getRenderWindow();
      if (renderWindow) {
        renderWindow.removeRenderer(selfRenderer);
      }
    }
    publicAPI.modified();
  };
  publicAPI.setViewportCorner = (corner) => {
    if (corner === model.viewportCorner) {
      return;
    }
    model.viewportCorner = corner;
    publicAPI.updateViewport();
  };
  publicAPI.setViewportSize = (sizeFactor) => {
    const viewportSize = Math.min(1, Math.max(0, sizeFactor));
    if (viewportSize === model.viewportSize) {
      return;
    }
    model.viewportSize = viewportSize;
    publicAPI.updateViewport();
  };
  publicAPI.setActor = (actor) => {
    const previousState = model.enabled;
    publicAPI.setEnabled(false);
    model.actor = actor;
    publicAPI.setEnabled(previousState);
  };
  publicAPI.getRenderer = () => selfRenderer;
  publicAPI.delete = () => {
    superClass.delete();
    if (selfSubscription) {
      selfSubscription.unsubscribe();
      selfSubscription = null;
    }
    if (onCameraChangedSub) {
      onCameraChangedSub.unsubscribe();
      onCameraChangedSub = null;
    }
    if (onCameraModifiedSub) {
      onCameraModifiedSub.unsubscribe();
      onCameraModifiedSub = null;
    }
    if (onAnimationSub) {
      onAnimationSub.unsubscribe();
      onAnimationSub = null;
    }
    if (onEndAnimationSub) {
      onEndAnimationSub.unsubscribe();
      onEndAnimationSub = null;
    }
    resizeObserver.disconnect();
  };
  selfSubscription = publicAPI.onModified(publicAPI.updateViewport);
}
var DEFAULT_VALUES2 = {
  // actor: null,
  // _interactor: null,
  viewportCorner: Constants.Corners.BOTTOM_LEFT,
  viewportSize: 0.2,
  minPixelSize: 50,
  maxPixelSize: 200,
  parentRenderer: null,
  interactiveRenderer: false
};
function extend3(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES2, initialValues);
  macro.obj(publicAPI, model);
  macro.get(publicAPI, model, ["enabled", "viewportCorner", "viewportSize", "interactiveRenderer"]);
  macro.setGet(publicAPI, model, ["_interactor", "minPixelSize", "maxPixelSize", "parentRenderer"]);
  macro.get(publicAPI, model, ["actor"]);
  macro.moveToProtected(publicAPI, model, ["interactor"]);
  vtkOrientationMarkerWidget(publicAPI, model);
}
var newInstance2 = macro.newInstance(extend3, "vtkOrientationMarkerWidget");
var vtkOrientationMarkerWidget$1 = {
  newInstance: newInstance2,
  extend: extend3,
  ...Constants
};

// node_modules/@kitware/vtk.js/Common/Core/ImageHelper.js
function canvasToImageData(canvas) {
  let boundingBox = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0, 0, 0, 0];
  const [top, left, width, height] = boundingBox;
  const ctxt = canvas.getContext("2d");
  const idata = ctxt.getImageData(top, left, width || canvas.width, height || canvas.height);
  const imageData = vtkImageData$1.newInstance({
    type: "vtkImageData"
  });
  imageData.setOrigin(0, 0, 0);
  imageData.setSpacing(1, 1, 1);
  imageData.setExtent(0, (width || canvas.width) - 1, 0, (height || canvas.height) - 1, 0, 0);
  const scalars = vtkDataArray$1.newInstance({
    numberOfComponents: 4,
    values: new Uint8Array(idata.data.buffer)
  });
  scalars.setName("scalars");
  imageData.getPointData().setScalars(scalars);
  return imageData;
}
function imageToImageData(image) {
  let transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    flipX: false,
    flipY: false,
    rotate: 0
  };
  const canvas = document.createElement("canvas");
  canvas.width = image.width;
  canvas.height = image.height;
  const ctx = canvas.getContext("2d");
  const {
    flipX,
    flipY,
    rotate: rotate2
  } = transform;
  ctx.translate(canvas.width / 2, canvas.height / 2);
  ctx.scale(flipX ? -1 : 1, flipY ? -1 : 1);
  ctx.rotate(rotate2 * Math.PI / 180);
  ctx.drawImage(image, -image.width / 2, -image.height / 2);
  return canvasToImageData(canvas);
}
var ImageHelper = {
  canvasToImageData,
  imageToImageData
};

// node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets.js
var STYLES = {
  default: {
    defaultStyle: {
      fontStyle: "bold",
      fontFamily: "Arial",
      fontColor: "black",
      fontSizeScale: (res) => res / 2,
      faceColor: "white",
      edgeThickness: 0.1,
      edgeColor: "black",
      resolution: 400
    },
    xMinusFaceProperty: {
      text: "X-",
      faceColor: "yellow"
    },
    xPlusFaceProperty: {
      text: "X+",
      faceColor: "yellow"
    },
    yMinusFaceProperty: {
      text: "Y-",
      faceColor: "red"
    },
    yPlusFaceProperty: {
      text: "Y+",
      faceColor: "red"
    },
    zMinusFaceProperty: {
      text: "Z-",
      faceColor: "#008000"
    },
    zPlusFaceProperty: {
      text: "Z+",
      faceColor: "#008000"
    }
  },
  lps: {
    xMinusFaceProperty: {
      text: "R",
      faceRotation: -90
    },
    xPlusFaceProperty: {
      text: "L",
      faceRotation: 90
    },
    yMinusFaceProperty: {
      text: "A",
      faceRotation: 0
    },
    yPlusFaceProperty: {
      text: "P",
      faceRotation: 180
    },
    zMinusFaceProperty: {
      text: "I",
      faceRotation: 180
    },
    zPlusFaceProperty: {
      text: "S",
      faceRotation: 0
    }
  }
};
function applyDefinitions(definitions, cubeActor) {
  cubeActor.set(definitions);
}
function applyPreset(name, cubeActor) {
  return applyDefinitions(STYLES[name], cubeActor);
}
function registerStylePreset(name, definitions) {
  STYLES[name] = definitions;
}
var AnnotatedCubePresets = {
  applyDefinitions,
  applyPreset,
  registerStylePreset
};

// node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor.js
var FACE_TO_INDEX = {
  xPlus: 0,
  xMinus: 1,
  yPlus: 2,
  yMinus: 3,
  zPlus: 4,
  zMinus: 5
};
function vtkAnnotatedCubeActor(publicAPI, model) {
  model.classHierarchy.push("vtkAnnotatedCubeActor");
  model.xPlusFaceProperty = {
    ...model.xPlusFaceProperty
  };
  model.xMinusFaceProperty = {
    ...model.xMinusFaceProperty
  };
  model.yPlusFaceProperty = {
    ...model.yPlusFaceProperty
  };
  model.yMinusFaceProperty = {
    ...model.yMinusFaceProperty
  };
  model.zPlusFaceProperty = {
    ...model.zPlusFaceProperty
  };
  model.zMinusFaceProperty = {
    ...model.zMinusFaceProperty
  };
  let cubeSource = null;
  const canvas = document.createElement("canvas");
  const mapper = vtkMapper$1.newInstance();
  const texture = vtkTexture$1.newInstance();
  texture.setInterpolate(true);
  function updateFaceTexture(faceName) {
    let newProp = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (newProp) {
      Object.assign(model[`${faceName}FaceProperty`], newProp);
    }
    const prop = {
      ...model.defaultStyle,
      ...model[`${faceName}FaceProperty`]
    };
    canvas.width = prop.resolution;
    canvas.height = prop.resolution;
    const ctxt = canvas.getContext("2d");
    ctxt.fillStyle = prop.faceColor;
    ctxt.fillRect(0, 0, canvas.width, canvas.height);
    if (prop.edgeThickness > 0) {
      ctxt.strokeStyle = prop.edgeColor;
      ctxt.lineWidth = prop.edgeThickness * canvas.width;
      ctxt.strokeRect(0, 0, canvas.width, canvas.height);
    }
    ctxt.save();
    ctxt.translate(0, canvas.height);
    ctxt.scale(1, -1);
    ctxt.translate(canvas.width / 2, canvas.height / 2);
    ctxt.rotate(-Math.PI * (prop.faceRotation / 180));
    const textSize = prop.fontSizeScale(prop.resolution);
    ctxt.fillStyle = prop.fontColor;
    ctxt.textAlign = "center";
    ctxt.textBaseline = "middle";
    ctxt.font = `${prop.fontStyle} ${textSize}px "${prop.fontFamily}"`;
    ctxt.fillText(prop.text, 0, 0);
    ctxt.restore();
    const vtkImage = ImageHelper.canvasToImageData(canvas);
    texture.setInputData(vtkImage, FACE_TO_INDEX[faceName]);
    publicAPI.modified();
  }
  function updateAllFaceTextures() {
    cubeSource = vtkCubeSource$1.newInstance({
      generate3DTextureCoordinates: true
    });
    mapper.setInputConnection(cubeSource.getOutputPort());
    updateFaceTexture("xPlus");
    updateFaceTexture("xMinus");
    updateFaceTexture("yPlus");
    updateFaceTexture("yMinus");
    updateFaceTexture("zPlus");
    updateFaceTexture("zMinus");
  }
  publicAPI.setDefaultStyle = (style) => {
    model.defaultStyle = {
      ...model.defaultStyle,
      ...style
    };
    updateAllFaceTextures();
  };
  publicAPI.setXPlusFaceProperty = (prop) => updateFaceTexture("xPlus", prop);
  publicAPI.setXMinusFaceProperty = (prop) => updateFaceTexture("xMinus", prop);
  publicAPI.setYPlusFaceProperty = (prop) => updateFaceTexture("yPlus", prop);
  publicAPI.setYMinusFaceProperty = (prop) => updateFaceTexture("yMinus", prop);
  publicAPI.setZPlusFaceProperty = (prop) => updateFaceTexture("zPlus", prop);
  publicAPI.setZMinusFaceProperty = (prop) => updateFaceTexture("zMinus", prop);
  updateAllFaceTextures();
  mapper.setInputConnection(cubeSource.getOutputPort());
  publicAPI.setMapper(mapper);
  publicAPI.addTexture(texture);
}
var DEFAULT_VALUES3 = {
  defaultStyle: {
    text: "",
    faceColor: "white",
    faceRotation: 0,
    fontFamily: "Arial",
    fontColor: "black",
    fontStyle: "normal",
    fontSizeScale: (resolution) => resolution / 1.8,
    edgeThickness: 0.1,
    edgeColor: "black",
    resolution: 200
  }
  // xPlusFaceProperty: null,
  // xMinusFaceProperty: null,
  // yPlusFaceProperty: null,
  // yMinusFaceProperty: null,
  // zPlusFaceProperty: null,
  // zMinusFaceProperty: null,
};
function extend4(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES3, initialValues);
  vtkActor$1.extend(publicAPI, model, initialValues);
  macro.get(publicAPI, model, ["defaultStyle", "xPlusFaceProperty", "xMinusFaceProperty", "yPlusFaceProperty", "yMinusFaceProperty", "zPlusFaceProperty", "zMinusFaceProperty"]);
  vtkAnnotatedCubeActor(publicAPI, model);
}
var newInstance3 = macro.newInstance(extend4, "vtkAnnotatedCubeActor");
var vtkAnnotatedCubeActor$1 = {
  newInstance: newInstance3,
  extend: extend4,
  Presets: AnnotatedCubePresets
};

// node_modules/@kitware/vtk.js/Filters/General/AppendPolyData.js
var {
  vtkErrorMacro: vtkErrorMacro2
} = macro;
function offsetCellArray(typedArray, offset) {
  let currentIdx = 0;
  return typedArray.map((value, index) => {
    if (index === currentIdx) {
      currentIdx += value + 1;
      return value;
    }
    return value + offset;
  });
}
function appendCellData(dest, src, ptOffset, cellOffset) {
  dest.set(offsetCellArray(src, ptOffset), cellOffset);
}
function vtkAppendPolyData(publicAPI, model) {
  model.classHierarchy.push("vtkAppendPolyData");
  publicAPI.requestData = (inData, outData) => {
    const numberOfInputs = publicAPI.getNumberOfInputPorts();
    if (!numberOfInputs) {
      vtkErrorMacro2("No input specified.");
      return;
    }
    if (numberOfInputs === 1) {
      outData[0] = inData[0];
      return;
    }
    const output = vtkPolyData$1.newInstance();
    let numPts = 0;
    let pointType = 0;
    let ttype = 1;
    let firstType = 1;
    let numVerts = 0;
    let numLines = 0;
    let numStrips = 0;
    let numPolys = 0;
    let hasPtNormals = true;
    let hasPtTCoords = true;
    let hasPtScalars = true;
    for (let i = 0; i < numberOfInputs; i++) {
      const ds = inData[i];
      if (!ds) {
        continue;
      }
      const dsNumPts = ds.getPoints().getNumberOfPoints();
      numPts += dsNumPts;
      numVerts += ds.getVerts().getNumberOfValues();
      numLines += ds.getLines().getNumberOfValues();
      numStrips += ds.getStrips().getNumberOfValues();
      numPolys += ds.getPolys().getNumberOfValues();
      if (dsNumPts) {
        if (firstType) {
          firstType = 0;
          pointType = ds.getPoints().getDataType();
        }
        ttype = ds.getPoints().getDataType();
        pointType = pointType > ttype ? pointType : ttype;
      }
      const ptD = ds.getPointData();
      if (ptD) {
        hasPtNormals = hasPtNormals && ptD.getNormals() !== null;
        hasPtTCoords = hasPtTCoords && ptD.getTCoords() !== null;
        hasPtScalars = hasPtScalars && ptD.getScalars() !== null;
      } else {
        hasPtNormals = false;
        hasPtTCoords = false;
        hasPtScalars = false;
      }
    }
    if (model.outputPointsPrecision === DesiredOutputPrecision.SINGLE) {
      pointType = VtkDataTypes.FLOAT;
    } else if (model.outputPointsPrecision === DesiredOutputPrecision.DOUBLE) {
      pointType = VtkDataTypes.DOUBLE;
    }
    const points = vtkPoints$1.newInstance({
      dataType: pointType
    });
    points.setNumberOfPoints(numPts);
    const pointData = points.getData();
    const vertData = new Uint32Array(numVerts);
    const lineData = new Uint32Array(numLines);
    const stripData = new Uint32Array(numStrips);
    const polyData = new Uint32Array(numPolys);
    let newPtNormals = null;
    let newPtTCoords = null;
    let newPtScalars = null;
    const lds = inData[numberOfInputs - 1];
    if (hasPtNormals) {
      const dsNormals = lds.getPointData().getNormals();
      newPtNormals = vtkDataArray$1.newInstance({
        numberOfComponents: 3,
        numberOfTuples: numPts,
        size: 3 * numPts,
        dataType: dsNormals.getDataType(),
        name: dsNormals.getName()
      });
    }
    if (hasPtTCoords) {
      const dsTCoords = lds.getPointData().getTCoords();
      newPtTCoords = vtkDataArray$1.newInstance({
        numberOfComponents: 2,
        numberOfTuples: numPts,
        size: 2 * numPts,
        dataType: dsTCoords.getDataType(),
        name: dsTCoords.getName()
      });
    }
    if (hasPtScalars) {
      const dsScalars = lds.getPointData().getScalars();
      newPtScalars = vtkDataArray$1.newInstance({
        numberOfComponents: dsScalars.getNumberOfComponents(),
        numberOfTuples: numPts,
        size: numPts * dsScalars.getNumberOfComponents(),
        dataType: dsScalars.getDataType(),
        name: dsScalars.getName()
      });
    }
    numPts = 0;
    numVerts = 0;
    numLines = 0;
    numStrips = 0;
    numPolys = 0;
    for (let i = 0; i < numberOfInputs; i++) {
      const ds = inData[i];
      pointData.set(ds.getPoints().getData(), numPts * 3);
      appendCellData(vertData, ds.getVerts().getData(), numPts, numVerts);
      numVerts += ds.getVerts().getNumberOfValues();
      appendCellData(lineData, ds.getLines().getData(), numPts, numLines);
      numLines += ds.getLines().getNumberOfValues();
      appendCellData(stripData, ds.getStrips().getData(), numPts, numStrips);
      numStrips += ds.getStrips().getNumberOfValues();
      appendCellData(polyData, ds.getPolys().getData(), numPts, numPolys);
      numPolys += ds.getPolys().getNumberOfValues();
      const dsPD = ds.getPointData();
      if (hasPtNormals) {
        const ptNorms = dsPD.getNormals();
        newPtNormals.getData().set(ptNorms.getData(), numPts * 3);
      }
      if (hasPtTCoords) {
        const ptTCoords = dsPD.getTCoords();
        newPtTCoords.getData().set(ptTCoords.getData(), numPts * 2);
      }
      if (hasPtScalars) {
        const ptScalars = dsPD.getScalars();
        newPtScalars.getData().set(ptScalars.getData(), numPts * newPtScalars.getNumberOfComponents());
      }
      numPts += ds.getPoints().getNumberOfPoints();
    }
    output.setPoints(points);
    output.getVerts().setData(vertData);
    output.getLines().setData(lineData);
    output.getStrips().setData(stripData);
    output.getPolys().setData(polyData);
    if (newPtNormals) {
      output.getPointData().setNormals(newPtNormals);
    }
    if (newPtTCoords) {
      output.getPointData().setTCoords(newPtTCoords);
    }
    if (newPtScalars) {
      output.getPointData().setScalars(newPtScalars);
    }
    outData[0] = output;
  };
}
var DEFAULT_VALUES4 = {
  outputPointsPrecision: DesiredOutputPrecision.DEFAULT
};
function extend5(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES4, initialValues);
  macro.setGet(publicAPI, model, ["outputPointsPrecision"]);
  macro.obj(publicAPI, model);
  macro.algo(publicAPI, model, 1, 1);
  vtkAppendPolyData(publicAPI, model);
}
var newInstance4 = macro.newInstance(extend5, "vtkAppendPolyData");
var vtkAppendPolyData$1 = {
  newInstance: newInstance4,
  extend: extend5
};

// node_modules/@kitware/vtk.js/Filters/Sources/ConeSource.js
function vtkConeSource(publicAPI, model) {
  model.classHierarchy.push("vtkConeSource");
  function requestData(inData, outData) {
    if (model.deleted) {
      return;
    }
    let dataset = outData[0];
    const angle = 2 * Math.PI / model.resolution;
    const xbot = -model.height / 2;
    const numberOfPoints = model.resolution + 1;
    const cellArraySize = 4 * model.resolution + 1 + model.resolution;
    let pointIdx = 0;
    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);
    let cellLocation = 0;
    const polys = new Uint32Array(cellArraySize);
    points[0] = model.height / 2;
    points[1] = 0;
    points[2] = 0;
    if (model.capping) {
      polys[cellLocation++] = model.resolution;
    }
    for (let i = 0; i < model.resolution; i++) {
      pointIdx++;
      points[pointIdx * 3 + 0] = xbot;
      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);
      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle);
      if (model.capping) {
        polys[model.resolution - cellLocation++ + 1] = pointIdx;
      }
    }
    for (let i = 0; i < model.resolution; i++) {
      polys[cellLocation++] = 3;
      polys[cellLocation++] = 0;
      polys[cellLocation++] = i + 1;
      polys[cellLocation++] = i + 2 > model.resolution ? 1 : i + 2;
    }
    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([1, 0, 0], model.direction).apply(points);
    dataset = vtkPolyData$1.newInstance();
    dataset.getPoints().setData(points, 3);
    dataset.getPolys().setData(polys, 1);
    outData[0] = dataset;
  }
  publicAPI.requestData = requestData;
}
var DEFAULT_VALUES5 = {
  height: 1,
  radius: 0.5,
  resolution: 6,
  center: [0, 0, 0],
  direction: [1, 0, 0],
  capping: true,
  pointType: "Float64Array"
};
function extend6(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES5, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["height", "radius", "resolution", "capping"]);
  macro.setGetArray(publicAPI, model, ["center", "direction"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkConeSource(publicAPI, model);
}
var newInstance5 = macro.newInstance(extend6, "vtkConeSource");
var vtkConeSource$1 = {
  newInstance: newInstance5,
  extend: extend6
};

// node_modules/@kitware/vtk.js/Filters/Sources/CylinderSource.js
function vtkCylinderSource(publicAPI, model) {
  model.classHierarchy.push("vtkCylinderSource");
  function requestData(inData, outData) {
    if (model.deleted) {
      return;
    }
    let dataset = outData[0];
    const angle = 2 * Math.PI / model.resolution;
    let numberOfPoints = 2 * model.resolution;
    let numberOfPolys = 5 * model.resolution;
    if (model.capping) {
      numberOfPoints = 4 * model.resolution;
      numberOfPolys = 7 * model.resolution + 2;
    }
    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);
    let cellLocation = 0;
    const polys = new Uint32Array(numberOfPolys);
    const normalsData = new Float32Array(numberOfPoints * 3);
    const normals = vtkDataArray$1.newInstance({
      numberOfComponents: 3,
      values: normalsData,
      name: "Normals"
    });
    const tcData = new Float32Array(numberOfPoints * 2);
    const tcoords = vtkDataArray$1.newInstance({
      numberOfComponents: 2,
      values: tcData,
      name: "TCoords"
    });
    const nbot = [0, 0, 0];
    const ntop = [0, 0, 0];
    const xbot = [0, 0, 0];
    const xtop = [0, 0, 0];
    const tcbot = [0, 0];
    const tctop = [0, 0];
    const otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;
    for (let i = 0; i < model.resolution; i++) {
      nbot[0] = Math.cos(i * angle + model.initAngle);
      ntop[0] = nbot[0];
      xbot[0] = model.radius * nbot[0] + model.center[0];
      xtop[0] = xbot[0];
      tcbot[0] = Math.abs(2 * i / model.resolution - 1);
      tctop[0] = tcbot[0];
      xbot[1] = 0.5 * model.height + model.center[1];
      xtop[1] = -0.5 * model.height + model.center[1];
      tcbot[1] = 0;
      tctop[1] = 1;
      nbot[2] = -Math.sin(i * angle + model.initAngle);
      ntop[2] = nbot[2];
      xbot[2] = otherRadius * nbot[2] + model.center[2];
      xtop[2] = xbot[2];
      const pointIdx = 2 * i;
      for (let j = 0; j < 3; j++) {
        normalsData[pointIdx * 3 + j] = nbot[j];
        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];
        points[pointIdx * 3 + j] = xbot[j];
        points[(pointIdx + 1) * 3 + j] = xtop[j];
        if (j < 2) {
          tcData[pointIdx * 2 + j] = tcbot[j];
          tcData[(pointIdx + 1) * 2 + j] = tctop[j];
        }
      }
    }
    for (let i = 0; i < model.resolution; i++) {
      polys[cellLocation++] = 4;
      polys[cellLocation++] = 2 * i;
      polys[cellLocation++] = 2 * i + 1;
      const pt = (2 * i + 3) % (2 * model.resolution);
      polys[cellLocation++] = pt;
      polys[cellLocation++] = pt - 1;
    }
    if (model.capping) {
      for (let i = 0; i < model.resolution; i++) {
        xbot[0] = model.radius * Math.cos(i * angle + model.initAngle);
        xtop[0] = xbot[0];
        tcbot[0] = xbot[0];
        tctop[0] = xbot[0];
        xbot[0] += model.center[0];
        xtop[0] += model.center[0];
        nbot[1] = 1;
        ntop[1] = -1;
        xbot[1] = 0.5 * model.height + model.center[1];
        xtop[1] = -0.5 * model.height + model.center[1];
        xbot[2] = -otherRadius * Math.sin(i * angle + model.initAngle);
        xtop[2] = xbot[2];
        tcbot[1] = xbot[2];
        tctop[1] = xbot[2];
        xbot[2] += model.center[2];
        xtop[2] += model.center[2];
        const botIdx = 2 * model.resolution + i;
        const topIdx = 3 * model.resolution + model.resolution - i - 1;
        for (let j = 0; j < 3; j++) {
          normalsData[3 * botIdx + j] = nbot[j];
          normalsData[3 * topIdx + j] = ntop[j];
          points[3 * botIdx + j] = xbot[j];
          points[3 * topIdx + j] = xtop[j];
          if (j < 2) {
            tcData[2 * botIdx + j] = tcbot[j];
            tcData[2 * topIdx + j] = tctop[j];
          }
        }
      }
      polys[cellLocation++] = model.resolution;
      for (let i = 0; i < model.resolution; i++) {
        polys[cellLocation++] = 2 * model.resolution + i;
      }
      polys[cellLocation++] = model.resolution;
      for (let i = 0; i < model.resolution; i++) {
        polys[cellLocation++] = 3 * model.resolution + i;
      }
    }
    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([0, 1, 0], model.direction).translate(...model.center.map((c) => c * -1)).apply(points);
    dataset = vtkPolyData$1.newInstance();
    dataset.getPoints().setData(points, 3);
    dataset.getPolys().setData(polys, 1);
    dataset.getPointData().setNormals(normals);
    dataset.getPointData().setTCoords(tcoords);
    outData[0] = dataset;
  }
  publicAPI.requestData = requestData;
}
var DEFAULT_VALUES6 = {
  height: 1,
  initAngle: 0,
  radius: 1,
  resolution: 6,
  center: [0, 0, 0],
  direction: [0, 1, 0],
  capping: true,
  pointType: "Float64Array"
};
function extend7(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES6, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["height", "initAngle", "otherRadius", "radius", "resolution", "capping"]);
  macro.setGetArray(publicAPI, model, ["center", "direction"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkCylinderSource(publicAPI, model);
}
var newInstance6 = macro.newInstance(extend7, "vtkCylinderSource");
var vtkCylinderSource$1 = {
  newInstance: newInstance6,
  extend: extend7
};

// node_modules/@kitware/vtk.js/Filters/Sources/ArrowSource.js
function vtkArrowSource(publicAPI, model) {
  model.classHierarchy.push("vtkArrowSource");
  function requestData(inData, outData) {
    if (model.deleted) {
      return;
    }
    const cylinder = vtkCylinderSource$1.newInstance({
      capping: true
    });
    cylinder.setResolution(model.shaftResolution);
    cylinder.setRadius(model.shaftRadius);
    cylinder.setHeight(1 - model.tipLength);
    cylinder.setCenter(0, (1 - model.tipLength) * 0.5, 0);
    const cylinderPD = cylinder.getOutputData();
    const cylinderPts = cylinderPD.getPoints().getData();
    const cylinderNormals = cylinderPD.getPointData().getNormals().getData();
    vtkMatrixBuilder.buildFromDegree().rotateZ(-90).apply(cylinderPts).apply(cylinderNormals);
    const cone = vtkConeSource$1.newInstance();
    cone.setResolution(model.tipResolution);
    cone.setHeight(model.tipLength);
    cone.setRadius(model.tipRadius);
    const conePD = cone.getOutputData();
    const conePts = conePD.getPoints().getData();
    vtkMatrixBuilder.buildFromRadian().translate(1 - model.tipLength * 0.5, 0, 0).apply(conePts);
    const append = vtkAppendPolyData$1.newInstance();
    append.setInputData(cylinderPD);
    append.addInputData(conePD);
    const appendPD = append.getOutputData();
    const appendPts = appendPD.getPoints().getData();
    vtkMatrixBuilder.buildFromRadian().translate(-0.5 + model.tipLength * 0.5, 0, 0).apply(appendPts);
    if (model.invert) {
      vtkMatrixBuilder.buildFromRadian().rotateFromDirections([1, 0, 0], model.direction).scale(-1, -1, -1).apply(appendPts);
      outData[0] = appendPD;
    } else {
      vtkMatrixBuilder.buildFromRadian().rotateFromDirections([1, 0, 0], model.direction).scale(1, 1, 1).apply(appendPts);
      outData[0] = append.getOutputData();
    }
  }
  publicAPI.requestData = requestData;
}
var DEFAULT_VALUES7 = {
  tipResolution: 6,
  tipRadius: 0.1,
  tipLength: 0.35,
  shaftResolution: 6,
  shaftRadius: 0.03,
  invert: false,
  direction: [1, 0, 0],
  pointType: "Float64Array"
};
function extend8(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES7, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["tipResolution", "tipRadius", "tipLength", "shaftResolution", "shaftRadius", "invert"]);
  macro.setGetArray(publicAPI, model, ["direction"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkArrowSource(publicAPI, model);
}
var newInstance7 = macro.newInstance(extend8, "vtkArrowSource");
var vtkArrowSource$1 = {
  newInstance: newInstance7,
  extend: extend8
};

// node_modules/@kitware/vtk.js/Rendering/Core/AxesActor.js
function centerDataSet(ds) {
  const bounds = ds.getPoints().getBounds();
  const center = [-(bounds[0] + bounds[1]) * 0.5, -(bounds[2] + bounds[3]) * 0.5, -(bounds[4] + bounds[5]) * 0.5];
  vtkMatrixBuilder.buildFromDegree().translate(...center).apply(ds.getPoints().getData());
}
function shiftDataset(ds, axis) {
  let invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  const bounds = ds.getPoints().getBounds();
  const center = [0, 0, 0];
  if (invert) {
    center[axis] = -bounds[axis * 2 + 1];
  } else {
    center[axis] = -bounds[axis * 2];
  }
  vtkMatrixBuilder.buildFromDegree().translate(...center).apply(ds.getPoints().getData());
}
function addColor(ds, r, g, b) {
  const size = ds.getPoints().getData().length;
  const rgbArray = new Uint8ClampedArray(size);
  let offset = 0;
  while (offset < size) {
    rgbArray[offset++] = r;
    rgbArray[offset++] = g;
    rgbArray[offset++] = b;
  }
  ds.getPointData().setScalars(vtkDataArray$1.newInstance({
    name: "color",
    numberOfComponents: 3,
    values: rgbArray
  }));
}
function vtkAxesActor(publicAPI, model) {
  model.classHierarchy.push("vtkAxesActor");
  const _mapper = vtkMapper$1.newInstance();
  publicAPI.setMapper(_mapper);
  publicAPI.update = () => {
    let currentConfig = {
      ...model.config,
      ...model.xConfig
    };
    const xAxis = vtkArrowSource$1.newInstance({
      direction: [1, 0, 0],
      ...currentConfig
    }).getOutputData();
    if (model.config.recenter) {
      centerDataSet(xAxis);
    } else {
      shiftDataset(xAxis, 0, currentConfig.invert);
    }
    addColor(xAxis, ...currentConfig.color);
    currentConfig = {
      ...model.config,
      ...model.yConfig
    };
    const yAxis = vtkArrowSource$1.newInstance({
      direction: [0, 1, 0],
      ...currentConfig
    }).getOutputData();
    if (model.config.recenter) {
      centerDataSet(yAxis);
    } else {
      shiftDataset(yAxis, 1, currentConfig.invert);
    }
    addColor(yAxis, ...currentConfig.color);
    currentConfig = {
      ...model.config,
      ...model.zConfig
    };
    const zAxis = vtkArrowSource$1.newInstance({
      direction: [0, 0, 1],
      ...currentConfig
    }).getOutputData();
    if (model.config.recenter) {
      centerDataSet(zAxis);
    } else {
      shiftDataset(zAxis, 2, currentConfig.invert);
    }
    addColor(zAxis, ...currentConfig.color);
    const source = vtkAppendPolyData$1.newInstance();
    source.setInputData(xAxis);
    source.addInputData(yAxis);
    source.addInputData(zAxis);
    _mapper.setInputConnection(source.getOutputPort());
  };
  publicAPI.update();
  const _debouncedUpdate = macro.debounce(publicAPI.update, 0);
  publicAPI.setXAxisColor = (color) => publicAPI.setXConfig({
    ...publicAPI.getXConfig(),
    color
  });
  publicAPI.setYAxisColor = (color) => publicAPI.setYConfig({
    ...publicAPI.getYConfig(),
    color
  });
  publicAPI.setZAxisColor = (color) => publicAPI.setZConfig({
    ...publicAPI.getZConfig(),
    color
  });
  publicAPI.getXAxisColor = () => model.getXConfig().color;
  publicAPI.getYAxisColor = () => model.getYConfig().color;
  publicAPI.getZAxisColor = () => model.getZConfig().color;
  model._onConfigChanged = _debouncedUpdate;
  model._onXConfigChanged = _debouncedUpdate;
  model._onYConfigChanged = _debouncedUpdate;
  model._onZConfigChanged = _debouncedUpdate;
}
function defaultValues(initialValues) {
  return {
    config: {
      recenter: true,
      tipResolution: 60,
      tipRadius: 0.1,
      tipLength: 0.2,
      shaftResolution: 60,
      shaftRadius: 0.03,
      invert: false,
      ...initialValues?.config
    },
    xConfig: {
      color: [255, 0, 0],
      invert: false,
      ...initialValues?.xConfig
    },
    yConfig: {
      color: [255, 255, 0],
      invert: false,
      ...initialValues?.yConfig
    },
    zConfig: {
      color: [0, 128, 0],
      invert: false,
      ...initialValues?.zConfig
    }
  };
}
function extend9(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  vtkActor$1.extend(publicAPI, model, defaultValues(initialValues));
  macro.setGet(publicAPI, model, ["config", "xConfig", "yConfig", "zConfig"]);
  vtkAxesActor(publicAPI, model);
}
var newInstance8 = macro.newInstance(extend9, "vtkAxesActor");
var vtkAxesActor$1 = {
  newInstance: newInstance8,
  extend: extend9
};

// node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js
var OverlayMarkerType;
(function(OverlayMarkerType2) {
  OverlayMarkerType2[OverlayMarkerType2["ANNOTATED_CUBE"] = 1] = "ANNOTATED_CUBE";
  OverlayMarkerType2[OverlayMarkerType2["AXES"] = 2] = "AXES";
  OverlayMarkerType2[OverlayMarkerType2["CUSTOM"] = 3] = "CUSTOM";
})(OverlayMarkerType || (OverlayMarkerType = {}));
var _OrientationMarkerTool = class _OrientationMarkerTool extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    configuration: {
      orientationWidget: {
        enabled: true,
        viewportCorner: vtkOrientationMarkerWidget$1.Corners.BOTTOM_RIGHT,
        viewportSize: 0.15,
        minPixelSize: 100,
        maxPixelSize: 300
      },
      overlayMarkerType: _OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,
      overlayConfiguration: {
        [_OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {
          faceProperties: {
            xPlus: { text: "L", faceColor: "#ffff00", faceRotation: 90 },
            xMinus: { text: "R", faceColor: "#ffff00", faceRotation: 270 },
            yPlus: {
              text: "P",
              faceColor: "#00ffff",
              fontColor: "white",
              faceRotation: 180
            },
            yMinus: { text: "A", faceColor: "#00ffff", fontColor: "white" },
            zPlus: { text: "S" },
            zMinus: { text: "I" }
          },
          defaultStyle: {
            fontStyle: "bold",
            fontFamily: "Arial",
            fontColor: "black",
            fontSizeScale: (res) => res / 2,
            faceColor: "#0000ff",
            edgeThickness: 0.1,
            edgeColor: "black",
            resolution: 400
          }
        },
        [_OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},
        [_OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {
          polyDataURL: "https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp"
        }
      }
    }
  }) {
    super(toolProps, defaultToolProps);
    this._resizeObservers = /* @__PURE__ */ new Map();
    this.onSetToolEnabled = () => {
      this.initViewports();
      this._subscribeToViewportEvents();
    };
    this.onSetToolActive = () => {
      this.initViewports();
      this._subscribeToViewportEvents();
    };
    this.onSetToolDisabled = () => {
      this.cleanUpData();
      this._unsubscribeToViewportNewVolumeSet();
    };
    this._getViewportsInfo = () => {
      const viewports = getToolGroup_default(this.toolGroupId).viewportsInfo;
      return viewports;
    };
    this.resize = (viewportId) => {
      const orientationMarker = this.orientationMarkers[viewportId];
      if (!orientationMarker) {
        return;
      }
      const { orientationWidget } = orientationMarker;
      orientationWidget.updateViewport();
    };
    this.orientationMarkers = {};
    this.updatingOrientationMarker = {};
  }
  _unsubscribeToViewportNewVolumeSet() {
    const unsubscribe = () => {
      const viewportsInfo = this._getViewportsInfo();
      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
        const { element } = viewport;
        element.removeEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));
        const resizeObserver = this._resizeObservers.get(viewportId);
        resizeObserver.unobserve(element);
      });
    };
    eventTarget_default.removeEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, (evt) => {
      if (evt.detail.toolGroupId !== this.toolGroupId) {
        return;
      }
      unsubscribe();
      this.initViewports();
    });
  }
  _subscribeToViewportEvents() {
    const subscribeToElementResize = () => {
      const viewportsInfo = this._getViewportsInfo();
      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);
        const { element } = viewport;
        this.initViewports();
        element.addEventListener(enums_exports.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));
        const resizeObserver = new ResizeObserver(() => {
          setTimeout(() => {
            const element2 = getEnabledElementByIds(viewportId, renderingEngineId);
            if (!element2) {
              return;
            }
            const { viewport: viewport2 } = element2;
            this.resize(viewportId);
            viewport2.render();
          }, 100);
        });
        resizeObserver.observe(element);
        this._resizeObservers.set(viewportId, resizeObserver);
      });
    };
    subscribeToElementResize();
    eventTarget_default.addEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, (evt) => {
      if (evt.detail.toolGroupId !== this.toolGroupId) {
        return;
      }
      subscribeToElementResize();
      this.initViewports();
    });
  }
  cleanUpData() {
    const renderingEngines = getRenderingEngines();
    const renderingEngine = renderingEngines[0];
    const viewports = renderingEngine.getViewports();
    viewports.forEach((viewport) => {
      const orientationMarker = this.orientationMarkers[viewport.id];
      if (!orientationMarker) {
        return;
      }
      const { actor, orientationWidget } = orientationMarker;
      orientationWidget?.setEnabled(false);
      orientationWidget?.delete();
      actor?.delete();
      const renderWindow = viewport.getRenderingEngine().getOffscreenMultiRenderWindow(viewport.id).getRenderWindow();
      renderWindow.render();
      viewport.getRenderingEngine().render();
      delete this.orientationMarkers[viewport.id];
    });
  }
  initViewports() {
    const renderingEngines = getRenderingEngines();
    const renderingEngine = renderingEngines[0];
    if (!renderingEngine) {
      return;
    }
    let viewports = renderingEngine.getViewports();
    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());
    viewports.forEach((viewport) => {
      const widget = viewport.getWidget(this.getToolName());
      if (!widget || widget.isDeleted()) {
        this.addAxisActorInViewport(viewport);
      }
    });
  }
  async addAxisActorInViewport(viewport) {
    const viewportId = viewport.id;
    if (!this.updatingOrientationMarker[viewportId]) {
      this.updatingOrientationMarker[viewportId] = true;
      const type = this.configuration.overlayMarkerType;
      const overlayConfiguration = this.configuration.overlayConfiguration[type];
      if (this.orientationMarkers[viewportId]) {
        const { actor: actor2, orientationWidget: orientationWidget2 } = this.orientationMarkers[viewportId];
        viewport.getRenderer().removeActor(actor2);
        orientationWidget2.setEnabled(false);
      }
      let actor;
      if (type === 1) {
        actor = this.createAnnotationCube(overlayConfiguration);
      } else if (type === 2) {
        actor = vtkAxesActor$1.newInstance();
      } else if (type === 3) {
        actor = await this.createCustomActor();
      }
      const renderer = viewport.getRenderer();
      const renderWindow = viewport.getRenderingEngine().getOffscreenMultiRenderWindow(viewportId).getRenderWindow();
      const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize } = this.configuration.orientationWidget;
      const orientationWidget = vtkOrientationMarkerWidget$1.newInstance({
        actor,
        interactor: renderWindow.getInteractor(),
        parentRenderer: renderer
      });
      orientationWidget.setEnabled(enabled);
      orientationWidget.setViewportCorner(viewportCorner);
      orientationWidget.setViewportSize(viewportSize);
      orientationWidget.setMinPixelSize(minPixelSize);
      orientationWidget.setMaxPixelSize(maxPixelSize);
      orientationWidget.updateMarkerOrientation();
      this.orientationMarkers[viewportId] = {
        orientationWidget,
        actor
      };
      viewport.addWidget(this.getToolName(), orientationWidget);
      renderWindow.render();
      viewport.getRenderingEngine().render();
      this.updatingOrientationMarker[viewportId] = false;
    }
  }
  async createCustomActor() {
    const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM].polyDataURL;
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const vtpReader = vtkXMLPolyDataReader$1.newInstance();
    vtpReader.parseAsArrayBuffer(arrayBuffer);
    vtpReader.update();
    const polyData = vtkPolyData$1.newInstance();
    polyData.shallowCopy(vtpReader.getOutputData());
    polyData.getPointData().setActiveScalars("Color");
    const mapper = vtkMapper$1.newInstance();
    mapper.setInputData(polyData);
    mapper.setColorModeToDirectScalars();
    const actor = vtkActor$1.newInstance();
    actor.setMapper(mapper);
    actor.rotateZ(180);
    return actor;
  }
  createAnnotationCube(overlayConfiguration) {
    const actor = vtkAnnotatedCubeActor$1.newInstance();
    actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });
    actor.setXPlusFaceProperty({
      ...overlayConfiguration.faceProperties.xPlus
    });
    actor.setXMinusFaceProperty({
      ...overlayConfiguration.faceProperties.xMinus
    });
    actor.setYPlusFaceProperty({
      ...overlayConfiguration.faceProperties.yPlus
    });
    actor.setYMinusFaceProperty({
      ...overlayConfiguration.faceProperties.yMinus
    });
    actor.setZPlusFaceProperty({
      ...overlayConfiguration.faceProperties.zPlus
    });
    actor.setZMinusFaceProperty({
      ...overlayConfiguration.faceProperties.zMinus
    });
    return actor;
  }
  async createAnnotatedCubeActor() {
    const axes = vtkAnnotatedCubeActor$1.newInstance();
    const { faceProperties, defaultStyle } = this.configuration.annotatedCube;
    axes.setDefaultStyle(defaultStyle);
    Object.keys(faceProperties).forEach((key) => {
      const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;
      axes[methodName](faceProperties[key]);
    });
    return axes;
  }
};
_OrientationMarkerTool.CUBE = 1;
_OrientationMarkerTool.AXIS = 2;
_OrientationMarkerTool.VTPFILE = 3;
_OrientationMarkerTool.OVERLAY_MARKER_TYPES = OverlayMarkerType;
var OrientationMarkerTool = _OrientationMarkerTool;
OrientationMarkerTool.toolName = "OrientationMarker";
var OrientationMarkerTool_default = OrientationMarkerTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js
var _SegmentSelectTool = class _SegmentSelectTool extends BaseTool_default {
  constructor(toolProps = {}, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      hoverTimeout: 100,
      mode: _SegmentSelectTool.SelectMode.Border,
      searchRadius: 6
    }
  }) {
    super(toolProps, defaultToolProps);
    this.mouseMoveCallback = (evt) => {
      if (this.mode !== ToolModes_default.Active) {
        return;
      }
      if (this.hoverTimer) {
        clearTimeout(this.hoverTimer);
      }
      this.hoverTimer = setTimeout(() => {
        this._setActiveSegment(evt);
        this.hoverTimer = null;
      }, this.configuration.hoverTimeout);
      return true;
    };
    this.onSetToolEnabled = () => {
      this.onSetToolActive();
    };
    this.onSetToolActive = () => {
      this.hoverTimer = null;
    };
    this.onSetToolDisabled = () => {
      this.hoverTimer = null;
    };
    this.hoverTimer = null;
  }
  _setActiveSegment(evt = {}) {
    if (state.isInteractingWithTool) {
      return;
    }
    const { element, currentPoints } = evt.detail;
    const worldPoint = currentPoints.world;
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    const { viewport } = enabledElement;
    const activeSegmentation = getActiveSegmentation2(viewport.id);
    if (!activeSegmentation) {
      return;
    }
    this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);
  }
  _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {
    const imageDataInfo = viewport.getImageData();
    if (!imageDataInfo) {
      return;
    }
    const { segmentationId, representationData } = activeSegmentation;
    let hoveredSegmentIndex;
    if (this.configuration.mode === _SegmentSelectTool.SelectMode.Inside) {
      hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {
        viewport
      });
    } else {
      if (representationData.Labelmap) {
        hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {
          viewport,
          searchRadius: this.configuration.searchRadius
        });
      } else if (representationData.Contour) {
        hoveredSegmentIndex = getHoveredContourSegmentationAnnotation(segmentationId);
      } else if (representationData.Surface) {
      }
    }
    if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {
      return;
    }
    setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);
    const renderingEngine = viewport.getRenderingEngine();
    const viewportIds = renderingEngine.getViewports().map((v) => v.id);
    triggerSegmentationModified(segmentationId);
    triggerAnnotationRenderForViewportIds_default(viewportIds);
  }
};
_SegmentSelectTool.SelectMode = {
  Inside: "Inside",
  Border: "Border"
};
var SegmentSelectTool = _SegmentSelectTool;
SegmentSelectTool.toolName = "SegmentSelectTool";
var SegmentSelectTool_default = SegmentSelectTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js
var _SegmentBidirectionalTool = class _SegmentBidirectionalTool extends BidirectionalTool_default {
  constructor(toolProps = {}) {
    super(toolProps);
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      let renderStatus = true;
      const { viewport } = enabledElement;
      const { element } = viewport;
      const viewportId = viewport.id;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const targetId = this.getTargetId(viewport);
      const renderingEngine = viewport.getRenderingEngine();
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID, data } = annotation;
        const { points, activeHandleIndex } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        styleSpecifier.annotationUID = annotationUID;
        const { segmentIndex, segmentationId } = annotation.metadata;
        const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({
          annotation,
          styleSpecifier
        });
        const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);
        const color = `rgb(${colorArray.slice(0, 3).join(",")})`;
        if (!data.cachedStats[targetId] || data.cachedStats[targetId].unit == null) {
          data.cachedStats[targetId] = {
            length: null,
            width: null,
            unit: null
          };
          this._calculateCachedStats(annotation, renderingEngine, enabledElement);
        } else if (annotation.invalidated) {
          this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
        }
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return renderStatus;
        }
        let activeHandleCanvasCoords;
        if (!isAnnotationVisible(annotationUID)) {
          continue;
        }
        if (!isAnnotationLocked(annotationUID) && !this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        const dataId1 = `${annotationUID}-line-1`;
        const dataId2 = `${annotationUID}-line-2`;
        const lineUID = "0";
        drawLine(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
          color,
          lineWidth,
          lineDash,
          shadow
        }, dataId1);
        const secondLineUID = "1";
        drawLine(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {
          color,
          lineWidth,
          lineDash,
          shadow
        }, dataId2);
        renderStatus = true;
        const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);
        if (!options.visibility) {
          data.handles.textBox = {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          };
          continue;
        }
        options.color = color;
        const textLines = this.configuration.getTextLines(data, targetId);
        if (!textLines || textLines.length === 0) {
          continue;
        }
        let canvasTextBoxCoords;
        if (!data.handles.textBox.hasMoved) {
          canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);
          data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);
        }
        const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
        const textBoxUID = "1";
        const boundingBox = drawLinkedTextBox_default(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);
        const { x: left, y: top, width, height } = boundingBox;
        data.handles.textBox.worldBoundingBox = {
          topLeft: viewport.canvasToWorld([left, top]),
          topRight: viewport.canvasToWorld([left + width, top]),
          bottomLeft: viewport.canvasToWorld([left, top + height]),
          bottomRight: viewport.canvasToWorld([left + width, top + height])
        };
      }
      return renderStatus;
    };
  }
  addNewAnnotation(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const worldPos = currentPoints.world;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;
    this.isDrawing = true;
    const camera = viewport.getCamera();
    const { viewPlaneNormal, viewUp } = camera;
    const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
    const annotation = {
      highlighted: true,
      invalidated: true,
      metadata: {
        toolName: this.getToolName(),
        viewPlaneNormal: [...viewPlaneNormal],
        viewUp: [...viewUp],
        FrameOfReferenceUID,
        referencedImageId,
        ...viewport.getViewReference({ points: [worldPos] })
      },
      data: {
        handles: {
          points: [
            [...worldPos],
            [...worldPos],
            [...worldPos],
            [...worldPos]
          ],
          textBox: {
            hasMoved: false,
            worldPosition: [0, 0, 0],
            worldBoundingBox: {
              topLeft: [0, 0, 0],
              topRight: [0, 0, 0],
              bottomLeft: [0, 0, 0],
              bottomRight: [0, 0, 0]
            }
          },
          activeHandleIndex: null
        },
        label: "",
        cachedStats: {}
      }
    };
    addAnnotation(annotation, element);
    const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());
    this.editData = {
      annotation,
      viewportIdsToRender,
      handleIndex: 1,
      movingTextBox: false,
      newAnnotation: true,
      hasMoved: false
    };
    this._activateDraw(element);
    hideElementCursor(element);
    evt.preventDefault();
    triggerAnnotationRenderForViewportIds_default(viewportIdsToRender);
    return annotation;
  }
};
_SegmentBidirectionalTool.toolName = "SegmentBidirectional";
_SegmentBidirectionalTool.hydrate = (viewportId, axis, options) => {
  const enabledElement = getEnabledElementByViewportId(viewportId);
  if (!enabledElement) {
    return;
  }
  const { viewport } = enabledElement;
  const existingAnnotations = getAllAnnotations();
  const toolAnnotations = existingAnnotations.filter((annotation2) => annotation2.metadata.toolName === "SegmentBidirectional");
  const existingAnnotation = toolAnnotations.find((annotation2) => {
    const { metadata } = annotation2;
    if (metadata.segmentIndex === options?.segmentIndex && metadata.segmentationId === options?.segmentationId) {
      return true;
    }
    return false;
  });
  if (existingAnnotation) {
    removeAnnotation(existingAnnotation.annotationUID);
  }
  const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance } = _SegmentBidirectionalTool.hydrateBase(_SegmentBidirectionalTool, enabledElement, axis[0], options);
  const [majorAxis, minorAxis] = axis;
  const [major0, major1] = majorAxis;
  const [minor0, minor1] = minorAxis;
  const points = [major0, major1, minor0, minor1];
  const { toolInstance, ...serializableOptions } = options || {};
  const annotation = {
    annotationUID: options?.annotationUID || utilities_exports.uuidv4(),
    data: {
      handles: {
        points,
        activeHandleIndex: null,
        textBox: {
          hasMoved: false,
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        }
      },
      cachedStats: {}
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      segmentIndex: options?.segmentIndex,
      segmentationId: options?.segmentationId,
      toolName: instance.getToolName(),
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId,
      ...serializableOptions
    }
  };
  addAnnotation(annotation, viewport.element);
  triggerAnnotationRenderForViewportIds_default([viewport.id]);
  return annotation;
};
var SegmentBidirectionalTool = _SegmentBidirectionalTool;
var SegmentBidirectionalTool_default = SegmentBidirectionalTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js
var SegmentLabelTool = class extends BaseTool_default {
  constructor(toolProps = {
    data: {
      handles: {
        textBox: {
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        }
      }
    }
  }, defaultToolProps = {
    supportedInteractionTypes: ["Mouse", "Touch"],
    configuration: {
      hoverTimeout: 100,
      searchRadius: 6,
      color: null,
      background: null
    }
  }) {
    super(toolProps, defaultToolProps);
    this.mouseMoveCallback = (evt) => {
      if (this.hoverTimer) {
        clearTimeout(this.hoverTimer);
      }
      this.hoverTimer = setTimeout(() => {
        this._setHoveredSegment(evt);
        this.hoverTimer = null;
      }, this.configuration.hoverTimeout);
      return true;
    };
    this.onSetToolEnabled = () => {
      this.onSetToolActive();
    };
    this.onSetToolActive = () => {
      this.hoverTimer = null;
    };
    this.onSetToolDisabled = () => {
      this.hoverTimer = null;
    };
    this.data = toolProps.data ?? {
      handles: {
        textBox: {
          worldPosition: [0, 0, 0],
          worldBoundingBox: {
            topLeft: [0, 0, 0],
            topRight: [0, 0, 0],
            bottomLeft: [0, 0, 0],
            bottomRight: [0, 0, 0]
          }
        }
      }
    };
    this.hoverTimer = null;
  }
  _setHoveredSegment(evt = {}) {
    if (state.isInteractingWithTool) {
      return;
    }
    const { element, currentPoints } = evt.detail;
    const worldPoint = currentPoints.world;
    const enabledElement = getEnabledElement(element);
    if (!enabledElement) {
      return;
    }
    const { viewport } = enabledElement;
    const activeSegmentation = getActiveSegmentation2(viewport.id);
    if (!activeSegmentation) {
      return;
    }
    this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);
  }
  _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {
    const imageDataInfo = viewport.getImageData();
    if (!imageDataInfo) {
      return;
    }
    const { segmentationId } = activeSegmentation;
    const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {
      viewport
    });
    const segment = activeSegmentation.segments[hoveredSegmentIndex];
    const color = this.configuration.color ?? config_exports2.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);
    const label = segment?.label;
    const canvasCoordinates = viewport.worldToCanvas(worldPoint);
    this._editData = {
      hoveredSegmentIndex,
      hoveredSegmentLabel: label,
      canvasCoordinates,
      color
    };
    if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {
      return;
    }
    const renderingEngine = viewport.getRenderingEngine();
    const viewportIds = renderingEngine.getViewports().map((v) => v.id);
    triggerSegmentationModified(segmentationId);
    triggerAnnotationRenderForViewportIds_default(viewportIds);
  }
  renderAnnotation(enabledElement, svgDrawingHelper) {
    if (!this._editData) {
      return;
    }
    const { viewport } = enabledElement;
    const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color } = this._editData;
    if (!hoveredSegmentIndex) {
      return;
    }
    const offset = -15;
    const textBoxPosition = [
      canvasCoordinates[0] + offset,
      canvasCoordinates[1] + offset
    ];
    const boundingBox = drawTextBox_default(svgDrawingHelper, "segmentSelectLabelAnnotation", "segmentSelectLabelTextBox", [hoveredSegmentLabel ?? "(unnamed segment)"], textBoxPosition, {
      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,
      background: this.configuration.background ?? void 0
    });
    const left = canvasCoordinates[0];
    const top = canvasCoordinates[1];
    const { width, height } = boundingBox;
    this.data.handles.textBox.worldBoundingBox = {
      topLeft: viewport.canvasToWorld([left, top]),
      topRight: viewport.canvasToWorld([left + width, top]),
      bottomLeft: viewport.canvasToWorld([left, top + height]),
      bottomRight: viewport.canvasToWorld([left + width, top + height])
    };
  }
};
SegmentLabelTool.toolName = "SegmentLabelTool";
var SegmentLabelTool_default = SegmentLabelTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js
var _LabelMapEditWithContourTool = class _LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool_default {
  constructor(toolProps = {}) {
    const initialProps = utilities_exports.deepMerge({
      configuration: {
        calculateStats: false,
        allowOpenContours: false
      }
    }, toolProps);
    super(initialProps);
    this.onViewportAddedToToolGroupBinded = this.onViewportAddedToToolGroup.bind(this);
    this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);
  }
  initializeListeners() {
    _LabelMapEditWithContourTool.annotationsToViewportMap.clear();
    _LabelMapEditWithContourTool.viewportIdsChecked = [];
    eventTarget_default.addEventListener(Events_default.ANNOTATION_MODIFIED, this.annotationModified);
    eventTarget_default.addEventListener(Events_default.ANNOTATION_COMPLETED, this.annotationCompleted);
    eventTarget_default.addEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);
    eventTarget_default.addEventListener(Events_default.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);
    eventTarget_default.addEventListener(Events_default.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModifiedBinded);
  }
  cleanUpListeners() {
    _LabelMapEditWithContourTool.annotationsToViewportMap.clear();
    _LabelMapEditWithContourTool.viewportIdsChecked = [];
    eventTarget_default.removeEventListener(Events_default.ANNOTATION_MODIFIED, this.annotationModified);
    eventTarget_default.removeEventListener(Events_default.ANNOTATION_COMPLETED, this.annotationCompleted);
    eventTarget_default.removeEventListener(Events_default.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));
    eventTarget_default.removeEventListener(Events_default.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));
    eventTarget_default.removeEventListener(Events_default.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModified.bind(this));
  }
  async checkContourSegmentation(viewportId) {
    if (_LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {
      return;
    }
    const activeSeg = getActiveSegmentation(viewportId);
    if (!activeSeg) {
      console.log("No active segmentation detected");
      return false;
    }
    const segmentationId = activeSeg.segmentationId;
    if (!activeSeg.representationData.Contour) {
      _LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);
      await addContourRepresentationToViewport(viewportId, [
        {
          segmentationId,
          type: SegmentationRepresentations_default.Contour
        }
      ]);
      internalAddRepresentationData_default({
        segmentationId,
        type: SegmentationRepresentations_default.Contour,
        data: {}
      });
    } else {
      _LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);
    }
    return true;
  }
  onViewportAddedToToolGroup(evt) {
    const { toolGroupId, viewportId } = evt.detail;
    if (toolGroupId !== this.toolGroupId) {
      return;
    }
    this.checkContourSegmentation(viewportId);
  }
  onSegmentationModified(evt) {
    const { segmentationId } = evt.detail || {};
    if (!segmentationId) {
      return;
    }
    const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);
    if (!representations) {
      return;
    }
    representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));
  }
  onSetToolEnabled() {
    this.initializeListeners();
  }
  onSetToolActive() {
    this.initializeListeners();
  }
  onSetToolDisabled() {
    this.cleanUpListeners();
  }
  annotationModified(evt) {
    const { annotation, renderingEngineId, viewportId } = evt.detail;
    const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);
    if (!viewport) {
      return;
    }
    _LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);
  }
  annotationCompleted(evt) {
    const { annotation } = evt.detail;
    const { polyline } = annotation.data?.contour || {};
    if (annotation?.metadata?.toolName !== _LabelMapEditWithContourTool.toolName) {
      return;
    }
    if (!polyline) {
      return;
    }
    if (_LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {
      const viewport = _LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);
      if (polyline.length > 3) {
        BrushTool_default.viewportContoursToLabelmap(viewport);
      }
    }
  }
};
_LabelMapEditWithContourTool.toolName = "LabelMapEditWithContour";
_LabelMapEditWithContourTool.annotationsToViewportMap = /* @__PURE__ */ new Map();
_LabelMapEditWithContourTool.viewportIdsChecked = [];
var LabelMapEditWithContourTool = _LabelMapEditWithContourTool;
var LabelmapEditWithContour_default = LabelMapEditWithContourTool;

// node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js
var _VideoRedactionTool = class _VideoRedactionTool extends AnnotationTool_default {
  constructor(toolConfiguration = {}) {
    super(toolConfiguration, {
      supportedInteractionTypes: ["Mouse", "Touch"],
      configuration: { shadow: true, preventHandleOutsideImage: false }
    });
    this.addNewAnnotation = (evt) => {
      const eventData = evt.detail;
      const { currentPoints, element } = eventData;
      const worldPos = currentPoints.world;
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      this.isDrawing = true;
      const annotation = this.constructor.createAnnotationForViewport(viewport, {
        data: {
          handles: {
            points: [
              [...worldPos],
              [...worldPos],
              [...worldPos],
              [...worldPos]
            ]
          }
        }
      });
      addAnnotation(annotation, element);
      const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);
      this.editData = {
        annotation,
        viewportUIDsToRender,
        handleIndex: 3,
        newAnnotation: true,
        hasMoved: false
      };
      this._activateDraw(element);
      hideElementCursor(element);
      evt.preventDefault();
      triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
      return annotation;
    };
    this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      for (let i = 0; i < points.length; i++) {
        const point = points[i];
        const toolDataCanvasCoordinate = viewport.worldToCanvas(point);
        const near = vec2_exports.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;
        if (near === true) {
          data.handles.activeHandleIndex = i;
          return point;
        }
      }
      data.handles.activeHandleIndex = null;
    };
    this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
      const enabledElement = getEnabledElement(element);
      const { viewport } = enabledElement;
      const { data } = annotation;
      const { points } = data.handles;
      const canvasPoint1 = viewport.worldToCanvas(points[0]);
      const canvasPoint2 = viewport.worldToCanvas(points[3]);
      const rect = this._getRectangleImageCoordinates([
        canvasPoint1,
        canvasPoint2
      ]);
      const point = [canvasCoords[0], canvasCoords[1]];
      const { left, top, width, height } = rect;
      const distanceToPoint5 = distanceToPoint4([left, top, width, height], point);
      if (distanceToPoint5 <= proximity) {
        return true;
      }
    };
    this.toolSelectedCallback = (evt, annotation, interactionType = "mouse") => {
      const eventData = evt.detail;
      const { element } = eventData;
      const { data } = annotation;
      data.active = true;
      const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);
      this.editData = {
        annotation,
        viewportUIDsToRender
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
      evt.preventDefault();
    };
    this.handleSelectedCallback = (evt, annotation, handle, interactionType = "mouse") => {
      const eventData = evt.detail;
      const { element } = eventData;
      const { data } = annotation;
      data.active = true;
      let movingTextBox = false;
      let handleIndex;
      if (handle.worldPosition) {
        movingTextBox = true;
      } else {
        handleIndex = data.handles.points.findIndex((p) => p === handle);
      }
      const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);
      this.editData = {
        annotation,
        viewportUIDsToRender,
        handleIndex
      };
      this._activateModify(element);
      hideElementCursor(element);
      triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
      evt.preventDefault();
    };
    this._endCallback = (evt) => {
      const eventData = evt.detail;
      const { element } = eventData;
      const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;
      const { data } = annotation;
      if (newAnnotation && !hasMoved) {
        return;
      }
      this.doneEditMemo();
      data.active = false;
      data.handles.activeHandleIndex = null;
      this._deactivateModify(element);
      this._deactivateDraw(element);
      resetElementCursor(element);
      this.editData = null;
      this.isDrawing = false;
      if (this.isHandleOutsideImage && this.configuration.preventHandleOutsideImage) {
        removeAnnotation(annotation.annotationUID);
      }
      triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
    };
    this._dragCallback = (evt) => {
      this.isDrawing = true;
      const eventData = evt.detail;
      const { element } = eventData;
      const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;
      this.createMemo(element, annotation, { newAnnotation });
      const { data } = annotation;
      if (handleIndex === void 0) {
        const { deltaPoints } = eventData;
        const worldPosDelta = deltaPoints.world;
        const { points } = data.handles;
        points.forEach((point) => {
          point[0] += worldPosDelta[0];
          point[1] += worldPosDelta[1];
          point[2] += worldPosDelta[2];
        });
        data.invalidated = true;
      } else {
        const { currentPoints } = eventData;
        const enabledElement2 = getEnabledElement(element);
        const { worldToCanvas, canvasToWorld } = enabledElement2.viewport;
        const worldPos = currentPoints.world;
        const { points } = data.handles;
        points[handleIndex] = [...worldPos];
        let bottomLeftCanvas;
        let bottomRightCanvas;
        let topLeftCanvas;
        let topRightCanvas;
        let bottomLeftWorld;
        let bottomRightWorld;
        let topLeftWorld;
        let topRightWorld;
        switch (handleIndex) {
          case 0:
          case 3:
            bottomLeftCanvas = worldToCanvas(points[0]);
            topRightCanvas = worldToCanvas(points[3]);
            bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];
            topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];
            bottomRightWorld = canvasToWorld(bottomRightCanvas);
            topLeftWorld = canvasToWorld(topLeftCanvas);
            points[1] = bottomRightWorld;
            points[2] = topLeftWorld;
            break;
          case 1:
          case 2:
            bottomRightCanvas = worldToCanvas(points[1]);
            topLeftCanvas = worldToCanvas(points[2]);
            bottomLeftCanvas = [
              topLeftCanvas[0],
              bottomRightCanvas[1]
            ];
            topRightCanvas = [
              bottomRightCanvas[0],
              topLeftCanvas[1]
            ];
            bottomLeftWorld = canvasToWorld(bottomLeftCanvas);
            topRightWorld = canvasToWorld(topRightCanvas);
            points[0] = bottomLeftWorld;
            points[3] = topRightWorld;
            break;
        }
        data.invalidated = true;
      }
      this.editData.hasMoved = true;
      const enabledElement = getEnabledElement(element);
      triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
    };
    this._activateDraw = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateDraw = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_MOVE, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._activateModify = (element) => {
      state.isInteractingWithTool = true;
      element.addEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.addEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.addEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.addEventListener(Events_default.TOUCH_END, this._endCallback);
      element.addEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this._deactivateModify = (element) => {
      state.isInteractingWithTool = false;
      element.removeEventListener(Events_default.MOUSE_UP, this._endCallback);
      element.removeEventListener(Events_default.MOUSE_DRAG, this._dragCallback);
      element.removeEventListener(Events_default.MOUSE_CLICK, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_END, this._endCallback);
      element.removeEventListener(Events_default.TOUCH_DRAG, this._dragCallback);
    };
    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
      const renderStatus = false;
      const { viewport } = enabledElement;
      const { element } = viewport;
      let annotations = getAnnotations(this.getToolName(), element);
      if (!annotations?.length) {
        return renderStatus;
      }
      annotations = this.filterInteractableAnnotationsForElement(element, annotations);
      if (!annotations?.length) {
        return renderStatus;
      }
      const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id
      };
      for (let i = 0; i < annotations.length; i++) {
        const annotation = annotations[i];
        const { annotationUID } = annotation;
        const data = annotation.data;
        const { points, activeHandleIndex } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const lineWidth = this.getStyle("lineWidth", styleSpecifier, annotation);
        const lineDash = this.getStyle("lineDash", styleSpecifier, annotation);
        const color = this.getStyle("color", styleSpecifier, annotation);
        if (!viewport.getRenderingEngine()) {
          console.warn("Rendering Engine has been destroyed");
          return;
        }
        let activeHandleCanvasCoords;
        if (!this.editData && activeHandleIndex !== null) {
          activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
        }
        if (activeHandleCanvasCoords) {
          const handleGroupUID = "0";
          drawHandles_default(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
            color
          });
        }
        const rectangleUID = "0";
        drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
          color: "black",
          lineDash,
          lineWidth
        });
      }
    };
    this._getRectangleImageCoordinates = (points) => {
      const [point0, point1] = points;
      return {
        left: Math.min(point0[0], point1[0]),
        top: Math.min(point0[1], point1[1]),
        width: Math.abs(point0[0] - point1[0]),
        height: Math.abs(point0[1] - point1[1])
      };
    };
    this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {
      const { data } = annotation;
      const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;
      const worldPos1 = data.handles.points[0];
      const worldPos2 = data.handles.points[3];
      const { cachedStats } = data;
      const targetUIDs = Object.keys(cachedStats);
      for (let i = 0; i < targetUIDs.length; i++) {
        const targetUID = targetUIDs[i];
        const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);
        const { dimensions, scalarData, vtkImageData: imageData, metadata } = imageVolume;
        const worldPos1Index = vec3_exports.fromValues(0, 0, 0);
        const worldPos2Index = vec3_exports.fromValues(0, 0, 0);
        imageData.worldToIndexVec3(worldPos1, worldPos1Index);
        worldPos1Index[0] = Math.floor(worldPos1Index[0]);
        worldPos1Index[1] = Math.floor(worldPos1Index[1]);
        worldPos1Index[2] = Math.floor(worldPos1Index[2]);
        imageData.worldToIndexVec3(worldPos2, worldPos2Index);
        worldPos2Index[0] = Math.floor(worldPos2Index[0]);
        worldPos2Index[1] = Math.floor(worldPos2Index[1]);
        worldPos2Index[2] = Math.floor(worldPos2Index[2]);
        if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
          this.isHandleOutsideImage = false;
          const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
          const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
          const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
          const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
          const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
          const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
          const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);
          const area = worldWidth * worldHeight;
          let count = 0;
          let mean = 0;
          let stdDev = 0;
          const yMultiple = dimensions[0];
          const zMultiple = dimensions[0] * dimensions[1];
          for (let k = kMin; k <= kMax; k++) {
            for (let j = jMin; j <= jMax; j++) {
              for (let i2 = iMin; i2 <= iMax; i2++) {
                const value = scalarData[k * zMultiple + j * yMultiple + i2];
                count++;
                mean += value;
              }
            }
          }
          mean /= count;
          for (let k = kMin; k <= kMax; k++) {
            for (let j = jMin; j <= jMax; j++) {
              for (let i2 = iMin; i2 <= iMax; i2++) {
                const value = scalarData[k * zMultiple + j * yMultiple + i2];
                const valueMinusMean = value - mean;
                stdDev += valueMinusMean * valueMinusMean;
              }
            }
          }
          stdDev /= count;
          stdDev = Math.sqrt(stdDev);
          cachedStats[targetUID] = {
            Modality: metadata.Modality,
            area,
            mean,
            stdDev
          };
        } else {
          this.isHandleOutsideImage = true;
          cachedStats[targetUID] = {
            Modality: metadata.Modality
          };
        }
      }
      const invalidated = annotation.invalidated;
      annotation.invalidated = false;
      if (invalidated) {
        const eventType = Events_default.ANNOTATION_MODIFIED;
        const eventDetail = {
          annotation,
          viewportUID,
          renderingEngineUID,
          sceneUID,
          changeType: ChangeTypes_default.StatsUpdated
        };
        triggerEvent(eventTarget_default, eventType, eventDetail);
      }
      return cachedStats;
    };
    this._isInsideVolume = (index1, index2, dimensions) => {
      return utilities_exports.indexWithinDimensions(index1, dimensions) && utilities_exports.indexWithinDimensions(index2, dimensions);
    };
    this._getTargetVolumeUID = (scene) => {
      if (this.configuration.volumeUID) {
        return this.configuration.volumeUID;
      }
      const volumeActors = scene.getVolumeActors();
      if (!volumeActors && !volumeActors.length) {
        return;
      }
      return volumeActors[0].uid;
    };
    this._throttledCalculateCachedStats = throttle_default(this._calculateCachedStats, 100, { trailing: true });
  }
  cancel(element) {
    if (!this.isDrawing) {
      return;
    }
    this.isDrawing = false;
    this._deactivateDraw(element);
    this._deactivateModify(element);
    resetElementCursor(element);
    const { annotation, viewportUIDsToRender } = this.editData;
    const { data } = annotation;
    data.active = false;
    data.handles.activeHandleIndex = null;
    triggerAnnotationRenderForViewportIds_default(viewportUIDsToRender);
    this.editData = null;
    return annotation.annotationUID;
  }
  _getImageVolumeFromTargetUID(targetUID, renderingEngine) {
    let imageVolume, viewport;
    if (targetUID.startsWith("stackTarget")) {
      const coloneIndex = targetUID.indexOf(":");
      const viewportUID = targetUID.substring(coloneIndex + 1);
      const viewport2 = renderingEngine.getViewport(viewportUID);
      imageVolume = viewport2.getImageData();
    } else {
      imageVolume = cache_default.getVolume(targetUID);
    }
    return { imageVolume, viewport };
  }
  _getTargetStackUID(viewport) {
    return `stackTarget:${viewport.uid}`;
  }
};
_VideoRedactionTool.toolName = "VideoRedaction";
var VideoRedactionTool = _VideoRedactionTool;
var VideoRedactionTool_default = VideoRedactionTool;
export {
  AdvancedMagnifyTool,
  AngleTool_default as AngleTool,
  AnnotationDisplayTool_default as AnnotationDisplayTool,
  AnnotationTool_default as AnnotationTool,
  ArrowAnnotateTool_default as ArrowAnnotateTool,
  BaseTool_default as BaseTool,
  BidirectionalTool_default as BidirectionalTool,
  BrushTool_default as BrushTool,
  constants_exports2 as CONSTANTS,
  CircleROIStartEndThresholdTool_default as CircleROIStartEndThresholdTool,
  CircleROITool_default as CircleROITool,
  CircleScissorsTool_default as CircleScissorsTool,
  CobbAngleTool_default as CobbAngleTool,
  CrosshairsTool_default as CrosshairsTool,
  DragProbeTool_default as DragProbeTool,
  ETDRSGridTool_default as ETDRSGridTool,
  EllipticalROITool_default as EllipticalROITool,
  enums_exports2 as Enums,
  AnnotationEraserTool_default as EraserTool,
  HeightTool_default as HeightTool,
  KeyImageTool_default as KeyImageTool,
  LabelmapEditWithContour_default as LabelMapEditWithContourTool,
  LabelTool_default as LabelTool,
  LabelmapBaseTool,
  LengthTool_default as LengthTool,
  LivewireContourSegmentationTool_default as LivewireContourSegmentationTool,
  LivewireContourTool_default as LivewireContourTool,
  MIPJumpToClickTool_default as MIPJumpToClickTool,
  MagnifyTool_default as MagnifyTool,
  OrientationMarkerTool_default as OrientationMarkerTool,
  OverlayGridTool_default as OverlayGridTool,
  PaintFillTool_default as PaintFillTool,
  PanTool_default as PanTool,
  PlanarFreehandContourSegmentationTool_default as PlanarFreehandContourSegmentationTool,
  PlanarFreehandROITool_default as PlanarFreehandROITool,
  PlanarRotateTool_default as PlanarRotateTool,
  ProbeTool_default as ProbeTool,
  RectangleROIStartEndThresholdTool_default as RectangleROIStartEndThresholdTool,
  RectangleROIThresholdTool_default as RectangleROIThresholdTool,
  RectangleROITool_default as RectangleROITool,
  RectangleScissorsTool_default as RectangleScissorsTool,
  ReferenceCursors_default as ReferenceCursors,
  ReferenceLinesTool_default as ReferenceLinesTool,
  RegionSegmentPlusTool_default as RegionSegmentPlusTool,
  RegionSegmentTool_default as RegionSegmentTool,
  ScaleOverlayTool_default as ScaleOverlayTool,
  SculptorTool_default as SculptorTool,
  SegmentBidirectionalTool_default as SegmentBidirectionalTool,
  SegmentLabelTool_default as SegmentLabelTool,
  SegmentSelectTool_default as SegmentSelectTool,
  SegmentationIntersectionTool_default as SegmentationIntersectionTool,
  SphereScissorsTool_default as SphereScissorsTool,
  SplineContourSegmentationTool_default as SplineContourSegmentationTool,
  SplineROITool_default as SplineROITool,
  StackScrollTool_default as StackScrollTool,
  Synchronizer_default as Synchronizer,
  SynchronizerManager_exports as SynchronizerManager,
  ToolGroupManager_exports as ToolGroupManager,
  TrackballRotateTool_default as TrackballRotateTool,
  Types,
  UltrasoundDirectionalTool_default as UltrasoundDirectionalTool,
  UltrasoundPleuraBLineTool_default as UltrasoundPleuraBLineTool,
  VideoRedactionTool_default as VideoRedactionTool,
  VolumeCroppingControlTool_default as VolumeCroppingControlTool,
  VolumeCroppingTool_default as VolumeCroppingTool,
  VolumeRotateTool_default as VolumeRotateTool,
  WholeBodySegmentTool_default as WholeBodySegmentTool,
  WindowLevelRegionTool_default as WindowLevelRegionTool,
  WindowLevelTool_default as WindowLevelTool,
  ZoomTool_default as ZoomTool,
  addTool,
  annotation_exports as annotation,
  cancelActiveManipulations,
  cursors_exports as cursors,
  destroy3 as destroy,
  drawingSvg_exports as drawing,
  init,
  removeTool,
  segmentation_exports2 as segmentation,
  splines_exports as splines,
  state,
  store_exports as store,
  synchronizers_exports as synchronizers,
  utilities_exports2 as utilities,
  version
};
//# sourceMappingURL=@cornerstonejs_tools.js.map
